(IN-PACKAGE :TRE-PARALLEL)
(PROGN (DEFUN EVAL (X) (%EVAL X)) (SETF (GETHASH #'EVAL *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X COMMON-LISP:NIL) (CONS (CONS '%EVAL (CONS 'X COMMON-LISP:NIL)) COMMON-LISP:NIL))))
(PROGN (DEFUN STRING (X) (%STRING X)) (SETF (GETHASH #'STRING *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X COMMON-LISP:NIL) (CONS (CONS '%STRING (CONS 'X COMMON-LISP:NIL)) COMMON-LISP:NIL))))
(PROGN (DEFUN EQ (&REST X) (APPLY #'%EQ (LIST X))) (SETF (GETHASH #'EQ *FUNCTION-ATOM-SOURCES*) (CONS (CONS '&REST (CONS 'X COMMON-LISP:NIL)) (CONS (CONS 'APPLY (CONS (CONS 'FUNCTION (CONS '%EQ COMMON-LISP:NIL)) (CONS (CONS 'LIST (CONS 'X COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))))
(PROGN (DEFUN EQL (&REST X) (APPLY #'%EQL (LIST X))) (SETF (GETHASH #'EQL *FUNCTION-ATOM-SOURCES*) (CONS (CONS '&REST (CONS 'X COMMON-LISP:NIL)) (CONS (CONS 'APPLY (CONS (CONS 'FUNCTION (CONS '%EQL COMMON-LISP:NIL)) (CONS (CONS 'LIST (CONS 'X COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))))
(PROGN (DEFUN NOT (&REST X) (APPLY #'%NOT X)) (SETF (GETHASH #'NOT *FUNCTION-ATOM-SOURCES*) (CONS (CONS '&REST (CONS 'X COMMON-LISP:NIL)) (CONS (CONS 'APPLY (CONS (CONS 'FUNCTION (CONS '%NOT COMMON-LISP:NIL)) (CONS 'X COMMON-LISP:NIL))) COMMON-LISP:NIL))))
(PROGN (DEFUN MAKE-SYMBOL (X &OPTIONAL (PACKAGE COMMON-LISP:NIL)) (%MAKE-SYMBOL X PACKAGE)) (SETF (GETHASH #'MAKE-SYMBOL *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X (CONS '&OPTIONAL (CONS (CONS 'PACKAGE (CONS COMMON-LISP:NIL COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS '%MAKE-SYMBOL (CONS 'X (CONS 'PACKAGE COMMON-LISP:NIL))) COMMON-LISP:NIL))))
(PROGN (DEFUN SYMBOL-NAME (X) (%SYMBOL-NAME X)) (SETF (GETHASH #'SYMBOL-NAME *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X COMMON-LISP:NIL) (CONS (CONS '%SYMBOL-NAME (CONS 'X COMMON-LISP:NIL)) COMMON-LISP:NIL))))
(PROGN (DEFUN SYMBOL-VALUE (X) (%SYMBOL-VALUE X)) (SETF (GETHASH #'SYMBOL-VALUE *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X COMMON-LISP:NIL) (CONS (CONS '%SYMBOL-VALUE (CONS 'X COMMON-LISP:NIL)) COMMON-LISP:NIL))))
(PROGN (DEFUN SYMBOL-FUNCTION (X) (%SYMBOL-FUNCTION X)) (SETF (GETHASH #'SYMBOL-FUNCTION *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X COMMON-LISP:NIL) (CONS (CONS '%SYMBOL-FUNCTION (CONS 'X COMMON-LISP:NIL)) COMMON-LISP:NIL))))
(PROGN (DEFUN SYMBOL-PACKAGE (X) (%SYMBOL-PACKAGE X)) (SETF (GETHASH #'SYMBOL-PACKAGE *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X COMMON-LISP:NIL) (CONS (CONS '%SYMBOL-PACKAGE (CONS 'X COMMON-LISP:NIL)) COMMON-LISP:NIL))))
(PROGN (DEFUN NUMBER? (X) (%NUMBER? X)) (SETF (GETHASH #'NUMBER? *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X COMMON-LISP:NIL) (CONS (CONS '%NUMBER? (CONS 'X COMMON-LISP:NIL)) COMMON-LISP:NIL))))
(PROGN (DEFUN INTEGER (X) (%INTEGER X)) (SETF (GETHASH #'INTEGER *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X COMMON-LISP:NIL) (CONS (CONS '%INTEGER (CONS 'X COMMON-LISP:NIL)) COMMON-LISP:NIL))))
(PROGN (DEFUN CODE-CHAR (X) (%CODE-CHAR (%INTEGER X))) (SETF (GETHASH #'CODE-CHAR *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X COMMON-LISP:NIL) (CONS (CONS '%CODE-CHAR (CONS (CONS '%INTEGER (CONS 'X COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))))
(PROGN (DEFUN NUMBER+ (&REST X) (APPLY #'%+ X)) (SETF (GETHASH #'NUMBER+ *FUNCTION-ATOM-SOURCES*) (CONS (CONS '&REST (CONS 'X COMMON-LISP:NIL)) (CONS (CONS 'APPLY (CONS (CONS 'FUNCTION (CONS '%+ COMMON-LISP:NIL)) (CONS 'X COMMON-LISP:NIL))) COMMON-LISP:NIL))))
(PROGN (DEFUN INTEGER+ (&REST X) (APPLY #'%+ X)) (SETF (GETHASH #'INTEGER+ *FUNCTION-ATOM-SOURCES*) (CONS (CONS '&REST (CONS 'X COMMON-LISP:NIL)) (CONS (CONS 'APPLY (CONS (CONS 'FUNCTION (CONS '%+ COMMON-LISP:NIL)) (CONS 'X COMMON-LISP:NIL))) COMMON-LISP:NIL))))
(PROGN (DEFUN CHARACTER+ (&REST X) (APPLY #'%+ X)) (SETF (GETHASH #'CHARACTER+ *FUNCTION-ATOM-SOURCES*) (CONS (CONS '&REST (CONS 'X COMMON-LISP:NIL)) (CONS (CONS 'APPLY (CONS (CONS 'FUNCTION (CONS '%+ COMMON-LISP:NIL)) (CONS 'X COMMON-LISP:NIL))) COMMON-LISP:NIL))))
(PROGN (DEFUN NUMBER- (&REST X) (APPLY #'%- X)) (SETF (GETHASH #'NUMBER- *FUNCTION-ATOM-SOURCES*) (CONS (CONS '&REST (CONS 'X COMMON-LISP:NIL)) (CONS (CONS 'APPLY (CONS (CONS 'FUNCTION (CONS '%- COMMON-LISP:NIL)) (CONS 'X COMMON-LISP:NIL))) COMMON-LISP:NIL))))
(PROGN (DEFUN INTEGER- (&REST X) (APPLY #'%- X)) (SETF (GETHASH #'INTEGER- *FUNCTION-ATOM-SOURCES*) (CONS (CONS '&REST (CONS 'X COMMON-LISP:NIL)) (CONS (CONS 'APPLY (CONS (CONS 'FUNCTION (CONS '%- COMMON-LISP:NIL)) (CONS 'X COMMON-LISP:NIL))) COMMON-LISP:NIL))))
(PROGN (DEFUN CHARACTER- (&REST X) (APPLY #'%- X)) (SETF (GETHASH #'CHARACTER- *FUNCTION-ATOM-SOURCES*) (CONS (CONS '&REST (CONS 'X COMMON-LISP:NIL)) (CONS (CONS 'APPLY (CONS (CONS 'FUNCTION (CONS '%- COMMON-LISP:NIL)) (CONS 'X COMMON-LISP:NIL))) COMMON-LISP:NIL))))
(PROGN (DEFUN * (&REST X) (APPLY #'%* X)) (SETF (GETHASH #'* *FUNCTION-ATOM-SOURCES*) (CONS (CONS '&REST (CONS 'X COMMON-LISP:NIL)) (CONS (CONS 'APPLY (CONS (CONS 'FUNCTION (CONS '%* COMMON-LISP:NIL)) (CONS 'X COMMON-LISP:NIL))) COMMON-LISP:NIL))))
(PROGN (DEFUN / (&REST X) (APPLY #'%/ X)) (SETF (GETHASH #'/ *FUNCTION-ATOM-SOURCES*) (CONS (CONS '&REST (CONS 'X COMMON-LISP:NIL)) (CONS (CONS 'APPLY (CONS (CONS 'FUNCTION (CONS '%/ COMMON-LISP:NIL)) (CONS 'X COMMON-LISP:NIL))) COMMON-LISP:NIL))))
(PROGN (DEFUN < (&REST X) (APPLY #'%< X)) (SETF (GETHASH #'< *FUNCTION-ATOM-SOURCES*) (CONS (CONS '&REST (CONS 'X COMMON-LISP:NIL)) (CONS (CONS 'APPLY (CONS (CONS 'FUNCTION (CONS '%< COMMON-LISP:NIL)) (CONS 'X COMMON-LISP:NIL))) COMMON-LISP:NIL))))
(PROGN (DEFUN > (&REST X) (APPLY #'%> X)) (SETF (GETHASH #'> *FUNCTION-ATOM-SOURCES*) (CONS (CONS '&REST (CONS 'X COMMON-LISP:NIL)) (CONS (CONS 'APPLY (CONS (CONS 'FUNCTION (CONS '%> COMMON-LISP:NIL)) (CONS 'X COMMON-LISP:NIL))) COMMON-LISP:NIL))))
(PROGN (DEFUN FILTER (FUN X) (MAPCAR FUN X)) (SETF (GETHASH #'FILTER *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'FUN (CONS 'X COMMON-LISP:NIL)) (CONS (CONS 'MAPCAR (CONS 'FUN (CONS 'X COMMON-LISP:NIL))) COMMON-LISP:NIL))))
(PROGN (DEFUN MAKE-ARRAY (&OPTIONAL (DIMENSIONS 1)) (%MAKE-ARRAY DIMENSIONS)) (SETF (GETHASH #'MAKE-ARRAY *FUNCTION-ATOM-SOURCES*) (CONS (CONS '&OPTIONAL (CONS (CONS 'DIMENSIONS (CONS 1 COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS '%MAKE-ARRAY (CONS 'DIMENSIONS COMMON-LISP:NIL)) COMMON-LISP:NIL))))
(PROGN (DEFUN MAKE-HASH-TABLE (&KEY (TEST #'EQL)) (%MAKE-HASH-TABLE :TEST TEST)) (SETF (GETHASH #'MAKE-HASH-TABLE *FUNCTION-ATOM-SOURCES*) (CONS (CONS '&KEY (CONS (CONS 'TEST (CONS (CONS 'FUNCTION (CONS 'EQL COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS '%MAKE-HASH-TABLE (CONS ':TEST (CONS 'TEST COMMON-LISP:NIL))) COMMON-LISP:NIL))))
(PROGN (DEFUN LOAD (PATHNAME) (%LOAD PATHNAME)) (SETF (GETHASH #'LOAD *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'PATHNAME COMMON-LISP:NIL) (CONS (CONS '%LOAD (CONS 'PATHNAME COMMON-LISP:NIL)) COMMON-LISP:NIL))))
(%DEFVAR *MACROEXPAND-HOOK* COMMON-LISP:NIL)
(PROGN (DEFUN MACROEXPAND-1 (X) (? *MACROEXPAND-HOOK* (APPLY *MACROEXPAND-HOOK* (LIST X)) X)) (SETF (GETHASH #'MACROEXPAND-1 *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X COMMON-LISP:NIL) (CONS (CONS '? (CONS '*MACROEXPAND-HOOK* (CONS (CONS 'APPLY (CONS '*MACROEXPAND-HOOK* (CONS (CONS 'LIST (CONS 'X COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS 'X COMMON-LISP:NIL)))) COMMON-LISP:NIL))))
(PROGN (DEFUN MACROEXPAND-0 (OLD X) (? (%EQUAL X OLD) OLD (MACROEXPAND X))) (SETF (GETHASH #'MACROEXPAND-0 *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'OLD (CONS 'X COMMON-LISP:NIL)) (CONS (CONS '? (CONS (CONS '%EQUAL (CONS 'X (CONS 'OLD COMMON-LISP:NIL))) (CONS 'OLD (CONS (CONS 'MACROEXPAND (CONS 'X COMMON-LISP:NIL)) COMMON-LISP:NIL)))) COMMON-LISP:NIL))))
(PROGN (DEFUN MACROEXPAND (X) (MACROEXPAND-0 X (MACROEXPAND-1 X))) (SETF (GETHASH #'MACROEXPAND *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X COMMON-LISP:NIL) (CONS (CONS 'MACROEXPAND-0 (CONS 'X (CONS (CONS 'MACROEXPAND-1 (CONS 'X COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))))
(PROGN (DEFUN NANOTIME COMMON-LISP:NIL 0) (SETF (GETHASH #'NANOTIME *FUNCTION-ATOM-SOURCES*) (CONS COMMON-LISP:NIL (CONS 0 COMMON-LISP:NIL))))
(PROGN (DEFUN FUNCTION-BYTECODE (X) X COMMON-LISP:NIL) (SETF (GETHASH #'FUNCTION-BYTECODE *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X COMMON-LISP:NIL) (CONS 'X (CONS COMMON-LISP:NIL COMMON-LISP:NIL)))))
(%DEFVAR *FUNCTIONALS* COMMON-LISP:NIL)
(%DEFMACRO FUNCTIONAL (&REST NAMES) (PRINT-DEFINITION (CONS 'FUNCTIONAL NAMES)) (CONS 'PROGN (CONS (CONS 'SETQ (CONS '*FUNCTIONALS* (CONS (CONS '%NCONC (CONS (CONS 'QUOTE (CONS NAMES COMMON-LISP:NIL)) (CONS '*FUNCTIONALS* COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))
(PROGN (DEFUN FUNCTIONAL? (NAME) (MEMBER NAME *FUNCTIONALS* :TEST #'EQ)) (SETF (GETHASH #'FUNCTIONAL? *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'NAME COMMON-LISP:NIL) (CONS (CONS 'MEMBER (CONS 'NAME (CONS '*FUNCTIONALS* (CONS ':TEST (CONS (CONS 'FUNCTION (CONS 'EQ COMMON-LISP:NIL)) COMMON-LISP:NIL))))) COMMON-LISP:NIL))))
(PROGN (SETQ *FUNCTIONALS* (%NCONC (CONS 'IDENTITY (CONS '+ (CONS '- (CONS '* (CONS '/ (CONS 'MOD (CONS 'NUMBER+ (CONS 'NUMBER- (CONS 'NUMBER* (CONS 'NUMBER/ (CONS 'INTEGER+ (CONS 'INTEGER- (CONS 'INTEGER* (CONS 'INTEGER/ (CONS 'CHARACTER+ (CONS 'CHARACTER- (CONS 'LOGXOR (CONS 'NUMBER? (CONS '== (CONS '< (CONS '> (CONS 'NUMBER== (CONS 'NUMBER< (CONS 'NUMBER> (CONS 'INTEGER== (CONS 'INTEGER< (CONS 'INTEGER> (CONS 'CHARACTER== (CONS 'CHARACTER< (CONS 'CHARACTER> (CONS 'BIT-OR (CONS 'BIT-AND (CONS '<< (CONS '>> (CONS 'CODE-CHAR (CONS 'INTEGER (CONS 'CHARACTER? (CONS 'NOT (CONS 'EQ (CONS 'EQL (CONS 'MAKE-SYMBOL (CONS 'MAKE-PACKAGE (CONS 'ATOM (CONS 'SYMBOL-VALUE (CONS '%TYPE (CONS '%%ID (CONS '%MAKE-PTR (CONS 'SYMBOL-FUNCTION (CONS 'SYMBOL-PACKAGE (CONS 'FUNCTION-NATIVE (CONS 'SYMBOL? (CONS 'FUNCTION? (CONS 'BUILTIN? (CONS 'MACRO? (CONS 'CONS (CONS 'LIST (CONS 'CAR (CONS 'CDR (CONS 'CONS? (CONS 'ELT (CONS 'LENGTH (CONS 'STRING? (CONS 'MAKE-STRING (CONS 'STRING== (CONS 'STRING-CONCAT (CONS 'STRING (CONS 'SYMBOL-NAME (CONS 'LIST-STRING (CONS 'MAKE-ARRAY (CONS 'ARRAY? (CONS 'AREF (CONS 'SLOT-VALUE (CONS '%SLOT-VALUE (CONS 'LIST (CONS 'IDENTITY (CONS 'LAST (CONS 'COPY-LIST (CONS 'INTEGER? (CONS 'CHARACTER? COMMON-LISP:NIL))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) *FUNCTIONALS*)))
(%DEFVAR *DEFINITION-PRINTER* #'PRINT)
(PROGN (DEFUN PRINT-DEFINITION (X) (? *SHOW-DEFINITIONS?* (APPLY *DEFINITION-PRINTER* (LIST X)))) (SETF (GETHASH #'PRINT-DEFINITION *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X COMMON-LISP:NIL) (CONS (CONS '? (CONS '*SHOW-DEFINITIONS?* (CONS (CONS 'APPLY (CONS '*DEFINITION-PRINTER* (CONS (CONS 'LIST (CONS 'X COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))))
(PROGN (DEFUN %QUASIQUOTE-EXPAND (X) (? (ATOM X) X (ATOM (CAR X)) (CONS (CAR X) (%QUASIQUOTE-EXPAND (CDR X))) (EQ (CAR (CAR X)) 'QUOTE) (CONS (CAR X) (%QUASIQUOTE-EXPAND (CDR X))) (EQ (CAR (CAR X)) 'BACKQUOTE) (CONS (CAR X) (%QUASIQUOTE-EXPAND (CDR X))) (EQ (CAR (CAR X)) 'QUASIQUOTE) (CONS (EVAL (MACROEXPAND (CAR (CDR (CAR X))))) (%QUASIQUOTE-EXPAND (CDR X))) (EQ (CAR (CAR X)) 'QUASIQUOTE-SPLICE) (APPEND (EVAL (MACROEXPAND (CAR (CDR (CAR X))))) (%QUASIQUOTE-EXPAND (CDR X))) (CONS (%QUASIQUOTE-EXPAND (CAR X)) (%QUASIQUOTE-EXPAND (CDR X))))) (SETF (GETHASH #'%QUASIQUOTE-EXPAND *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X COMMON-LISP:NIL) (CONS (CONS '? (CONS (CONS 'ATOM (CONS 'X COMMON-LISP:NIL)) (CONS 'X (CONS (CONS 'ATOM (CONS (CONS 'CAR (CONS 'X COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'CONS (CONS (CONS 'CAR (CONS 'X COMMON-LISP:NIL)) (CONS (CONS '%QUASIQUOTE-EXPAND (CONS (CONS 'CDR (CONS 'X COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'EQ (CONS (CONS 'CAR (CONS (CONS 'CAR (CONS 'X COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'QUOTE (CONS 'QUOTE COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'CONS (CONS (CONS 'CAR (CONS 'X COMMON-LISP:NIL)) (CONS (CONS '%QUASIQUOTE-EXPAND (CONS (CONS 'CDR (CONS 'X COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'EQ (CONS (CONS 'CAR (CONS (CONS 'CAR (CONS 'X COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'QUOTE (CONS 'BACKQUOTE COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'CONS (CONS (CONS 'CAR (CONS 'X COMMON-LISP:NIL)) (CONS (CONS '%QUASIQUOTE-EXPAND (CONS (CONS 'CDR (CONS 'X COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'EQ (CONS (CONS 'CAR (CONS (CONS 'CAR (CONS 'X COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'QUOTE (CONS 'QUASIQUOTE COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'CONS (CONS (CONS 'EVAL (CONS (CONS 'MACROEXPAND (CONS (CONS 'CAR (CONS (CONS 'CDR (CONS (CONS 'CAR (CONS 'X COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS '%QUASIQUOTE-EXPAND (CONS (CONS 'CDR (CONS 'X COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'EQ (CONS (CONS 'CAR (CONS (CONS 'CAR (CONS 'X COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'QUOTE (CONS 'QUASIQUOTE-SPLICE COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'APPEND (CONS (CONS 'EVAL (CONS (CONS 'MACROEXPAND (CONS (CONS 'CAR (CONS (CONS 'CDR (CONS (CONS 'CAR (CONS 'X COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS '%QUASIQUOTE-EXPAND (CONS (CONS 'CDR (CONS 'X COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'CONS (CONS (CONS '%QUASIQUOTE-EXPAND (CONS (CONS 'CAR (CONS 'X COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS '%QUASIQUOTE-EXPAND (CONS (CONS 'CDR (CONS 'X COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL)))))))))))))) COMMON-LISP:NIL))))
(PROGN (DEFUN QUASIQUOTE-EXPAND (X) (CAR (%QUASIQUOTE-EXPAND (LIST X)))) (SETF (GETHASH #'QUASIQUOTE-EXPAND *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X COMMON-LISP:NIL) (CONS (CONS 'CAR (CONS (CONS '%QUASIQUOTE-EXPAND (CONS (CONS 'LIST (CONS 'X COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))))
(SETQ *QUASIQUOTEEXPAND-HOOK* #'QUASIQUOTE-EXPAND)
(PROGN (DEFUN IDENTITY (X) X) (SETF (GETHASH #'IDENTITY *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X COMMON-LISP:NIL) (CONS 'X COMMON-LISP:NIL))))
(PROGN (DEFUN + (&REST X) (LABELS ((G4097 (A) (? A (APPLY (? (CONS? A) #'APPEND (STRING? A) #'STRING-CONCAT #'NUMBER+) X) (? (CDR X) (APPLY #'+ (CDR X)))))) (G4097 (CAR X)))) (SETF (GETHASH #'+ *FUNCTION-ATOM-SOURCES*) (CONS (CONS '&REST (CONS 'X COMMON-LISP:NIL)) (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS 'A COMMON-LISP:NIL) (CONS (CONS '? (CONS 'A (CONS (CONS 'APPLY (CONS (CONS '? (CONS (CONS 'CONS? (CONS 'A COMMON-LISP:NIL)) (CONS (CONS 'FUNCTION (CONS 'APPEND COMMON-LISP:NIL)) (CONS (CONS 'STRING? (CONS 'A COMMON-LISP:NIL)) (CONS (CONS 'FUNCTION (CONS 'STRING-CONCAT COMMON-LISP:NIL)) (CONS (CONS 'FUNCTION (CONS 'NUMBER+ COMMON-LISP:NIL)) COMMON-LISP:NIL)))))) (CONS 'X COMMON-LISP:NIL))) (CONS (CONS '? (CONS (CONS 'CDR (CONS 'X COMMON-LISP:NIL)) (CONS (CONS 'APPLY (CONS (CONS 'FUNCTION (CONS '+ COMMON-LISP:NIL)) (CONS (CONS 'CDR (CONS 'X COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'CAR (CONS 'X COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))))
(PROGN (DEFUN - (&REST X) (APPLY #'NUMBER- X)) (SETF (GETHASH #'- *FUNCTION-ATOM-SOURCES*) (CONS (CONS '&REST (CONS 'X COMMON-LISP:NIL)) (CONS (CONS 'APPLY (CONS (CONS 'FUNCTION (CONS 'NUMBER- COMMON-LISP:NIL)) (CONS 'X COMMON-LISP:NIL))) COMMON-LISP:NIL))))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'FUNCALL (CONS (CONS 'FUN (CONS '&REST (CONS 'ARGS COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (PROGN (DEFUN FUNCALL (FUN &REST ARGS) (BLOCK FUNCALL (BLOCK COMMON-LISP:NIL (APPLY FUN ARGS)))) (SETF (GETHASH #'FUNCALL *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'FUN (CONS '&REST (CONS 'ARGS COMMON-LISP:NIL))) (CONS (CONS 'BLOCK (CONS 'FUNCALL (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'APPLY (CONS 'FUN (CONS 'ARGS COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'FUNCALL))
(PROGN (SETQ *FUNCTIONALS* (%NCONC (CONS 'CAAR (CONS 'CADR (CONS 'CDAR (CONS 'CDDR (CONS 'CADAR (CONS 'CDDAR (CONS 'CAADAR (CONS 'CADDR (CONS 'CAADR (CONS 'CDDDR (CONS 'CDADAR (CONS 'CAADDR (CONS 'CADDAR (CONS 'CDDDAR (CONS 'CDDDDR (CONS 'CADADR (CONS 'CADADDR (CONS 'CADADAR (CONS 'CDDADAR COMMON-LISP:NIL))))))))))))))))))) *FUNCTIONALS*)))
(PROGN (DEFUN CAAR (LST) (CAR (CAR LST))) (SETF (GETHASH #'CAAR *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'LST COMMON-LISP:NIL) (CONS (CONS 'CAR (CONS (CONS 'CAR (CONS 'LST COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))))
(PROGN (DEFUN CADR (LST) (CAR (CDR LST))) (SETF (GETHASH #'CADR *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'LST COMMON-LISP:NIL) (CONS (CONS 'CAR (CONS (CONS 'CDR (CONS 'LST COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))))
(PROGN (DEFUN CDAR (LST) (CDR (CAR LST))) (SETF (GETHASH #'CDAR *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'LST COMMON-LISP:NIL) (CONS (CONS 'CDR (CONS (CONS 'CAR (CONS 'LST COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))))
(PROGN (DEFUN CDDR (LST) (CDR (CDR LST))) (SETF (GETHASH #'CDDR *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'LST COMMON-LISP:NIL) (CONS (CONS 'CDR (CONS (CONS 'CDR (CONS 'LST COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))))
(PROGN (DEFUN CADAR (LST) (CADR (CAR LST))) (SETF (GETHASH #'CADAR *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'LST COMMON-LISP:NIL) (CONS (CONS 'CADR (CONS (CONS 'CAR (CONS 'LST COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))))
(PROGN (DEFUN CDDAR (LST) (CDDR (CAR LST))) (SETF (GETHASH #'CDDAR *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'LST COMMON-LISP:NIL) (CONS (CONS 'CDDR (CONS (CONS 'CAR (CONS 'LST COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))))
(PROGN (DEFUN CDADR (LST) (CDAR (CDR LST))) (SETF (GETHASH #'CDADR *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'LST COMMON-LISP:NIL) (CONS (CONS 'CDAR (CONS (CONS 'CDR (CONS 'LST COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))))
(PROGN (DEFUN CADDR (LST) (CAR (CDDR LST))) (SETF (GETHASH #'CADDR *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'LST COMMON-LISP:NIL) (CONS (CONS 'CAR (CONS (CONS 'CDDR (CONS 'LST COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))))
(PROGN (DEFUN CAADR (LST) (CAR (CADR LST))) (SETF (GETHASH #'CAADR *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'LST COMMON-LISP:NIL) (CONS (CONS 'CAR (CONS (CONS 'CADR (CONS 'LST COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))))
(PROGN (DEFUN CDDDR (LST) (CDR (CDR (CDR LST)))) (SETF (GETHASH #'CDDDR *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'LST COMMON-LISP:NIL) (CONS (CONS 'CDR (CONS (CONS 'CDR (CONS (CONS 'CDR (CONS 'LST COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))))
(PROGN (DEFUN CDDDDR (LST) (CDR (CDR (CDR (CDR LST))))) (SETF (GETHASH #'CDDDDR *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'LST COMMON-LISP:NIL) (CONS (CONS 'CDR (CONS (CONS 'CDR (CONS (CONS 'CDR (CONS (CONS 'CDR (CONS 'LST COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))))
(PROGN (DEFUN CAADAR (LST) (CAR (CADR (CAR LST)))) (SETF (GETHASH #'CAADAR *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'LST COMMON-LISP:NIL) (CONS (CONS 'CAR (CONS (CONS 'CADR (CONS (CONS 'CAR (CONS 'LST COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))))
(PROGN (DEFUN CDADAR (LST) (CDR (CADR (CAR LST)))) (SETF (GETHASH #'CDADAR *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'LST COMMON-LISP:NIL) (CONS (CONS 'CDR (CONS (CONS 'CADR (CONS (CONS 'CAR (CONS 'LST COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))))
(PROGN (DEFUN CAADDR (LST) (CAR (CADDR LST))) (SETF (GETHASH #'CAADDR *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'LST COMMON-LISP:NIL) (CONS (CONS 'CAR (CONS (CONS 'CADDR (CONS 'LST COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))))
(PROGN (DEFUN CADDAR (LST) (CADDR (CAR LST))) (SETF (GETHASH #'CADDAR *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'LST COMMON-LISP:NIL) (CONS (CONS 'CADDR (CONS (CONS 'CAR (CONS 'LST COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))))
(PROGN (DEFUN CDDDAR (LST) (CDDDR (CAR LST))) (SETF (GETHASH #'CDDDAR *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'LST COMMON-LISP:NIL) (CONS (CONS 'CDDDR (CONS (CONS 'CAR (CONS 'LST COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))))
(PROGN (DEFUN CADADR (LST) (CADR (CADR LST))) (SETF (GETHASH #'CADADR *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'LST COMMON-LISP:NIL) (CONS (CONS 'CADR (CONS (CONS 'CADR (CONS 'LST COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))))
(PROGN (DEFUN CADADDR (LST) (CADR (CADDR LST))) (SETF (GETHASH #'CADADDR *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'LST COMMON-LISP:NIL) (CONS (CONS 'CADR (CONS (CONS 'CADDR (CONS 'LST COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))))
(PROGN (DEFUN CADADAR (LST) (CADR (CADR (CAR LST)))) (SETF (GETHASH #'CADADAR *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'LST COMMON-LISP:NIL) (CONS (CONS 'CADR (CONS (CONS 'CADR (CONS (CONS 'CAR (CONS 'LST COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))))
(PROGN (DEFUN CDDADAR (LST) (CDDR (CADR (CAR LST)))) (SETF (GETHASH #'CDDADAR *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'LST COMMON-LISP:NIL) (CONS (CONS 'CDDR (CONS (CONS 'CADR (CONS (CONS 'CAR (CONS 'LST COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))))
(PROGN (SETQ *FUNCTIONALS* (%NCONC (CONS 'EQUAL COMMON-LISP:NIL) *FUNCTIONALS*)))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'EQUAL (CONS (CONS 'X (CONS 'Y COMMON-LISP:NIL)) COMMON-LISP:NIL)))) (PROGN (DEFUN EQUAL (X Y) (BLOCK EQUAL (BLOCK COMMON-LISP:NIL (? (LABELS ((G4098 (~G1473) (? ~G1473 ~G1473 (ATOM Y)))) (G4098 (ATOM X))) (EQL X Y) (EQUAL (CAR X) (CAR Y)) (EQUAL (CDR X) (CDR Y)))))) (SETF (GETHASH #'EQUAL *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X (CONS 'Y COMMON-LISP:NIL)) (CONS (CONS 'BLOCK (CONS 'EQUAL (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS '? (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS '~G1473 COMMON-LISP:NIL) (CONS (CONS '? (CONS '~G1473 (CONS '~G1473 (CONS (CONS 'ATOM (CONS 'Y COMMON-LISP:NIL)) COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'ATOM (CONS 'X COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'EQL (CONS 'X (CONS 'Y COMMON-LISP:NIL))) (CONS (CONS 'EQUAL (CONS (CONS 'CAR (CONS 'X COMMON-LISP:NIL)) (CONS (CONS 'CAR (CONS 'Y COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'EQUAL (CONS (CONS 'CDR (CONS 'X COMMON-LISP:NIL)) (CONS (CONS 'CDR (CONS 'Y COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'EQUAL))
COMMON-LISP:NIL
COMMON-LISP:NIL
(PROGN (SETQ *FUNCTIONALS* (%NCONC (CONS '>= (CONS '<= (CONS 'CHARACTER>= (CONS 'CHARACTER<= (CONS 'INTEGER>= (CONS 'INTEGER<= (CONS 'NUMBER>= (CONS 'NUMBER<= COMMON-LISP:NIL)))))))) *FUNCTIONALS*)))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS '>= (CONS (CONS 'N (CONS '&REST (CONS 'X COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (PROGN (DEFUN >= (N &REST X) (BLOCK >= (BLOCK COMMON-LISP:NIL (BLOCK COMMON-LISP:NIL (LABELS ((G4099 (~G1478) (LABELS ((G4100 (I) (TAGBODY ~G1476 (? (NOT ~G1478) (GO ~G1477)) (SETQ I (CAR ~G1478)) (LABELS ((G4101 (~G1474) (? ~G1474 ~G1474 (LABELS ((G4102 (~G1475) (? ~G1475 ~G1475 (RETURN-FROM COMMON-LISP:NIL COMMON-LISP:NIL)))) (G4102 (> N I)))))) (G4101 (== N I))) (SETQ N I) (SETQ ~G1478 (CDR ~G1478)) (GO ~G1476) ~G1477 (RETURN-FROM COMMON-LISP:NIL (PROGN COMMON-LISP:T))))) (G4100 COMMON-LISP:NIL)))) (G4099 X)))))) (SETF (GETHASH #'>= *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'N (CONS '&REST (CONS 'X COMMON-LISP:NIL))) (CONS (CONS 'BLOCK (CONS '>= (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'LET (CONS '~G1478 (CONS 'X (CONS (CONS 'LET* (CONS (CONS (CONS 'I (CONS COMMON-LISP:NIL COMMON-LISP:NIL)) COMMON-LISP:NIL) (CONS (CONS 'TAGBODY (CONS '~G1476 (CONS (CONS '? (CONS (CONS 'NOT (CONS '~G1478 COMMON-LISP:NIL)) (CONS (CONS 'GO (CONS '~G1477 COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'SETQ (CONS 'I (CONS (CONS 'CAR (CONS '~G1478 COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS '~G1474 COMMON-LISP:NIL) (CONS (CONS '? (CONS '~G1474 (CONS '~G1474 (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS '~G1475 COMMON-LISP:NIL) (CONS (CONS '? (CONS '~G1475 (CONS '~G1475 (CONS (CONS 'RETURN-FROM (CONS COMMON-LISP:NIL (CONS COMMON-LISP:NIL COMMON-LISP:NIL))) COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS '> (CONS 'N (CONS 'I COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS '== (CONS 'N (CONS 'I COMMON-LISP:NIL))) COMMON-LISP:NIL)) (CONS (CONS 'SETQ (CONS 'N (CONS 'I COMMON-LISP:NIL))) (CONS (CONS 'SETQ (CONS '~G1478 (CONS (CONS 'CDR (CONS '~G1478 COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'GO (CONS '~G1476 COMMON-LISP:NIL)) (CONS '~G1477 (CONS (CONS 'RETURN-FROM (CONS COMMON-LISP:NIL (CONS (CONS 'PROGN (CONS COMMON-LISP:T COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL)))))))))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL '>=))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS '<= (CONS (CONS 'N (CONS '&REST (CONS 'X COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (PROGN (DEFUN <= (N &REST X) (BLOCK <= (BLOCK COMMON-LISP:NIL (BLOCK COMMON-LISP:NIL (LABELS ((G4103 (~G1483) (LABELS ((G4104 (I) (TAGBODY ~G1481 (? (NOT ~G1483) (GO ~G1482)) (SETQ I (CAR ~G1483)) (LABELS ((G4105 (~G1479) (? ~G1479 ~G1479 (LABELS ((G4106 (~G1480) (? ~G1480 ~G1480 (RETURN-FROM COMMON-LISP:NIL COMMON-LISP:NIL)))) (G4106 (< N I)))))) (G4105 (== N I))) (SETQ N I) (SETQ ~G1483 (CDR ~G1483)) (GO ~G1481) ~G1482 (RETURN-FROM COMMON-LISP:NIL (PROGN COMMON-LISP:T))))) (G4104 COMMON-LISP:NIL)))) (G4103 X)))))) (SETF (GETHASH #'<= *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'N (CONS '&REST (CONS 'X COMMON-LISP:NIL))) (CONS (CONS 'BLOCK (CONS '<= (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'LET (CONS '~G1483 (CONS 'X (CONS (CONS 'LET* (CONS (CONS (CONS 'I (CONS COMMON-LISP:NIL COMMON-LISP:NIL)) COMMON-LISP:NIL) (CONS (CONS 'TAGBODY (CONS '~G1481 (CONS (CONS '? (CONS (CONS 'NOT (CONS '~G1483 COMMON-LISP:NIL)) (CONS (CONS 'GO (CONS '~G1482 COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'SETQ (CONS 'I (CONS (CONS 'CAR (CONS '~G1483 COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS '~G1479 COMMON-LISP:NIL) (CONS (CONS '? (CONS '~G1479 (CONS '~G1479 (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS '~G1480 COMMON-LISP:NIL) (CONS (CONS '? (CONS '~G1480 (CONS '~G1480 (CONS (CONS 'RETURN-FROM (CONS COMMON-LISP:NIL (CONS COMMON-LISP:NIL COMMON-LISP:NIL))) COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS '< (CONS 'N (CONS 'I COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS '== (CONS 'N (CONS 'I COMMON-LISP:NIL))) COMMON-LISP:NIL)) (CONS (CONS 'SETQ (CONS 'N (CONS 'I COMMON-LISP:NIL))) (CONS (CONS 'SETQ (CONS '~G1483 (CONS (CONS 'CDR (CONS '~G1483 COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'GO (CONS '~G1481 COMMON-LISP:NIL)) (CONS '~G1482 (CONS (CONS 'RETURN-FROM (CONS COMMON-LISP:NIL (CONS (CONS 'PROGN (CONS COMMON-LISP:T COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL)))))))))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL '<=))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'CHARACTER>= (CONS (CONS 'X (CONS 'Y COMMON-LISP:NIL)) COMMON-LISP:NIL)))) (PROGN (DEFUN CHARACTER>= (X Y) (BLOCK CHARACTER>= (BLOCK COMMON-LISP:NIL (LABELS ((G4107 (~G1484) (? ~G1484 ~G1484 (CHARACTER> X Y)))) (G4107 (CHARACTER== X Y)))))) (SETF (GETHASH #'CHARACTER>= *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X (CONS 'Y COMMON-LISP:NIL)) (CONS (CONS 'BLOCK (CONS 'CHARACTER>= (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS '~G1484 COMMON-LISP:NIL) (CONS (CONS '? (CONS '~G1484 (CONS '~G1484 (CONS (CONS 'CHARACTER> (CONS 'X (CONS 'Y COMMON-LISP:NIL))) COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'CHARACTER== (CONS 'X (CONS 'Y COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'CHARACTER>=))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'CHARACTER<= (CONS (CONS 'X (CONS 'Y COMMON-LISP:NIL)) COMMON-LISP:NIL)))) (PROGN (DEFUN CHARACTER<= (X Y) (BLOCK CHARACTER<= (BLOCK COMMON-LISP:NIL (LABELS ((G4108 (~G1485) (? ~G1485 ~G1485 (CHARACTER< X Y)))) (G4108 (CHARACTER== X Y)))))) (SETF (GETHASH #'CHARACTER<= *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X (CONS 'Y COMMON-LISP:NIL)) (CONS (CONS 'BLOCK (CONS 'CHARACTER<= (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS '~G1485 COMMON-LISP:NIL) (CONS (CONS '? (CONS '~G1485 (CONS '~G1485 (CONS (CONS 'CHARACTER< (CONS 'X (CONS 'Y COMMON-LISP:NIL))) COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'CHARACTER== (CONS 'X (CONS 'Y COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'CHARACTER<=))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'INTEGER>= (CONS (CONS 'X (CONS 'Y COMMON-LISP:NIL)) COMMON-LISP:NIL)))) (PROGN (DEFUN INTEGER>= (X Y) (BLOCK INTEGER>= (BLOCK COMMON-LISP:NIL (LABELS ((G4109 (~G1486) (? ~G1486 ~G1486 (INTEGER> X Y)))) (G4109 (INTEGER== X Y)))))) (SETF (GETHASH #'INTEGER>= *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X (CONS 'Y COMMON-LISP:NIL)) (CONS (CONS 'BLOCK (CONS 'INTEGER>= (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS '~G1486 COMMON-LISP:NIL) (CONS (CONS '? (CONS '~G1486 (CONS '~G1486 (CONS (CONS 'INTEGER> (CONS 'X (CONS 'Y COMMON-LISP:NIL))) COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'INTEGER== (CONS 'X (CONS 'Y COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'INTEGER>=))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'INTEGER<= (CONS (CONS 'X (CONS 'Y COMMON-LISP:NIL)) COMMON-LISP:NIL)))) (PROGN (DEFUN INTEGER<= (X Y) (BLOCK INTEGER<= (BLOCK COMMON-LISP:NIL (LABELS ((G4110 (~G1487) (? ~G1487 ~G1487 (INTEGER< X Y)))) (G4110 (INTEGER== X Y)))))) (SETF (GETHASH #'INTEGER<= *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X (CONS 'Y COMMON-LISP:NIL)) (CONS (CONS 'BLOCK (CONS 'INTEGER<= (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS '~G1487 COMMON-LISP:NIL) (CONS (CONS '? (CONS '~G1487 (CONS '~G1487 (CONS (CONS 'INTEGER< (CONS 'X (CONS 'Y COMMON-LISP:NIL))) COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'INTEGER== (CONS 'X (CONS 'Y COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'INTEGER<=))
(PROGN (SETQ *FUNCTIONALS* (%NCONC (CONS 'ZERO? (CONS 'EVEN? (CONS 'ODD? (CONS 'END? (CONS 'KEYWORD? COMMON-LISP:NIL))))) *FUNCTIONALS*)))
COMMON-LISP:NIL
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'ZERO? (CONS (CONS 'X COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN ZERO? (X) (BLOCK ZERO? (BLOCK COMMON-LISP:NIL (== 0 X)))) (SETF (GETHASH #'ZERO? *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'ZERO? (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS '== (CONS 0 (CONS 'X COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'ZERO?))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'EVEN? (CONS (CONS 'X COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN EVEN? (X) (BLOCK EVEN? (BLOCK COMMON-LISP:NIL (== 0 (MOD X 2))))) (SETF (GETHASH #'EVEN? *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'EVEN? (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS '== (CONS 0 (CONS (CONS 'MOD (CONS 'X (CONS 2 COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'EVEN?))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'ODD? (CONS (CONS 'X COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN ODD? (X) (BLOCK ODD? (BLOCK COMMON-LISP:NIL (== 1 (MOD X 2))))) (SETF (GETHASH #'ODD? *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'ODD? (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS '== (CONS 1 (CONS (CONS 'MOD (CONS 'X (CONS 2 COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'ODD?))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'END? (CONS (CONS 'X COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN END? (X) (BLOCK END? (BLOCK COMMON-LISP:NIL (EQ COMMON-LISP:NIL X)))) (SETF (GETHASH #'END? *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'END? (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'EQ (CONS COMMON-LISP:NIL (CONS 'X COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'END?))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'KEYWORD? (CONS (CONS 'X COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN KEYWORD? (X) (BLOCK KEYWORD? (BLOCK COMMON-LISP:NIL (? (SYMBOL? X) (EQ *KEYWORD-PACKAGE* (SYMBOL-PACKAGE X)))))) (SETF (GETHASH #'KEYWORD? *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'KEYWORD? (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS '? (CONS (CONS 'SYMBOL? (CONS 'X COMMON-LISP:NIL)) (CONS (CONS 'EQ (CONS '*KEYWORD-PACKAGE* (CONS (CONS 'SYMBOL-PACKAGE (CONS 'X COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'KEYWORD?))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'SOLE? (CONS (CONS 'X COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN SOLE? (X) (BLOCK SOLE? (BLOCK COMMON-LISP:NIL (== 1 (LENGTH X))))) (SETF (GETHASH #'SOLE? *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'SOLE? (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS '== (CONS 1 (CONS (CONS 'LENGTH (CONS 'X COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'SOLE?))
COMMON-LISP:NIL
COMMON-LISP:NIL
COMMON-LISP:NIL
COMMON-LISP:NIL
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS '%NCONC-0 (CONS (CONS 'LSTS COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN %NCONC-0 (LSTS) (BLOCK %NCONC-0 (BLOCK COMMON-LISP:NIL (? LSTS (PROGN (LABELS ((G4111 (!) (? ! (PROGN (RPLACD (LAST !) (%NCONC-0 (CDR LSTS))) !) (%NCONC-0 (CDR LSTS))))) (G4111 (CAR LSTS)))))))) (SETF (GETHASH #'%NCONC-0 *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'LSTS COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS '%NCONC-0 (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS '? (CONS 'LSTS (CONS (CONS 'PROGN (CONS (CONS 'LET (CONS '! (CONS (CONS 'CAR (CONS 'LSTS COMMON-LISP:NIL)) (CONS (CONS '? (CONS '! (CONS (CONS 'PROGN (CONS (CONS 'RPLACD (CONS (CONS 'LAST (CONS '! COMMON-LISP:NIL)) (CONS (CONS '%NCONC-0 (CONS (CONS 'CDR (CONS 'LSTS COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS '! COMMON-LISP:NIL))) (CONS (CONS '%!? (CONS (CONS '%NCONC-0 (CONS (CONS 'CDR (CONS 'LSTS COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)))) COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL '%NCONC-0))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'NCONC (CONS (CONS '&REST (CONS 'LSTS COMMON-LISP:NIL)) COMMON-LISP:NIL)))) (PROGN (DEFUN NCONC (&REST LSTS) (BLOCK NCONC (BLOCK COMMON-LISP:NIL (%NCONC-0 LSTS)))) (SETF (GETHASH #'NCONC *FUNCTION-ATOM-SOURCES*) (CONS (CONS '&REST (CONS 'LSTS COMMON-LISP:NIL)) (CONS (CONS 'BLOCK (CONS 'NCONC (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS '%NCONC-0 (CONS 'LSTS COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'NCONC))
(BLOCK COMMON-LISP:NIL (%DEFMACRO NCONC! (PLACE &REST LSTS) (BLOCK NCONC! (CONS '= (CONS PLACE (CONS (CONS 'NCONC (CONS PLACE LSTS)) COMMON-LISP:NIL))))))
COMMON-LISP:NIL
COMMON-LISP:NIL
(PROGN (SETQ *FUNCTIONALS* (%NCONC (CONS 'APPEND COMMON-LISP:NIL) *FUNCTIONALS*)))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'APPEND (CONS (CONS '&REST (CONS 'LISTS COMMON-LISP:NIL)) COMMON-LISP:NIL)))) (PROGN (DEFUN APPEND (&REST LISTS) (BLOCK APPEND (BLOCK COMMON-LISP:NIL (? LISTS (PROGN (LABELS ((G4113 (F) (LABELS ((G4114 (L) (BLOCK COMMON-LISP:NIL (LABELS ((G4115 (~G1490) (LABELS ((G4116 (I) (TAGBODY ~G1488 (? (NOT ~G1490) (GO ~G1489)) (SETQ I (CAR ~G1490)) (? I (PROGN (? L (SETQ L (LAST (RPLACD L (COPY-LIST I)))) (SETQ F (COPY-LIST I) L (LAST F))))) (SETQ ~G1490 (CDR ~G1490)) (GO ~G1488) ~G1489 (RETURN-FROM COMMON-LISP:NIL (PROGN F))))) (G4116 COMMON-LISP:NIL)))) (G4115 LISTS))))) (G4114 COMMON-LISP:NIL)))) (G4113 COMMON-LISP:NIL))))))) (SETF (GETHASH #'APPEND *FUNCTION-ATOM-SOURCES*) (CONS (CONS '&REST (CONS 'LISTS COMMON-LISP:NIL)) (CONS (CONS 'BLOCK (CONS 'APPEND (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS '? (CONS 'LISTS (CONS (CONS 'PROGN (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS 'F COMMON-LISP:NIL) (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS 'L COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'LET (CONS '~G1490 (CONS 'LISTS (CONS (CONS 'LET* (CONS (CONS (CONS 'I (CONS COMMON-LISP:NIL COMMON-LISP:NIL)) COMMON-LISP:NIL) (CONS (CONS 'TAGBODY (CONS '~G1488 (CONS (CONS '? (CONS (CONS 'NOT (CONS '~G1490 COMMON-LISP:NIL)) (CONS (CONS 'GO (CONS '~G1489 COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'SETQ (CONS 'I (CONS (CONS 'CAR (CONS '~G1490 COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS '? (CONS 'I (CONS (CONS 'PROGN (CONS (CONS '? (CONS 'L (CONS (CONS 'SETQ (CONS 'L (CONS (CONS 'LAST (CONS (CONS 'RPLACD (CONS 'L (CONS (CONS 'COPY-LIST (CONS 'I COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'SETQ (CONS 'F (CONS (CONS 'COPY-LIST (CONS 'I COMMON-LISP:NIL)) (CONS 'L (CONS (CONS 'LAST (CONS 'F COMMON-LISP:NIL)) COMMON-LISP:NIL))))) COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'SETQ (CONS '~G1490 (CONS (CONS 'CDR (CONS '~G1490 COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'GO (CONS '~G1488 COMMON-LISP:NIL)) (CONS '~G1489 (CONS (CONS 'RETURN-FROM (CONS COMMON-LISP:NIL (CONS (CONS 'PROGN (CONS 'F COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))))))))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS COMMON-LISP:NIL COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS COMMON-LISP:NIL COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'APPEND))
(BLOCK COMMON-LISP:NIL (%DEFMACRO APPEND! (PLACE &REST ARGS) (BLOCK APPEND! (CONS '= (CONS PLACE (CONS (CONS 'APPEND (CONS PLACE ARGS)) COMMON-LISP:NIL))))))
COMMON-LISP:NIL
COMMON-LISP:NIL
COMMON-LISP:NIL
COMMON-LISP:NIL
COMMON-LISP:NIL
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'MAKE-QUEUE (CONS COMMON-LISP:NIL COMMON-LISP:NIL)))) (PROGN (DEFUN MAKE-QUEUE COMMON-LISP:NIL (BLOCK MAKE-QUEUE (BLOCK COMMON-LISP:NIL (CONS COMMON-LISP:NIL COMMON-LISP:NIL)))) (SETF (GETHASH #'MAKE-QUEUE *FUNCTION-ATOM-SOURCES*) (CONS COMMON-LISP:NIL (CONS (CONS 'BLOCK (CONS 'MAKE-QUEUE (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'CONS (CONS COMMON-LISP:NIL (CONS COMMON-LISP:NIL COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'MAKE-QUEUE))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'ENQUEUE (CONS (CONS 'QUEUE (CONS '&REST (CONS 'X COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (PROGN (DEFUN ENQUEUE (QUEUE &REST X) (BLOCK ENQUEUE (BLOCK COMMON-LISP:NIL (RPLACA QUEUE (CDR (RPLACD (LABELS ((G4118 (~G1491) (? ~G1491 ~G1491 QUEUE))) (G4118 (CAR QUEUE))) X))) X))) (SETF (GETHASH #'ENQUEUE *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'QUEUE (CONS '&REST (CONS 'X COMMON-LISP:NIL))) (CONS (CONS 'BLOCK (CONS 'ENQUEUE (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'RPLACA (CONS 'QUEUE (CONS (CONS 'CDR (CONS (CONS 'RPLACD (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS '~G1491 COMMON-LISP:NIL) (CONS (CONS '? (CONS '~G1491 (CONS '~G1491 (CONS 'QUEUE COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'CAR (CONS 'QUEUE COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS 'X COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS 'X COMMON-LISP:NIL)))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'ENQUEUE))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'ENQUEUE-LIST (CONS (CONS 'QUEUE (CONS 'X COMMON-LISP:NIL)) COMMON-LISP:NIL)))) (PROGN (DEFUN ENQUEUE-LIST (QUEUE X) (BLOCK ENQUEUE-LIST (BLOCK COMMON-LISP:NIL (RPLACD QUEUE (NCONC (CDR QUEUE) X)) (RPLACA QUEUE (LAST X))))) (SETF (GETHASH #'ENQUEUE-LIST *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'QUEUE (CONS 'X COMMON-LISP:NIL)) (CONS (CONS 'BLOCK (CONS 'ENQUEUE-LIST (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'RPLACD (CONS 'QUEUE (CONS (CONS 'NCONC (CONS (CONS 'CDR (CONS 'QUEUE COMMON-LISP:NIL)) (CONS 'X COMMON-LISP:NIL))) COMMON-LISP:NIL))) (CONS (CONS 'RPLACA (CONS 'QUEUE (CONS (CONS 'LAST (CONS 'X COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'ENQUEUE-LIST))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'QUEUE-POP (CONS (CONS 'QUEUE COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN QUEUE-POP (QUEUE) (BLOCK QUEUE-POP (BLOCK COMMON-LISP:NIL (LABELS ((G4119 (~G1492) (? (NOT (CDDR QUEUE)) (RPLACA QUEUE COMMON-LISP:NIL)) (? (CDR QUEUE) (RPLACD QUEUE (CDDR QUEUE))) ~G1492)) (G4119 (CADR QUEUE)))))) (SETF (GETHASH #'QUEUE-POP *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'QUEUE COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'QUEUE-POP (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS '~G1492 COMMON-LISP:NIL) (CONS (CONS '? (CONS (CONS 'NOT (CONS (CONS 'CDDR (CONS 'QUEUE COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'RPLACA (CONS 'QUEUE (CONS COMMON-LISP:NIL COMMON-LISP:NIL))) COMMON-LISP:NIL))) (CONS (CONS '? (CONS (CONS 'CDR (CONS 'QUEUE COMMON-LISP:NIL)) (CONS (CONS 'RPLACD (CONS 'QUEUE (CONS (CONS 'CDDR (CONS 'QUEUE COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) (CONS '~G1492 COMMON-LISP:NIL)))) COMMON-LISP:NIL)) (CONS (CONS 'CADR (CONS 'QUEUE COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'QUEUE-POP))
(PROGN (SETQ *FUNCTIONALS* (%NCONC (CONS 'QUEUE-LIST (CONS 'QUEUE-FRONT COMMON-LISP:NIL)) *FUNCTIONALS*)))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'QUEUE-LIST (CONS (CONS 'QUEUE COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN QUEUE-LIST (QUEUE) (BLOCK QUEUE-LIST (BLOCK COMMON-LISP:NIL (CDR QUEUE)))) (SETF (GETHASH #'QUEUE-LIST *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'QUEUE COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'QUEUE-LIST (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'CDR (CONS 'QUEUE COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'QUEUE-LIST))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'QUEUE-FRONT (CONS (CONS 'QUEUE COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN QUEUE-FRONT (QUEUE) (BLOCK QUEUE-FRONT (BLOCK COMMON-LISP:NIL (CAR (CDR QUEUE))))) (SETF (GETHASH #'QUEUE-FRONT *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'QUEUE COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'QUEUE-FRONT (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'CAR (CONS (CONS 'CDR (CONS 'QUEUE COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'QUEUE-FRONT))
COMMON-LISP:NIL
(PROGN (SETQ *FUNCTIONALS* (%NCONC (CONS '++ (CONS '-- (CONS 'INTEGER++ (CONS 'INTEGER-- COMMON-LISP:NIL)))) *FUNCTIONALS*)))
COMMON-LISP:NIL
(PROGN (DEFUN ++ (X) (NUMBER+ X 1)) (SETF (GETHASH #'++ *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X COMMON-LISP:NIL) (CONS (CONS 'NUMBER+ (CONS 'X (CONS 1 COMMON-LISP:NIL))) COMMON-LISP:NIL))))
(PROGN (DEFUN -- (X) (NUMBER- X 1)) (SETF (GETHASH #'-- *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X COMMON-LISP:NIL) (CONS (CONS 'NUMBER- (CONS 'X (CONS 1 COMMON-LISP:NIL))) COMMON-LISP:NIL))))
(PROGN (DEFUN INTEGER++ (X) (INTEGER+ X 1)) (SETF (GETHASH #'INTEGER++ *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X COMMON-LISP:NIL) (CONS (CONS 'INTEGER+ (CONS 'X (CONS 1 COMMON-LISP:NIL))) COMMON-LISP:NIL))))
(PROGN (DEFUN INTEGER-- (X) (INTEGER- X 1)) (SETF (GETHASH #'INTEGER-- *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X COMMON-LISP:NIL) (CONS (CONS 'INTEGER- (CONS 'X (CONS 1 COMMON-LISP:NIL))) COMMON-LISP:NIL))))
COMMON-LISP:NIL
COMMON-LISP:NIL
(BLOCK COMMON-LISP:NIL (%DEFMACRO FN (&REST BODY) (BLOCK FN (CONS 'FUNCTION (CONS (CONS (CONS '_ COMMON-LISP:NIL) (? (? (CONS? (CAR BODY)) (NOT (EQ '%SLOT-VALUE (CAR (CAR BODY))))) BODY (LIST BODY))) COMMON-LISP:NIL)))))
(BLOCK COMMON-LISP:NIL (%DEFMACRO SQUARE (&REST BODY) (BLOCK SQUARE (CONS 'FN BODY))))
(PROGN (SETQ *FUNCTIONALS* (%NCONC (CONS 'BUTLAST COMMON-LISP:NIL) *FUNCTIONALS*)))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'BUTLAST (CONS (CONS 'PLIST COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN BUTLAST (PLIST) (BLOCK BUTLAST (BLOCK COMMON-LISP:NIL (? (CDR PLIST) (CONS (CAR PLIST) (BUTLAST (CDR PLIST))))))) (SETF (GETHASH #'BUTLAST *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'PLIST COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'BUTLAST (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS '? (CONS (CONS 'CDR (CONS 'PLIST COMMON-LISP:NIL)) (CONS (CONS 'CONS (CONS (CONS 'CAR (CONS 'PLIST COMMON-LISP:NIL)) (CONS (CONS 'BUTLAST (CONS (CONS 'CDR (CONS 'PLIST COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'BUTLAST))
COMMON-LISP:NIL
COMMON-LISP:NIL
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'VALUES (CONS (CONS '&REST (CONS 'VALS COMMON-LISP:NIL)) COMMON-LISP:NIL)))) (PROGN (DEFUN VALUES (&REST VALS) (BLOCK VALUES (BLOCK COMMON-LISP:NIL (CONS 'VALUES VALS)))) (SETF (GETHASH #'VALUES *FUNCTION-ATOM-SOURCES*) (CONS (CONS '&REST (CONS 'VALS COMMON-LISP:NIL)) (CONS (CONS 'BLOCK (CONS 'VALUES (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'CONS (CONS (CONS 'QUOTE (CONS 'VALUES COMMON-LISP:NIL)) (CONS 'VALS COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'VALUES))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'VALUES? (CONS (CONS 'X COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN VALUES? (X) (BLOCK VALUES? (BLOCK COMMON-LISP:NIL (? (CONS? X) (EQ 'VALUES (CAR X)))))) (SETF (GETHASH #'VALUES? *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'VALUES? (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS '? (CONS (CONS 'CONS? (CONS 'X COMMON-LISP:NIL)) (CONS (CONS 'EQ (CONS (CONS 'QUOTE (CONS 'VALUES COMMON-LISP:NIL)) (CONS (CONS 'CAR (CONS 'X COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'VALUES?))
(PROGN (SETQ *FUNCTIONALS* (%NCONC (CONS 'RANGE? COMMON-LISP:NIL) *FUNCTIONALS*)))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'RANGE? (CONS (CONS 'X (CONS 'BOTTOM (CONS 'TOP COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (PROGN (DEFUN RANGE? (X BOTTOM TOP) (BLOCK RANGE? (BLOCK COMMON-LISP:NIL (? (>= X BOTTOM) (<= X TOP))))) (SETF (GETHASH #'RANGE? *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X (CONS 'BOTTOM (CONS 'TOP COMMON-LISP:NIL))) (CONS (CONS 'BLOCK (CONS 'RANGE? (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS '? (CONS (CONS '>= (CONS 'X (CONS 'BOTTOM COMMON-LISP:NIL))) (CONS (CONS '<= (CONS 'X (CONS 'TOP COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'RANGE?))
(PROGN (SETQ *FUNCTIONALS* (%NCONC (CONS 'CHAR-UPCASE (CONS 'CHAR-DOWNCASE (CONS 'CHAR-CODE (CONS 'CODE-CHAR COMMON-LISP:NIL)))) *FUNCTIONALS*)))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'CHAR-UPCASE (CONS (CONS 'C COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN CHAR-UPCASE (C) (BLOCK CHAR-UPCASE (BLOCK COMMON-LISP:NIL (? (LOWER-CASE? C) (CHARACTER+ C (CHARACTER- #\A #\a)) C)))) (SETF (GETHASH #'CHAR-UPCASE *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'C COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'CHAR-UPCASE (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS '? (CONS (CONS 'LOWER-CASE? (CONS 'C COMMON-LISP:NIL)) (CONS (CONS 'CHARACTER+ (CONS 'C (CONS (CONS 'CHARACTER- (CONS #\A (CONS #\a COMMON-LISP:NIL))) COMMON-LISP:NIL))) (CONS 'C COMMON-LISP:NIL)))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'CHAR-UPCASE))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'CHAR-DOWNCASE (CONS (CONS 'C COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN CHAR-DOWNCASE (C) (BLOCK CHAR-DOWNCASE (BLOCK COMMON-LISP:NIL (? (UPPER-CASE? C) (CHARACTER+ C (CHARACTER- #\a #\A)) C)))) (SETF (GETHASH #'CHAR-DOWNCASE *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'C COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'CHAR-DOWNCASE (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS '? (CONS (CONS 'UPPER-CASE? (CONS 'C COMMON-LISP:NIL)) (CONS (CONS 'CHARACTER+ (CONS 'C (CONS (CONS 'CHARACTER- (CONS #\a (CONS #\A COMMON-LISP:NIL))) COMMON-LISP:NIL))) (CONS 'C COMMON-LISP:NIL)))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'CHAR-DOWNCASE))
(PROGN (SETQ *FUNCTIONALS* (%NCONC (CONS 'LOWER-CASE? (CONS 'UPPER-CASE? (CONS 'ALPHA-CHAR? (CONS 'DIGIT-CHAR? (CONS 'ALPHANUMERIC? COMMON-LISP:NIL))))) *FUNCTIONALS*)))
(BLOCK COMMON-LISP:NIL (%DEFMACRO DEF-REST-PREDICATE (NAME ITER ARGS TEST-EXPR) (BLOCK DEF-REST-PREDICATE (LABELS ((G4120 (X) (CONS 'DEFUN (CONS NAME (CONS (CONS '&REST (CONS X ARGS)) (CONS (CONS 'DOLIST (CONS (CONS ITER (CONS X (CONS COMMON-LISP:T COMMON-LISP:NIL))) (CONS (CONS '|\|| (CONS TEST-EXPR (CONS (CONS 'RETURN (CONS COMMON-LISP:NIL COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))))) (G4120 (GENSYM))))))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'LOWER-CASE? (CONS (CONS '&REST (CONS '~G1493 COMMON-LISP:NIL)) COMMON-LISP:NIL)))) (PROGN (DEFUN LOWER-CASE? (&REST ~G1493) (BLOCK LOWER-CASE? (BLOCK COMMON-LISP:NIL (BLOCK COMMON-LISP:NIL (LABELS ((G4121 (~G1506) (LABELS ((G4122 (C) (TAGBODY ~G1504 (? (NOT ~G1506) (GO ~G1505)) (SETQ C (CAR ~G1506)) (LABELS ((G4123 (~G1503) (? ~G1503 ~G1503 (RETURN-FROM COMMON-LISP:NIL COMMON-LISP:NIL)))) (G4123 (RANGE? C #\a #\z))) (SETQ ~G1506 (CDR ~G1506)) (GO ~G1504) ~G1505 (RETURN-FROM COMMON-LISP:NIL (PROGN COMMON-LISP:T))))) (G4122 COMMON-LISP:NIL)))) (G4121 ~G1493)))))) (SETF (GETHASH #'LOWER-CASE? *FUNCTION-ATOM-SOURCES*) (CONS (CONS '&REST (CONS '~G1493 COMMON-LISP:NIL)) (CONS (CONS 'BLOCK (CONS 'LOWER-CASE? (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'LET (CONS '~G1506 (CONS '~G1493 (CONS (CONS 'LET* (CONS (CONS (CONS 'C (CONS COMMON-LISP:NIL COMMON-LISP:NIL)) COMMON-LISP:NIL) (CONS (CONS 'TAGBODY (CONS '~G1504 (CONS (CONS '? (CONS (CONS 'NOT (CONS '~G1506 COMMON-LISP:NIL)) (CONS (CONS 'GO (CONS '~G1505 COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'SETQ (CONS 'C (CONS (CONS 'CAR (CONS '~G1506 COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS '~G1503 COMMON-LISP:NIL) (CONS (CONS '? (CONS '~G1503 (CONS '~G1503 (CONS (CONS 'RETURN-FROM (CONS COMMON-LISP:NIL (CONS COMMON-LISP:NIL COMMON-LISP:NIL))) COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'RANGE? (CONS 'C (CONS #\a (CONS #\z COMMON-LISP:NIL)))) COMMON-LISP:NIL)) (CONS (CONS 'SETQ (CONS '~G1506 (CONS (CONS 'CDR (CONS '~G1506 COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'GO (CONS '~G1504 COMMON-LISP:NIL)) (CONS '~G1505 (CONS (CONS 'RETURN-FROM (CONS COMMON-LISP:NIL (CONS (CONS 'PROGN (CONS COMMON-LISP:T COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))))))))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'LOWER-CASE?))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'UPPER-CASE? (CONS (CONS '&REST (CONS '~G1494 COMMON-LISP:NIL)) COMMON-LISP:NIL)))) (PROGN (DEFUN UPPER-CASE? (&REST ~G1494) (BLOCK UPPER-CASE? (BLOCK COMMON-LISP:NIL (BLOCK COMMON-LISP:NIL (LABELS ((G4124 (~G1510) (LABELS ((G4125 (C) (TAGBODY ~G1508 (? (NOT ~G1510) (GO ~G1509)) (SETQ C (CAR ~G1510)) (LABELS ((G4126 (~G1507) (? ~G1507 ~G1507 (RETURN-FROM COMMON-LISP:NIL COMMON-LISP:NIL)))) (G4126 (RANGE? C #\A #\Z))) (SETQ ~G1510 (CDR ~G1510)) (GO ~G1508) ~G1509 (RETURN-FROM COMMON-LISP:NIL (PROGN COMMON-LISP:T))))) (G4125 COMMON-LISP:NIL)))) (G4124 ~G1494)))))) (SETF (GETHASH #'UPPER-CASE? *FUNCTION-ATOM-SOURCES*) (CONS (CONS '&REST (CONS '~G1494 COMMON-LISP:NIL)) (CONS (CONS 'BLOCK (CONS 'UPPER-CASE? (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'LET (CONS '~G1510 (CONS '~G1494 (CONS (CONS 'LET* (CONS (CONS (CONS 'C (CONS COMMON-LISP:NIL COMMON-LISP:NIL)) COMMON-LISP:NIL) (CONS (CONS 'TAGBODY (CONS '~G1508 (CONS (CONS '? (CONS (CONS 'NOT (CONS '~G1510 COMMON-LISP:NIL)) (CONS (CONS 'GO (CONS '~G1509 COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'SETQ (CONS 'C (CONS (CONS 'CAR (CONS '~G1510 COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS '~G1507 COMMON-LISP:NIL) (CONS (CONS '? (CONS '~G1507 (CONS '~G1507 (CONS (CONS 'RETURN-FROM (CONS COMMON-LISP:NIL (CONS COMMON-LISP:NIL COMMON-LISP:NIL))) COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'RANGE? (CONS 'C (CONS #\A (CONS #\Z COMMON-LISP:NIL)))) COMMON-LISP:NIL)) (CONS (CONS 'SETQ (CONS '~G1510 (CONS (CONS 'CDR (CONS '~G1510 COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'GO (CONS '~G1508 COMMON-LISP:NIL)) (CONS '~G1509 (CONS (CONS 'RETURN-FROM (CONS COMMON-LISP:NIL (CONS (CONS 'PROGN (CONS COMMON-LISP:T COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))))))))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'UPPER-CASE?))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'ALPHA-CHAR? (CONS (CONS '&REST (CONS '~G1496 COMMON-LISP:NIL)) COMMON-LISP:NIL)))) (PROGN (DEFUN ALPHA-CHAR? (&REST ~G1496) (BLOCK ALPHA-CHAR? (BLOCK COMMON-LISP:NIL (BLOCK COMMON-LISP:NIL (LABELS ((G4127 (~G1514) (LABELS ((G4128 (C) (TAGBODY ~G1512 (? (NOT ~G1514) (GO ~G1513)) (SETQ C (CAR ~G1514)) (LABELS ((G4129 (~G1511) (? ~G1511 ~G1511 (RETURN-FROM COMMON-LISP:NIL COMMON-LISP:NIL)))) (G4129 (LABELS ((G4130 (~G1495) (? ~G1495 ~G1495 (UPPER-CASE? C)))) (G4130 (LOWER-CASE? C))))) (SETQ ~G1514 (CDR ~G1514)) (GO ~G1512) ~G1513 (RETURN-FROM COMMON-LISP:NIL (PROGN COMMON-LISP:T))))) (G4128 COMMON-LISP:NIL)))) (G4127 ~G1496)))))) (SETF (GETHASH #'ALPHA-CHAR? *FUNCTION-ATOM-SOURCES*) (CONS (CONS '&REST (CONS '~G1496 COMMON-LISP:NIL)) (CONS (CONS 'BLOCK (CONS 'ALPHA-CHAR? (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'LET (CONS '~G1514 (CONS '~G1496 (CONS (CONS 'LET* (CONS (CONS (CONS 'C (CONS COMMON-LISP:NIL COMMON-LISP:NIL)) COMMON-LISP:NIL) (CONS (CONS 'TAGBODY (CONS '~G1512 (CONS (CONS '? (CONS (CONS 'NOT (CONS '~G1514 COMMON-LISP:NIL)) (CONS (CONS 'GO (CONS '~G1513 COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'SETQ (CONS 'C (CONS (CONS 'CAR (CONS '~G1514 COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS '~G1511 COMMON-LISP:NIL) (CONS (CONS '? (CONS '~G1511 (CONS '~G1511 (CONS (CONS 'RETURN-FROM (CONS COMMON-LISP:NIL (CONS COMMON-LISP:NIL COMMON-LISP:NIL))) COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS '~G1495 COMMON-LISP:NIL) (CONS (CONS '? (CONS '~G1495 (CONS '~G1495 (CONS (CONS 'UPPER-CASE? (CONS 'C COMMON-LISP:NIL)) COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'LOWER-CASE? (CONS 'C COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'SETQ (CONS '~G1514 (CONS (CONS 'CDR (CONS '~G1514 COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'GO (CONS '~G1512 COMMON-LISP:NIL)) (CONS '~G1513 (CONS (CONS 'RETURN-FROM (CONS COMMON-LISP:NIL (CONS (CONS 'PROGN (CONS COMMON-LISP:T COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))))))))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'ALPHA-CHAR?))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'DECIMAL-DIGIT? (CONS (CONS 'X COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN DECIMAL-DIGIT? (X) (BLOCK DECIMAL-DIGIT? (BLOCK COMMON-LISP:NIL (RANGE? X #\0 #\9)))) (SETF (GETHASH #'DECIMAL-DIGIT? *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'DECIMAL-DIGIT? (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'RANGE? (CONS 'X (CONS #\0 (CONS #\9 COMMON-LISP:NIL)))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'DECIMAL-DIGIT?))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS '%NONDECIMAL-DIGIT? (CONS (CONS 'X (CONS 'START (CONS 'BASE COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (PROGN (DEFUN %NONDECIMAL-DIGIT? (X START BASE) (BLOCK %NONDECIMAL-DIGIT? (BLOCK COMMON-LISP:NIL (RANGE? X START (CHARACTER+ START (CHARACTER- BASE 10)))))) (SETF (GETHASH #'%NONDECIMAL-DIGIT? *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X (CONS 'START (CONS 'BASE COMMON-LISP:NIL))) (CONS (CONS 'BLOCK (CONS '%NONDECIMAL-DIGIT? (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'RANGE? (CONS 'X (CONS 'START (CONS (CONS 'CHARACTER+ (CONS 'START (CONS (CONS 'CHARACTER- (CONS 'BASE (CONS 10 COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL '%NONDECIMAL-DIGIT?))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'NONDECIMAL-DIGIT? (CONS (CONS 'X (CONS '&KEY (CONS (CONS 'BASE (CONS 10 COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (PROGN (DEFUN NONDECIMAL-DIGIT? (X &KEY (BASE 10)) (BLOCK NONDECIMAL-DIGIT? (BLOCK COMMON-LISP:NIL (? (< 10 BASE) (LABELS ((G4131 (~G1497) (? ~G1497 ~G1497 (%NONDECIMAL-DIGIT? X #\A BASE)))) (G4131 (%NONDECIMAL-DIGIT? X #\a BASE))))))) (SETF (GETHASH #'NONDECIMAL-DIGIT? *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X (CONS '&KEY (CONS (CONS 'BASE (CONS 10 COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'BLOCK (CONS 'NONDECIMAL-DIGIT? (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS '? (CONS (CONS '< (CONS 10 (CONS 'BASE COMMON-LISP:NIL))) (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS '~G1497 COMMON-LISP:NIL) (CONS (CONS '? (CONS '~G1497 (CONS '~G1497 (CONS (CONS '%NONDECIMAL-DIGIT? (CONS 'X (CONS #\A (CONS 'BASE COMMON-LISP:NIL)))) COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS '%NONDECIMAL-DIGIT? (CONS 'X (CONS #\a (CONS 'BASE COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'NONDECIMAL-DIGIT?))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'DIGIT-CHAR? (CONS (CONS 'C (CONS '&KEY (CONS (CONS 'BASE (CONS 10 COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (PROGN (DEFUN DIGIT-CHAR? (C &KEY (BASE 10)) (BLOCK DIGIT-CHAR? (BLOCK COMMON-LISP:NIL (? (CHARACTER? C) (LABELS ((G4132 (~G1498) (? ~G1498 ~G1498 (NONDECIMAL-DIGIT? C :BASE BASE)))) (G4132 (DECIMAL-DIGIT? C))))))) (SETF (GETHASH #'DIGIT-CHAR? *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'C (CONS '&KEY (CONS (CONS 'BASE (CONS 10 COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'BLOCK (CONS 'DIGIT-CHAR? (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS '? (CONS (CONS 'CHARACTER? (CONS 'C COMMON-LISP:NIL)) (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS '~G1498 COMMON-LISP:NIL) (CONS (CONS '? (CONS '~G1498 (CONS '~G1498 (CONS (CONS 'NONDECIMAL-DIGIT? (CONS 'C (CONS ':BASE (CONS 'BASE COMMON-LISP:NIL)))) COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'DECIMAL-DIGIT? (CONS 'C COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'DIGIT-CHAR?))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'HEX-DIGIT-CHAR? (CONS (CONS 'X COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN HEX-DIGIT-CHAR? (X) (BLOCK HEX-DIGIT-CHAR? (BLOCK COMMON-LISP:NIL (LABELS ((G4133 (~G1499) (? ~G1499 ~G1499 (LABELS ((G4134 (~G1500) (? ~G1500 ~G1500 (? (>= X #\a) (<= X #\f))))) (G4134 (? (>= X #\A) (<= X #\F))))))) (G4133 (DIGIT-CHAR? X)))))) (SETF (GETHASH #'HEX-DIGIT-CHAR? *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'HEX-DIGIT-CHAR? (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS '~G1499 COMMON-LISP:NIL) (CONS (CONS '? (CONS '~G1499 (CONS '~G1499 (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS '~G1500 COMMON-LISP:NIL) (CONS (CONS '? (CONS '~G1500 (CONS '~G1500 (CONS (CONS '? (CONS (CONS '>= (CONS 'X (CONS #\a COMMON-LISP:NIL))) (CONS (CONS '<= (CONS 'X (CONS #\f COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS '? (CONS (CONS '>= (CONS 'X (CONS #\A COMMON-LISP:NIL))) (CONS (CONS '<= (CONS 'X (CONS #\F COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'DIGIT-CHAR? (CONS 'X COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'HEX-DIGIT-CHAR?))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'ALPHANUMERIC? (CONS (CONS '&REST (CONS '~G1502 COMMON-LISP:NIL)) COMMON-LISP:NIL)))) (PROGN (DEFUN ALPHANUMERIC? (&REST ~G1502) (BLOCK ALPHANUMERIC? (BLOCK COMMON-LISP:NIL (BLOCK COMMON-LISP:NIL (LABELS ((G4135 (~G1518) (LABELS ((G4136 (C) (TAGBODY ~G1516 (? (NOT ~G1518) (GO ~G1517)) (SETQ C (CAR ~G1518)) (LABELS ((G4137 (~G1515) (? ~G1515 ~G1515 (RETURN-FROM COMMON-LISP:NIL COMMON-LISP:NIL)))) (G4137 (LABELS ((G4138 (~G1501) (? ~G1501 ~G1501 (DIGIT-CHAR? C)))) (G4138 (ALPHA-CHAR? C))))) (SETQ ~G1518 (CDR ~G1518)) (GO ~G1516) ~G1517 (RETURN-FROM COMMON-LISP:NIL (PROGN COMMON-LISP:T))))) (G4136 COMMON-LISP:NIL)))) (G4135 ~G1502)))))) (SETF (GETHASH #'ALPHANUMERIC? *FUNCTION-ATOM-SOURCES*) (CONS (CONS '&REST (CONS '~G1502 COMMON-LISP:NIL)) (CONS (CONS 'BLOCK (CONS 'ALPHANUMERIC? (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'LET (CONS '~G1518 (CONS '~G1502 (CONS (CONS 'LET* (CONS (CONS (CONS 'C (CONS COMMON-LISP:NIL COMMON-LISP:NIL)) COMMON-LISP:NIL) (CONS (CONS 'TAGBODY (CONS '~G1516 (CONS (CONS '? (CONS (CONS 'NOT (CONS '~G1518 COMMON-LISP:NIL)) (CONS (CONS 'GO (CONS '~G1517 COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'SETQ (CONS 'C (CONS (CONS 'CAR (CONS '~G1518 COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS '~G1515 COMMON-LISP:NIL) (CONS (CONS '? (CONS '~G1515 (CONS '~G1515 (CONS (CONS 'RETURN-FROM (CONS COMMON-LISP:NIL (CONS COMMON-LISP:NIL COMMON-LISP:NIL))) COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS '~G1501 COMMON-LISP:NIL) (CONS (CONS '? (CONS '~G1501 (CONS '~G1501 (CONS (CONS 'DIGIT-CHAR? (CONS 'C COMMON-LISP:NIL)) COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'ALPHA-CHAR? (CONS 'C COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'SETQ (CONS '~G1518 (CONS (CONS 'CDR (CONS '~G1518 COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'GO (CONS '~G1516 COMMON-LISP:NIL)) (CONS '~G1517 (CONS (CONS 'RETURN-FROM (CONS COMMON-LISP:NIL (CONS (CONS 'PROGN (CONS COMMON-LISP:T COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))))))))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'ALPHANUMERIC?))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'WHITESPACE? (CONS (CONS 'X COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN WHITESPACE? (X) (BLOCK WHITESPACE? (BLOCK COMMON-LISP:NIL (? (< X 33) (>= X 0))))) (SETF (GETHASH #'WHITESPACE? *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'WHITESPACE? (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS '? (CONS (CONS '< (CONS 'X (CONS 33 COMMON-LISP:NIL))) (CONS (CONS '>= (CONS 'X (CONS 0 COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'WHITESPACE?))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'CONTROL-CHAR? (CONS (CONS 'X COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN CONTROL-CHAR? (X) (BLOCK CONTROL-CHAR? (BLOCK COMMON-LISP:NIL (< X 32)))) (SETF (GETHASH #'CONTROL-CHAR? *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'CONTROL-CHAR? (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS '< (CONS 'X (CONS 32 COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'CONTROL-CHAR?))
COMMON-LISP:NIL
COMMON-LISP:NIL
(PROGN (SETQ *FUNCTIONALS* (%NCONC (CONS 'STRING-CONCAT (CONS 'STRING== (CONS 'UPCASE (CONS 'DOWNCASE (CONS 'LIST-STRING (CONS 'STRING-LIST (CONS 'QUEUE-STRING COMMON-LISP:NIL))))))) *FUNCTIONALS*)))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'STRING<= (CONS (CONS 'A (CONS 'B COMMON-LISP:NIL)) COMMON-LISP:NIL)))) (PROGN (DEFUN STRING<= (A B) (BLOCK STRING<= (BLOCK COMMON-LISP:NIL (LABELS ((G4139 (LA) (LABELS ((G4140 (LB) (LABELS ((G4141 (~G1519) (BLOCK COMMON-LISP:NIL (LABELS ((G4142 (I) (TAGBODY ~G1521 (? (INTEGER== I ~G1519) (RETURN-FROM COMMON-LISP:NIL (PROGN (<= LA LB)))) (? (> (ELT A I) (ELT B I)) (RETURN-FROM COMMON-LISP:NIL COMMON-LISP:NIL)) (SETQ I (INTEGER+ 1 I)) (GO ~G1521)))) (G4142 0))))) (G4141 (INTEGER LA))))) (G4140 (LENGTH B))))) (G4139 (LENGTH A)))))) (SETF (GETHASH #'STRING<= *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'A (CONS 'B COMMON-LISP:NIL)) (CONS (CONS 'BLOCK (CONS 'STRING<= (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS 'LA COMMON-LISP:NIL) (CONS (CONS 'LET (CONS 'LB (CONS (CONS 'LENGTH (CONS 'B COMMON-LISP:NIL)) (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS '~G1519 COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'LET* (CONS (CONS (CONS 'I (CONS 0 COMMON-LISP:NIL)) COMMON-LISP:NIL) (CONS (CONS 'TAGBODY (CONS '~G1521 (CONS (CONS '? (CONS (CONS 'INTEGER== (CONS 'I (CONS '~G1519 COMMON-LISP:NIL))) (CONS (CONS 'RETURN (CONS (CONS 'PROGN (CONS (CONS '<= (CONS 'LA (CONS 'LB COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS '? (CONS (CONS '> (CONS (CONS 'ELT (CONS 'A (CONS 'I COMMON-LISP:NIL))) (CONS (CONS 'ELT (CONS 'B (CONS 'I COMMON-LISP:NIL))) COMMON-LISP:NIL))) (CONS (CONS 'RETURN-FROM (CONS COMMON-LISP:NIL (CONS COMMON-LISP:NIL COMMON-LISP:NIL))) COMMON-LISP:NIL))) (CONS (CONS 'SETQ (CONS 'I (CONS (CONS 'INTEGER+ (CONS 1 (CONS 'I COMMON-LISP:NIL))) COMMON-LISP:NIL))) (CONS (CONS 'GO (CONS '~G1521 COMMON-LISP:NIL)) COMMON-LISP:NIL)))))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'INTEGER (CONS 'LA COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'LENGTH (CONS 'A COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'STRING<=))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'STRING-LIST (CONS (CONS 'X COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN STRING-LIST (X) (BLOCK STRING-LIST (BLOCK COMMON-LISP:NIL (LABELS ((G4143 (L) (LABELS ((G4144 (S) (BLOCK COMMON-LISP:NIL (LABELS ((G4145 (I) (TAGBODY ~G1520 (? (INTEGER< I 0) (RETURN-FROM COMMON-LISP:NIL (PROGN))) (PROGN (SETQ S (PROGN (SETQ S (CONS (ELT X I) S))))) (SETQ I (INTEGER-- I)) (GO ~G1520)))) (G4145 (INTEGER-- L)))) S)) (G4144 COMMON-LISP:NIL)))) (G4143 (LENGTH X)))))) (SETF (GETHASH #'STRING-LIST *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'STRING-LIST (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS 'L COMMON-LISP:NIL) (CONS (CONS 'LET (CONS 'S (CONS COMMON-LISP:NIL (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'LET (CONS 'I (CONS (CONS 'INTEGER-- (CONS 'L COMMON-LISP:NIL)) (CONS (CONS 'TAGBODY (CONS '~G1520 (CONS (CONS '? (CONS (CONS 'INTEGER< (CONS 'I (CONS 0 COMMON-LISP:NIL))) (CONS (CONS 'RETURN-FROM (CONS COMMON-LISP:NIL (CONS (CONS 'PROGN COMMON-LISP:NIL) COMMON-LISP:NIL))) COMMON-LISP:NIL))) (CONS (CONS 'PROGN (CONS (CONS 'SETQ (CONS 'S (CONS (CONS 'PROGN (CONS (CONS 'SETQ (CONS 'S (CONS (CONS 'CONS (CONS (CONS 'ELT (CONS 'X (CONS 'I COMMON-LISP:NIL))) (CONS 'S COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL)) (CONS (CONS 'SETQ (CONS 'I (CONS (CONS 'INTEGER-- (CONS 'I COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'GO (CONS '~G1520 COMMON-LISP:NIL)) COMMON-LISP:NIL)))))) COMMON-LISP:NIL)))) COMMON-LISP:NIL))) (CONS 'S COMMON-LISP:NIL))))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'LENGTH (CONS 'X COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'STRING-LIST))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'QUEUE-STRING (CONS (CONS 'X COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN QUEUE-STRING (X) (BLOCK QUEUE-STRING (BLOCK COMMON-LISP:NIL (APPLY #'STRING-CONCAT (FILTER #'(LAMBDA (_) (? (STRING? _) _ (CHARACTER? _) (STRING _))) (QUEUE-LIST X)))))) (SETF (GETHASH #'QUEUE-STRING *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'QUEUE-STRING (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'APPLY (CONS (CONS 'FUNCTION (CONS 'STRING-CONCAT COMMON-LISP:NIL)) (CONS (CONS 'FILTER (CONS (CONS 'FUNCTION (CONS (CONS (CONS '_ COMMON-LISP:NIL) (CONS (CONS '? (CONS (CONS 'STRING? (CONS '_ COMMON-LISP:NIL)) (CONS '_ (CONS (CONS 'CHARACTER? (CONS '_ COMMON-LISP:NIL)) (CONS (CONS 'STRING (CONS '_ COMMON-LISP:NIL)) COMMON-LISP:NIL))))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'QUEUE-LIST (CONS 'X COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'QUEUE-STRING))
COMMON-LISP:NIL
COMMON-LISP:NIL
COMMON-LISP:NIL
COMMON-LISP:NIL
COMMON-LISP:NIL
(PROGN (SETQ *FUNCTIONALS* (%NCONC (CONS 'LIST-SYMBOL COMMON-LISP:NIL) *FUNCTIONALS*)))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'LIST-SYMBOL (CONS (CONS 'X COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN LIST-SYMBOL (X) (BLOCK LIST-SYMBOL (BLOCK COMMON-LISP:NIL (MAKE-SYMBOL (LIST-STRING X))))) (SETF (GETHASH #'LIST-SYMBOL *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'LIST-SYMBOL (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'MAKE-SYMBOL (CONS (CONS 'LIST-STRING (CONS 'X COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'LIST-SYMBOL))
(PROGN (SETQ *FUNCTIONALS* (%NCONC (CONS 'SUBSEQ COMMON-LISP:NIL) *FUNCTIONALS*)))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'COPY-NUM (CONS (CONS 'LST (CONS 'LEN COMMON-LISP:NIL)) COMMON-LISP:NIL)))) (PROGN (DEFUN COPY-NUM (LST LEN) (BLOCK COPY-NUM (BLOCK COMMON-LISP:NIL (? LST (? (INTEGER< 0 LEN) (CONS (CAR LST) (COPY-NUM (CDR LST) (INTEGER-- LEN)))))))) (SETF (GETHASH #'COPY-NUM *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'LST (CONS 'LEN COMMON-LISP:NIL)) (CONS (CONS 'BLOCK (CONS 'COPY-NUM (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS '? (CONS 'LST (CONS (CONS '? (CONS (CONS 'INTEGER< (CONS 0 (CONS 'LEN COMMON-LISP:NIL))) (CONS (CONS 'CONS (CONS (CONS 'CAR (CONS 'LST COMMON-LISP:NIL)) (CONS (CONS 'COPY-NUM (CONS (CONS 'CDR (CONS 'LST COMMON-LISP:NIL)) (CONS (CONS 'INTEGER-- (CONS 'LEN COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'COPY-NUM))
COMMON-LISP:NIL
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'LIST-SUBSEQ (CONS (CONS 'SEQ (CONS 'START (CONS '&OPTIONAL (CONS (CONS 'END (CONS 999999 COMMON-LISP:NIL)) COMMON-LISP:NIL)))) COMMON-LISP:NIL)))) (PROGN (DEFUN LIST-SUBSEQ (SEQ START &OPTIONAL (END 999999)) (BLOCK LIST-SUBSEQ (BLOCK COMMON-LISP:NIL (? (? SEQ (NOT (INTEGER== START END))) (PROGN (? (INTEGER> START END) (LABELS ((G4146 (~G1522) (PROGN (SETQ START END) (SETQ END ~G1522)))) (G4146 START))) (COPY-NUM (NTHCDR START SEQ) (INTEGER- END START))))))) (SETF (GETHASH #'LIST-SUBSEQ *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'SEQ (CONS 'START (CONS '&OPTIONAL (CONS (CONS 'END (CONS 999999 COMMON-LISP:NIL)) COMMON-LISP:NIL)))) (CONS (CONS 'BLOCK (CONS 'LIST-SUBSEQ (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS '? (CONS (CONS '? (CONS 'SEQ (CONS (CONS 'NOT (CONS (CONS 'INTEGER== (CONS 'START (CONS 'END COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'PROGN (CONS (CONS '? (CONS (CONS 'INTEGER> (CONS 'START (CONS 'END COMMON-LISP:NIL))) (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS '~G1522 COMMON-LISP:NIL) (CONS (CONS 'PROGN (CONS (CONS 'SETQ (CONS 'START (CONS 'END COMMON-LISP:NIL))) (CONS (CONS 'SETQ (CONS 'END (CONS '~G1522 COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS 'START COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'COPY-NUM (CONS (CONS 'NTHCDR (CONS 'START (CONS 'SEQ COMMON-LISP:NIL))) (CONS (CONS 'INTEGER- (CONS 'END (CONS 'START COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'LIST-SUBSEQ))
COMMON-LISP:NIL
COMMON-LISP:NIL
COMMON-LISP:NIL
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS '%SUBSEQ-SEQUENCE (CONS (CONS 'MAKER (CONS 'SEQ (CONS 'START (CONS 'END COMMON-LISP:NIL)))) COMMON-LISP:NIL)))) (PROGN (DEFUN %SUBSEQ-SEQUENCE (MAKER SEQ START END) (BLOCK %SUBSEQ-SEQUENCE (BLOCK COMMON-LISP:NIL (? (NOT (INTEGER== START END)) (PROGN (LABELS ((G4147 (!) (? (INTEGER< START !) (PROGN (? (INTEGER>= END !) (PROGN (SETQ END !))) (LABELS ((G4148 (L) (LABELS ((G4149 (S) (LABELS ((G4150 (~G1523) (BLOCK COMMON-LISP:NIL (LABELS ((G4151 (X) (TAGBODY ~G1525 (? (INTEGER== X ~G1523) (RETURN-FROM COMMON-LISP:NIL (PROGN S))) (PROGN (=-ELT (ELT SEQ (INTEGER+ START X)) S X)) (SETQ X (INTEGER+ 1 X)) (GO ~G1525)))) (G4151 0))))) (G4150 (INTEGER L))))) (G4149 (FUNCALL MAKER L))))) (G4148 (INTEGER- END START))))))) (G4147 (LENGTH SEQ)))))))) (SETF (GETHASH #'%SUBSEQ-SEQUENCE *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'MAKER (CONS 'SEQ (CONS 'START (CONS 'END COMMON-LISP:NIL)))) (CONS (CONS 'BLOCK (CONS '%SUBSEQ-SEQUENCE (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS '& (CONS (CONS 'NOT (CONS (CONS 'INTEGER== (CONS 'START (CONS 'END COMMON-LISP:NIL))) COMMON-LISP:NIL)) (CONS (CONS 'PROGN (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS '! COMMON-LISP:NIL) (CONS (CONS '? (CONS (CONS 'INTEGER< (CONS 'START (CONS '! COMMON-LISP:NIL))) (CONS (CONS 'PROGN (CONS (CONS '? (CONS (CONS 'INTEGER>= (CONS 'END (CONS '! COMMON-LISP:NIL))) (CONS (CONS 'PROGN (CONS (CONS 'SETQ (CONS 'END (CONS '! COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS 'L COMMON-LISP:NIL) (CONS (CONS 'LET (CONS 'S (CONS (CONS 'FUNCALL (CONS 'MAKER (CONS 'L COMMON-LISP:NIL))) (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS '~G1523 COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'LET* (CONS (CONS (CONS 'X (CONS 0 COMMON-LISP:NIL)) COMMON-LISP:NIL) (CONS (CONS 'TAGBODY (CONS '~G1525 (CONS (CONS '? (CONS (CONS 'INTEGER== (CONS 'X (CONS '~G1523 COMMON-LISP:NIL))) (CONS (CONS 'RETURN (CONS (CONS 'PROGN (CONS 'S COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'PROGN (CONS (CONS '=-ELT (CONS (CONS 'ELT (CONS 'SEQ (CONS (CONS 'INTEGER+ (CONS 'START (CONS 'X COMMON-LISP:NIL))) COMMON-LISP:NIL))) (CONS 'S (CONS 'X COMMON-LISP:NIL)))) COMMON-LISP:NIL)) (CONS (CONS 'SETQ (CONS 'X (CONS (CONS 'INTEGER+ (CONS 1 (CONS 'X COMMON-LISP:NIL))) COMMON-LISP:NIL))) (CONS (CONS 'GO (CONS '~G1525 COMMON-LISP:NIL)) COMMON-LISP:NIL)))))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'INTEGER (CONS 'L COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'INTEGER- (CONS 'END (CONS 'START COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'LENGTH (CONS 'SEQ COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL '%SUBSEQ-SEQUENCE))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'SUBSEQ (CONS (CONS 'SEQ (CONS 'START (CONS '&OPTIONAL (CONS (CONS 'END (CONS 99999 COMMON-LISP:NIL)) COMMON-LISP:NIL)))) COMMON-LISP:NIL)))) (PROGN (DEFUN SUBSEQ (SEQ START &OPTIONAL (END 99999)) (BLOCK SUBSEQ (BLOCK COMMON-LISP:NIL (? SEQ (PROGN (? (INTEGER> START END) (LABELS ((G4152 (~G1524) (PROGN (SETQ START END) (SETQ END ~G1524)))) (G4152 START))) (? (CONS? SEQ) (LIST-SUBSEQ SEQ START END) (STRING? SEQ) (STRING-SUBSEQ SEQ START END) (ARRAY? SEQ) (%SUBSEQ-SEQUENCE #'MAKE-ARRAY SEQ START END) (ERROR "Type of ~A not supported." SEQ))))))) (SETF (GETHASH #'SUBSEQ *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'SEQ (CONS 'START (CONS '&OPTIONAL (CONS (CONS 'END (CONS 99999 COMMON-LISP:NIL)) COMMON-LISP:NIL)))) (CONS (CONS 'BLOCK (CONS 'SUBSEQ (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS '? (CONS 'SEQ (CONS (CONS 'PROGN (CONS (CONS '? (CONS (CONS 'INTEGER> (CONS 'START (CONS 'END COMMON-LISP:NIL))) (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS '~G1524 COMMON-LISP:NIL) (CONS (CONS 'PROGN (CONS (CONS 'SETQ (CONS 'START (CONS 'END COMMON-LISP:NIL))) (CONS (CONS 'SETQ (CONS 'END (CONS '~G1524 COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS 'START COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS '? (CONS (CONS 'CONS? (CONS 'SEQ COMMON-LISP:NIL)) (CONS (CONS 'LIST-SUBSEQ (CONS 'SEQ (CONS 'START (CONS 'END COMMON-LISP:NIL)))) (CONS (CONS 'STRING? (CONS 'SEQ COMMON-LISP:NIL)) (CONS (CONS 'STRING-SUBSEQ (CONS 'SEQ (CONS 'START (CONS 'END COMMON-LISP:NIL)))) (CONS (CONS 'ARRAY? (CONS 'SEQ COMMON-LISP:NIL)) (CONS (CONS '%SUBSEQ-SEQUENCE (CONS (CONS 'FUNCTION (CONS 'MAKE-ARRAY COMMON-LISP:NIL)) (CONS 'SEQ (CONS 'START (CONS 'END COMMON-LISP:NIL))))) (CONS (CONS 'ERROR (CONS "Type of ~A not supported." (CONS 'SEQ COMMON-LISP:NIL))) COMMON-LISP:NIL)))))))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'SUBSEQ))
COMMON-LISP:NIL
COMMON-LISP:NIL
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'STRING-SUBSEQ (CONS (CONS 'SEQ (CONS 'START (CONS '&OPTIONAL (CONS (CONS 'END (CONS 99999 COMMON-LISP:NIL)) COMMON-LISP:NIL)))) COMMON-LISP:NIL)))) (PROGN (DEFUN STRING-SUBSEQ (SEQ START &OPTIONAL (END 99999)) (BLOCK STRING-SUBSEQ (BLOCK COMMON-LISP:NIL (? (INTEGER== START END) "" (LABELS ((G4153 (SEQLEN) (? (INTEGER< START SEQLEN) (PROGN (? (INTEGER>= END SEQLEN) (PROGN (PROGN (SETQ END SEQLEN)))) (LABELS ((G4154 (L) (LABELS ((G4155 (S) (LABELS ((G4156 (~G1526) (BLOCK COMMON-LISP:NIL (LABELS ((G4157 (X) (TAGBODY ~G1527 (? (INTEGER== X ~G1526) (RETURN-FROM COMMON-LISP:NIL (PROGN S))) (PROGN (SETQ S (+ S (STRING (ELT SEQ (INTEGER+ START X)))))) (SETQ X (INTEGER+ 1 X)) (GO ~G1527)))) (G4157 0))))) (G4156 (INTEGER L))))) (G4155 (MAKE-STRING 0))))) (G4154 (INTEGER- END START))))))) (G4153 (LENGTH SEQ))))))) (SETF (GETHASH #'STRING-SUBSEQ *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'SEQ (CONS 'START (CONS '&OPTIONAL (CONS (CONS 'END (CONS 99999 COMMON-LISP:NIL)) COMMON-LISP:NIL)))) (CONS (CONS 'BLOCK (CONS 'STRING-SUBSEQ (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS '? (CONS (CONS 'INTEGER== (CONS 'START (CONS 'END COMMON-LISP:NIL))) (CONS "" (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS 'SEQLEN COMMON-LISP:NIL) (CONS (CONS '? (CONS (CONS 'INTEGER< (CONS 'START (CONS 'SEQLEN COMMON-LISP:NIL))) (CONS (CONS 'PROGN (CONS (CONS '? (CONS (CONS 'INTEGER>= (CONS 'END (CONS 'SEQLEN COMMON-LISP:NIL))) (CONS (CONS 'PROGN (CONS (CONS 'PROGN (CONS (CONS 'SETQ (CONS 'END (CONS 'SEQLEN COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS 'L COMMON-LISP:NIL) (CONS (CONS 'LET (CONS 'S (CONS (CONS 'MAKE-STRING (CONS 0 COMMON-LISP:NIL)) (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS '~G1526 COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'LET* (CONS (CONS (CONS 'X (CONS 0 COMMON-LISP:NIL)) COMMON-LISP:NIL) (CONS (CONS 'TAGBODY (CONS '~G1527 (CONS (CONS '? (CONS (CONS 'INTEGER== (CONS 'X (CONS '~G1526 COMMON-LISP:NIL))) (CONS (CONS 'RETURN (CONS (CONS 'PROGN (CONS 'S COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'PROGN (CONS (CONS 'SETQ (CONS 'S (CONS (CONS '+ (CONS 'S (CONS (CONS 'STRING (CONS (CONS 'ELT (CONS 'SEQ (CONS (CONS 'INTEGER+ (CONS 'START (CONS 'X COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)) (CONS (CONS 'SETQ (CONS 'X (CONS (CONS 'INTEGER+ (CONS 1 (CONS 'X COMMON-LISP:NIL))) COMMON-LISP:NIL))) (CONS (CONS 'GO (CONS '~G1527 COMMON-LISP:NIL)) COMMON-LISP:NIL)))))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'INTEGER (CONS 'L COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'INTEGER- (CONS 'END (CONS 'START COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'LENGTH (CONS 'SEQ COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'STRING-SUBSEQ))
(PROGN (SETQ *FUNCTIONALS* (%NCONC (CONS 'FIND (CONS 'POSITION COMMON-LISP:NIL)) *FUNCTIONALS*)))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS '%FIND-IF-LIST (CONS (CONS 'PRED (CONS 'SEQ (CONS 'FROM-END (CONS 'WITH-INDEX COMMON-LISP:NIL)))) COMMON-LISP:NIL)))) (PROGN (DEFUN %FIND-IF-LIST (PRED SEQ FROM-END WITH-INDEX) (BLOCK %FIND-IF-LIST (BLOCK COMMON-LISP:NIL (LABELS ((G4158 (!) (? WITH-INDEX (LABELS ((G4159 (IDX) (BLOCK COMMON-LISP:NIL (LABELS ((G4160 (~G1539) (LABELS ((G4161 (!) (TAGBODY ~G1537 (? (NOT ~G1539) (GO ~G1538)) (SETQ ! (CAR ~G1539)) (? (FUNCALL PRED ! IDX) (RETURN-FROM COMMON-LISP:NIL !)) (PROGN (SETQ IDX (NUMBER+ IDX 1))) (SETQ ~G1539 (CDR ~G1539)) (GO ~G1537) ~G1538 (RETURN-FROM COMMON-LISP:NIL (PROGN COMMON-LISP:NIL))))) (G4161 COMMON-LISP:NIL)))) (G4160 !))))) (G4159 0)) (BLOCK COMMON-LISP:NIL (LABELS ((G4162 (~G1542) (LABELS ((G4163 (!) (TAGBODY ~G1540 (? (NOT ~G1542) (GO ~G1541)) (SETQ ! (CAR ~G1542)) (? (FUNCALL PRED !) (RETURN-FROM COMMON-LISP:NIL !)) (SETQ ~G1542 (CDR ~G1542)) (GO ~G1540) ~G1541 (RETURN-FROM COMMON-LISP:NIL (PROGN COMMON-LISP:NIL))))) (G4163 COMMON-LISP:NIL)))) (G4162 !)))))) (G4158 (? FROM-END (REVERSE SEQ) SEQ)))))) (SETF (GETHASH #'%FIND-IF-LIST *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'PRED (CONS 'SEQ (CONS 'FROM-END (CONS 'WITH-INDEX COMMON-LISP:NIL)))) (CONS (CONS 'BLOCK (CONS '%FIND-IF-LIST (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS '! COMMON-LISP:NIL) (CONS (CONS '? (CONS 'WITH-INDEX (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS 'IDX COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'LET* (CONS (CONS (CONS '~G1539 (CONS '! COMMON-LISP:NIL)) (CONS (CONS '! (CONS COMMON-LISP:NIL COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'TAGBODY (CONS '~G1537 (CONS (CONS '? (CONS (CONS 'NOT (CONS '~G1539 COMMON-LISP:NIL)) (CONS (CONS 'GO (CONS '~G1538 COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'SETQ (CONS '! (CONS (CONS 'CAR (CONS '~G1539 COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS '? (CONS (CONS 'FUNCALL (CONS 'PRED (CONS '! (CONS 'IDX COMMON-LISP:NIL)))) (CONS (CONS 'RETURN-FROM (CONS COMMON-LISP:NIL (CONS '! COMMON-LISP:NIL))) COMMON-LISP:NIL))) (CONS (CONS 'PROGN (CONS (CONS 'SETQ (CONS 'IDX (CONS (CONS 'NUMBER+ (CONS 'IDX (CONS 1 COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)) (CONS (CONS 'SETQ (CONS '~G1539 (CONS (CONS 'CDR (CONS '~G1539 COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'GO (CONS '~G1537 COMMON-LISP:NIL)) (CONS '~G1538 (CONS (CONS 'RETURN (CONS (CONS 'PROGN (CONS COMMON-LISP:NIL COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)))))))))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS 0 COMMON-LISP:NIL)) (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'LET* (CONS (CONS (CONS '~G1542 (CONS '! COMMON-LISP:NIL)) (CONS (CONS '! (CONS COMMON-LISP:NIL COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'TAGBODY (CONS '~G1540 (CONS (CONS '? (CONS (CONS 'NOT (CONS '~G1542 COMMON-LISP:NIL)) (CONS (CONS 'GO (CONS '~G1541 COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'SETQ (CONS '! (CONS (CONS 'CAR (CONS '~G1542 COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS '? (CONS (CONS 'FUNCALL (CONS 'PRED (CONS '! COMMON-LISP:NIL))) (CONS (CONS 'RETURN-FROM (CONS COMMON-LISP:NIL (CONS '! COMMON-LISP:NIL))) COMMON-LISP:NIL))) (CONS (CONS 'SETQ (CONS '~G1542 (CONS (CONS 'CDR (CONS '~G1542 COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'GO (CONS '~G1540 COMMON-LISP:NIL)) (CONS '~G1541 (CONS (CONS 'RETURN (CONS (CONS 'PROGN (CONS COMMON-LISP:NIL COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))))))))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS '? (CONS 'FROM-END (CONS (CONS 'REVERSE (CONS 'SEQ COMMON-LISP:NIL)) (CONS 'SEQ COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL '%FIND-IF-LIST))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS '%FIND-IF-SEQUENCE (CONS (CONS 'PRED (CONS 'SEQ (CONS 'START (CONS 'END (CONS 'FROM-END (CONS 'WITH-INDEX COMMON-LISP:NIL)))))) COMMON-LISP:NIL)))) (PROGN (DEFUN %FIND-IF-SEQUENCE (PRED SEQ START END FROM-END WITH-INDEX) (BLOCK %FIND-IF-SEQUENCE (BLOCK COMMON-LISP:NIL (? SEQ (? (INTEGER< 0 (LENGTH SEQ)) (LABELS ((G4164 (E) (LABELS ((G4165 (S) (? (LABELS ((G4166 (~G1530) (? ~G1530 ~G1530 (? (INTEGER< S E) FROM-END)))) (G4166 (? (INTEGER> S E) (NOT FROM-END)))) (LABELS ((G4167 (~G1531) (PROGN (SETQ S E) (SETQ E ~G1531)))) (G4167 S))) (BLOCK COMMON-LISP:NIL (LABELS ((G4168 (I) (TAGBODY ~G1532 (? (? FROM-END (INTEGER< I E) (INTEGER> I E)) (RETURN-FROM COMMON-LISP:NIL (PROGN))) (LABELS ((G4169 (!) (? (APPLY PRED (CONS ! (? WITH-INDEX (LIST I)))) (RETURN-FROM COMMON-LISP:NIL !)))) (G4169 (ELT SEQ I))) (SETQ I (? FROM-END (INTEGER-- I) (INTEGER++ I))) (GO ~G1532)))) (G4168 S))))) (G4165 (LABELS ((G4170 (~G1529) (? ~G1529 ~G1529 0))) (G4170 START)))))) (G4164 (LABELS ((G4171 (~G1528) (? ~G1528 ~G1528 (INTEGER-- (LENGTH SEQ))))) (G4171 END))))))))) (SETF (GETHASH #'%FIND-IF-SEQUENCE *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'PRED (CONS 'SEQ (CONS 'START (CONS 'END (CONS 'FROM-END (CONS 'WITH-INDEX COMMON-LISP:NIL)))))) (CONS (CONS 'BLOCK (CONS '%FIND-IF-SEQUENCE (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS '? (CONS 'SEQ (CONS (CONS '? (CONS (CONS 'INTEGER< (CONS 0 (CONS (CONS 'LENGTH (CONS 'SEQ COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS 'E COMMON-LISP:NIL) (CONS (CONS 'LET (CONS 'S (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS '~G1529 COMMON-LISP:NIL) (CONS (CONS '? (CONS '~G1529 (CONS '~G1529 (CONS 0 COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS 'START COMMON-LISP:NIL)) (CONS (CONS '? (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS '~G1530 COMMON-LISP:NIL) (CONS (CONS '? (CONS '~G1530 (CONS '~G1530 (CONS (CONS '? (CONS (CONS 'INTEGER< (CONS 'S (CONS 'E COMMON-LISP:NIL))) (CONS 'FROM-END COMMON-LISP:NIL))) COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS '? (CONS (CONS 'INTEGER> (CONS 'S (CONS 'E COMMON-LISP:NIL))) (CONS (CONS 'NOT (CONS 'FROM-END COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL)) (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS '~G1531 COMMON-LISP:NIL) (CONS (CONS 'PROGN (CONS (CONS 'SETQ (CONS 'S (CONS 'E COMMON-LISP:NIL))) (CONS (CONS 'SETQ (CONS 'E (CONS '~G1531 COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS 'S COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'LET (CONS 'I (CONS 'S (CONS (CONS 'TAGBODY (CONS '~G1532 (CONS (CONS '? (CONS (CONS '? (CONS 'FROM-END (CONS (CONS 'INTEGER< (CONS 'I (CONS 'E COMMON-LISP:NIL))) (CONS (CONS 'INTEGER> (CONS 'I (CONS 'E COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (CONS (CONS 'RETURN-FROM (CONS COMMON-LISP:NIL (CONS (CONS 'PROGN COMMON-LISP:NIL) COMMON-LISP:NIL))) COMMON-LISP:NIL))) (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS '! COMMON-LISP:NIL) (CONS (CONS '? (CONS (CONS 'APPLY (CONS 'PRED (CONS (CONS 'CONS (CONS '! (CONS (CONS '? (CONS 'WITH-INDEX (CONS (CONS 'LIST (CONS 'I COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) (CONS (CONS 'RETURN-FROM (CONS COMMON-LISP:NIL (CONS '! COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'ELT (CONS 'SEQ (CONS 'I COMMON-LISP:NIL))) COMMON-LISP:NIL)) (CONS (CONS 'SETQ (CONS 'I (CONS (CONS '? (CONS 'FROM-END (CONS (CONS 'INTEGER-- (CONS 'I COMMON-LISP:NIL)) (CONS (CONS 'INTEGER++ (CONS 'I COMMON-LISP:NIL)) COMMON-LISP:NIL)))) COMMON-LISP:NIL))) (CONS (CONS 'GO (CONS '~G1532 COMMON-LISP:NIL)) COMMON-LISP:NIL)))))) COMMON-LISP:NIL)))) COMMON-LISP:NIL))) COMMON-LISP:NIL))))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS '~G1528 COMMON-LISP:NIL) (CONS (CONS '? (CONS '~G1528 (CONS '~G1528 (CONS (CONS 'INTEGER-- (CONS (CONS 'LENGTH (CONS 'SEQ COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS 'END COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL '%FIND-IF-SEQUENCE))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'FIND-IF (CONS (CONS 'PRED (CONS 'SEQ (CONS '&KEY (CONS (CONS 'START (CONS COMMON-LISP:NIL COMMON-LISP:NIL)) (CONS (CONS 'END (CONS COMMON-LISP:NIL COMMON-LISP:NIL)) (CONS (CONS 'FROM-END (CONS COMMON-LISP:NIL COMMON-LISP:NIL)) (CONS (CONS 'WITH-INDEX (CONS COMMON-LISP:NIL COMMON-LISP:NIL)) COMMON-LISP:NIL))))))) COMMON-LISP:NIL)))) (PROGN (DEFUN FIND-IF (PRED SEQ &KEY (START COMMON-LISP:NIL) (END COMMON-LISP:NIL) (FROM-END COMMON-LISP:NIL) (WITH-INDEX COMMON-LISP:NIL)) (BLOCK FIND-IF (BLOCK COMMON-LISP:NIL (? (NOT (ATOM SEQ) START END) (%FIND-IF-LIST PRED SEQ FROM-END WITH-INDEX) (%FIND-IF-SEQUENCE PRED SEQ START END FROM-END WITH-INDEX))))) (SETF (GETHASH #'FIND-IF *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'PRED (CONS 'SEQ (CONS '&KEY (CONS (CONS 'START (CONS COMMON-LISP:NIL COMMON-LISP:NIL)) (CONS (CONS 'END (CONS COMMON-LISP:NIL COMMON-LISP:NIL)) (CONS (CONS 'FROM-END (CONS COMMON-LISP:NIL COMMON-LISP:NIL)) (CONS (CONS 'WITH-INDEX (CONS COMMON-LISP:NIL COMMON-LISP:NIL)) COMMON-LISP:NIL))))))) (CONS (CONS 'BLOCK (CONS 'FIND-IF (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS '? (CONS (CONS 'NOT (CONS (CONS 'ATOM (CONS 'SEQ COMMON-LISP:NIL)) (CONS 'START (CONS 'END COMMON-LISP:NIL)))) (CONS (CONS '%FIND-IF-LIST (CONS 'PRED (CONS 'SEQ (CONS 'FROM-END (CONS 'WITH-INDEX COMMON-LISP:NIL))))) (CONS (CONS '%FIND-IF-SEQUENCE (CONS 'PRED (CONS 'SEQ (CONS 'START (CONS 'END (CONS 'FROM-END (CONS 'WITH-INDEX COMMON-LISP:NIL))))))) COMMON-LISP:NIL)))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'FIND-IF))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'FIND (CONS (CONS 'OBJ (CONS 'SEQ (CONS '&KEY (CONS (CONS 'START (CONS COMMON-LISP:NIL COMMON-LISP:NIL)) (CONS (CONS 'END (CONS COMMON-LISP:NIL COMMON-LISP:NIL)) (CONS (CONS 'FROM-END (CONS COMMON-LISP:NIL COMMON-LISP:NIL)) (CONS (CONS 'TEST (CONS (CONS 'FUNCTION (CONS 'EQL COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))))))) COMMON-LISP:NIL)))) (PROGN (DEFUN FIND (OBJ SEQ &KEY (START COMMON-LISP:NIL) (END COMMON-LISP:NIL) (FROM-END COMMON-LISP:NIL) (TEST #'EQL)) (BLOCK FIND (BLOCK COMMON-LISP:NIL (FIND-IF #'(LAMBDA (_) (FUNCALL TEST _ OBJ)) SEQ :START START :END END :FROM-END FROM-END)))) (SETF (GETHASH #'FIND *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'OBJ (CONS 'SEQ (CONS '&KEY (CONS (CONS 'START (CONS COMMON-LISP:NIL COMMON-LISP:NIL)) (CONS (CONS 'END (CONS COMMON-LISP:NIL COMMON-LISP:NIL)) (CONS (CONS 'FROM-END (CONS COMMON-LISP:NIL COMMON-LISP:NIL)) (CONS (CONS 'TEST (CONS (CONS 'FUNCTION (CONS 'EQL COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))))))) (CONS (CONS 'BLOCK (CONS 'FIND (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'FIND-IF (CONS (CONS 'FUNCTION (CONS (CONS (CONS '_ COMMON-LISP:NIL) (CONS (CONS 'FUNCALL (CONS 'TEST (CONS '_ (CONS 'OBJ COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS 'SEQ (CONS ':START (CONS 'START (CONS ':END (CONS 'END (CONS ':FROM-END (CONS 'FROM-END COMMON-LISP:NIL))))))))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'FIND))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'POSITION (CONS (CONS 'OBJ (CONS 'SEQ (CONS '&KEY (CONS (CONS 'START (CONS COMMON-LISP:NIL COMMON-LISP:NIL)) (CONS (CONS 'END (CONS COMMON-LISP:NIL COMMON-LISP:NIL)) (CONS (CONS 'FROM-END (CONS COMMON-LISP:NIL COMMON-LISP:NIL)) (CONS (CONS 'TEST (CONS (CONS 'FUNCTION (CONS 'EQL COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))))))) COMMON-LISP:NIL)))) (PROGN (DEFUN POSITION (OBJ SEQ &KEY (START COMMON-LISP:NIL) (END COMMON-LISP:NIL) (FROM-END COMMON-LISP:NIL) (TEST #'EQL)) (BLOCK POSITION (BLOCK COMMON-LISP:NIL (LABELS ((G4172 (POSITION-INDEX) (FIND-IF #'(LAMBDA (X I) (? (FUNCALL TEST X OBJ) (PROGN (SETQ POSITION-INDEX I)))) SEQ :START START :END END :FROM-END FROM-END :WITH-INDEX COMMON-LISP:T) (LABELS ((G4173 (!) (? ! (INTEGER !)))) (G4173 POSITION-INDEX)))) (G4172 COMMON-LISP:NIL))))) (SETF (GETHASH #'POSITION *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'OBJ (CONS 'SEQ (CONS '&KEY (CONS (CONS 'START (CONS COMMON-LISP:NIL COMMON-LISP:NIL)) (CONS (CONS 'END (CONS COMMON-LISP:NIL COMMON-LISP:NIL)) (CONS (CONS 'FROM-END (CONS COMMON-LISP:NIL COMMON-LISP:NIL)) (CONS (CONS 'TEST (CONS (CONS 'FUNCTION (CONS 'EQL COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))))))) (CONS (CONS 'BLOCK (CONS 'POSITION (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS 'POSITION-INDEX COMMON-LISP:NIL) (CONS (CONS 'FIND-IF (CONS (CONS 'FUNCTION (CONS (CONS (CONS 'X (CONS 'I COMMON-LISP:NIL)) (CONS (CONS '? (CONS (CONS 'FUNCALL (CONS 'TEST (CONS 'X (CONS 'OBJ COMMON-LISP:NIL)))) (CONS (CONS 'PROGN (CONS (CONS 'SETQ (CONS 'POSITION-INDEX (CONS 'I COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS 'SEQ (CONS ':START (CONS 'START (CONS ':END (CONS 'END (CONS ':FROM-END (CONS 'FROM-END (CONS ':WITH-INDEX (CONS COMMON-LISP:T COMMON-LISP:NIL))))))))))) (CONS (CONS 'LET (CONS '! (CONS 'POSITION-INDEX (CONS (CONS '? (CONS '! (CONS (CONS 'INTEGER (CONS '! COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) COMMON-LISP:NIL))) COMMON-LISP:NIL)) (CONS COMMON-LISP:NIL COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'POSITION))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'POSITION-IF (CONS (CONS 'PRED (CONS 'SEQ (CONS '&KEY (CONS (CONS 'START (CONS COMMON-LISP:NIL COMMON-LISP:NIL)) (CONS (CONS 'END (CONS COMMON-LISP:NIL COMMON-LISP:NIL)) (CONS (CONS 'FROM-END (CONS COMMON-LISP:NIL COMMON-LISP:NIL)) COMMON-LISP:NIL)))))) COMMON-LISP:NIL)))) (PROGN (DEFUN POSITION-IF (PRED SEQ &KEY (START COMMON-LISP:NIL) (END COMMON-LISP:NIL) (FROM-END COMMON-LISP:NIL)) (BLOCK POSITION-IF (BLOCK COMMON-LISP:NIL (LABELS ((G4174 (POSITION-INDEX) (FIND-IF #'(LAMBDA (X I) (? (FUNCALL PRED X) (PROGN (SETQ POSITION-INDEX I)))) SEQ :START START :END END :FROM-END FROM-END :WITH-INDEX COMMON-LISP:T) (LABELS ((G4175 (!) (? ! (INTEGER !)))) (G4175 POSITION-INDEX)))) (G4174 COMMON-LISP:NIL))))) (SETF (GETHASH #'POSITION-IF *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'PRED (CONS 'SEQ (CONS '&KEY (CONS (CONS 'START (CONS COMMON-LISP:NIL COMMON-LISP:NIL)) (CONS (CONS 'END (CONS COMMON-LISP:NIL COMMON-LISP:NIL)) (CONS (CONS 'FROM-END (CONS COMMON-LISP:NIL COMMON-LISP:NIL)) COMMON-LISP:NIL)))))) (CONS (CONS 'BLOCK (CONS 'POSITION-IF (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS 'POSITION-INDEX COMMON-LISP:NIL) (CONS (CONS 'FIND-IF (CONS (CONS 'FUNCTION (CONS (CONS (CONS 'X (CONS 'I COMMON-LISP:NIL)) (CONS (CONS '? (CONS (CONS 'FUNCALL (CONS 'PRED (CONS 'X COMMON-LISP:NIL))) (CONS (CONS 'PROGN (CONS (CONS 'SETQ (CONS 'POSITION-INDEX (CONS 'I COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS 'SEQ (CONS ':START (CONS 'START (CONS ':END (CONS 'END (CONS ':FROM-END (CONS 'FROM-END (CONS ':WITH-INDEX (CONS COMMON-LISP:T COMMON-LISP:NIL))))))))))) (CONS (CONS 'LET (CONS '! (CONS 'POSITION-INDEX (CONS (CONS '? (CONS '! (CONS (CONS 'INTEGER (CONS '! COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) COMMON-LISP:NIL))) COMMON-LISP:NIL)) (CONS COMMON-LISP:NIL COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'POSITION-IF))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'SOME (CONS (CONS 'PRED (CONS '&REST (CONS 'SEQS COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (PROGN (DEFUN SOME (PRED &REST SEQS) (BLOCK SOME (BLOCK COMMON-LISP:NIL (FIND-IF PRED (APPLY #'APPEND SEQS))))) (SETF (GETHASH #'SOME *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'PRED (CONS '&REST (CONS 'SEQS COMMON-LISP:NIL))) (CONS (CONS 'BLOCK (CONS 'SOME (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'FIND-IF (CONS 'PRED (CONS (CONS 'APPLY (CONS (CONS 'FUNCTION (CONS 'APPEND COMMON-LISP:NIL)) (CONS 'SEQS COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'SOME))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'EVERY (CONS (CONS 'PRED (CONS '&REST (CONS 'SEQS COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (PROGN (DEFUN EVERY (PRED &REST SEQS) (BLOCK EVERY (BLOCK COMMON-LISP:NIL (BLOCK COMMON-LISP:NIL (LABELS ((G4176 (~G1536) (LABELS ((G4177 (SEQ) (TAGBODY ~G1534 (? (NOT ~G1536) (GO ~G1535)) (SETQ SEQ (CAR ~G1536)) (LABELS ((G4178 (~G1543) (BLOCK COMMON-LISP:NIL (LABELS ((G4179 (!) (TAGBODY ~G1544 (? (INTEGER== ! ~G1543) (RETURN-FROM COMMON-LISP:NIL (PROGN COMMON-LISP:NIL))) (LABELS ((G4180 (~G1533) (? ~G1533 ~G1533 (RETURN-FROM EVERY COMMON-LISP:NIL)))) (G4180 (FUNCALL PRED (ELT SEQ !)))) (SETQ ! (INTEGER+ 1 !)) (GO ~G1544)))) (G4179 0))))) (G4178 (INTEGER (LENGTH SEQ)))) (SETQ ~G1536 (CDR ~G1536)) (GO ~G1534) ~G1535 (RETURN-FROM COMMON-LISP:NIL (PROGN COMMON-LISP:T))))) (G4177 COMMON-LISP:NIL)))) (G4176 SEQS)))))) (SETF (GETHASH #'EVERY *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'PRED (CONS '&REST (CONS 'SEQS COMMON-LISP:NIL))) (CONS (CONS 'BLOCK (CONS 'EVERY (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'LET (CONS '~G1536 (CONS 'SEQS (CONS (CONS 'LET* (CONS (CONS (CONS 'SEQ (CONS COMMON-LISP:NIL COMMON-LISP:NIL)) COMMON-LISP:NIL) (CONS (CONS 'TAGBODY (CONS '~G1534 (CONS (CONS '? (CONS (CONS 'NOT (CONS '~G1536 COMMON-LISP:NIL)) (CONS (CONS 'GO (CONS '~G1535 COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'SETQ (CONS 'SEQ (CONS (CONS 'CAR (CONS '~G1536 COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'LET (CONS '~G1543 (CONS (CONS 'INTEGER (CONS (CONS 'LENGTH (CONS 'SEQ COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'DO (CONS (CONS (CONS '! (CONS 0 (CONS (CONS 'INTEGER+ (CONS 1 (CONS '! COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL) (CONS (CONS (CONS 'INTEGER== (CONS '! (CONS '~G1543 COMMON-LISP:NIL))) (CONS COMMON-LISP:NIL COMMON-LISP:NIL)) (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS '~G1533 COMMON-LISP:NIL) (CONS (CONS '? (CONS '~G1533 (CONS '~G1533 (CONS (CONS 'RETURN-FROM (CONS 'EVERY (CONS COMMON-LISP:NIL COMMON-LISP:NIL))) COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'FUNCALL (CONS 'PRED (CONS (CONS 'ELT (CONS 'SEQ (CONS '! COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL)))) COMMON-LISP:NIL)))) (CONS (CONS 'SETQ (CONS '~G1536 (CONS (CONS 'CDR (CONS '~G1536 COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'GO (CONS '~G1534 COMMON-LISP:NIL)) (CONS '~G1535 (CONS (CONS 'RETURN-FROM (CONS COMMON-LISP:NIL (CONS (CONS 'PROGN (CONS COMMON-LISP:T COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))))))))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'EVERY))
COMMON-LISP:NIL
COMMON-LISP:NIL
COMMON-LISP:NIL
COMMON-LISP:NIL
COMMON-LISP:NIL
COMMON-LISP:NIL
COMMON-LISP:NIL
COMMON-LISP:NIL
COMMON-LISP:NIL
COMMON-LISP:NIL
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'DOT-EXPAND-MAKE-EXPR (CONS (CONS 'WHICH (CONS 'NUM (CONS 'X COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (PROGN (DEFUN DOT-EXPAND-MAKE-EXPR (WHICH NUM X) (BLOCK DOT-EXPAND-MAKE-EXPR (BLOCK COMMON-LISP:NIL (? (< 0 NUM) (CONS WHICH (CONS (DOT-EXPAND-MAKE-EXPR WHICH (-- NUM) X) COMMON-LISP:NIL)) X)))) (SETF (GETHASH #'DOT-EXPAND-MAKE-EXPR *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'WHICH (CONS 'NUM (CONS 'X COMMON-LISP:NIL))) (CONS (CONS 'BLOCK (CONS 'DOT-EXPAND-MAKE-EXPR (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS '? (CONS (CONS '< (CONS 0 (CONS 'NUM COMMON-LISP:NIL))) (CONS (CONS 'BACKQUOTE (CONS (CONS (CONS 'QUASIQUOTE (CONS 'WHICH COMMON-LISP:NIL)) (CONS (CONS 'QUASIQUOTE (CONS (CONS 'DOT-EXPAND-MAKE-EXPR (CONS 'WHICH (CONS (CONS '-- (CONS 'NUM COMMON-LISP:NIL)) (CONS 'X COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS 'X COMMON-LISP:NIL)))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'DOT-EXPAND-MAKE-EXPR))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'DOT-EXPAND-HEAD-LENGTH (CONS (CONS 'X (CONS '&OPTIONAL (CONS (CONS 'NUM (CONS 0 COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (PROGN (DEFUN DOT-EXPAND-HEAD-LENGTH (X &OPTIONAL (NUM 0)) (BLOCK DOT-EXPAND-HEAD-LENGTH (BLOCK COMMON-LISP:NIL (? (== #\. (CAR X)) (DOT-EXPAND-HEAD-LENGTH (CDR X) (++ NUM)) (VALUES NUM X))))) (SETF (GETHASH #'DOT-EXPAND-HEAD-LENGTH *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X (CONS '&OPTIONAL (CONS (CONS 'NUM (CONS 0 COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'BLOCK (CONS 'DOT-EXPAND-HEAD-LENGTH (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS '? (CONS (CONS '== (CONS #\. (CONS (CONS 'CAR (CONS 'X COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'DOT-EXPAND-HEAD-LENGTH (CONS (CONS 'CDR (CONS 'X COMMON-LISP:NIL)) (CONS (CONS '++ (CONS 'NUM COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'VALUES (CONS 'NUM (CONS 'X COMMON-LISP:NIL))) COMMON-LISP:NIL)))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'DOT-EXPAND-HEAD-LENGTH))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'DOT-EXPAND-TAIL-LENGTH (CONS (CONS 'X (CONS '&OPTIONAL (CONS (CONS 'NUM (CONS 0 COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (PROGN (DEFUN DOT-EXPAND-TAIL-LENGTH (X &OPTIONAL (NUM 0)) (BLOCK DOT-EXPAND-TAIL-LENGTH (BLOCK COMMON-LISP:NIL (? (== #\. (CAR (LAST X))) (DOT-EXPAND-TAIL-LENGTH (BUTLAST X) (++ NUM)) (VALUES NUM X))))) (SETF (GETHASH #'DOT-EXPAND-TAIL-LENGTH *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X (CONS '&OPTIONAL (CONS (CONS 'NUM (CONS 0 COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'BLOCK (CONS 'DOT-EXPAND-TAIL-LENGTH (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS '? (CONS (CONS '== (CONS #\. (CONS (CONS 'CAR (CONS (CONS 'LAST (CONS 'X COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'DOT-EXPAND-TAIL-LENGTH (CONS (CONS 'BUTLAST (CONS 'X COMMON-LISP:NIL)) (CONS (CONS '++ (CONS 'NUM COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'VALUES (CONS 'NUM (CONS 'X COMMON-LISP:NIL))) COMMON-LISP:NIL)))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'DOT-EXPAND-TAIL-LENGTH))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'DOT-EXPAND-LIST (CONS (CONS 'X COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN DOT-EXPAND-LIST (X) (BLOCK DOT-EXPAND-LIST (BLOCK COMMON-LISP:NIL (LABELS ((G4181 (~G1550) (LABELS ((G4182 (~G1551) (? (NOT (EQ (CAR ~G1550) 'VALUES)) (PROGN (ERROR "VALUES expected instead of ~A." ~G1550))) (LABELS ((G4183 (NUM-CDRS) (LABELS ((G4184 (~G1552) (LABELS ((G4185 (WITHOUT-START) (LABELS ((G4186 (~G1556) (LABELS ((G4187 (~G1557) (? (NOT (EQ (CAR ~G1556) 'VALUES)) (PROGN (ERROR "VALUES expected instead of ~A." ~G1556))) (LABELS ((G4188 (NUM-CARS) (LABELS ((G4189 (~G1558) (LABELS ((G4190 (WITHOUT-END) (DOT-EXPAND-MAKE-EXPR 'CAR NUM-CARS (DOT-EXPAND-MAKE-EXPR 'CDR NUM-CDRS (DOT-EXPAND (LIST-SYMBOL WITHOUT-END)))))) (G4190 (CAR ~G1558))))) (G4189 (LABELS ((G4191 (~G1560) (? ~G1560 ~G1560 (%ERROR "Not enough VALUES.")))) (G4191 (CDR ~G1557))))))) (G4188 (CAR ~G1557))))) (G4187 (CDR ~G1556))))) (G4186 (DOT-EXPAND-TAIL-LENGTH WITHOUT-START))))) (G4185 (CAR ~G1552))))) (G4184 (LABELS ((G4192 (~G1555) (? ~G1555 ~G1555 (%ERROR "Not enough VALUES.")))) (G4192 (CDR ~G1551))))))) (G4183 (CAR ~G1551))))) (G4182 (CDR ~G1550))))) (G4181 (DOT-EXPAND-HEAD-LENGTH X)))))) (SETF (GETHASH #'DOT-EXPAND-LIST *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'DOT-EXPAND-LIST (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'LET* (CONS (CONS (CONS '~G1550 (CONS (CONS 'DOT-EXPAND-HEAD-LENGTH (CONS 'X COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS '~G1551 (CONS (CONS 'CDR (CONS '~G1550 COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'UNLESS (CONS (CONS 'EQ (CONS (CONS 'CAR (CONS '~G1550 COMMON-LISP:NIL)) (CONS (CONS 'QUOTE (CONS 'VALUES COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'ERROR (CONS "VALUES expected instead of ~A." (CONS '~G1550 COMMON-LISP:NIL))) COMMON-LISP:NIL))) (CONS (CONS 'LET* (CONS (CONS (CONS 'NUM-CDRS (CONS (CONS 'CAR (CONS '~G1551 COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS '~G1552 (CONS (CONS '|\|| (CONS (CONS 'CDR (CONS '~G1551 COMMON-LISP:NIL)) (CONS (CONS '%ERROR (CONS "Not enough VALUES." COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'LET* (CONS (CONS (CONS 'WITHOUT-START (CONS (CONS 'CAR (CONS '~G1552 COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL) (CONS (CONS 'MULTIPLE-VALUE-BIND (CONS (CONS 'NUM-CARS (CONS 'WITHOUT-END COMMON-LISP:NIL)) (CONS (CONS 'DOT-EXPAND-TAIL-LENGTH (CONS 'WITHOUT-START COMMON-LISP:NIL)) (CONS (CONS 'DOT-EXPAND-MAKE-EXPR (CONS (CONS 'QUOTE (CONS 'CAR COMMON-LISP:NIL)) (CONS 'NUM-CARS (CONS (CONS 'DOT-EXPAND-MAKE-EXPR (CONS (CONS 'QUOTE (CONS 'CDR COMMON-LISP:NIL)) (CONS 'NUM-CDRS (CONS (CONS 'DOT-EXPAND (CONS (CONS 'LIST-SYMBOL (CONS 'WITHOUT-END COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)))) COMMON-LISP:NIL)))) COMMON-LISP:NIL)))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'DOT-EXPAND-LIST))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'DOT-POSITION (CONS (CONS 'X COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN DOT-POSITION (X) (BLOCK DOT-POSITION (BLOCK COMMON-LISP:NIL (POSITION #\. X :TEST #'==)))) (SETF (GETHASH #'DOT-POSITION *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'DOT-POSITION (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'POSITION (CONS #\. (CONS 'X (CONS ':TEST (CONS (CONS 'FUNCTION (CONS '== COMMON-LISP:NIL)) COMMON-LISP:NIL))))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'DOT-POSITION))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'NO-DOT-NOTATION? (CONS (CONS 'X COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN NO-DOT-NOTATION? (X) (BLOCK NO-DOT-NOTATION? (BLOCK COMMON-LISP:NIL (LABELS ((G4193 (SL) (LABELS ((G4194 (L) (LABELS ((G4195 (P) (LABELS ((G4196 (~G1545) (? ~G1545 ~G1545 (NOT P)))) (G4196 (== 1 L))))) (G4195 (DOT-POSITION SL))))) (G4194 (LENGTH SL))))) (G4193 (STRING-LIST (SYMBOL-NAME X))))))) (SETF (GETHASH #'NO-DOT-NOTATION? *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'NO-DOT-NOTATION? (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS 'SL COMMON-LISP:NIL) (CONS (CONS 'LET (CONS 'L (CONS (CONS 'LENGTH (CONS 'SL COMMON-LISP:NIL)) (CONS (CONS 'WITH (CONS (CONS 'P (CONS (CONS 'DOT-POSITION (CONS 'SL COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS '~G1545 COMMON-LISP:NIL) (CONS (CONS '? (CONS '~G1545 (CONS '~G1545 (CONS (CONS 'NOT (CONS 'P COMMON-LISP:NIL)) COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS '== (CONS 1 (CONS 'L COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'STRING-LIST (CONS (CONS 'SYMBOL-NAME (CONS 'X COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'NO-DOT-NOTATION?))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'HAS-DOT-NOTATION? (CONS (CONS 'X COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN HAS-DOT-NOTATION? (X) (BLOCK HAS-DOT-NOTATION? (BLOCK COMMON-LISP:NIL (LABELS ((G4197 (SL) (LABELS ((G4198 (~G1546) (? ~G1546 ~G1546 (== #\. (CAR (LAST SL)))))) (G4198 (== #\. (CAR SL)))))) (G4197 (STRING-LIST (SYMBOL-NAME X))))))) (SETF (GETHASH #'HAS-DOT-NOTATION? *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'HAS-DOT-NOTATION? (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS 'SL COMMON-LISP:NIL) (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS '~G1546 COMMON-LISP:NIL) (CONS (CONS '? (CONS '~G1546 (CONS '~G1546 (CONS (CONS '== (CONS #\. (CONS (CONS 'CAR (CONS (CONS 'LAST (CONS 'SL COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS '== (CONS #\. (CONS (CONS 'CAR (CONS 'SL COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'STRING-LIST (CONS (CONS 'SYMBOL-NAME (CONS 'X COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'HAS-DOT-NOTATION?))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'DOT-EXPAND-CONV (CONS (CONS 'X COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN DOT-EXPAND-CONV (X) (BLOCK DOT-EXPAND-CONV (BLOCK COMMON-LISP:NIL (LABELS ((G4199 (SL) (LABELS ((G4200 (P) (? (NO-DOT-NOTATION? X) X (HAS-DOT-NOTATION? X) (DOT-EXPAND-LIST SL) (CONS '%SLOT-VALUE (CONS (LIST-SYMBOL (SUBSEQ SL 0 P)) (CONS (DOT-EXPAND-CONV (LIST-SYMBOL (SUBSEQ SL (++ P)))) COMMON-LISP:NIL)))))) (G4200 (DOT-POSITION SL))))) (G4199 (STRING-LIST (SYMBOL-NAME X))))))) (SETF (GETHASH #'DOT-EXPAND-CONV *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'DOT-EXPAND-CONV (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS 'SL COMMON-LISP:NIL) (CONS (CONS 'LET (CONS 'P (CONS (CONS 'DOT-POSITION (CONS 'SL COMMON-LISP:NIL)) (CONS (CONS '? (CONS (CONS 'NO-DOT-NOTATION? (CONS 'X COMMON-LISP:NIL)) (CONS 'X (CONS (CONS 'HAS-DOT-NOTATION? (CONS 'X COMMON-LISP:NIL)) (CONS (CONS 'DOT-EXPAND-LIST (CONS 'SL COMMON-LISP:NIL)) (CONS (CONS 'BACKQUOTE (CONS (CONS '%SLOT-VALUE (CONS (CONS 'QUASIQUOTE (CONS (CONS 'LIST-SYMBOL (CONS (CONS 'SUBSEQ (CONS 'SL (CONS 0 (CONS 'P COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'QUASIQUOTE (CONS (CONS 'DOT-EXPAND-CONV (CONS (CONS 'LIST-SYMBOL (CONS (CONS 'SUBSEQ (CONS 'SL (CONS (CONS '++ (CONS 'P COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL)))))) COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'STRING-LIST (CONS (CONS 'SYMBOL-NAME (CONS 'X COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'DOT-EXPAND-CONV))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'DOT-EXPAND (CONS (CONS 'X COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN DOT-EXPAND (X) (BLOCK DOT-EXPAND (BLOCK COMMON-LISP:NIL (LABELS ((LABEL? (_) (NOT (LABELS ((G4201 (~G1547) (? ~G1547 ~G1547 (LABELS ((G4202 (~G1548) (? ~G1548 ~G1548 (STRING? _)))) (G4202 (NUMBER? _)))))) (G4201 (CONS? _)))))) (? X (PROGN (? (LABEL? X) (DOT-EXPAND-CONV X) (CONS? X) (PROGN (LABELS ((G4203 (~G1554) (LABELS ((G4204 (!) (? ! (PROGN (PROGN (SETQ *DEFAULT-LISTPROP* !)))))) (G4204 (? (CONS? ~G1554) (CPR ~G1554)))))) (G4203 X)) (LABELS ((G4205 (~G1549) (RPLACP (CONS (DOT-EXPAND (CAR X)) (DOT-EXPAND (CDR X))) ~G1549))) (G4205 *DEFAULT-LISTPROP*))) X))))))) (SETF (GETHASH #'DOT-EXPAND *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'DOT-EXPAND (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'LABELS (CONS (CONS (CONS 'LABEL? (CONS (CONS '_ COMMON-LISP:NIL) (CONS (CONS 'NOT (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS '~G1547 COMMON-LISP:NIL) (CONS (CONS '? (CONS '~G1547 (CONS '~G1547 (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS '~G1548 COMMON-LISP:NIL) (CONS (CONS '? (CONS '~G1548 (CONS '~G1548 (CONS (CONS 'STRING? (CONS '_ COMMON-LISP:NIL)) COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'NUMBER? (CONS '_ COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'CONS? (CONS '_ COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL) (CONS (CONS '? (CONS 'X (CONS (CONS 'PROGN (CONS (CONS '? (CONS (CONS 'LABEL? (CONS 'X COMMON-LISP:NIL)) (CONS (CONS 'DOT-EXPAND-CONV (CONS 'X COMMON-LISP:NIL)) (CONS (CONS 'CONS? (CONS 'X COMMON-LISP:NIL)) (CONS (CONS 'PROGN (CONS (CONS 'LET (CONS '~G1554 (CONS 'X (CONS (CONS 'AWHEN (CONS (CONS '& (CONS (CONS 'CONS? (CONS '~G1554 COMMON-LISP:NIL)) (CONS (CONS 'CPR (CONS '~G1554 COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS '= (CONS '*DEFAULT-LISTPROP* (CONS '! COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS '~G1549 COMMON-LISP:NIL) (CONS (CONS 'RPLACP (CONS (CONS 'CONS (CONS (CONS 'DOT-EXPAND (CONS (CONS 'CAR (CONS 'X COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'DOT-EXPAND (CONS (CONS 'CDR (CONS 'X COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS '~G1549 COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS '*DEFAULT-LISTPROP* COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS 'X COMMON-LISP:NIL)))))) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'DOT-EXPAND))
(PROGN (SETQ *DOTEXPAND-HOOK* #'DOT-EXPAND))
(%DEFVAR *MEMORIZED-NUMBERS* (MAKE-HASH-TABLE :TEST #'==))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'MEMORIZED-NUMBER (CONS (CONS 'X COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN MEMORIZED-NUMBER (X) (BLOCK MEMORIZED-NUMBER (BLOCK COMMON-LISP:NIL (LABELS ((G4206 (~G1561) (? ~G1561 ~G1561 (PROGN (=-HREF X *MEMORIZED-NUMBERS* X))))) (G4206 (HREF *MEMORIZED-NUMBERS* X)))))) (SETF (GETHASH #'MEMORIZED-NUMBER *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'MEMORIZED-NUMBER (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'LET (CONS '~G1561 (CONS (CONS 'HREF (CONS '*MEMORIZED-NUMBERS* (CONS 'X COMMON-LISP:NIL))) (CONS (CONS '? (CONS '~G1561 (CONS '~G1561 (CONS (CONS 'PROGN (CONS (CONS '=-HREF (CONS 'X (CONS '*MEMORIZED-NUMBERS* (CONS 'X COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL)))) COMMON-LISP:NIL)))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'MEMORIZED-NUMBER))
(%DEFVAR *TERPRI* (STRING (CODE-CHAR 10)))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'TERPRI (CONS (CONS '&OPTIONAL (CONS (CONS 'STR (CONS '*STANDARD-OUTPUT* COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)))) (PROGN (DEFUN TERPRI (&OPTIONAL (STR *STANDARD-OUTPUT*)) (BLOCK TERPRI (BLOCK COMMON-LISP:NIL (LABELS ((G4207 (~G1562) (LABELS ((G4208 (S) (LABELS ((G4209 (~G1563) (? ~G1562 ~G1563 (GET-STREAM-STRING S)))) (G4209 (PROGN (STREAM-PRINC (CODE-CHAR 10) S) (FORCE-OUTPUT S) COMMON-LISP:NIL))))) (G4208 (DEFAULT-STREAM ~G1562))))) (G4207 STR))))) (SETF (GETHASH #'TERPRI *FUNCTION-ATOM-SOURCES*) (CONS (CONS '&OPTIONAL (CONS (CONS 'STR (CONS '*STANDARD-OUTPUT* COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'BLOCK (CONS 'TERPRI (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'LET (CONS '~G1562 (CONS 'STR (CONS (CONS 'WITH (CONS (CONS 'S (CONS (CONS 'DEFAULT-STREAM (CONS '~G1562 COMMON-LISP:NIL)) (CONS '~G1563 (CONS (CONS 'PROGN (CONS (CONS 'STREAM-PRINC (CONS (CONS 'CODE-CHAR (CONS 10 COMMON-LISP:NIL)) (CONS 'S COMMON-LISP:NIL))) (CONS (CONS 'FORCE-OUTPUT (CONS 'S COMMON-LISP:NIL)) (CONS COMMON-LISP:NIL COMMON-LISP:NIL)))) COMMON-LISP:NIL)))) (CONS (CONS '? (CONS '~G1562 (CONS '~G1563 (CONS (CONS 'GET-STREAM-STRING (CONS 'S COMMON-LISP:NIL)) COMMON-LISP:NIL)))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'TERPRI))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'FRESH-LINE (CONS (CONS '&OPTIONAL (CONS (CONS 'STR (CONS '*STANDARD-OUTPUT* COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)))) (PROGN (DEFUN FRESH-LINE (&OPTIONAL (STR *STANDARD-OUTPUT*)) (BLOCK FRESH-LINE (BLOCK COMMON-LISP:NIL (LABELS ((G4210 (~G1564) (LABELS ((G4211 (S) (LABELS ((G4212 (~G1565) (? ~G1564 ~G1565 (GET-STREAM-STRING S)))) (G4212 (PROGN (? (NOT (FRESH-LINE? S)) (PROGN (TERPRI S) COMMON-LISP:T))))))) (G4211 (DEFAULT-STREAM ~G1564))))) (G4210 STR))))) (SETF (GETHASH #'FRESH-LINE *FUNCTION-ATOM-SOURCES*) (CONS (CONS '&OPTIONAL (CONS (CONS 'STR (CONS '*STANDARD-OUTPUT* COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'BLOCK (CONS 'FRESH-LINE (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'LET (CONS '~G1564 (CONS 'STR (CONS (CONS 'WITH (CONS (CONS 'S (CONS (CONS 'DEFAULT-STREAM (CONS '~G1564 COMMON-LISP:NIL)) (CONS '~G1565 (CONS (CONS 'PROGN (CONS (CONS '? (CONS (CONS 'NOT (CONS (CONS 'FRESH-LINE? (CONS 'S COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'PROGN (CONS (CONS 'TERPRI (CONS 'S COMMON-LISP:NIL)) (CONS COMMON-LISP:T COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL)))) (CONS (CONS '? (CONS '~G1564 (CONS '~G1565 (CONS (CONS 'GET-STREAM-STRING (CONS 'S COMMON-LISP:NIL)) COMMON-LISP:NIL)))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'FRESH-LINE))
(%DEFVAR *DEFAULT-STREAM-TABSIZE* 8)
(PROGN COMMON-LISP:NIL (BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'MAKE-STREAM-LOCATION (CONS (CONS '&KEY (CONS (CONS 'TRACK? (CONS (CONS 'QUOTE (CONS 'TRACK? COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'ID (CONS (CONS 'QUOTE (CONS 'ID COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'LINE (CONS (CONS 'QUOTE (CONS 'LINE COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'COLUMN (CONS (CONS 'QUOTE (CONS 'COLUMN COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'TABSIZE (CONS (CONS 'QUOTE (CONS 'TABSIZE COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)))))) COMMON-LISP:NIL)))) (PROGN (DEFUN MAKE-STREAM-LOCATION (&KEY (TRACK? 'TRACK?) (ID 'ID) (LINE 'LINE) (COLUMN 'COLUMN) (TABSIZE 'TABSIZE)) (BLOCK MAKE-STREAM-LOCATION (BLOCK COMMON-LISP:NIL (LABELS ((G4213 (~G1566) (PROGN (=-AREF 'STRUCT ~G1566 0) (=-AREF 'STREAM-LOCATION ~G1566 1)) (PROGN (=-AREF (? (EQ TRACK? 'TRACK?) COMMON-LISP:T TRACK?) ~G1566 2)) (PROGN (=-AREF (? (EQ ID 'ID) COMMON-LISP:NIL ID) ~G1566 3)) (PROGN (=-AREF (? (EQ LINE 'LINE) 1 LINE) ~G1566 4)) (PROGN (=-AREF (? (EQ COLUMN 'COLUMN) 1 COLUMN) ~G1566 5)) (PROGN (=-AREF (? (EQ TABSIZE 'TABSIZE) *DEFAULT-STREAM-TABSIZE* TABSIZE) ~G1566 6)) ~G1566)) (G4213 (MAKE-ARRAY 7)))))) (SETF (GETHASH #'MAKE-STREAM-LOCATION *FUNCTION-ATOM-SOURCES*) (CONS (CONS '&KEY (CONS (CONS 'TRACK? (CONS (CONS 'QUOTE (CONS 'TRACK? COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'ID (CONS (CONS 'QUOTE (CONS 'ID COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'LINE (CONS (CONS 'QUOTE (CONS 'LINE COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'COLUMN (CONS (CONS 'QUOTE (CONS 'COLUMN COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'TABSIZE (CONS (CONS 'QUOTE (CONS 'TABSIZE COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)))))) (CONS (CONS 'BLOCK (CONS 'MAKE-STREAM-LOCATION (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS '~G1566 COMMON-LISP:NIL) (CONS (CONS 'PROGN (CONS (CONS '=-AREF (CONS (CONS 'QUOTE (CONS 'STRUCT COMMON-LISP:NIL)) (CONS '~G1566 (CONS 0 COMMON-LISP:NIL)))) (CONS (CONS '=-AREF (CONS (CONS 'QUOTE (CONS 'STREAM-LOCATION COMMON-LISP:NIL)) (CONS '~G1566 (CONS 1 COMMON-LISP:NIL)))) COMMON-LISP:NIL))) (CONS (CONS 'PROGN (CONS (CONS '=-AREF (CONS (CONS '? (CONS (CONS 'EQ (CONS 'TRACK? (CONS (CONS 'QUOTE (CONS 'TRACK? COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS COMMON-LISP:T (CONS 'TRACK? COMMON-LISP:NIL)))) (CONS '~G1566 (CONS 2 COMMON-LISP:NIL)))) COMMON-LISP:NIL)) (CONS (CONS 'PROGN (CONS (CONS '=-AREF (CONS (CONS '? (CONS (CONS 'EQ (CONS 'ID (CONS (CONS 'QUOTE (CONS 'ID COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS COMMON-LISP:NIL (CONS 'ID COMMON-LISP:NIL)))) (CONS '~G1566 (CONS 3 COMMON-LISP:NIL)))) COMMON-LISP:NIL)) (CONS (CONS 'PROGN (CONS (CONS '=-AREF (CONS (CONS '? (CONS (CONS 'EQ (CONS 'LINE (CONS (CONS 'QUOTE (CONS 'LINE COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS 1 (CONS 'LINE COMMON-LISP:NIL)))) (CONS '~G1566 (CONS 4 COMMON-LISP:NIL)))) COMMON-LISP:NIL)) (CONS (CONS 'PROGN (CONS (CONS '=-AREF (CONS (CONS '? (CONS (CONS 'EQ (CONS 'COLUMN (CONS (CONS 'QUOTE (CONS 'COLUMN COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS 1 (CONS 'COLUMN COMMON-LISP:NIL)))) (CONS '~G1566 (CONS 5 COMMON-LISP:NIL)))) COMMON-LISP:NIL)) (CONS (CONS 'PROGN (CONS (CONS '=-AREF (CONS (CONS '? (CONS (CONS 'EQ (CONS 'TABSIZE (CONS (CONS 'QUOTE (CONS 'TABSIZE COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS '*DEFAULT-STREAM-TABSIZE* (CONS 'TABSIZE COMMON-LISP:NIL)))) (CONS '~G1566 (CONS 6 COMMON-LISP:NIL)))) COMMON-LISP:NIL)) (CONS '~G1566 COMMON-LISP:NIL)))))))) COMMON-LISP:NIL)) (CONS (CONS 'MAKE-ARRAY (CONS 7 COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'MAKE-STREAM-LOCATION)) (BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'STREAM-LOCATION? (CONS (CONS 'X COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN STREAM-LOCATION? (X) (BLOCK STREAM-LOCATION? (BLOCK COMMON-LISP:NIL (? (ARRAY? X) (? (EQ 'STRUCT (AREF X 0)) (EQ 'STREAM-LOCATION (AREF X 1))))))) (SETF (GETHASH #'STREAM-LOCATION? *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'STREAM-LOCATION? (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS '? (CONS (CONS 'ARRAY? (CONS 'X COMMON-LISP:NIL)) (CONS (CONS '? (CONS (CONS 'EQ (CONS (CONS 'QUOTE (CONS 'STRUCT COMMON-LISP:NIL)) (CONS (CONS 'AREF (CONS 'X (CONS 0 COMMON-LISP:NIL))) COMMON-LISP:NIL))) (CONS (CONS 'EQ (CONS (CONS 'QUOTE (CONS 'STREAM-LOCATION COMMON-LISP:NIL)) (CONS (CONS 'AREF (CONS 'X (CONS 1 COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'STREAM-LOCATION?)) (PROGN (PROGN (SETQ *FUNCTIONALS* (%NCONC (CONS 'STREAM-LOCATION-TRACK? COMMON-LISP:NIL) *FUNCTIONALS*))) COMMON-LISP:NIL (BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'STREAM-LOCATION-TRACK? (CONS (CONS 'ARR COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN STREAM-LOCATION-TRACK? (ARR) (BLOCK STREAM-LOCATION-TRACK? (BLOCK COMMON-LISP:NIL (AREF ARR 2)))) (SETF (GETHASH #'STREAM-LOCATION-TRACK? *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'ARR COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'STREAM-LOCATION-TRACK? (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'AREF (CONS 'ARR (CONS 2 COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'STREAM-LOCATION-TRACK?)) (BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS '=-STREAM-LOCATION-TRACK? (CONS (CONS 'VAL (CONS 'ARR COMMON-LISP:NIL)) COMMON-LISP:NIL)))) (PROGN (DEFUN =-STREAM-LOCATION-TRACK? (VAL ARR) (BLOCK =-STREAM-LOCATION-TRACK? (BLOCK COMMON-LISP:NIL (PROGN (=-AREF VAL ARR 2))))) (SETF (GETHASH #'=-STREAM-LOCATION-TRACK? *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'VAL (CONS 'ARR COMMON-LISP:NIL)) (CONS (CONS 'BLOCK (CONS '=-STREAM-LOCATION-TRACK? (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'PROGN (CONS (CONS '=-AREF (CONS 'VAL (CONS 'ARR (CONS 2 COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL '=-STREAM-LOCATION-TRACK?))) (PROGN (PROGN (SETQ *FUNCTIONALS* (%NCONC (CONS 'STREAM-LOCATION-ID COMMON-LISP:NIL) *FUNCTIONALS*))) COMMON-LISP:NIL (BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'STREAM-LOCATION-ID (CONS (CONS 'ARR COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN STREAM-LOCATION-ID (ARR) (BLOCK STREAM-LOCATION-ID (BLOCK COMMON-LISP:NIL (AREF ARR 3)))) (SETF (GETHASH #'STREAM-LOCATION-ID *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'ARR COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'STREAM-LOCATION-ID (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'AREF (CONS 'ARR (CONS 3 COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'STREAM-LOCATION-ID)) (BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS '=-STREAM-LOCATION-ID (CONS (CONS 'VAL (CONS 'ARR COMMON-LISP:NIL)) COMMON-LISP:NIL)))) (PROGN (DEFUN =-STREAM-LOCATION-ID (VAL ARR) (BLOCK =-STREAM-LOCATION-ID (BLOCK COMMON-LISP:NIL (PROGN (=-AREF VAL ARR 3))))) (SETF (GETHASH #'=-STREAM-LOCATION-ID *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'VAL (CONS 'ARR COMMON-LISP:NIL)) (CONS (CONS 'BLOCK (CONS '=-STREAM-LOCATION-ID (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'PROGN (CONS (CONS '=-AREF (CONS 'VAL (CONS 'ARR (CONS 3 COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL '=-STREAM-LOCATION-ID))) (PROGN (PROGN (SETQ *FUNCTIONALS* (%NCONC (CONS 'STREAM-LOCATION-LINE COMMON-LISP:NIL) *FUNCTIONALS*))) COMMON-LISP:NIL (BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'STREAM-LOCATION-LINE (CONS (CONS 'ARR COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN STREAM-LOCATION-LINE (ARR) (BLOCK STREAM-LOCATION-LINE (BLOCK COMMON-LISP:NIL (AREF ARR 4)))) (SETF (GETHASH #'STREAM-LOCATION-LINE *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'ARR COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'STREAM-LOCATION-LINE (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'AREF (CONS 'ARR (CONS 4 COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'STREAM-LOCATION-LINE)) (BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS '=-STREAM-LOCATION-LINE (CONS (CONS 'VAL (CONS 'ARR COMMON-LISP:NIL)) COMMON-LISP:NIL)))) (PROGN (DEFUN =-STREAM-LOCATION-LINE (VAL ARR) (BLOCK =-STREAM-LOCATION-LINE (BLOCK COMMON-LISP:NIL (PROGN (=-AREF VAL ARR 4))))) (SETF (GETHASH #'=-STREAM-LOCATION-LINE *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'VAL (CONS 'ARR COMMON-LISP:NIL)) (CONS (CONS 'BLOCK (CONS '=-STREAM-LOCATION-LINE (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'PROGN (CONS (CONS '=-AREF (CONS 'VAL (CONS 'ARR (CONS 4 COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL '=-STREAM-LOCATION-LINE))) (PROGN (PROGN (SETQ *FUNCTIONALS* (%NCONC (CONS 'STREAM-LOCATION-COLUMN COMMON-LISP:NIL) *FUNCTIONALS*))) COMMON-LISP:NIL (BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'STREAM-LOCATION-COLUMN (CONS (CONS 'ARR COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN STREAM-LOCATION-COLUMN (ARR) (BLOCK STREAM-LOCATION-COLUMN (BLOCK COMMON-LISP:NIL (AREF ARR 5)))) (SETF (GETHASH #'STREAM-LOCATION-COLUMN *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'ARR COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'STREAM-LOCATION-COLUMN (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'AREF (CONS 'ARR (CONS 5 COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'STREAM-LOCATION-COLUMN)) (BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS '=-STREAM-LOCATION-COLUMN (CONS (CONS 'VAL (CONS 'ARR COMMON-LISP:NIL)) COMMON-LISP:NIL)))) (PROGN (DEFUN =-STREAM-LOCATION-COLUMN (VAL ARR) (BLOCK =-STREAM-LOCATION-COLUMN (BLOCK COMMON-LISP:NIL (PROGN (=-AREF VAL ARR 5))))) (SETF (GETHASH #'=-STREAM-LOCATION-COLUMN *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'VAL (CONS 'ARR COMMON-LISP:NIL)) (CONS (CONS 'BLOCK (CONS '=-STREAM-LOCATION-COLUMN (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'PROGN (CONS (CONS '=-AREF (CONS 'VAL (CONS 'ARR (CONS 5 COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL '=-STREAM-LOCATION-COLUMN))) (PROGN (PROGN (SETQ *FUNCTIONALS* (%NCONC (CONS 'STREAM-LOCATION-TABSIZE COMMON-LISP:NIL) *FUNCTIONALS*))) COMMON-LISP:NIL (BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'STREAM-LOCATION-TABSIZE (CONS (CONS 'ARR COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN STREAM-LOCATION-TABSIZE (ARR) (BLOCK STREAM-LOCATION-TABSIZE (BLOCK COMMON-LISP:NIL (AREF ARR 6)))) (SETF (GETHASH #'STREAM-LOCATION-TABSIZE *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'ARR COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'STREAM-LOCATION-TABSIZE (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'AREF (CONS 'ARR (CONS 6 COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'STREAM-LOCATION-TABSIZE)) (BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS '=-STREAM-LOCATION-TABSIZE (CONS (CONS 'VAL (CONS 'ARR COMMON-LISP:NIL)) COMMON-LISP:NIL)))) (PROGN (DEFUN =-STREAM-LOCATION-TABSIZE (VAL ARR) (BLOCK =-STREAM-LOCATION-TABSIZE (BLOCK COMMON-LISP:NIL (PROGN (=-AREF VAL ARR 6))))) (SETF (GETHASH #'=-STREAM-LOCATION-TABSIZE *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'VAL (CONS 'ARR COMMON-LISP:NIL)) (CONS (CONS 'BLOCK (CONS '=-STREAM-LOCATION-TABSIZE (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'PROGN (CONS (CONS '=-AREF (CONS 'VAL (CONS 'ARR (CONS 6 COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL '=-STREAM-LOCATION-TABSIZE))) (BLOCK COMMON-LISP:NIL (%DEFMACRO WITH-STREAM-LOCATION (S &REST BODY) (BLOCK WITH-STREAM-LOCATION (CONS 'WITH-STRUCT (CONS 'STREAM-LOCATION (CONS S BODY)))))) (BLOCK COMMON-LISP:NIL (%DEFMACRO DEF-STREAM-LOCATION (NAME ARGS &REST BODY) (BLOCK DEF-STREAM-LOCATION (CONS 'DEFUN (CONS NAME (CONS ARGS (CONS (CONS 'WITH-STRUCT (CONS 'STREAM-LOCATION (CONS 'STREAM-LOCATION BODY))) COMMON-LISP:NIL))))))))
(PROGN COMMON-LISP:NIL (BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'MAKE-STREAM (CONS (CONS '&KEY (CONS (CONS 'HANDLE (CONS (CONS 'QUOTE (CONS 'HANDLE COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'FUN-IN (CONS (CONS 'QUOTE (CONS 'FUN-IN COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'FUN-OUT (CONS (CONS 'QUOTE (CONS 'FUN-OUT COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'FUN-EOF (CONS (CONS 'QUOTE (CONS 'FUN-EOF COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'LAST-CHAR (CONS (CONS 'QUOTE (CONS 'LAST-CHAR COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'PEEKED-CHAR (CONS (CONS 'QUOTE (CONS 'PEEKED-CHAR COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'INPUT-LOCATION (CONS (CONS 'QUOTE (CONS 'INPUT-LOCATION COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'OUTPUT-LOCATION (CONS (CONS 'QUOTE (CONS 'OUTPUT-LOCATION COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'USER-DETAIL (CONS (CONS 'QUOTE (CONS 'USER-DETAIL COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)))))))))) COMMON-LISP:NIL)))) (PROGN (DEFUN MAKE-STREAM (&KEY (HANDLE 'HANDLE) (FUN-IN 'FUN-IN) (FUN-OUT 'FUN-OUT) (FUN-EOF 'FUN-EOF) (LAST-CHAR 'LAST-CHAR) (PEEKED-CHAR 'PEEKED-CHAR) (INPUT-LOCATION 'INPUT-LOCATION) (OUTPUT-LOCATION 'OUTPUT-LOCATION) (USER-DETAIL 'USER-DETAIL)) (BLOCK MAKE-STREAM (BLOCK COMMON-LISP:NIL (LABELS ((G4214 (~G1567) (PROGN (=-AREF 'STRUCT ~G1567 0) (=-AREF 'STREAM ~G1567 1)) (PROGN (=-AREF (? (EQ HANDLE 'HANDLE) COMMON-LISP:NIL HANDLE) ~G1567 2)) (PROGN (=-AREF (? (EQ FUN-IN 'FUN-IN) COMMON-LISP:NIL FUN-IN) ~G1567 3)) (PROGN (=-AREF (? (EQ FUN-OUT 'FUN-OUT) COMMON-LISP:NIL FUN-OUT) ~G1567 4)) (PROGN (=-AREF (? (EQ FUN-EOF 'FUN-EOF) COMMON-LISP:NIL FUN-EOF) ~G1567 5)) (PROGN (=-AREF (? (EQ LAST-CHAR 'LAST-CHAR) COMMON-LISP:NIL LAST-CHAR) ~G1567 6)) (PROGN (=-AREF (? (EQ PEEKED-CHAR 'PEEKED-CHAR) COMMON-LISP:NIL PEEKED-CHAR) ~G1567 7)) (PROGN (=-AREF (? (EQ INPUT-LOCATION 'INPUT-LOCATION) (MAKE-STREAM-LOCATION) INPUT-LOCATION) ~G1567 8)) (PROGN (=-AREF (? (EQ OUTPUT-LOCATION 'OUTPUT-LOCATION) (MAKE-STREAM-LOCATION :TRACK? COMMON-LISP:NIL) OUTPUT-LOCATION) ~G1567 9)) (PROGN (=-AREF (? (EQ USER-DETAIL 'USER-DETAIL) COMMON-LISP:NIL USER-DETAIL) ~G1567 10)) ~G1567)) (G4214 (MAKE-ARRAY 11)))))) (SETF (GETHASH #'MAKE-STREAM *FUNCTION-ATOM-SOURCES*) (CONS (CONS '&KEY (CONS (CONS 'HANDLE (CONS (CONS 'QUOTE (CONS 'HANDLE COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'FUN-IN (CONS (CONS 'QUOTE (CONS 'FUN-IN COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'FUN-OUT (CONS (CONS 'QUOTE (CONS 'FUN-OUT COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'FUN-EOF (CONS (CONS 'QUOTE (CONS 'FUN-EOF COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'LAST-CHAR (CONS (CONS 'QUOTE (CONS 'LAST-CHAR COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'PEEKED-CHAR (CONS (CONS 'QUOTE (CONS 'PEEKED-CHAR COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'INPUT-LOCATION (CONS (CONS 'QUOTE (CONS 'INPUT-LOCATION COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'OUTPUT-LOCATION (CONS (CONS 'QUOTE (CONS 'OUTPUT-LOCATION COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'USER-DETAIL (CONS (CONS 'QUOTE (CONS 'USER-DETAIL COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)))))))))) (CONS (CONS 'BLOCK (CONS 'MAKE-STREAM (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS '~G1567 COMMON-LISP:NIL) (CONS (CONS 'PROGN (CONS (CONS '=-AREF (CONS (CONS 'QUOTE (CONS 'STRUCT COMMON-LISP:NIL)) (CONS '~G1567 (CONS 0 COMMON-LISP:NIL)))) (CONS (CONS '=-AREF (CONS (CONS 'QUOTE (CONS 'STREAM COMMON-LISP:NIL)) (CONS '~G1567 (CONS 1 COMMON-LISP:NIL)))) COMMON-LISP:NIL))) (CONS (CONS 'PROGN (CONS (CONS '=-AREF (CONS (CONS '? (CONS (CONS 'EQ (CONS 'HANDLE (CONS (CONS 'QUOTE (CONS 'HANDLE COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS COMMON-LISP:NIL (CONS 'HANDLE COMMON-LISP:NIL)))) (CONS '~G1567 (CONS 2 COMMON-LISP:NIL)))) COMMON-LISP:NIL)) (CONS (CONS 'PROGN (CONS (CONS '=-AREF (CONS (CONS '? (CONS (CONS 'EQ (CONS 'FUN-IN (CONS (CONS 'QUOTE (CONS 'FUN-IN COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS COMMON-LISP:NIL (CONS 'FUN-IN COMMON-LISP:NIL)))) (CONS '~G1567 (CONS 3 COMMON-LISP:NIL)))) COMMON-LISP:NIL)) (CONS (CONS 'PROGN (CONS (CONS '=-AREF (CONS (CONS '? (CONS (CONS 'EQ (CONS 'FUN-OUT (CONS (CONS 'QUOTE (CONS 'FUN-OUT COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS COMMON-LISP:NIL (CONS 'FUN-OUT COMMON-LISP:NIL)))) (CONS '~G1567 (CONS 4 COMMON-LISP:NIL)))) COMMON-LISP:NIL)) (CONS (CONS 'PROGN (CONS (CONS '=-AREF (CONS (CONS '? (CONS (CONS 'EQ (CONS 'FUN-EOF (CONS (CONS 'QUOTE (CONS 'FUN-EOF COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS COMMON-LISP:NIL (CONS 'FUN-EOF COMMON-LISP:NIL)))) (CONS '~G1567 (CONS 5 COMMON-LISP:NIL)))) COMMON-LISP:NIL)) (CONS (CONS 'PROGN (CONS (CONS '=-AREF (CONS (CONS '? (CONS (CONS 'EQ (CONS 'LAST-CHAR (CONS (CONS 'QUOTE (CONS 'LAST-CHAR COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS COMMON-LISP:NIL (CONS 'LAST-CHAR COMMON-LISP:NIL)))) (CONS '~G1567 (CONS 6 COMMON-LISP:NIL)))) COMMON-LISP:NIL)) (CONS (CONS 'PROGN (CONS (CONS '=-AREF (CONS (CONS '? (CONS (CONS 'EQ (CONS 'PEEKED-CHAR (CONS (CONS 'QUOTE (CONS 'PEEKED-CHAR COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS COMMON-LISP:NIL (CONS 'PEEKED-CHAR COMMON-LISP:NIL)))) (CONS '~G1567 (CONS 7 COMMON-LISP:NIL)))) COMMON-LISP:NIL)) (CONS (CONS 'PROGN (CONS (CONS '=-AREF (CONS (CONS '? (CONS (CONS 'EQ (CONS 'INPUT-LOCATION (CONS (CONS 'QUOTE (CONS 'INPUT-LOCATION COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'MAKE-STREAM-LOCATION COMMON-LISP:NIL) (CONS 'INPUT-LOCATION COMMON-LISP:NIL)))) (CONS '~G1567 (CONS 8 COMMON-LISP:NIL)))) COMMON-LISP:NIL)) (CONS (CONS 'PROGN (CONS (CONS '=-AREF (CONS (CONS '? (CONS (CONS 'EQ (CONS 'OUTPUT-LOCATION (CONS (CONS 'QUOTE (CONS 'OUTPUT-LOCATION COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'MAKE-STREAM-LOCATION (CONS ':TRACK? (CONS COMMON-LISP:NIL COMMON-LISP:NIL))) (CONS 'OUTPUT-LOCATION COMMON-LISP:NIL)))) (CONS '~G1567 (CONS 9 COMMON-LISP:NIL)))) COMMON-LISP:NIL)) (CONS (CONS 'PROGN (CONS (CONS '=-AREF (CONS (CONS '? (CONS (CONS 'EQ (CONS 'USER-DETAIL (CONS (CONS 'QUOTE (CONS 'USER-DETAIL COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS COMMON-LISP:NIL (CONS 'USER-DETAIL COMMON-LISP:NIL)))) (CONS '~G1567 (CONS 10 COMMON-LISP:NIL)))) COMMON-LISP:NIL)) (CONS '~G1567 COMMON-LISP:NIL)))))))))))) COMMON-LISP:NIL)) (CONS (CONS 'MAKE-ARRAY (CONS 11 COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'MAKE-STREAM)) (BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'STREAM? (CONS (CONS 'X COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN STREAM? (X) (BLOCK STREAM? (BLOCK COMMON-LISP:NIL (? (ARRAY? X) (? (EQ 'STRUCT (AREF X 0)) (EQ 'STREAM (AREF X 1))))))) (SETF (GETHASH #'STREAM? *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'STREAM? (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS '? (CONS (CONS 'ARRAY? (CONS 'X COMMON-LISP:NIL)) (CONS (CONS '? (CONS (CONS 'EQ (CONS (CONS 'QUOTE (CONS 'STRUCT COMMON-LISP:NIL)) (CONS (CONS 'AREF (CONS 'X (CONS 0 COMMON-LISP:NIL))) COMMON-LISP:NIL))) (CONS (CONS 'EQ (CONS (CONS 'QUOTE (CONS 'STREAM COMMON-LISP:NIL)) (CONS (CONS 'AREF (CONS 'X (CONS 1 COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'STREAM?)) (PROGN (PROGN (SETQ *FUNCTIONALS* (%NCONC (CONS 'STREAM-HANDLE COMMON-LISP:NIL) *FUNCTIONALS*))) COMMON-LISP:NIL (BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'STREAM-HANDLE (CONS (CONS 'ARR COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN STREAM-HANDLE (ARR) (BLOCK STREAM-HANDLE (BLOCK COMMON-LISP:NIL (AREF ARR 2)))) (SETF (GETHASH #'STREAM-HANDLE *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'ARR COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'STREAM-HANDLE (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'AREF (CONS 'ARR (CONS 2 COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'STREAM-HANDLE)) (BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS '=-STREAM-HANDLE (CONS (CONS 'VAL (CONS 'ARR COMMON-LISP:NIL)) COMMON-LISP:NIL)))) (PROGN (DEFUN =-STREAM-HANDLE (VAL ARR) (BLOCK =-STREAM-HANDLE (BLOCK COMMON-LISP:NIL (PROGN (=-AREF VAL ARR 2))))) (SETF (GETHASH #'=-STREAM-HANDLE *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'VAL (CONS 'ARR COMMON-LISP:NIL)) (CONS (CONS 'BLOCK (CONS '=-STREAM-HANDLE (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'PROGN (CONS (CONS '=-AREF (CONS 'VAL (CONS 'ARR (CONS 2 COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL '=-STREAM-HANDLE))) (PROGN (PROGN (SETQ *FUNCTIONALS* (%NCONC (CONS 'STREAM-FUN-IN COMMON-LISP:NIL) *FUNCTIONALS*))) COMMON-LISP:NIL (BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'STREAM-FUN-IN (CONS (CONS 'ARR COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN STREAM-FUN-IN (ARR) (BLOCK STREAM-FUN-IN (BLOCK COMMON-LISP:NIL (AREF ARR 3)))) (SETF (GETHASH #'STREAM-FUN-IN *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'ARR COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'STREAM-FUN-IN (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'AREF (CONS 'ARR (CONS 3 COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'STREAM-FUN-IN)) (BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS '=-STREAM-FUN-IN (CONS (CONS 'VAL (CONS 'ARR COMMON-LISP:NIL)) COMMON-LISP:NIL)))) (PROGN (DEFUN =-STREAM-FUN-IN (VAL ARR) (BLOCK =-STREAM-FUN-IN (BLOCK COMMON-LISP:NIL (PROGN (=-AREF VAL ARR 3))))) (SETF (GETHASH #'=-STREAM-FUN-IN *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'VAL (CONS 'ARR COMMON-LISP:NIL)) (CONS (CONS 'BLOCK (CONS '=-STREAM-FUN-IN (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'PROGN (CONS (CONS '=-AREF (CONS 'VAL (CONS 'ARR (CONS 3 COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL '=-STREAM-FUN-IN))) (PROGN (PROGN (SETQ *FUNCTIONALS* (%NCONC (CONS 'STREAM-FUN-OUT COMMON-LISP:NIL) *FUNCTIONALS*))) COMMON-LISP:NIL (BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'STREAM-FUN-OUT (CONS (CONS 'ARR COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN STREAM-FUN-OUT (ARR) (BLOCK STREAM-FUN-OUT (BLOCK COMMON-LISP:NIL (AREF ARR 4)))) (SETF (GETHASH #'STREAM-FUN-OUT *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'ARR COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'STREAM-FUN-OUT (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'AREF (CONS 'ARR (CONS 4 COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'STREAM-FUN-OUT)) (BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS '=-STREAM-FUN-OUT (CONS (CONS 'VAL (CONS 'ARR COMMON-LISP:NIL)) COMMON-LISP:NIL)))) (PROGN (DEFUN =-STREAM-FUN-OUT (VAL ARR) (BLOCK =-STREAM-FUN-OUT (BLOCK COMMON-LISP:NIL (PROGN (=-AREF VAL ARR 4))))) (SETF (GETHASH #'=-STREAM-FUN-OUT *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'VAL (CONS 'ARR COMMON-LISP:NIL)) (CONS (CONS 'BLOCK (CONS '=-STREAM-FUN-OUT (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'PROGN (CONS (CONS '=-AREF (CONS 'VAL (CONS 'ARR (CONS 4 COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL '=-STREAM-FUN-OUT))) (PROGN (PROGN (SETQ *FUNCTIONALS* (%NCONC (CONS 'STREAM-FUN-EOF COMMON-LISP:NIL) *FUNCTIONALS*))) COMMON-LISP:NIL (BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'STREAM-FUN-EOF (CONS (CONS 'ARR COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN STREAM-FUN-EOF (ARR) (BLOCK STREAM-FUN-EOF (BLOCK COMMON-LISP:NIL (AREF ARR 5)))) (SETF (GETHASH #'STREAM-FUN-EOF *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'ARR COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'STREAM-FUN-EOF (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'AREF (CONS 'ARR (CONS 5 COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'STREAM-FUN-EOF)) (BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS '=-STREAM-FUN-EOF (CONS (CONS 'VAL (CONS 'ARR COMMON-LISP:NIL)) COMMON-LISP:NIL)))) (PROGN (DEFUN =-STREAM-FUN-EOF (VAL ARR) (BLOCK =-STREAM-FUN-EOF (BLOCK COMMON-LISP:NIL (PROGN (=-AREF VAL ARR 5))))) (SETF (GETHASH #'=-STREAM-FUN-EOF *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'VAL (CONS 'ARR COMMON-LISP:NIL)) (CONS (CONS 'BLOCK (CONS '=-STREAM-FUN-EOF (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'PROGN (CONS (CONS '=-AREF (CONS 'VAL (CONS 'ARR (CONS 5 COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL '=-STREAM-FUN-EOF))) (PROGN (PROGN (SETQ *FUNCTIONALS* (%NCONC (CONS 'STREAM-LAST-CHAR COMMON-LISP:NIL) *FUNCTIONALS*))) COMMON-LISP:NIL (BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'STREAM-LAST-CHAR (CONS (CONS 'ARR COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN STREAM-LAST-CHAR (ARR) (BLOCK STREAM-LAST-CHAR (BLOCK COMMON-LISP:NIL (AREF ARR 6)))) (SETF (GETHASH #'STREAM-LAST-CHAR *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'ARR COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'STREAM-LAST-CHAR (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'AREF (CONS 'ARR (CONS 6 COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'STREAM-LAST-CHAR)) (BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS '=-STREAM-LAST-CHAR (CONS (CONS 'VAL (CONS 'ARR COMMON-LISP:NIL)) COMMON-LISP:NIL)))) (PROGN (DEFUN =-STREAM-LAST-CHAR (VAL ARR) (BLOCK =-STREAM-LAST-CHAR (BLOCK COMMON-LISP:NIL (PROGN (=-AREF VAL ARR 6))))) (SETF (GETHASH #'=-STREAM-LAST-CHAR *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'VAL (CONS 'ARR COMMON-LISP:NIL)) (CONS (CONS 'BLOCK (CONS '=-STREAM-LAST-CHAR (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'PROGN (CONS (CONS '=-AREF (CONS 'VAL (CONS 'ARR (CONS 6 COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL '=-STREAM-LAST-CHAR))) (PROGN (PROGN (SETQ *FUNCTIONALS* (%NCONC (CONS 'STREAM-PEEKED-CHAR COMMON-LISP:NIL) *FUNCTIONALS*))) COMMON-LISP:NIL (BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'STREAM-PEEKED-CHAR (CONS (CONS 'ARR COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN STREAM-PEEKED-CHAR (ARR) (BLOCK STREAM-PEEKED-CHAR (BLOCK COMMON-LISP:NIL (AREF ARR 7)))) (SETF (GETHASH #'STREAM-PEEKED-CHAR *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'ARR COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'STREAM-PEEKED-CHAR (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'AREF (CONS 'ARR (CONS 7 COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'STREAM-PEEKED-CHAR)) (BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS '=-STREAM-PEEKED-CHAR (CONS (CONS 'VAL (CONS 'ARR COMMON-LISP:NIL)) COMMON-LISP:NIL)))) (PROGN (DEFUN =-STREAM-PEEKED-CHAR (VAL ARR) (BLOCK =-STREAM-PEEKED-CHAR (BLOCK COMMON-LISP:NIL (PROGN (=-AREF VAL ARR 7))))) (SETF (GETHASH #'=-STREAM-PEEKED-CHAR *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'VAL (CONS 'ARR COMMON-LISP:NIL)) (CONS (CONS 'BLOCK (CONS '=-STREAM-PEEKED-CHAR (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'PROGN (CONS (CONS '=-AREF (CONS 'VAL (CONS 'ARR (CONS 7 COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL '=-STREAM-PEEKED-CHAR))) (PROGN (PROGN (SETQ *FUNCTIONALS* (%NCONC (CONS 'STREAM-INPUT-LOCATION COMMON-LISP:NIL) *FUNCTIONALS*))) COMMON-LISP:NIL (BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'STREAM-INPUT-LOCATION (CONS (CONS 'ARR COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN STREAM-INPUT-LOCATION (ARR) (BLOCK STREAM-INPUT-LOCATION (BLOCK COMMON-LISP:NIL (AREF ARR 8)))) (SETF (GETHASH #'STREAM-INPUT-LOCATION *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'ARR COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'STREAM-INPUT-LOCATION (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'AREF (CONS 'ARR (CONS 8 COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'STREAM-INPUT-LOCATION)) (BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS '=-STREAM-INPUT-LOCATION (CONS (CONS 'VAL (CONS 'ARR COMMON-LISP:NIL)) COMMON-LISP:NIL)))) (PROGN (DEFUN =-STREAM-INPUT-LOCATION (VAL ARR) (BLOCK =-STREAM-INPUT-LOCATION (BLOCK COMMON-LISP:NIL (PROGN (=-AREF VAL ARR 8))))) (SETF (GETHASH #'=-STREAM-INPUT-LOCATION *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'VAL (CONS 'ARR COMMON-LISP:NIL)) (CONS (CONS 'BLOCK (CONS '=-STREAM-INPUT-LOCATION (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'PROGN (CONS (CONS '=-AREF (CONS 'VAL (CONS 'ARR (CONS 8 COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL '=-STREAM-INPUT-LOCATION))) (PROGN (PROGN (SETQ *FUNCTIONALS* (%NCONC (CONS 'STREAM-OUTPUT-LOCATION COMMON-LISP:NIL) *FUNCTIONALS*))) COMMON-LISP:NIL (BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'STREAM-OUTPUT-LOCATION (CONS (CONS 'ARR COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN STREAM-OUTPUT-LOCATION (ARR) (BLOCK STREAM-OUTPUT-LOCATION (BLOCK COMMON-LISP:NIL (AREF ARR 9)))) (SETF (GETHASH #'STREAM-OUTPUT-LOCATION *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'ARR COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'STREAM-OUTPUT-LOCATION (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'AREF (CONS 'ARR (CONS 9 COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'STREAM-OUTPUT-LOCATION)) (BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS '=-STREAM-OUTPUT-LOCATION (CONS (CONS 'VAL (CONS 'ARR COMMON-LISP:NIL)) COMMON-LISP:NIL)))) (PROGN (DEFUN =-STREAM-OUTPUT-LOCATION (VAL ARR) (BLOCK =-STREAM-OUTPUT-LOCATION (BLOCK COMMON-LISP:NIL (PROGN (=-AREF VAL ARR 9))))) (SETF (GETHASH #'=-STREAM-OUTPUT-LOCATION *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'VAL (CONS 'ARR COMMON-LISP:NIL)) (CONS (CONS 'BLOCK (CONS '=-STREAM-OUTPUT-LOCATION (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'PROGN (CONS (CONS '=-AREF (CONS 'VAL (CONS 'ARR (CONS 9 COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL '=-STREAM-OUTPUT-LOCATION))) (PROGN (PROGN (SETQ *FUNCTIONALS* (%NCONC (CONS 'STREAM-USER-DETAIL COMMON-LISP:NIL) *FUNCTIONALS*))) COMMON-LISP:NIL (BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'STREAM-USER-DETAIL (CONS (CONS 'ARR COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN STREAM-USER-DETAIL (ARR) (BLOCK STREAM-USER-DETAIL (BLOCK COMMON-LISP:NIL (AREF ARR 10)))) (SETF (GETHASH #'STREAM-USER-DETAIL *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'ARR COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'STREAM-USER-DETAIL (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'AREF (CONS 'ARR (CONS 10 COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'STREAM-USER-DETAIL)) (BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS '=-STREAM-USER-DETAIL (CONS (CONS 'VAL (CONS 'ARR COMMON-LISP:NIL)) COMMON-LISP:NIL)))) (PROGN (DEFUN =-STREAM-USER-DETAIL (VAL ARR) (BLOCK =-STREAM-USER-DETAIL (BLOCK COMMON-LISP:NIL (PROGN (=-AREF VAL ARR 10))))) (SETF (GETHASH #'=-STREAM-USER-DETAIL *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'VAL (CONS 'ARR COMMON-LISP:NIL)) (CONS (CONS 'BLOCK (CONS '=-STREAM-USER-DETAIL (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'PROGN (CONS (CONS '=-AREF (CONS 'VAL (CONS 'ARR (CONS 10 COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL '=-STREAM-USER-DETAIL))) (BLOCK COMMON-LISP:NIL (%DEFMACRO WITH-STREAM (S &REST BODY) (BLOCK WITH-STREAM (CONS 'WITH-STRUCT (CONS 'STREAM (CONS S BODY)))))) (BLOCK COMMON-LISP:NIL (%DEFMACRO DEF-STREAM (NAME ARGS &REST BODY) (BLOCK DEF-STREAM (CONS 'DEFUN (CONS NAME (CONS ARGS (CONS (CONS 'WITH-STRUCT (CONS 'STREAM (CONS 'STREAM BODY))) COMMON-LISP:NIL))))))))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'NEXT-TABULATOR-COLUMN (CONS (CONS 'COLUMN (CONS 'SIZE COMMON-LISP:NIL)) COMMON-LISP:NIL)))) (PROGN (DEFUN NEXT-TABULATOR-COLUMN (COLUMN SIZE) (BLOCK NEXT-TABULATOR-COLUMN (BLOCK COMMON-LISP:NIL (++ (* SIZE (++ (INTEGER (/ (-- COLUMN) SIZE)))))))) (SETF (GETHASH #'NEXT-TABULATOR-COLUMN *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'COLUMN (CONS 'SIZE COMMON-LISP:NIL)) (CONS (CONS 'BLOCK (CONS 'NEXT-TABULATOR-COLUMN (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS '++ (CONS (CONS '* (CONS 'SIZE (CONS (CONS '++ (CONS (CONS 'INTEGER (CONS (CONS '/ (CONS (CONS '-- (CONS 'COLUMN COMMON-LISP:NIL)) (CONS 'SIZE COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'NEXT-TABULATOR-COLUMN))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS '%TRACK-LOCATION (CONS (CONS 'STREAM-LOCATION (CONS 'X COMMON-LISP:NIL)) COMMON-LISP:NIL)))) (PROGN (DEFUN %TRACK-LOCATION (STREAM-LOCATION X) (BLOCK %TRACK-LOCATION (BLOCK COMMON-LISP:NIL (LABELS ((G4215 (STREAM-LOCATION) (LABELS ((G4216 (TRACK?) (LABELS ((G4217 (ID) (LABELS ((G4218 (LINE) (LABELS ((G4219 (COLUMN) (LABELS ((G4220 (TABSIZE) TRACK? ID LINE COLUMN TABSIZE (? TRACK? (PROGN (? (STRING? X) (BLOCK COMMON-LISP:NIL (LABELS ((G4221 (~G1570) (LABELS ((G4222 (!) (TAGBODY ~G1568 (? (NOT ~G1570) (GO ~G1569)) (SETQ ! (CAR ~G1570)) (%TRACK-LOCATION STREAM-LOCATION !) (SETQ ~G1570 (CDR ~G1570)) (GO ~G1568) ~G1569 (RETURN-FROM COMMON-LISP:NIL (PROGN COMMON-LISP:NIL))))) (G4222 COMMON-LISP:NIL)))) (G4221 (STRING-LIST X)))) (? X (PROGN (? (== 10 X) (PROGN (PROGN (=-STREAM-LOCATION-COLUMN 1 STREAM-LOCATION)) (PROGN (=-STREAM-LOCATION-LINE (NUMBER+ (STREAM-LOCATION-LINE STREAM-LOCATION) 1) STREAM-LOCATION))) (? (== 9 X) (PROGN (=-STREAM-LOCATION-COLUMN (NEXT-TABULATOR-COLUMN COLUMN TABSIZE) STREAM-LOCATION)) (< 31 X) (PROGN (=-STREAM-LOCATION-COLUMN (NUMBER+ (STREAM-LOCATION-COLUMN STREAM-LOCATION) 1) STREAM-LOCATION))))))))) X)) (G4220 (STREAM-LOCATION-TABSIZE STREAM-LOCATION))))) (G4219 (STREAM-LOCATION-COLUMN STREAM-LOCATION))))) (G4218 (STREAM-LOCATION-LINE STREAM-LOCATION))))) (G4217 (STREAM-LOCATION-ID STREAM-LOCATION))))) (G4216 (STREAM-LOCATION-TRACK? STREAM-LOCATION))))) (G4215 STREAM-LOCATION))))) (SETF (GETHASH #'%TRACK-LOCATION *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'STREAM-LOCATION (CONS 'X COMMON-LISP:NIL)) (CONS (CONS 'BLOCK (CONS '%TRACK-LOCATION (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'LET (CONS 'STREAM-LOCATION (CONS 'STREAM-LOCATION (CONS (CONS 'LET* (CONS (CONS (CONS 'TRACK? (CONS (CONS 'STREAM-LOCATION-TRACK? (CONS 'STREAM-LOCATION COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'ID (CONS (CONS 'STREAM-LOCATION-ID (CONS 'STREAM-LOCATION COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'LINE (CONS (CONS 'STREAM-LOCATION-LINE (CONS 'STREAM-LOCATION COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'COLUMN (CONS (CONS 'STREAM-LOCATION-COLUMN (CONS 'STREAM-LOCATION COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'TABSIZE (CONS (CONS 'STREAM-LOCATION-TABSIZE (CONS 'STREAM-LOCATION COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))))) (CONS 'TRACK? (CONS 'ID (CONS 'LINE (CONS 'COLUMN (CONS 'TABSIZE (CONS (CONS '? (CONS 'TRACK? (CONS (CONS 'PROGN (CONS (CONS '? (CONS (CONS 'STRING? (CONS 'X COMMON-LISP:NIL)) (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'LET (CONS '~G1570 (CONS (CONS 'STRING-LIST (CONS 'X COMMON-LISP:NIL)) (CONS (CONS 'LET* (CONS (CONS (CONS '! (CONS COMMON-LISP:NIL COMMON-LISP:NIL)) COMMON-LISP:NIL) (CONS (CONS 'TAGBODY (CONS '~G1568 (CONS (CONS '? (CONS (CONS 'NOT (CONS '~G1570 COMMON-LISP:NIL)) (CONS (CONS 'GO (CONS '~G1569 COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'SETQ (CONS '! (CONS (CONS 'CAR (CONS '~G1570 COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS '%TRACK-LOCATION (CONS 'STREAM-LOCATION (CONS '! COMMON-LISP:NIL))) (CONS (CONS 'SETQ (CONS '~G1570 (CONS (CONS 'CDR (CONS '~G1570 COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'GO (CONS '~G1568 COMMON-LISP:NIL)) (CONS '~G1569 (CONS (CONS 'RETURN-FROM (CONS COMMON-LISP:NIL (CONS (CONS 'PROGN (CONS COMMON-LISP:NIL COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))))))))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) COMMON-LISP:NIL))) (CONS (CONS '? (CONS 'X (CONS (CONS 'PROGN (CONS (CONS '? (CONS (CONS '== (CONS 10 (CONS 'X COMMON-LISP:NIL))) (CONS (CONS 'PROGN (CONS (CONS 'PROGN (CONS (CONS '=-STREAM-LOCATION-COLUMN (CONS 1 (CONS 'STREAM-LOCATION COMMON-LISP:NIL))) COMMON-LISP:NIL)) (CONS (CONS 'PROGN (CONS (CONS '=-STREAM-LOCATION-LINE (CONS (CONS 'NUMBER+ (CONS (CONS 'STREAM-LOCATION-LINE (CONS 'STREAM-LOCATION COMMON-LISP:NIL)) (CONS 1 COMMON-LISP:NIL))) (CONS 'STREAM-LOCATION COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS '? (CONS (CONS '== (CONS 9 (CONS 'X COMMON-LISP:NIL))) (CONS (CONS 'PROGN (CONS (CONS '=-STREAM-LOCATION-COLUMN (CONS (CONS 'NEXT-TABULATOR-COLUMN (CONS 'COLUMN (CONS 'TABSIZE COMMON-LISP:NIL))) (CONS 'STREAM-LOCATION COMMON-LISP:NIL))) COMMON-LISP:NIL)) (CONS (CONS '< (CONS 31 (CONS 'X COMMON-LISP:NIL))) (CONS (CONS 'PROGN (CONS (CONS '=-STREAM-LOCATION-COLUMN (CONS (CONS 'NUMBER+ (CONS (CONS 'STREAM-LOCATION-COLUMN (CONS 'STREAM-LOCATION COMMON-LISP:NIL)) (CONS 1 COMMON-LISP:NIL))) (CONS 'STREAM-LOCATION COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL))))) COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS 'X COMMON-LISP:NIL))))))))) COMMON-LISP:NIL)))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL '%TRACK-LOCATION))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'STREAM-PRINC (CONS (CONS 'X (CONS 'STR COMMON-LISP:NIL)) COMMON-LISP:NIL)))) (PROGN (DEFUN STREAM-PRINC (X STR) (BLOCK STREAM-PRINC (BLOCK COMMON-LISP:NIL (? (CONS? X) (BLOCK COMMON-LISP:NIL (LABELS ((G4223 (~G1573) (LABELS ((G4224 (!) (TAGBODY ~G1571 (? (NOT ~G1573) (GO ~G1572)) (SETQ ! (CAR ~G1573)) (STREAM-PRINC ! STR) (SETQ ~G1573 (CDR ~G1573)) (GO ~G1571) ~G1572 (RETURN-FROM COMMON-LISP:NIL (PROGN X))))) (G4224 COMMON-LISP:NIL)))) (G4223 X))) (? (NOT (? (STRING? X) (ZERO? (LENGTH X)))) (PROGN (PROGN (=-STREAM-LAST-CHAR (? (STRING? X) (ELT X (-- (LENGTH X))) X) STR)) (%TRACK-LOCATION (STREAM-OUTPUT-LOCATION STR) X) (FUNCALL (STREAM-FUN-OUT STR) X STR))))))) (SETF (GETHASH #'STREAM-PRINC *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X (CONS 'STR COMMON-LISP:NIL)) (CONS (CONS 'BLOCK (CONS 'STREAM-PRINC (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS '? (CONS (CONS 'CONS? (CONS 'X COMMON-LISP:NIL)) (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'LET* (CONS (CONS (CONS '~G1573 (CONS 'X COMMON-LISP:NIL)) (CONS (CONS '! (CONS COMMON-LISP:NIL COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'TAGBODY (CONS '~G1571 (CONS (CONS '? (CONS (CONS 'NOT (CONS '~G1573 COMMON-LISP:NIL)) (CONS (CONS 'GO (CONS '~G1572 COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'SETQ (CONS '! (CONS (CONS 'CAR (CONS '~G1573 COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'STREAM-PRINC (CONS '! (CONS 'STR COMMON-LISP:NIL))) (CONS (CONS 'SETQ (CONS '~G1573 (CONS (CONS 'CDR (CONS '~G1573 COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'GO (CONS '~G1571 COMMON-LISP:NIL)) (CONS '~G1572 (CONS (CONS 'RETURN (CONS (CONS 'PROGN (CONS 'X COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))))))))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) (CONS (CONS '& (CONS (CONS 'NOT (CONS (CONS '? (CONS (CONS 'STRING? (CONS 'X COMMON-LISP:NIL)) (CONS (CONS 'ZERO? (CONS (CONS 'LENGTH (CONS 'X COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL)) (CONS (CONS 'PROGN (CONS (CONS 'PROGN (CONS (CONS '=-STREAM-LAST-CHAR (CONS (CONS '? (CONS (CONS 'STRING? (CONS 'X COMMON-LISP:NIL)) (CONS (CONS 'ELT (CONS 'X (CONS (CONS '-- (CONS (CONS 'LENGTH (CONS 'X COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS 'X COMMON-LISP:NIL)))) (CONS 'STR COMMON-LISP:NIL))) COMMON-LISP:NIL)) (CONS (CONS '%TRACK-LOCATION (CONS (CONS 'STREAM-OUTPUT-LOCATION (CONS 'STR COMMON-LISP:NIL)) (CONS 'X COMMON-LISP:NIL))) (CONS (CONS 'FUNCALL (CONS (CONS 'STREAM-FUN-OUT (CONS 'STR COMMON-LISP:NIL)) (CONS 'X (CONS 'STR COMMON-LISP:NIL)))) COMMON-LISP:NIL)))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'STREAM-PRINC))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'READ-PEEKED-CHAR (CONS (CONS 'STR COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN READ-PEEKED-CHAR (STR) (BLOCK READ-PEEKED-CHAR (BLOCK COMMON-LISP:NIL (LABELS ((G4225 (!) (? ! (PROGN (PROGN (=-STREAM-PEEKED-CHAR COMMON-LISP:NIL STR)) !)))) (G4225 (STREAM-PEEKED-CHAR STR)))))) (SETF (GETHASH #'READ-PEEKED-CHAR *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'STR COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'READ-PEEKED-CHAR (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS '! COMMON-LISP:NIL) (CONS (CONS '& (CONS '! (CONS (CONS 'PROGN (CONS (CONS 'PROGN (CONS (CONS '=-STREAM-PEEKED-CHAR (CONS COMMON-LISP:NIL (CONS 'STR COMMON-LISP:NIL))) COMMON-LISP:NIL)) (CONS '! COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'STREAM-PEEKED-CHAR (CONS 'STR COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'READ-PEEKED-CHAR))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'READ-CHAR-0 (CONS (CONS 'STR COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN READ-CHAR-0 (STR) (BLOCK READ-CHAR-0 (BLOCK COMMON-LISP:NIL (LABELS ((G4226 (~G1574) (? ~G1574 ~G1574 (PROGN (=-STREAM-LAST-CHAR (FUNCALL (STREAM-FUN-IN STR) STR) STR))))) (G4226 (READ-PEEKED-CHAR STR)))))) (SETF (GETHASH #'READ-CHAR-0 *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'STR COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'READ-CHAR-0 (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS '~G1574 COMMON-LISP:NIL) (CONS (CONS '? (CONS '~G1574 (CONS '~G1574 (CONS (CONS 'PROGN (CONS (CONS '=-STREAM-LAST-CHAR (CONS (CONS 'FUNCALL (CONS (CONS 'STREAM-FUN-IN (CONS 'STR COMMON-LISP:NIL)) (CONS 'STR COMMON-LISP:NIL))) (CONS 'STR COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'READ-PEEKED-CHAR (CONS 'STR COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'READ-CHAR-0))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'READ-CHAR (CONS (CONS '&OPTIONAL (CONS (CONS 'STR (CONS '*STANDARD-INPUT* COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)))) (PROGN (DEFUN READ-CHAR (&OPTIONAL (STR *STANDARD-INPUT*)) (BLOCK READ-CHAR (BLOCK COMMON-LISP:NIL (%TRACK-LOCATION (STREAM-INPUT-LOCATION STR) (READ-CHAR-0 STR))))) (SETF (GETHASH #'READ-CHAR *FUNCTION-ATOM-SOURCES*) (CONS (CONS '&OPTIONAL (CONS (CONS 'STR (CONS '*STANDARD-INPUT* COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'BLOCK (CONS 'READ-CHAR (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS '%TRACK-LOCATION (CONS (CONS 'STREAM-INPUT-LOCATION (CONS 'STR COMMON-LISP:NIL)) (CONS (CONS 'READ-CHAR-0 (CONS 'STR COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'READ-CHAR))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'PEEK-CHAR (CONS (CONS '&OPTIONAL (CONS (CONS 'STR (CONS '*STANDARD-INPUT* COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)))) (PROGN (DEFUN PEEK-CHAR (&OPTIONAL (STR *STANDARD-INPUT*)) (BLOCK PEEK-CHAR (BLOCK COMMON-LISP:NIL (LABELS ((G4227 (~G1575) (? ~G1575 ~G1575 (PROGN (=-STREAM-PEEKED-CHAR (READ-CHAR-0 STR) STR))))) (G4227 (STREAM-PEEKED-CHAR STR)))))) (SETF (GETHASH #'PEEK-CHAR *FUNCTION-ATOM-SOURCES*) (CONS (CONS '&OPTIONAL (CONS (CONS 'STR (CONS '*STANDARD-INPUT* COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'BLOCK (CONS 'PEEK-CHAR (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS '~G1575 COMMON-LISP:NIL) (CONS (CONS '? (CONS '~G1575 (CONS '~G1575 (CONS (CONS 'PROGN (CONS (CONS '=-STREAM-PEEKED-CHAR (CONS (CONS 'READ-CHAR-0 (CONS 'STR COMMON-LISP:NIL)) (CONS 'STR COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'STREAM-PEEKED-CHAR (CONS 'STR COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'PEEK-CHAR))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'DEFAULT-STREAM (CONS (CONS 'X COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN DEFAULT-STREAM (X) (BLOCK DEFAULT-STREAM (BLOCK COMMON-LISP:NIL (LABELS ((G4228 (~G1576) (? (EQ ~G1576 COMMON-LISP:NIL) (MAKE-STRING-STREAM) (EQ ~G1576 COMMON-LISP:T) *STANDARD-OUTPUT* X))) (G4228 X))))) (SETF (GETHASH #'DEFAULT-STREAM *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'DEFAULT-STREAM (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS '~G1576 COMMON-LISP:NIL) (CONS (CONS '? (CONS (CONS 'EQ (CONS '~G1576 (CONS COMMON-LISP:NIL COMMON-LISP:NIL))) (CONS (CONS 'MAKE-STRING-STREAM COMMON-LISP:NIL) (CONS (CONS 'EQ (CONS '~G1576 (CONS COMMON-LISP:T COMMON-LISP:NIL))) (CONS '*STANDARD-OUTPUT* (CONS 'X COMMON-LISP:NIL)))))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS 'X COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'DEFAULT-STREAM))
(BLOCK COMMON-LISP:NIL (%DEFMACRO WITH-DEFAULT-STREAM (NSTR STR &REST BODY) (BLOCK WITH-DEFAULT-STREAM (LABELS ((G4229 (G) (LABELS ((G4230 (BODY-RESULT) (CONS 'WITH (CONS (CONS G (CONS STR (CONS NSTR (CONS (CONS 'DEFAULT-STREAM (CONS G COMMON-LISP:NIL)) (CONS BODY-RESULT (CONS (CONS 'PROGN BODY) COMMON-LISP:NIL)))))) (CONS (CONS '? (CONS G (CONS BODY-RESULT (CONS (CONS 'GET-STREAM-STRING (CONS NSTR COMMON-LISP:NIL)) COMMON-LISP:NIL)))) COMMON-LISP:NIL))))) (G4230 (GENSYM))))) (G4229 (GENSYM))))))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'MAKE-STRING-STREAM (CONS COMMON-LISP:NIL COMMON-LISP:NIL)))) (PROGN (DEFUN MAKE-STRING-STREAM COMMON-LISP:NIL (BLOCK MAKE-STRING-STREAM (BLOCK COMMON-LISP:NIL (MAKE-STREAM :USER-DETAIL (MAKE-QUEUE) :FUN-IN #'(LAMBDA (STR) (LABELS ((G4231 (!) (? (STRING? (CAR !)) (PROGN (PROGN (=-STREAM-USER-DETAIL (MAKE-QUEUE) STR)) (ENQUEUE-LIST (STREAM-USER-DETAIL STR) (APPEND (STRING-LIST (CAR !)) (CDR !))))))) (G4231 (QUEUE-LIST (STREAM-USER-DETAIL STR)))) (QUEUE-POP (STREAM-USER-DETAIL STR))) :FUN-OUT #'(LAMBDA (X STR) (ENQUEUE (STREAM-USER-DETAIL STR) X)) :FUN-EOF #'(LAMBDA (STR) (NOT (QUEUE-LIST (STREAM-USER-DETAIL STR)))))))) (SETF (GETHASH #'MAKE-STRING-STREAM *FUNCTION-ATOM-SOURCES*) (CONS COMMON-LISP:NIL (CONS (CONS 'BLOCK (CONS 'MAKE-STRING-STREAM (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'MAKE-STREAM (CONS ':USER-DETAIL (CONS (CONS 'MAKE-QUEUE COMMON-LISP:NIL) (CONS ':FUN-IN (CONS (CONS 'FUNCTION (CONS (CONS (CONS 'STR COMMON-LISP:NIL) (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS '! COMMON-LISP:NIL) (CONS (CONS '? (CONS (CONS 'STRING? (CONS (CONS 'CAR (CONS '! COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'PROGN (CONS (CONS 'PROGN (CONS (CONS '=-STREAM-USER-DETAIL (CONS (CONS 'MAKE-QUEUE COMMON-LISP:NIL) (CONS 'STR COMMON-LISP:NIL))) COMMON-LISP:NIL)) (CONS (CONS 'ENQUEUE-LIST (CONS (CONS 'STREAM-USER-DETAIL (CONS 'STR COMMON-LISP:NIL)) (CONS (CONS 'APPEND (CONS (CONS 'STRING-LIST (CONS (CONS 'CAR (CONS '! COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'CDR (CONS '! COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'QUEUE-LIST (CONS (CONS 'STREAM-USER-DETAIL (CONS 'STR COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'QUEUE-POP (CONS (CONS 'STREAM-USER-DETAIL (CONS 'STR COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL)) (CONS ':FUN-OUT (CONS (CONS 'FUNCTION (CONS (CONS (CONS 'X (CONS 'STR COMMON-LISP:NIL)) (CONS (CONS 'ENQUEUE (CONS (CONS 'STREAM-USER-DETAIL (CONS 'STR COMMON-LISP:NIL)) (CONS 'X COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS ':FUN-EOF (CONS (CONS 'FUNCTION (CONS (CONS (CONS 'STR COMMON-LISP:NIL) (CONS (CONS 'NOT (CONS (CONS 'QUEUE-LIST (CONS (CONS 'STREAM-USER-DETAIL (CONS 'STR COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))))))))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'MAKE-STRING-STREAM))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'GET-STREAM-STRING (CONS (CONS 'STR COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN GET-STREAM-STRING (STR) (BLOCK GET-STREAM-STRING (BLOCK COMMON-LISP:NIL (LABELS ((G4232 (~G1577) (PROGN (=-STREAM-USER-DETAIL (MAKE-QUEUE) STR)) ~G1577)) (G4232 (QUEUE-STRING (STREAM-USER-DETAIL STR))))))) (SETF (GETHASH #'GET-STREAM-STRING *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'STR COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'GET-STREAM-STRING (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS '~G1577 COMMON-LISP:NIL) (CONS (CONS 'PROGN (CONS (CONS '=-STREAM-USER-DETAIL (CONS (CONS 'MAKE-QUEUE COMMON-LISP:NIL) (CONS 'STR COMMON-LISP:NIL))) COMMON-LISP:NIL)) (CONS '~G1577 COMMON-LISP:NIL))) COMMON-LISP:NIL)) (CONS (CONS 'QUEUE-STRING (CONS (CONS 'STREAM-USER-DETAIL (CONS 'STR COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'GET-STREAM-STRING))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'MAKE-STREAM-STREAM (CONS (CONS '&KEY (CONS 'STREAM (CONS (CONS 'INPUT-LOCATION (CONS (CONS 'MAKE-STREAM-LOCATION COMMON-LISP:NIL) COMMON-LISP:NIL)) (CONS (CONS 'OUTPUT-LOCATION (CONS (CONS 'MAKE-STREAM-LOCATION (CONS ':TRACK? (CONS COMMON-LISP:NIL COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL)))) COMMON-LISP:NIL)))) (PROGN (DEFUN MAKE-STREAM-STREAM (&KEY STREAM (INPUT-LOCATION (MAKE-STREAM-LOCATION)) (OUTPUT-LOCATION (MAKE-STREAM-LOCATION :TRACK? COMMON-LISP:NIL))) (BLOCK MAKE-STREAM-STREAM (BLOCK COMMON-LISP:NIL (MAKE-STREAM :HANDLE STREAM :INPUT-LOCATION INPUT-LOCATION :OUTPUT-LOCATION OUTPUT-LOCATION :FUN-IN #'(LAMBDA (_) (%READ-CHAR (STREAM-HANDLE _))) :FUN-OUT #'(LAMBDA (C STR) (%PRINC C (STREAM-HANDLE STR))) :FUN-EOF #'(LAMBDA (_) (%FEOF (STREAM-HANDLE STR))))))) (SETF (GETHASH #'MAKE-STREAM-STREAM *FUNCTION-ATOM-SOURCES*) (CONS (CONS '&KEY (CONS 'STREAM (CONS (CONS 'INPUT-LOCATION (CONS (CONS 'MAKE-STREAM-LOCATION COMMON-LISP:NIL) COMMON-LISP:NIL)) (CONS (CONS 'OUTPUT-LOCATION (CONS (CONS 'MAKE-STREAM-LOCATION (CONS ':TRACK? (CONS COMMON-LISP:NIL COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL)))) (CONS (CONS 'BLOCK (CONS 'MAKE-STREAM-STREAM (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'MAKE-STREAM (CONS ':HANDLE (CONS 'STREAM (CONS ':INPUT-LOCATION (CONS 'INPUT-LOCATION (CONS ':OUTPUT-LOCATION (CONS 'OUTPUT-LOCATION (CONS ':FUN-IN (CONS (CONS 'FUNCTION (CONS (CONS (CONS '_ COMMON-LISP:NIL) (CONS (CONS '%READ-CHAR (CONS (CONS 'STREAM-HANDLE (CONS '_ COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS ':FUN-OUT (CONS (CONS 'FUNCTION (CONS (CONS (CONS 'C (CONS 'STR COMMON-LISP:NIL)) (CONS (CONS '%PRINC (CONS 'C (CONS (CONS 'STREAM-HANDLE (CONS 'STR COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS ':FUN-EOF (CONS (CONS 'FUNCTION (CONS (CONS (CONS '_ COMMON-LISP:NIL) (CONS (CONS '%FEOF (CONS (CONS 'STREAM-HANDLE (CONS 'STR COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))))))))))))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'MAKE-STREAM-STREAM))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS '%FOPEN-DIRECTION (CONS (CONS 'DIRECTION COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN %FOPEN-DIRECTION (DIRECTION) (BLOCK %FOPEN-DIRECTION (BLOCK COMMON-LISP:NIL (LABELS ((G4233 (~G1578) (? (EQUAL ~G1578 'INPUT) "r" (EQUAL ~G1578 'OUTPUT) "w" (EQUAL ~G1578 'APPEND) "a" (ERROR ":DIRECTION isn't specified.")))) (G4233 DIRECTION))))) (SETF (GETHASH #'%FOPEN-DIRECTION *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'DIRECTION COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS '%FOPEN-DIRECTION (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS '~G1578 COMMON-LISP:NIL) (CONS (CONS '? (CONS (CONS 'EQUAL (CONS '~G1578 (CONS (CONS 'QUOTE (CONS 'INPUT COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS "r" (CONS (CONS 'EQUAL (CONS '~G1578 (CONS (CONS 'QUOTE (CONS 'OUTPUT COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS "w" (CONS (CONS 'EQUAL (CONS '~G1578 (CONS (CONS 'QUOTE (CONS 'APPEND COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS "a" (CONS (CONS 'ERROR (CONS ":DIRECTION isn't specified." COMMON-LISP:NIL)) COMMON-LISP:NIL)))))))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS 'DIRECTION COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL '%FOPEN-DIRECTION))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'OPEN (CONS (CONS 'PATH (CONS '&KEY (CONS 'DIRECTION COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (PROGN (DEFUN OPEN (PATH &KEY DIRECTION) (BLOCK OPEN (BLOCK COMMON-LISP:NIL (LABELS ((G4234 (!) (? ! (MAKE-STREAM-STREAM :STREAM ! :INPUT-LOCATION (MAKE-STREAM-LOCATION :ID PATH)) (ERROR "Couldn't open file `~A'." PATH)))) (G4234 (%FOPEN PATH (%FOPEN-DIRECTION DIRECTION))))))) (SETF (GETHASH #'OPEN *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'PATH (CONS '&KEY (CONS 'DIRECTION COMMON-LISP:NIL))) (CONS (CONS 'BLOCK (CONS 'OPEN (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'LET (CONS '! (CONS (CONS '%FOPEN (CONS 'PATH (CONS (CONS '%FOPEN-DIRECTION (CONS 'DIRECTION COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS '? (CONS '! (CONS (CONS 'MAKE-STREAM-STREAM (CONS ':STREAM (CONS '! (CONS ':INPUT-LOCATION (CONS (CONS 'MAKE-STREAM-LOCATION (CONS ':ID (CONS 'PATH COMMON-LISP:NIL))) COMMON-LISP:NIL))))) (CONS (CONS '%!? (CONS (CONS 'ERROR (CONS "Couldn't open file `~A'." (CONS 'PATH COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL)))) COMMON-LISP:NIL)))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'OPEN))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'CLOSE (CONS (CONS 'STR COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN CLOSE (STR) (BLOCK CLOSE (BLOCK COMMON-LISP:NIL (%FCLOSE (STREAM-HANDLE STR))))) (SETF (GETHASH #'CLOSE *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'STR COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'CLOSE (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS '%FCLOSE (CONS (CONS 'STREAM-HANDLE (CONS 'STR COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'CLOSE))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'NUMBER-DIGIT (CONS (CONS 'X COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN NUMBER-DIGIT (X) (BLOCK NUMBER-DIGIT (BLOCK COMMON-LISP:NIL (CODE-CHAR (+ X #\0))))) (SETF (GETHASH #'NUMBER-DIGIT *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'NUMBER-DIGIT (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'CODE-CHAR (CONS (CONS '+ (CONS 'X (CONS #\0 COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'NUMBER-DIGIT))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'INTEGER-CHARS-0 (CONS (CONS 'X COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN INTEGER-CHARS-0 (X) (BLOCK INTEGER-CHARS-0 (BLOCK COMMON-LISP:NIL (LABELS ((G4235 (!) (CONS (NUMBER-DIGIT !) (? (<= 10 X) (INTEGER-CHARS-0 (/ (- X !) 10)))))) (G4235 (INTEGER (MOD X 10))))))) (SETF (GETHASH #'INTEGER-CHARS-0 *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'INTEGER-CHARS-0 (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS '! COMMON-LISP:NIL) (CONS (CONS 'CONS (CONS (CONS 'NUMBER-DIGIT (CONS '! COMMON-LISP:NIL)) (CONS (CONS '? (CONS (CONS '<= (CONS 10 (CONS 'X COMMON-LISP:NIL))) (CONS (CONS 'INTEGER-CHARS-0 (CONS (CONS '/ (CONS (CONS '- (CONS 'X (CONS '! COMMON-LISP:NIL))) (CONS 10 COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'INTEGER (CONS (CONS 'MOD (CONS 'X (CONS 10 COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'INTEGER-CHARS-0))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'INTEGER-CHARS (CONS (CONS 'X COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN INTEGER-CHARS (X) (BLOCK INTEGER-CHARS (BLOCK COMMON-LISP:NIL (REVERSE (INTEGER-CHARS-0 (INTEGER (ABS X))))))) (SETF (GETHASH #'INTEGER-CHARS *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'INTEGER-CHARS (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'REVERSE (CONS (CONS 'INTEGER-CHARS-0 (CONS (CONS 'INTEGER (CONS (CONS 'ABS (CONS 'X COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'INTEGER-CHARS))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'FRACTION-CHARS-0 (CONS (CONS 'X COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN FRACTION-CHARS-0 (X) (BLOCK FRACTION-CHARS-0 (BLOCK COMMON-LISP:NIL (LABELS ((G4236 (!) (? (< 0 !) (CONS (NUMBER-DIGIT !) (FRACTION-CHARS-0 !))))) (G4236 (MOD (* X 10) 10)))))) (SETF (GETHASH #'FRACTION-CHARS-0 *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'FRACTION-CHARS-0 (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS '! COMMON-LISP:NIL) (CONS (CONS '? (CONS (CONS '< (CONS 0 (CONS '! COMMON-LISP:NIL))) (CONS (CONS 'CONS (CONS (CONS 'NUMBER-DIGIT (CONS '! COMMON-LISP:NIL)) (CONS (CONS 'FRACTION-CHARS-0 (CONS '! COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'MOD (CONS (CONS '* (CONS 'X (CONS 10 COMMON-LISP:NIL))) (CONS 10 COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'FRACTION-CHARS-0))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'FRACTION-CHARS (CONS (CONS 'X COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN FRACTION-CHARS (X) (BLOCK FRACTION-CHARS (BLOCK COMMON-LISP:NIL (FRACTION-CHARS-0 (MOD (ABS X) 1))))) (SETF (GETHASH #'FRACTION-CHARS *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'FRACTION-CHARS (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'FRACTION-CHARS-0 (CONS (CONS 'MOD (CONS (CONS 'ABS (CONS 'X COMMON-LISP:NIL)) (CONS 1 COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'FRACTION-CHARS))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'PRINC-NUMBER (CONS (CONS 'X (CONS 'STR COMMON-LISP:NIL)) COMMON-LISP:NIL)))) (PROGN (DEFUN PRINC-NUMBER (X STR) (BLOCK PRINC-NUMBER (BLOCK COMMON-LISP:NIL (? (< X 0) (PRINC #\- STR)) (STREAM-PRINC (INTEGER-CHARS X) STR) (LABELS ((G4237 (!) (? (NOT (ZERO? !)) (PROGN (PRINC #\. STR) (STREAM-PRINC (FRACTION-CHARS !) STR))))) (G4237 (MOD X 1)))))) (SETF (GETHASH #'PRINC-NUMBER *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X (CONS 'STR COMMON-LISP:NIL)) (CONS (CONS 'BLOCK (CONS 'PRINC-NUMBER (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS '? (CONS (CONS '< (CONS 'X (CONS 0 COMMON-LISP:NIL))) (CONS (CONS 'PRINC (CONS #\- (CONS 'STR COMMON-LISP:NIL))) COMMON-LISP:NIL))) (CONS (CONS 'STREAM-PRINC (CONS (CONS 'INTEGER-CHARS (CONS 'X COMMON-LISP:NIL)) (CONS 'STR COMMON-LISP:NIL))) (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS '! COMMON-LISP:NIL) (CONS (CONS '& (CONS (CONS 'NOT (CONS (CONS 'ZERO? (CONS '! COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'PROGN (CONS (CONS 'PRINC (CONS #\. (CONS 'STR COMMON-LISP:NIL))) (CONS (CONS 'STREAM-PRINC (CONS (CONS 'FRACTION-CHARS (CONS '! COMMON-LISP:NIL)) (CONS 'STR COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'MOD (CONS 'X (CONS 1 COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL))))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'PRINC-NUMBER))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'PRINC (CONS (CONS 'X (CONS '&OPTIONAL (CONS (CONS 'STR (CONS '*STANDARD-OUTPUT* COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (PROGN (DEFUN PRINC (X &OPTIONAL (STR *STANDARD-OUTPUT*)) (BLOCK PRINC (BLOCK COMMON-LISP:NIL (LABELS ((G4238 (~G1579) (LABELS ((G4239 (S) (LABELS ((G4240 (~G1580) (? ~G1579 ~G1580 (GET-STREAM-STRING S)))) (G4240 (PROGN (? (STRING? X) (STREAM-PRINC X S) (CHARACTER? X) (STREAM-PRINC X S) (NUMBER? X) (PRINC-NUMBER X S) (SYMBOL? X) (STREAM-PRINC (SYMBOL-NAME X) S)) X))))) (G4239 (DEFAULT-STREAM ~G1579))))) (G4238 STR))))) (SETF (GETHASH #'PRINC *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X (CONS '&OPTIONAL (CONS (CONS 'STR (CONS '*STANDARD-OUTPUT* COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'BLOCK (CONS 'PRINC (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'LET (CONS '~G1579 (CONS 'STR (CONS (CONS 'WITH (CONS (CONS 'S (CONS (CONS 'DEFAULT-STREAM (CONS '~G1579 COMMON-LISP:NIL)) (CONS '~G1580 (CONS (CONS 'PROGN (CONS (CONS '? (CONS (CONS 'STRING? (CONS 'X COMMON-LISP:NIL)) (CONS (CONS 'STREAM-PRINC (CONS 'X (CONS 'S COMMON-LISP:NIL))) (CONS (CONS 'CHARACTER? (CONS 'X COMMON-LISP:NIL)) (CONS (CONS 'STREAM-PRINC (CONS 'X (CONS 'S COMMON-LISP:NIL))) (CONS (CONS 'NUMBER? (CONS 'X COMMON-LISP:NIL)) (CONS (CONS 'PRINC-NUMBER (CONS 'X (CONS 'S COMMON-LISP:NIL))) (CONS (CONS 'SYMBOL? (CONS 'X COMMON-LISP:NIL)) (CONS (CONS 'STREAM-PRINC (CONS (CONS 'SYMBOL-NAME (CONS 'X COMMON-LISP:NIL)) (CONS 'S COMMON-LISP:NIL))) COMMON-LISP:NIL))))))))) (CONS 'X COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (CONS (CONS '? (CONS '~G1579 (CONS '~G1580 (CONS (CONS 'GET-STREAM-STRING (CONS 'S COMMON-LISP:NIL)) COMMON-LISP:NIL)))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'PRINC))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'SPLIT-IF (CONS (CONS 'PREDICATE (CONS 'SEQ (CONS '&KEY (CONS (CONS 'INCLUDE? (CONS COMMON-LISP:NIL COMMON-LISP:NIL)) COMMON-LISP:NIL)))) COMMON-LISP:NIL)))) (PROGN (DEFUN SPLIT-IF (PREDICATE SEQ &KEY (INCLUDE? COMMON-LISP:NIL)) (BLOCK SPLIT-IF (BLOCK COMMON-LISP:NIL (? SEQ (LABELS ((G4241 (!) (? ! (CONS (SUBSEQ SEQ 0 (? INCLUDE? (INTEGER++ !) !)) (SPLIT-IF PREDICATE (SUBSEQ SEQ (INTEGER++ !)) :INCLUDE? INCLUDE?)) (LIST SEQ)))) (G4241 (POSITION-IF PREDICATE SEQ))))))) (SETF (GETHASH #'SPLIT-IF *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'PREDICATE (CONS 'SEQ (CONS '&KEY (CONS (CONS 'INCLUDE? (CONS COMMON-LISP:NIL COMMON-LISP:NIL)) COMMON-LISP:NIL)))) (CONS (CONS 'BLOCK (CONS 'SPLIT-IF (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS '? (CONS 'SEQ (CONS (CONS 'LET (CONS '! (CONS (CONS 'POSITION-IF (CONS 'PREDICATE (CONS 'SEQ COMMON-LISP:NIL))) (CONS (CONS '? (CONS '! (CONS (CONS 'CONS (CONS (CONS 'SUBSEQ (CONS 'SEQ (CONS 0 (CONS (CONS '? (CONS 'INCLUDE? (CONS (CONS 'INTEGER++ (CONS '! COMMON-LISP:NIL)) (CONS '! COMMON-LISP:NIL)))) COMMON-LISP:NIL)))) (CONS (CONS 'SPLIT-IF (CONS 'PREDICATE (CONS (CONS 'SUBSEQ (CONS 'SEQ (CONS (CONS 'INTEGER++ (CONS '! COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS ':INCLUDE? (CONS 'INCLUDE? COMMON-LISP:NIL))))) COMMON-LISP:NIL))) (CONS (CONS '%!? (CONS (CONS 'LIST (CONS 'SEQ COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)))) COMMON-LISP:NIL)))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'SPLIT-IF))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'GENERIC-SPLIT (CONS (CONS 'OBJ (CONS 'SEQ (CONS '&KEY (CONS (CONS 'TEST (CONS (CONS 'FUNCTION (CONS 'EQL COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'INCLUDE? (CONS COMMON-LISP:NIL COMMON-LISP:NIL)) COMMON-LISP:NIL))))) COMMON-LISP:NIL)))) (PROGN (DEFUN GENERIC-SPLIT (OBJ SEQ &KEY (TEST #'EQL) (INCLUDE? COMMON-LISP:NIL)) (BLOCK GENERIC-SPLIT (BLOCK COMMON-LISP:NIL (? SEQ (LABELS ((G4242 (!) (? ! (CONS (SUBSEQ SEQ 0 (? INCLUDE? (INTEGER++ !) !)) (GENERIC-SPLIT OBJ (SUBSEQ SEQ (INTEGER++ !)) :TEST TEST :INCLUDE? INCLUDE?)) (LIST SEQ)))) (G4242 (POSITION OBJ SEQ :TEST TEST))))))) (SETF (GETHASH #'GENERIC-SPLIT *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'OBJ (CONS 'SEQ (CONS '&KEY (CONS (CONS 'TEST (CONS (CONS 'FUNCTION (CONS 'EQL COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'INCLUDE? (CONS COMMON-LISP:NIL COMMON-LISP:NIL)) COMMON-LISP:NIL))))) (CONS (CONS 'BLOCK (CONS 'GENERIC-SPLIT (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS '? (CONS 'SEQ (CONS (CONS 'LET (CONS '! (CONS (CONS 'POSITION (CONS 'OBJ (CONS 'SEQ (CONS ':TEST (CONS 'TEST COMMON-LISP:NIL))))) (CONS (CONS '? (CONS '! (CONS (CONS 'CONS (CONS (CONS 'SUBSEQ (CONS 'SEQ (CONS 0 (CONS (CONS '? (CONS 'INCLUDE? (CONS (CONS 'INTEGER++ (CONS '! COMMON-LISP:NIL)) (CONS '! COMMON-LISP:NIL)))) COMMON-LISP:NIL)))) (CONS (CONS 'GENERIC-SPLIT (CONS 'OBJ (CONS (CONS 'SUBSEQ (CONS 'SEQ (CONS (CONS 'INTEGER++ (CONS '! COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS ':TEST (CONS 'TEST (CONS ':INCLUDE? (CONS 'INCLUDE? COMMON-LISP:NIL))))))) COMMON-LISP:NIL))) (CONS (CONS '%!? (CONS (CONS 'LIST (CONS 'SEQ COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)))) COMMON-LISP:NIL)))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'GENERIC-SPLIT))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'SPLIT (CONS (CONS 'OBJ (CONS 'SEQ (CONS '&KEY (CONS (CONS 'TEST (CONS (CONS 'FUNCTION (CONS 'EQL COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'INCLUDE? (CONS COMMON-LISP:NIL COMMON-LISP:NIL)) COMMON-LISP:NIL))))) COMMON-LISP:NIL)))) (PROGN (DEFUN SPLIT (OBJ SEQ &KEY (TEST #'EQL) (INCLUDE? COMMON-LISP:NIL)) (BLOCK SPLIT (BLOCK COMMON-LISP:NIL (GENERIC-SPLIT OBJ SEQ :TEST TEST :INCLUDE? INCLUDE?)))) (SETF (GETHASH #'SPLIT *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'OBJ (CONS 'SEQ (CONS '&KEY (CONS (CONS 'TEST (CONS (CONS 'FUNCTION (CONS 'EQL COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'INCLUDE? (CONS COMMON-LISP:NIL COMMON-LISP:NIL)) COMMON-LISP:NIL))))) (CONS (CONS 'BLOCK (CONS 'SPLIT (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'GENERIC-SPLIT (CONS 'OBJ (CONS 'SEQ (CONS ':TEST (CONS 'TEST (CONS ':INCLUDE? (CONS 'INCLUDE? COMMON-LISP:NIL))))))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'SPLIT))
(PROGN (SETQ *FUNCTIONALS* (%NCONC (CONS 'DIGIT-NUMBER COMMON-LISP:NIL) *FUNCTIONALS*)))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'DIGIT-NUMBER (CONS (CONS 'X COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN DIGIT-NUMBER (X) (BLOCK DIGIT-NUMBER (BLOCK COMMON-LISP:NIL (- X #\0)))) (SETF (GETHASH #'DIGIT-NUMBER *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'DIGIT-NUMBER (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS '- (CONS 'X (CONS #\0 COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'DIGIT-NUMBER))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'PEEK-DIGIT (CONS (CONS 'STR COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN PEEK-DIGIT (STR) (BLOCK PEEK-DIGIT (BLOCK COMMON-LISP:NIL (LABELS ((G4243 (!) (? ! (PROGN (? (DIGIT-CHAR? !) !))))) (G4243 (PEEK-CHAR STR)))))) (SETF (GETHASH #'PEEK-DIGIT *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'STR COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'PEEK-DIGIT (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS '! COMMON-LISP:NIL) (CONS (CONS '& (CONS '! (CONS (CONS 'PROGN (CONS (CONS '? (CONS (CONS 'DIGIT-CHAR? (CONS '! COMMON-LISP:NIL)) (CONS '! COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'PEEK-CHAR (CONS 'STR COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'PEEK-DIGIT))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'PEEK-DOT (CONS (CONS 'STR COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN PEEK-DOT (STR) (BLOCK PEEK-DOT (BLOCK COMMON-LISP:NIL (LABELS ((G4244 (!) (? ! (PROGN (== #\. !))))) (G4244 (PEEK-CHAR STR)))))) (SETF (GETHASH #'PEEK-DOT *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'STR COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'PEEK-DOT (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS '! COMMON-LISP:NIL) (CONS (CONS '& (CONS '! (CONS (CONS 'PROGN (CONS (CONS '== (CONS #\. (CONS '! COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'PEEK-CHAR (CONS 'STR COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'PEEK-DOT))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'READ-DECIMAL-PLACES-0 (CONS (CONS 'STR (CONS 'V (CONS 'S COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (PROGN (DEFUN READ-DECIMAL-PLACES-0 (STR V S) (BLOCK READ-DECIMAL-PLACES-0 (BLOCK COMMON-LISP:NIL (? (PEEK-DIGIT STR) (READ-DECIMAL-PLACES-0 STR (+ V (* S (DIGIT-NUMBER (READ-CHAR STR)))) (/ S 10)) V)))) (SETF (GETHASH #'READ-DECIMAL-PLACES-0 *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'STR (CONS 'V (CONS 'S COMMON-LISP:NIL))) (CONS (CONS 'BLOCK (CONS 'READ-DECIMAL-PLACES-0 (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS '? (CONS (CONS 'PEEK-DIGIT (CONS 'STR COMMON-LISP:NIL)) (CONS (CONS 'READ-DECIMAL-PLACES-0 (CONS 'STR (CONS (CONS '+ (CONS 'V (CONS (CONS '* (CONS 'S (CONS (CONS 'DIGIT-NUMBER (CONS (CONS 'READ-CHAR (CONS 'STR COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) (CONS (CONS '/ (CONS 'S (CONS 10 COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (CONS 'V COMMON-LISP:NIL)))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'READ-DECIMAL-PLACES-0))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'READ-DECIMAL-PLACES (CONS (CONS '&OPTIONAL (CONS (CONS 'STR (CONS '*STANDARD-INPUT* COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)))) (PROGN (DEFUN READ-DECIMAL-PLACES (&OPTIONAL (STR *STANDARD-INPUT*)) (BLOCK READ-DECIMAL-PLACES (BLOCK COMMON-LISP:NIL (? (LABELS ((G4245 (!) (? ! (DIGIT-CHAR? !)))) (G4245 (PEEK-CHAR STR))) (READ-DECIMAL-PLACES-0 STR 0 0.1))))) (SETF (GETHASH #'READ-DECIMAL-PLACES *FUNCTION-ATOM-SOURCES*) (CONS (CONS '&OPTIONAL (CONS (CONS 'STR (CONS '*STANDARD-INPUT* COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'BLOCK (CONS 'READ-DECIMAL-PLACES (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS '? (CONS (CONS 'LET (CONS '! (CONS (CONS 'PEEK-CHAR (CONS 'STR COMMON-LISP:NIL)) (CONS (CONS '? (CONS '! (CONS (CONS 'DIGIT-CHAR? (CONS '! COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (CONS (CONS 'READ-DECIMAL-PLACES-0 (CONS 'STR (CONS 0 (CONS 0.1 COMMON-LISP:NIL)))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'READ-DECIMAL-PLACES))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'READ-INTEGER-0 (CONS (CONS 'STR (CONS 'V COMMON-LISP:NIL)) COMMON-LISP:NIL)))) (PROGN (DEFUN READ-INTEGER-0 (STR V) (BLOCK READ-INTEGER-0 (BLOCK COMMON-LISP:NIL (? (PEEK-DIGIT STR) (READ-INTEGER-0 STR (+ (* V 10) (DIGIT-NUMBER (READ-CHAR STR)))) V)))) (SETF (GETHASH #'READ-INTEGER-0 *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'STR (CONS 'V COMMON-LISP:NIL)) (CONS (CONS 'BLOCK (CONS 'READ-INTEGER-0 (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS '? (CONS (CONS 'PEEK-DIGIT (CONS 'STR COMMON-LISP:NIL)) (CONS (CONS 'READ-INTEGER-0 (CONS 'STR (CONS (CONS '+ (CONS (CONS '* (CONS 'V (CONS 10 COMMON-LISP:NIL))) (CONS (CONS 'DIGIT-NUMBER (CONS (CONS 'READ-CHAR (CONS 'STR COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) (CONS 'V COMMON-LISP:NIL)))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'READ-INTEGER-0))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'READ-INTEGER (CONS (CONS '&OPTIONAL (CONS (CONS 'STR (CONS '*STANDARD-INPUT* COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)))) (PROGN (DEFUN READ-INTEGER (&OPTIONAL (STR *STANDARD-INPUT*)) (BLOCK READ-INTEGER (BLOCK COMMON-LISP:NIL (? (PEEK-DIGIT STR) (INTEGER (READ-INTEGER-0 STR 0)))))) (SETF (GETHASH #'READ-INTEGER *FUNCTION-ATOM-SOURCES*) (CONS (CONS '&OPTIONAL (CONS (CONS 'STR (CONS '*STANDARD-INPUT* COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'BLOCK (CONS 'READ-INTEGER (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS '? (CONS (CONS 'PEEK-DIGIT (CONS 'STR COMMON-LISP:NIL)) (CONS (CONS 'INTEGER (CONS (CONS 'READ-INTEGER-0 (CONS 'STR (CONS 0 COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'READ-INTEGER))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'READ-NUMBER (CONS (CONS '&OPTIONAL (CONS (CONS 'STR (CONS '*STANDARD-INPUT* COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)))) (PROGN (DEFUN READ-NUMBER (&OPTIONAL (STR *STANDARD-INPUT*)) (BLOCK READ-NUMBER (BLOCK COMMON-LISP:NIL (* (? (== #\- (PEEK-CHAR STR)) (PROGN (READ-CHAR STR) -1) 1) (+ (READ-INTEGER STR) (LABELS ((G4246 (~G1581) (? ~G1581 ~G1581 0))) (G4246 (? (PEEK-DOT STR) (? (READ-CHAR STR) (READ-DECIMAL-PLACES STR)))))))))) (SETF (GETHASH #'READ-NUMBER *FUNCTION-ATOM-SOURCES*) (CONS (CONS '&OPTIONAL (CONS (CONS 'STR (CONS '*STANDARD-INPUT* COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'BLOCK (CONS 'READ-NUMBER (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS '* (CONS (CONS '? (CONS (CONS '== (CONS #\- (CONS (CONS 'PEEK-CHAR (CONS 'STR COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'PROGN (CONS (CONS 'READ-CHAR (CONS 'STR COMMON-LISP:NIL)) (CONS -1 COMMON-LISP:NIL))) (CONS 1 COMMON-LISP:NIL)))) (CONS (CONS '+ (CONS (CONS 'READ-INTEGER (CONS 'STR COMMON-LISP:NIL)) (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS '~G1581 COMMON-LISP:NIL) (CONS (CONS '? (CONS '~G1581 (CONS '~G1581 (CONS 0 COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS '? (CONS (CONS 'PEEK-DOT (CONS 'STR COMMON-LISP:NIL)) (CONS (CONS '? (CONS (CONS 'READ-CHAR (CONS 'STR COMMON-LISP:NIL)) (CONS (CONS 'READ-DECIMAL-PLACES (CONS 'STR COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'READ-NUMBER))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'TOKEN-IS-QUOTE? (CONS (CONS 'X COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN TOKEN-IS-QUOTE? (X) (BLOCK TOKEN-IS-QUOTE? (BLOCK COMMON-LISP:NIL (LABELS ((G4247 (~G1595) (? ~G1595 ~G1595 (LABELS ((G4248 (~G1596) (? ~G1596 ~G1596 (LABELS ((G4249 (~G1597) (? ~G1597 ~G1597 (LABELS ((G4250 (~G1598) (? ~G1598 ~G1598 (EQ X 'ACCENT-CIRCONFLEX)))) (G4250 (EQ X 'QUASIQUOTE-SPLICE)))))) (G4249 (EQ X 'QUASIQUOTE)))))) (G4248 (EQ X 'BACKQUOTE)))))) (G4247 (EQ X 'QUOTE)))))) (SETF (GETHASH #'TOKEN-IS-QUOTE? *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'TOKEN-IS-QUOTE? (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'LET (CONS '~G1595 (CONS (CONS 'EQ (CONS 'X (CONS (CONS 'QUOTE (CONS 'QUOTE COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS '? (CONS '~G1595 (CONS '~G1595 (CONS (CONS 'LET (CONS '~G1596 (CONS (CONS 'EQ (CONS 'X (CONS (CONS 'QUOTE (CONS 'BACKQUOTE COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS '? (CONS '~G1596 (CONS '~G1596 (CONS (CONS 'LET (CONS '~G1597 (CONS (CONS 'EQ (CONS 'X (CONS (CONS 'QUOTE (CONS 'QUASIQUOTE COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS '? (CONS '~G1597 (CONS '~G1597 (CONS (CONS 'LET (CONS '~G1598 (CONS (CONS 'EQ (CONS 'X (CONS (CONS 'QUOTE (CONS 'QUASIQUOTE-SPLICE COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS '? (CONS '~G1598 (CONS '~G1598 (CONS (CONS 'EQ (CONS 'X (CONS (CONS 'QUOTE (CONS 'ACCENT-CIRCONFLEX COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) COMMON-LISP:NIL)))) COMMON-LISP:NIL)))) COMMON-LISP:NIL)))) COMMON-LISP:NIL)))) COMMON-LISP:NIL)))) COMMON-LISP:NIL)))) COMMON-LISP:NIL)))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'TOKEN-IS-QUOTE?))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS '%READ-CLOSING-BRACKET? (CONS (CONS 'X COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN %READ-CLOSING-BRACKET? (X) (BLOCK %READ-CLOSING-BRACKET? (BLOCK COMMON-LISP:NIL (LABELS ((G4251 (~G1599) (? ~G1599 ~G1599 (LABELS ((G4252 (~G1600) (? ~G1600 ~G1600 (EQ X 'CURLY-BRACKET-CLOSE)))) (G4252 (EQ X 'SQUARE-BRACKET-CLOSE)))))) (G4251 (EQ X 'BRACKET-CLOSE)))))) (SETF (GETHASH #'%READ-CLOSING-BRACKET? *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS '%READ-CLOSING-BRACKET? (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'LET (CONS '~G1599 (CONS (CONS 'EQ (CONS 'X (CONS (CONS 'QUOTE (CONS 'BRACKET-CLOSE COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS '? (CONS '~G1599 (CONS '~G1599 (CONS (CONS 'LET (CONS '~G1600 (CONS (CONS 'EQ (CONS 'X (CONS (CONS 'QUOTE (CONS 'SQUARE-BRACKET-CLOSE COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS '? (CONS '~G1600 (CONS '~G1600 (CONS (CONS 'EQ (CONS 'X (CONS (CONS 'QUOTE (CONS 'CURLY-BRACKET-CLOSE COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) COMMON-LISP:NIL)))) COMMON-LISP:NIL)))) COMMON-LISP:NIL)))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL '%READ-CLOSING-BRACKET?))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'SPECIAL-CHAR? (CONS (CONS 'X COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN SPECIAL-CHAR? (X) (BLOCK SPECIAL-CHAR? (BLOCK COMMON-LISP:NIL (LABELS ((G4253 (~G1601) (? ~G1601 ~G1601 (LABELS ((G4254 (~G1602) (? ~G1602 ~G1602 (LABELS ((G4255 (~G1603) (? ~G1603 ~G1603 (LABELS ((G4256 (~G1604) (? ~G1604 ~G1604 (LABELS ((G4257 (~G1605) (? ~G1605 ~G1605 (LABELS ((G4258 (~G1606) (? ~G1606 ~G1606 (LABELS ((G4259 (~G1607) (? ~G1607 ~G1607 (LABELS ((G4260 (~G1608) (? ~G1608 ~G1608 (LABELS ((G4261 (~G1609) (? ~G1609 ~G1609 (LABELS ((G4262 (~G1610) (? ~G1610 ~G1610 (LABELS ((G4263 (~G1611) (? ~G1611 ~G1611 (LABELS ((G4264 (~G1612) (? ~G1612 ~G1612 (LABELS ((G4265 (~G1613) (? ~G1613 ~G1613 (== X #\^)))) (G4265 (== X #\#)))))) (G4264 (== X #\")))))) (G4263 (== X #\;)))))) (G4262 (== X #\:)))))) (G4261 (== X #\,)))))) (G4260 (== X #\`)))))) (G4259 (== X #\')))))) (G4258 (== X #\})))))) (G4257 (== X #\{)))))) (G4256 (== X #\])))))) (G4255 (== X #\[)))))) (G4254 (== X #\))))))) (G4253 (== X #\()))))) (SETF (GETHASH #'SPECIAL-CHAR? *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'SPECIAL-CHAR? (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'LET (CONS '~G1601 (CONS (CONS '== (CONS 'X (CONS #\( COMMON-LISP:NIL))) (CONS (CONS '? (CONS '~G1601 (CONS '~G1601 (CONS (CONS 'LET (CONS '~G1602 (CONS (CONS '== (CONS 'X (CONS #\) COMMON-LISP:NIL))) (CONS (CONS '? (CONS '~G1602 (CONS '~G1602 (CONS (CONS 'LET (CONS '~G1603 (CONS (CONS '== (CONS 'X (CONS #\[ COMMON-LISP:NIL))) (CONS (CONS '? (CONS '~G1603 (CONS '~G1603 (CONS (CONS 'LET (CONS '~G1604 (CONS (CONS '== (CONS 'X (CONS #\] COMMON-LISP:NIL))) (CONS (CONS '? (CONS '~G1604 (CONS '~G1604 (CONS (CONS 'LET (CONS '~G1605 (CONS (CONS '== (CONS 'X (CONS #\{ COMMON-LISP:NIL))) (CONS (CONS '? (CONS '~G1605 (CONS '~G1605 (CONS (CONS 'LET (CONS '~G1606 (CONS (CONS '== (CONS 'X (CONS #\} COMMON-LISP:NIL))) (CONS (CONS '? (CONS '~G1606 (CONS '~G1606 (CONS (CONS 'LET (CONS '~G1607 (CONS (CONS '== (CONS 'X (CONS #\' COMMON-LISP:NIL))) (CONS (CONS '? (CONS '~G1607 (CONS '~G1607 (CONS (CONS 'LET (CONS '~G1608 (CONS (CONS '== (CONS 'X (CONS #\` COMMON-LISP:NIL))) (CONS (CONS '? (CONS '~G1608 (CONS '~G1608 (CONS (CONS 'LET (CONS '~G1609 (CONS (CONS '== (CONS 'X (CONS #\, COMMON-LISP:NIL))) (CONS (CONS '? (CONS '~G1609 (CONS '~G1609 (CONS (CONS 'LET (CONS '~G1610 (CONS (CONS '== (CONS 'X (CONS #\: COMMON-LISP:NIL))) (CONS (CONS '? (CONS '~G1610 (CONS '~G1610 (CONS (CONS 'LET (CONS '~G1611 (CONS (CONS '== (CONS 'X (CONS #\; COMMON-LISP:NIL))) (CONS (CONS '? (CONS '~G1611 (CONS '~G1611 (CONS (CONS 'LET (CONS '~G1612 (CONS (CONS '== (CONS 'X (CONS #\" COMMON-LISP:NIL))) (CONS (CONS '? (CONS '~G1612 (CONS '~G1612 (CONS (CONS 'LET (CONS '~G1613 (CONS (CONS '== (CONS 'X (CONS #\# COMMON-LISP:NIL))) (CONS (CONS '? (CONS '~G1613 (CONS '~G1613 (CONS (CONS '== (CONS 'X (CONS #\^ COMMON-LISP:NIL))) COMMON-LISP:NIL)))) COMMON-LISP:NIL)))) COMMON-LISP:NIL)))) COMMON-LISP:NIL)))) COMMON-LISP:NIL)))) COMMON-LISP:NIL)))) COMMON-LISP:NIL)))) COMMON-LISP:NIL)))) COMMON-LISP:NIL)))) COMMON-LISP:NIL)))) COMMON-LISP:NIL)))) COMMON-LISP:NIL)))) COMMON-LISP:NIL)))) COMMON-LISP:NIL)))) COMMON-LISP:NIL)))) COMMON-LISP:NIL)))) COMMON-LISP:NIL)))) COMMON-LISP:NIL)))) COMMON-LISP:NIL)))) COMMON-LISP:NIL)))) COMMON-LISP:NIL)))) COMMON-LISP:NIL)))) COMMON-LISP:NIL)))) COMMON-LISP:NIL)))) COMMON-LISP:NIL)))) COMMON-LISP:NIL)))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'SPECIAL-CHAR?))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'SYMBOL-CHAR? (CONS (CONS 'X COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN SYMBOL-CHAR? (X) (BLOCK SYMBOL-CHAR? (BLOCK COMMON-LISP:NIL (? (> X 32) (NOT (SPECIAL-CHAR? X)))))) (SETF (GETHASH #'SYMBOL-CHAR? *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'SYMBOL-CHAR? (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS '? (CONS (CONS '> (CONS 'X (CONS 32 COMMON-LISP:NIL))) (CONS (CONS 'NOT (CONS (CONS 'SPECIAL-CHAR? (CONS 'X COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'SYMBOL-CHAR?))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'SKIP-COMMENT (CONS (CONS 'STR COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN SKIP-COMMENT (STR) (BLOCK SKIP-COMMENT (BLOCK COMMON-LISP:NIL (LABELS ((G4266 (C) (? C (PROGN (? (== C 10) (SKIP-SPACES STR) (SKIP-COMMENT STR)))))) (G4266 (READ-CHAR STR)))))) (SETF (GETHASH #'SKIP-COMMENT *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'STR COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'SKIP-COMMENT (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS 'C COMMON-LISP:NIL) (CONS (CONS '& (CONS 'C (CONS (CONS 'PROGN (CONS (CONS '? (CONS (CONS '== (CONS 'C (CONS 10 COMMON-LISP:NIL))) (CONS (CONS 'SKIP-SPACES (CONS 'STR COMMON-LISP:NIL)) (CONS (CONS 'SKIP-COMMENT (CONS 'STR COMMON-LISP:NIL)) COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'READ-CHAR (CONS 'STR COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'SKIP-COMMENT))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'SKIP-SPACES (CONS (CONS 'STR COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN SKIP-SPACES (STR) (BLOCK SKIP-SPACES (BLOCK COMMON-LISP:NIL (LABELS ((G4267 (C) (? C (PROGN (? (== #\; C) (PROGN (SKIP-COMMENT STR))) (? (WHITESPACE? C) (PROGN (READ-CHAR STR) (SKIP-SPACES STR))))))) (G4267 (PEEK-CHAR STR)))))) (SETF (GETHASH #'SKIP-SPACES *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'STR COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'SKIP-SPACES (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS 'C COMMON-LISP:NIL) (CONS (CONS '& (CONS 'C (CONS (CONS 'PROGN (CONS (CONS '? (CONS (CONS '== (CONS #\; (CONS 'C COMMON-LISP:NIL))) (CONS (CONS 'PROGN (CONS (CONS 'SKIP-COMMENT (CONS 'STR COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS '? (CONS (CONS 'WHITESPACE? (CONS 'C COMMON-LISP:NIL)) (CONS (CONS 'PROGN (CONS (CONS 'READ-CHAR (CONS 'STR COMMON-LISP:NIL)) (CONS (CONS 'SKIP-SPACES (CONS 'STR COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'PEEK-CHAR (CONS 'STR COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'SKIP-SPACES))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'GET-SYMBOL-0 (CONS (CONS 'STR COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN GET-SYMBOL-0 (STR) (BLOCK GET-SYMBOL-0 (BLOCK COMMON-LISP:NIL (LABELS ((G4268 (C) (? (== #\; C) (PROGN (SKIP-COMMENT STR) (GET-SYMBOL-0 STR)) (? (SYMBOL-CHAR? C) (CONS (CHAR-UPCASE (READ-CHAR STR)) (GET-SYMBOL-0 STR)))))) (G4268 (CHAR-UPCASE (PEEK-CHAR STR))))))) (SETF (GETHASH #'GET-SYMBOL-0 *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'STR COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'GET-SYMBOL-0 (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS 'C COMMON-LISP:NIL) (CONS (CONS '? (CONS (CONS '== (CONS #\; (CONS 'C COMMON-LISP:NIL))) (CONS (CONS 'PROGN (CONS (CONS 'SKIP-COMMENT (CONS 'STR COMMON-LISP:NIL)) (CONS (CONS 'GET-SYMBOL-0 (CONS 'STR COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS '? (CONS (CONS 'SYMBOL-CHAR? (CONS 'C COMMON-LISP:NIL)) (CONS (CONS 'CONS (CONS (CONS 'CHAR-UPCASE (CONS (CONS 'READ-CHAR (CONS 'STR COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'GET-SYMBOL-0 (CONS 'STR COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'CHAR-UPCASE (CONS (CONS 'PEEK-CHAR (CONS 'STR COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'GET-SYMBOL-0))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'GET-SYMBOL (CONS (CONS 'STR COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN GET-SYMBOL (STR) (BLOCK GET-SYMBOL (BLOCK COMMON-LISP:NIL (LABELS ((G4269 (C) (? C (PROGN (? (NOT (SPECIAL-CHAR? C)) (PROGN (GET-SYMBOL-0 STR))))))) (G4269 (PEEK-CHAR STR)))))) (SETF (GETHASH #'GET-SYMBOL *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'STR COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'GET-SYMBOL (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS 'C COMMON-LISP:NIL) (CONS (CONS '& (CONS 'C (CONS (CONS 'PROGN (CONS (CONS '& (CONS (CONS 'NOT (CONS (CONS 'SPECIAL-CHAR? (CONS 'C COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'PROGN (CONS (CONS 'GET-SYMBOL-0 (CONS 'STR COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'PEEK-CHAR (CONS 'STR COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'GET-SYMBOL))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'GET-SYMBOL-AND-PACKAGE (CONS (CONS 'STR COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN GET-SYMBOL-AND-PACKAGE (STR) (BLOCK GET-SYMBOL-AND-PACKAGE (BLOCK COMMON-LISP:NIL (SKIP-SPACES STR) (LABELS ((G4270 (SYM) (? (== (PEEK-CHAR STR) #\:) (VALUES (LABELS ((G4271 (~G1582) (? ~G1582 ~G1582 COMMON-LISP:T))) (G4271 SYM)) (? (READ-CHAR STR) (GET-SYMBOL STR))) (VALUES COMMON-LISP:NIL SYM)))) (G4270 (GET-SYMBOL STR)))))) (SETF (GETHASH #'GET-SYMBOL-AND-PACKAGE *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'STR COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'GET-SYMBOL-AND-PACKAGE (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'SKIP-SPACES (CONS 'STR COMMON-LISP:NIL)) (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS 'SYM COMMON-LISP:NIL) (CONS (CONS '? (CONS (CONS '== (CONS (CONS 'PEEK-CHAR (CONS 'STR COMMON-LISP:NIL)) (CONS #\: COMMON-LISP:NIL))) (CONS (CONS 'VALUES (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS '~G1582 COMMON-LISP:NIL) (CONS (CONS '? (CONS '~G1582 (CONS '~G1582 (CONS COMMON-LISP:T COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS 'SYM COMMON-LISP:NIL)) (CONS (CONS '? (CONS (CONS 'READ-CHAR (CONS 'STR COMMON-LISP:NIL)) (CONS (CONS 'GET-SYMBOL (CONS 'STR COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) (CONS (CONS 'VALUES (CONS COMMON-LISP:NIL (CONS 'SYM COMMON-LISP:NIL))) COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'GET-SYMBOL (CONS 'STR COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'GET-SYMBOL-AND-PACKAGE))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'READ-STRING-0 (CONS (CONS 'STR COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN READ-STRING-0 (STR) (BLOCK READ-STRING-0 (BLOCK COMMON-LISP:NIL (LABELS ((G4272 (C) (? (NOT (== C #\")) (PROGN (CONS (? (== C #\\) (READ-CHAR STR) C) (READ-STRING-0 STR)))))) (G4272 (READ-CHAR STR)))))) (SETF (GETHASH #'READ-STRING-0 *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'STR COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'READ-STRING-0 (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS 'C COMMON-LISP:NIL) (CONS (CONS '& (CONS (CONS 'NOT (CONS (CONS '== (CONS 'C (CONS #\" COMMON-LISP:NIL))) COMMON-LISP:NIL)) (CONS (CONS 'PROGN (CONS (CONS 'CONS (CONS (CONS '? (CONS (CONS '== (CONS 'C (CONS #\\ COMMON-LISP:NIL))) (CONS (CONS 'READ-CHAR (CONS 'STR COMMON-LISP:NIL)) (CONS 'C COMMON-LISP:NIL)))) (CONS (CONS 'READ-STRING-0 (CONS 'STR COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'READ-CHAR (CONS 'STR COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'READ-STRING-0))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'READ-STRING (CONS (CONS 'STR COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN READ-STRING (STR) (BLOCK READ-STRING (BLOCK COMMON-LISP:NIL (LIST-STRING (READ-STRING-0 STR))))) (SETF (GETHASH #'READ-STRING *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'STR COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'READ-STRING (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'LIST-STRING (CONS (CONS 'READ-STRING-0 (CONS 'STR COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'READ-STRING))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'READ-COMMENT-BLOCK (CONS (CONS 'STR COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN READ-COMMENT-BLOCK (STR) (BLOCK READ-COMMENT-BLOCK (BLOCK COMMON-LISP:NIL (BLOCK COMMON-LISP:NIL (PROGN (TAGBODY ~G1614 (? (NOT (NOT (? (== #\| (READ-CHAR STR)) (== #\# (PEEK-CHAR STR))))) (RETURN-FROM COMMON-LISP:NIL (PROGN (READ-CHAR STR)))) COMMON-LISP:NIL (GO ~G1614))))))) (SETF (GETHASH #'READ-COMMENT-BLOCK *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'STR COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'READ-COMMENT-BLOCK (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'LET* (CONS COMMON-LISP:NIL (CONS (CONS 'TAGBODY (CONS '~G1614 (CONS (CONS '? (CONS (CONS 'NOT (CONS (CONS 'NOT (CONS (CONS '? (CONS (CONS '== (CONS #\| (CONS (CONS 'READ-CHAR (CONS 'STR COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS '== (CONS #\# (CONS (CONS 'PEEK-CHAR (CONS 'STR COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'RETURN (CONS (CONS 'PROGN (CONS (CONS 'READ-CHAR (CONS 'STR COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS COMMON-LISP:NIL (CONS (CONS 'GO (CONS '~G1614 COMMON-LISP:NIL)) COMMON-LISP:NIL))))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'READ-COMMENT-BLOCK))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'LIST-NUMBER? (CONS (CONS 'X COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN LIST-NUMBER? (X) (BLOCK LIST-NUMBER? (BLOCK COMMON-LISP:NIL (? (LABELS ((G4273 (~G1584) (? ~G1584 ~G1584 (DIGIT-CHAR? (CAR X))))) (G4273 (? (CDR X) (LABELS ((G4274 (~G1583) (? ~G1583 ~G1583 (== #\. (CAR X))))) (G4274 (== #\- (CAR X))))))) (? (CDR X) (EVERY #'(LAMBDA (_) (LABELS ((G4275 (~G1642) (? ~G1642 ~G1642 (== #\. _)))) (G4275 (DIGIT-CHAR? _)))) (CDR X)) COMMON-LISP:T))))) (SETF (GETHASH #'LIST-NUMBER? *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'LIST-NUMBER? (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS '? (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS '~G1584 COMMON-LISP:NIL) (CONS (CONS '? (CONS '~G1584 (CONS '~G1584 (CONS (CONS 'DIGIT-CHAR? (CONS (CONS 'CAR (CONS 'X COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS '? (CONS (CONS 'CDR (CONS 'X COMMON-LISP:NIL)) (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS '~G1583 COMMON-LISP:NIL) (CONS (CONS '? (CONS '~G1583 (CONS '~G1583 (CONS (CONS '== (CONS #\. (CONS (CONS 'CAR (CONS 'X COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS '== (CONS #\- (CONS (CONS 'CAR (CONS 'X COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL)) (CONS (CONS '? (CONS (CONS 'CDR (CONS 'X COMMON-LISP:NIL)) (CONS (CONS 'EVERY (CONS (CONS 'FUNCTION (CONS (CONS (CONS '_ COMMON-LISP:NIL) (CONS (CONS '|\|| (CONS (CONS 'DIGIT-CHAR? (CONS '_ COMMON-LISP:NIL)) (CONS (CONS '== (CONS #\. (CONS '_ COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'CDR (CONS 'X COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS COMMON-LISP:T COMMON-LISP:NIL)))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'LIST-NUMBER?))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'READ-TOKEN (CONS (CONS 'STR COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN READ-TOKEN (STR) (BLOCK READ-TOKEN (BLOCK COMMON-LISP:NIL (LABELS ((G4276 (~G1615) (LABELS ((G4277 (~G1616) (? (NOT (EQ (CAR ~G1615) 'VALUES)) (PROGN (ERROR "VALUES expected instead of ~A." ~G1615))) (LABELS ((G4278 (PKG) (LABELS ((G4279 (~G1617) (LABELS ((G4280 (SYM) (VALUES (? (? SYM (? (NOT (CDR SYM)) (== #\. (CAR SYM)))) 'DOT (? SYM (? (LIST-NUMBER? SYM) 'NUMBER 'SYMBOL) (LABELS ((G4281 (~G1586) (? (CHARACTER== ~G1586 #\() 'BRACKET-OPEN (CHARACTER== ~G1586 #\)) 'BRACKET-CLOSE (CHARACTER== ~G1586 #\[) 'SQUARE-BRACKET-OPEN (CHARACTER== ~G1586 #\]) 'SQUARE-BRACKET-CLOSE (CHARACTER== ~G1586 #\{) 'CURLY-BRACKET-OPEN (CHARACTER== ~G1586 #\}) 'CURLY-BRACKET-CLOSE (CHARACTER== ~G1586 #\') 'QUOTE (CHARACTER== ~G1586 #\`) 'BACKQUOTE (CHARACTER== ~G1586 #\^) 'ACCENT-CIRCONFLEX (CHARACTER== ~G1586 #\") 'DBLQUOTE (CHARACTER== ~G1586 #\,) (? (== #\@ (PEEK-CHAR STR)) (? (READ-CHAR STR) 'QUASIQUOTE-SPLICE) 'QUASIQUOTE) (CHARACTER== ~G1586 #\#) (LABELS ((G4282 (~G1585) (? (CHARACTER== ~G1585 #\\) 'CHAR (CHARACTER== ~G1585 #\x) 'HEXNUM (CHARACTER== ~G1585 #\') 'FUNCTION (CHARACTER== ~G1585 #\|) (READ-COMMENT-BLOCK STR) (ERROR "Invalid character after '#'.")))) (G4282 (READ-CHAR STR))) (CHARACTER== ~G1586 -1) 'EOF))) (G4281 (READ-CHAR STR))))) PKG SYM))) (G4280 (CAR ~G1617))))) (G4279 (LABELS ((G4283 (~G1643) (? ~G1643 ~G1643 (%ERROR "Not enough VALUES.")))) (G4283 (CDR ~G1616))))))) (G4278 (CAR ~G1616))))) (G4277 (CDR ~G1615))))) (G4276 (GET-SYMBOL-AND-PACKAGE STR)))))) (SETF (GETHASH #'READ-TOKEN *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'STR COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'READ-TOKEN (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'LET* (CONS (CONS (CONS '~G1615 (CONS (CONS 'GET-SYMBOL-AND-PACKAGE (CONS 'STR COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS '~G1616 (CONS (CONS 'CDR (CONS '~G1615 COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'UNLESS (CONS (CONS 'EQ (CONS (CONS 'CAR (CONS '~G1615 COMMON-LISP:NIL)) (CONS (CONS 'QUOTE (CONS 'VALUES COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'ERROR (CONS "VALUES expected instead of ~A." (CONS '~G1615 COMMON-LISP:NIL))) COMMON-LISP:NIL))) (CONS (CONS 'LET* (CONS (CONS (CONS 'PKG (CONS (CONS 'CAR (CONS '~G1616 COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS '~G1617 (CONS (CONS '|\|| (CONS (CONS 'CDR (CONS '~G1616 COMMON-LISP:NIL)) (CONS (CONS '%ERROR (CONS "Not enough VALUES." COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'LET* (CONS (CONS (CONS 'SYM (CONS (CONS 'CAR (CONS '~G1617 COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL) (CONS (CONS 'VALUES (CONS (CONS '? (CONS (CONS '? (CONS 'SYM (CONS (CONS '? (CONS (CONS 'NOT (CONS (CONS 'CDR (CONS 'SYM COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS '== (CONS #\. (CONS (CONS 'CAR (CONS 'SYM COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) (CONS (CONS 'QUOTE (CONS 'DOT COMMON-LISP:NIL)) (CONS (CONS '? (CONS 'SYM (CONS (CONS '? (CONS (CONS 'LIST-NUMBER? (CONS 'SYM COMMON-LISP:NIL)) (CONS (CONS 'QUOTE (CONS 'NUMBER COMMON-LISP:NIL)) (CONS (CONS 'QUOTE (CONS 'SYMBOL COMMON-LISP:NIL)) COMMON-LISP:NIL)))) (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS '~G1586 COMMON-LISP:NIL) (CONS (CONS '? (CONS (CONS 'CHARACTER== (CONS '~G1586 (CONS #\( COMMON-LISP:NIL))) (CONS (CONS 'QUOTE (CONS 'BRACKET-OPEN COMMON-LISP:NIL)) (CONS (CONS 'CHARACTER== (CONS '~G1586 (CONS #\) COMMON-LISP:NIL))) (CONS (CONS 'QUOTE (CONS 'BRACKET-CLOSE COMMON-LISP:NIL)) (CONS (CONS 'CHARACTER== (CONS '~G1586 (CONS #\[ COMMON-LISP:NIL))) (CONS (CONS 'QUOTE (CONS 'SQUARE-BRACKET-OPEN COMMON-LISP:NIL)) (CONS (CONS 'CHARACTER== (CONS '~G1586 (CONS #\] COMMON-LISP:NIL))) (CONS (CONS 'QUOTE (CONS 'SQUARE-BRACKET-CLOSE COMMON-LISP:NIL)) (CONS (CONS 'CHARACTER== (CONS '~G1586 (CONS #\{ COMMON-LISP:NIL))) (CONS (CONS 'QUOTE (CONS 'CURLY-BRACKET-OPEN COMMON-LISP:NIL)) (CONS (CONS 'CHARACTER== (CONS '~G1586 (CONS #\} COMMON-LISP:NIL))) (CONS (CONS 'QUOTE (CONS 'CURLY-BRACKET-CLOSE COMMON-LISP:NIL)) (CONS (CONS 'CHARACTER== (CONS '~G1586 (CONS #\' COMMON-LISP:NIL))) (CONS (CONS 'QUOTE (CONS 'QUOTE COMMON-LISP:NIL)) (CONS (CONS 'CHARACTER== (CONS '~G1586 (CONS #\` COMMON-LISP:NIL))) (CONS (CONS 'QUOTE (CONS 'BACKQUOTE COMMON-LISP:NIL)) (CONS (CONS 'CHARACTER== (CONS '~G1586 (CONS #\^ COMMON-LISP:NIL))) (CONS (CONS 'QUOTE (CONS 'ACCENT-CIRCONFLEX COMMON-LISP:NIL)) (CONS (CONS 'CHARACTER== (CONS '~G1586 (CONS #\" COMMON-LISP:NIL))) (CONS (CONS 'QUOTE (CONS 'DBLQUOTE COMMON-LISP:NIL)) (CONS (CONS 'CHARACTER== (CONS '~G1586 (CONS #\, COMMON-LISP:NIL))) (CONS (CONS '? (CONS (CONS '== (CONS #\@ (CONS (CONS 'PEEK-CHAR (CONS 'STR COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS '? (CONS (CONS 'READ-CHAR (CONS 'STR COMMON-LISP:NIL)) (CONS (CONS 'QUOTE (CONS 'QUASIQUOTE-SPLICE COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'QUOTE (CONS 'QUASIQUOTE COMMON-LISP:NIL)) COMMON-LISP:NIL)))) (CONS (CONS 'CHARACTER== (CONS '~G1586 (CONS #\# COMMON-LISP:NIL))) (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS '~G1585 COMMON-LISP:NIL) (CONS (CONS '? (CONS (CONS 'CHARACTER== (CONS '~G1585 (CONS #\\ COMMON-LISP:NIL))) (CONS (CONS 'QUOTE (CONS 'CHAR COMMON-LISP:NIL)) (CONS (CONS 'CHARACTER== (CONS '~G1585 (CONS #\x COMMON-LISP:NIL))) (CONS (CONS 'QUOTE (CONS 'HEXNUM COMMON-LISP:NIL)) (CONS (CONS 'CHARACTER== (CONS '~G1585 (CONS #\' COMMON-LISP:NIL))) (CONS (CONS 'QUOTE (CONS 'FUNCTION COMMON-LISP:NIL)) (CONS (CONS 'CHARACTER== (CONS '~G1585 (CONS #\| COMMON-LISP:NIL))) (CONS (CONS 'READ-COMMENT-BLOCK (CONS 'STR COMMON-LISP:NIL)) (CONS (CONS 'ERROR (CONS "Invalid character after '#'." COMMON-LISP:NIL)) COMMON-LISP:NIL)))))))))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'READ-CHAR (CONS 'STR COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'CHARACTER== (CONS '~G1586 (CONS -1 COMMON-LISP:NIL))) (CONS (CONS 'QUOTE (CONS 'EOF COMMON-LISP:NIL)) COMMON-LISP:NIL))))))))))))))))))))))))))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'READ-CHAR (CONS 'STR COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)))) COMMON-LISP:NIL)))) (CONS 'PKG (CONS 'SYM COMMON-LISP:NIL)))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'READ-TOKEN))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'READ-SLOT-VALUE (CONS (CONS 'X COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN READ-SLOT-VALUE (X) (BLOCK READ-SLOT-VALUE (BLOCK COMMON-LISP:NIL (? X (? (CDR X) (CONS 'SLOT-VALUE (CONS (READ-SLOT-VALUE (BUTLAST X)) (CONS (CONS 'QUOTE (CONS (MAKE-SYMBOL (CAR (LAST X))) COMMON-LISP:NIL)) COMMON-LISP:NIL))) (? (STRING? (CAR X)) (MAKE-SYMBOL (CAR X)) (CAR X))))))) (SETF (GETHASH #'READ-SLOT-VALUE *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'READ-SLOT-VALUE (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS '? (CONS 'X (CONS (CONS '? (CONS (CONS 'CDR (CONS 'X COMMON-LISP:NIL)) (CONS (CONS 'BACKQUOTE (CONS (CONS 'SLOT-VALUE (CONS (CONS 'QUASIQUOTE (CONS (CONS 'READ-SLOT-VALUE (CONS (CONS 'BUTLAST (CONS 'X COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'QUOTE (CONS (CONS 'QUASIQUOTE (CONS (CONS 'MAKE-SYMBOL (CONS (CONS 'CAR (CONS (CONS 'LAST (CONS 'X COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL)) (CONS (CONS '? (CONS (CONS 'STRING? (CONS (CONS 'CAR (CONS 'X COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'MAKE-SYMBOL (CONS (CONS 'CAR (CONS 'X COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'CAR (CONS 'X COMMON-LISP:NIL)) COMMON-LISP:NIL)))) COMMON-LISP:NIL)))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'READ-SLOT-VALUE))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'READ-SYMBOL-OR-SLOT-VALUE (CONS (CONS 'SYM (CONS 'PKG COMMON-LISP:NIL)) COMMON-LISP:NIL)))) (PROGN (DEFUN READ-SYMBOL-OR-SLOT-VALUE (SYM PKG) (BLOCK READ-SYMBOL-OR-SLOT-VALUE (BLOCK COMMON-LISP:NIL (LABELS ((G4284 (!) (? (? (CDR !) (? (CAR !) (CAR (LAST !)))) (READ-SLOT-VALUE !) (MAKE-SYMBOL (LIST-STRING SYM) (? (NOT PKG) COMMON-LISP:NIL (EQ COMMON-LISP:T PKG) *KEYWORD-PACKAGE* (FIND-PACKAGE (LIST-STRING PKG))))))) (G4284 (FILTER #'(LAMBDA (_) (? _ (LIST-STRING _))) (SPLIT #\. SYM))))))) (SETF (GETHASH #'READ-SYMBOL-OR-SLOT-VALUE *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'SYM (CONS 'PKG COMMON-LISP:NIL)) (CONS (CONS 'BLOCK (CONS 'READ-SYMBOL-OR-SLOT-VALUE (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS '! COMMON-LISP:NIL) (CONS (CONS '? (CONS (CONS '? (CONS (CONS 'CDR (CONS '! COMMON-LISP:NIL)) (CONS (CONS '? (CONS (CONS 'CAR (CONS '! COMMON-LISP:NIL)) (CONS (CONS 'CAR (CONS (CONS 'LAST (CONS '! COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) (CONS (CONS 'READ-SLOT-VALUE (CONS '! COMMON-LISP:NIL)) (CONS (CONS 'MAKE-SYMBOL (CONS (CONS 'LIST-STRING (CONS 'SYM COMMON-LISP:NIL)) (CONS (CONS '? (CONS (CONS 'NOT (CONS 'PKG COMMON-LISP:NIL)) (CONS COMMON-LISP:NIL (CONS (CONS 'EQ (CONS COMMON-LISP:T (CONS 'PKG COMMON-LISP:NIL))) (CONS '*KEYWORD-PACKAGE* (CONS (CONS 'FIND-PACKAGE (CONS (CONS 'LIST-STRING (CONS 'PKG COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)))))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'FILTER (CONS (CONS 'FUNCTION (CONS (CONS (CONS '_ COMMON-LISP:NIL) (CONS (CONS '& (CONS '_ (CONS (CONS 'LIST-STRING (CONS '_ COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'SPLIT (CONS #\. (CONS 'SYM COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'READ-SYMBOL-OR-SLOT-VALUE))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'READ-ATOM (CONS (CONS 'STR (CONS 'TOKEN (CONS 'PKG (CONS 'SYM COMMON-LISP:NIL)))) COMMON-LISP:NIL)))) (PROGN (DEFUN READ-ATOM (STR TOKEN PKG SYM) (BLOCK READ-ATOM (BLOCK COMMON-LISP:NIL (LABELS ((G4285 (~G1587) (? (EQ ~G1587 'DBLQUOTE) (READ-STRING STR) (EQ ~G1587 'CHAR) (READ-CHAR STR) (EQ ~G1587 'NUMBER) (LABELS ((G4286 (S) (PRINC (LIST-STRING SYM) S) (PROGN (READ-NUMBER S)))) (G4286 (MAKE-STRING-STREAM))) (EQ ~G1587 'HEXNUM) (READ-HEX STR) (EQ ~G1587 'FUNCTION) (CONS 'FUNCTION (CONS (READ-EXPR STR) COMMON-LISP:NIL)) (EQ ~G1587 'SYMBOL) (READ-SYMBOL-OR-SLOT-VALUE SYM PKG) (ERROR "Syntax error: token ~A, sym ~A." TOKEN SYM)))) (G4285 TOKEN))))) (SETF (GETHASH #'READ-ATOM *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'STR (CONS 'TOKEN (CONS 'PKG (CONS 'SYM COMMON-LISP:NIL)))) (CONS (CONS 'BLOCK (CONS 'READ-ATOM (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS '~G1587 COMMON-LISP:NIL) (CONS (CONS '? (CONS (CONS 'EQ (CONS '~G1587 (CONS (CONS 'QUOTE (CONS 'DBLQUOTE COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'READ-STRING (CONS 'STR COMMON-LISP:NIL)) (CONS (CONS 'EQ (CONS '~G1587 (CONS (CONS 'QUOTE (CONS 'CHAR COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'READ-CHAR (CONS 'STR COMMON-LISP:NIL)) (CONS (CONS 'EQ (CONS '~G1587 (CONS (CONS 'QUOTE (CONS 'NUMBER COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS 'S COMMON-LISP:NIL) (CONS (CONS 'PRINC (CONS (CONS 'LIST-STRING (CONS 'SYM COMMON-LISP:NIL)) (CONS 'S COMMON-LISP:NIL))) (CONS (CONS 'PROGN (CONS (CONS 'READ-NUMBER (CONS 'S COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL)) (CONS (CONS 'MAKE-STRING-STREAM COMMON-LISP:NIL) COMMON-LISP:NIL)) (CONS (CONS 'EQ (CONS '~G1587 (CONS (CONS 'QUOTE (CONS 'HEXNUM COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'READ-HEX (CONS 'STR COMMON-LISP:NIL)) (CONS (CONS 'EQ (CONS '~G1587 (CONS (CONS 'QUOTE (CONS 'FUNCTION COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'BACKQUOTE (CONS (CONS 'FUNCTION (CONS (CONS 'QUASIQUOTE (CONS (CONS 'READ-EXPR (CONS 'STR COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'EQ (CONS '~G1587 (CONS (CONS 'QUOTE (CONS 'SYMBOL COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'READ-SYMBOL-OR-SLOT-VALUE (CONS 'SYM (CONS 'PKG COMMON-LISP:NIL))) (CONS (CONS 'ERROR (CONS "Syntax error: token ~A, sym ~A." (CONS 'TOKEN (CONS 'SYM COMMON-LISP:NIL)))) COMMON-LISP:NIL)))))))))))))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS 'TOKEN COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'READ-ATOM))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'READ-QUOTE (CONS (CONS 'STR (CONS 'TOKEN COMMON-LISP:NIL)) COMMON-LISP:NIL)))) (PROGN (DEFUN READ-QUOTE (STR TOKEN) (BLOCK READ-QUOTE (BLOCK COMMON-LISP:NIL (LIST TOKEN (READ-EXPR STR))))) (SETF (GETHASH #'READ-QUOTE *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'STR (CONS 'TOKEN COMMON-LISP:NIL)) (CONS (CONS 'BLOCK (CONS 'READ-QUOTE (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'LIST (CONS 'TOKEN (CONS (CONS 'READ-EXPR (CONS 'STR COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'READ-QUOTE))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'READ-SET-LISTPROP (CONS (CONS 'STR COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN READ-SET-LISTPROP (STR) (BLOCK READ-SET-LISTPROP (BLOCK COMMON-LISP:NIL (LABELS ((G4287 (!) (PROGN (SETQ *DEFAULT-LISTPROP* (CONS (STREAM-LOCATION-ID !) (CONS (MEMORIZED-NUMBER (STREAM-LOCATION-COLUMN !)) (MEMORIZED-NUMBER (STREAM-LOCATION-LINE !)))))))) (G4287 (STREAM-INPUT-LOCATION STR)))))) (SETF (GETHASH #'READ-SET-LISTPROP *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'STR COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'READ-SET-LISTPROP (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS '! COMMON-LISP:NIL) (CONS (CONS 'PROGN (CONS (CONS 'SETQ (CONS '*DEFAULT-LISTPROP* (CONS (CONS 'CONS (CONS (CONS 'STREAM-LOCATION-ID (CONS '! COMMON-LISP:NIL)) (CONS (CONS 'CONS (CONS (CONS 'MEMORIZED-NUMBER (CONS (CONS 'STREAM-LOCATION-COLUMN (CONS '! COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'MEMORIZED-NUMBER (CONS (CONS 'STREAM-LOCATION-LINE (CONS '! COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'STREAM-INPUT-LOCATION (CONS 'STR COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'READ-SET-LISTPROP))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'READ-LIST (CONS (CONS 'STR (CONS 'TOKEN (CONS 'PKG (CONS 'SYM COMMON-LISP:NIL)))) COMMON-LISP:NIL)))) (PROGN (DEFUN READ-LIST (STR TOKEN PKG SYM) (BLOCK READ-LIST (BLOCK COMMON-LISP:NIL (LABELS ((G4288 (~G1588) (? ~G1588 ~G1588 (ERROR "Missing closing bracket.")))) (G4288 TOKEN)) (? (NOT (%READ-CLOSING-BRACKET? TOKEN)) (PROGN (CONS (LABELS ((G4289 (~G1590) (PROGN (SETQ *DEFAULT-LISTPROP* *DEFAULT-LISTPROP*)) (LABELS ((G4290 (~G1619) (PROGN (SETQ *DEFAULT-LISTPROP* ~G1590)) ~G1619)) (G4290 (PROGN (LABELS ((G4291 (~G1589) (? (EQ ~G1589 'BRACKET-OPEN) (READ-CONS-SLOT STR) (EQ ~G1589 'SQUARE-BRACKET-OPEN) (CONS 'SQUARE (READ-CONS-SLOT STR)) (EQ ~G1589 'CURLY-BRACKET-OPEN) (CONS 'CURLY (READ-CONS-SLOT STR)) (? (TOKEN-IS-QUOTE? TOKEN) (READ-QUOTE STR TOKEN) (READ-ATOM STR TOKEN PKG SYM))))) (G4291 TOKEN))))))) (G4289 *DEFAULT-LISTPROP*)) (LABELS ((G4292 (~G1592) (PROGN (SETQ *DEFAULT-LISTPROP* *DEFAULT-LISTPROP*)) (LABELS ((G4293 (~G1625) (PROGN (SETQ *DEFAULT-LISTPROP* ~G1592)) ~G1625)) (G4293 (PROGN (LABELS ((G4294 (~G1620) (LABELS ((G4295 (~G1621) (? (NOT (EQ (CAR ~G1620) 'VALUES)) (PROGN (ERROR "VALUES expected instead of ~A." ~G1620))) (LABELS ((G4296 (TOKEN) (LABELS ((G4297 (~G1622) (LABELS ((G4298 (PKG) (LABELS ((G4299 (~G1623) (LABELS ((G4300 (SYM) (? (EQ 'DOT TOKEN) (LABELS ((G4301 (X) (LABELS ((G4302 (~G1646) (LABELS ((G4303 (~G1647) (? (NOT (EQ (CAR ~G1646) 'VALUES)) (PROGN (ERROR "VALUES expected instead of ~A." ~G1646))) (LABELS ((G4304 (TOKEN) (LABELS ((G4305 (~G1648) (LABELS ((G4306 (PKG) (LABELS ((G4307 (~G1649) (LABELS ((G4308 (SYM) (LABELS ((G4309 (~G1591) (? ~G1591 ~G1591 (ERROR "Only one value allowed after dotted cons.")))) (G4309 (%READ-CLOSING-BRACKET? TOKEN))) X)) (G4308 (CAR ~G1649))))) (G4307 (LABELS ((G4310 (~G1658) (? ~G1658 ~G1658 (%ERROR "Not enough VALUES.")))) (G4310 (CDR ~G1648))))))) (G4306 (CAR ~G1648))))) (G4305 (LABELS ((G4311 (~G1657) (? ~G1657 ~G1657 (%ERROR "Not enough VALUES.")))) (G4311 (CDR ~G1647))))))) (G4304 (CAR ~G1647))))) (G4303 (CDR ~G1646))))) (G4302 (READ-TOKEN STR))))) (G4301 (READ-EXPR STR))) (READ-LIST STR TOKEN PKG SYM)))) (G4300 (CAR ~G1623))))) (G4299 (LABELS ((G4312 (~G1645) (? ~G1645 ~G1645 (%ERROR "Not enough VALUES.")))) (G4312 (CDR ~G1622))))))) (G4298 (CAR ~G1622))))) (G4297 (LABELS ((G4313 (~G1644) (? ~G1644 ~G1644 (%ERROR "Not enough VALUES.")))) (G4313 (CDR ~G1621))))))) (G4296 (CAR ~G1621))))) (G4295 (CDR ~G1620))))) (G4294 (READ-TOKEN STR)))))))) (G4292 *DEFAULT-LISTPROP*)))))))) (SETF (GETHASH #'READ-LIST *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'STR (CONS 'TOKEN (CONS 'PKG (CONS 'SYM COMMON-LISP:NIL)))) (CONS (CONS 'BLOCK (CONS 'READ-LIST (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS '~G1588 COMMON-LISP:NIL) (CONS (CONS '? (CONS '~G1588 (CONS '~G1588 (CONS (CONS 'ERROR (CONS "Missing closing bracket." COMMON-LISP:NIL)) COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS 'TOKEN COMMON-LISP:NIL)) (CONS (CONS '& (CONS (CONS 'NOT (CONS (CONS '%READ-CLOSING-BRACKET? (CONS 'TOKEN COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'PROGN (CONS (CONS 'CONS (CONS (CONS 'LET (CONS '~G1590 (CONS '*DEFAULT-LISTPROP* (CONS (CONS 'PROGN (CONS (CONS 'SETQ (CONS '*DEFAULT-LISTPROP* (CONS '*DEFAULT-LISTPROP* COMMON-LISP:NIL))) COMMON-LISP:NIL)) (CONS (CONS 'LET (CONS '~G1619 (CONS (CONS 'PROGN (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS '~G1589 COMMON-LISP:NIL) (CONS (CONS '? (CONS (CONS 'EQ (CONS '~G1589 (CONS (CONS 'QUOTE (CONS 'BRACKET-OPEN COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'READ-CONS-SLOT (CONS 'STR COMMON-LISP:NIL)) (CONS (CONS 'EQ (CONS '~G1589 (CONS (CONS 'QUOTE (CONS 'SQUARE-BRACKET-OPEN COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'CONS (CONS (CONS 'QUOTE (CONS 'SQUARE COMMON-LISP:NIL)) (CONS (CONS 'READ-CONS-SLOT (CONS 'STR COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'EQ (CONS '~G1589 (CONS (CONS 'QUOTE (CONS 'CURLY-BRACKET-OPEN COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'CONS (CONS (CONS 'QUOTE (CONS 'CURLY COMMON-LISP:NIL)) (CONS (CONS 'READ-CONS-SLOT (CONS 'STR COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS '? (CONS (CONS 'TOKEN-IS-QUOTE? (CONS 'TOKEN COMMON-LISP:NIL)) (CONS (CONS 'READ-QUOTE (CONS 'STR (CONS 'TOKEN COMMON-LISP:NIL))) (CONS (CONS 'READ-ATOM (CONS 'STR (CONS 'TOKEN (CONS 'PKG (CONS 'SYM COMMON-LISP:NIL))))) COMMON-LISP:NIL)))) COMMON-LISP:NIL)))))))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS 'TOKEN COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'PROGN (CONS (CONS 'SETQ (CONS '*DEFAULT-LISTPROP* (CONS '~G1590 COMMON-LISP:NIL))) COMMON-LISP:NIL)) (CONS '~G1619 COMMON-LISP:NIL))))) COMMON-LISP:NIL))))) (CONS (CONS 'LET (CONS '~G1592 (CONS '*DEFAULT-LISTPROP* (CONS (CONS 'PROGN (CONS (CONS 'SETQ (CONS '*DEFAULT-LISTPROP* (CONS '*DEFAULT-LISTPROP* COMMON-LISP:NIL))) COMMON-LISP:NIL)) (CONS (CONS 'LET (CONS '~G1625 (CONS (CONS 'PROGN (CONS (CONS 'LET* (CONS (CONS (CONS '~G1620 (CONS (CONS 'READ-TOKEN (CONS 'STR COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS '~G1621 (CONS (CONS 'CDR (CONS '~G1620 COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'UNLESS (CONS (CONS 'EQ (CONS (CONS 'CAR (CONS '~G1620 COMMON-LISP:NIL)) (CONS (CONS 'QUOTE (CONS 'VALUES COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'ERROR (CONS "VALUES expected instead of ~A." (CONS '~G1620 COMMON-LISP:NIL))) COMMON-LISP:NIL))) (CONS (CONS 'LET* (CONS (CONS (CONS 'TOKEN (CONS (CONS 'CAR (CONS '~G1621 COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS '~G1622 (CONS (CONS '|\|| (CONS (CONS 'CDR (CONS '~G1621 COMMON-LISP:NIL)) (CONS (CONS '%ERROR (CONS "Not enough VALUES." COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'LET* (CONS (CONS (CONS 'PKG (CONS (CONS 'CAR (CONS '~G1622 COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS '~G1623 (CONS (CONS '|\|| (CONS (CONS 'CDR (CONS '~G1622 COMMON-LISP:NIL)) (CONS (CONS '%ERROR (CONS "Not enough VALUES." COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'LET* (CONS (CONS (CONS 'SYM (CONS (CONS 'CAR (CONS '~G1623 COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL) (CONS (CONS '? (CONS (CONS 'EQ (CONS (CONS 'QUOTE (CONS 'DOT COMMON-LISP:NIL)) (CONS 'TOKEN COMMON-LISP:NIL))) (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS 'X COMMON-LISP:NIL) (CONS (CONS 'MULTIPLE-VALUE-BIND (CONS (CONS 'TOKEN (CONS 'PKG (CONS 'SYM COMMON-LISP:NIL))) (CONS (CONS 'READ-TOKEN (CONS 'STR COMMON-LISP:NIL)) (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS '~G1591 COMMON-LISP:NIL) (CONS (CONS '? (CONS '~G1591 (CONS '~G1591 (CONS (CONS 'ERROR (CONS "Only one value allowed after dotted cons." COMMON-LISP:NIL)) COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS '%READ-CLOSING-BRACKET? (CONS 'TOKEN COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS 'X COMMON-LISP:NIL))))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'READ-EXPR (CONS 'STR COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'READ-LIST (CONS 'STR (CONS 'TOKEN (CONS 'PKG (CONS 'SYM COMMON-LISP:NIL))))) COMMON-LISP:NIL)))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) COMMON-LISP:NIL)) (CONS (CONS 'PROGN (CONS (CONS 'SETQ (CONS '*DEFAULT-LISTPROP* (CONS '~G1592 COMMON-LISP:NIL))) COMMON-LISP:NIL)) (CONS '~G1625 COMMON-LISP:NIL))))) COMMON-LISP:NIL))))) COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'READ-LIST))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'READ-CONS (CONS (CONS 'STR COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN READ-CONS (STR) (BLOCK READ-CONS (BLOCK COMMON-LISP:NIL (LABELS ((G4314 (~G1626) (LABELS ((G4315 (~G1627) (? (NOT (EQ (CAR ~G1626) 'VALUES)) (PROGN (ERROR "VALUES expected instead of ~A." ~G1626))) (LABELS ((G4316 (TOKEN) (LABELS ((G4317 (~G1628) (LABELS ((G4318 (PKG) (LABELS ((G4319 (~G1629) (LABELS ((G4320 (SYM) (? (EQ TOKEN 'DOT) (CONS 'CONS (READ-CONS STR)) (READ-LIST STR TOKEN PKG SYM)))) (G4320 (CAR ~G1629))))) (G4319 (LABELS ((G4321 (~G1652) (? ~G1652 ~G1652 (%ERROR "Not enough VALUES.")))) (G4321 (CDR ~G1628))))))) (G4318 (CAR ~G1628))))) (G4317 (LABELS ((G4322 (~G1651) (? ~G1651 ~G1651 (%ERROR "Not enough VALUES.")))) (G4322 (CDR ~G1627))))))) (G4316 (CAR ~G1627))))) (G4315 (CDR ~G1626))))) (G4314 (READ-TOKEN STR)))))) (SETF (GETHASH #'READ-CONS *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'STR COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'READ-CONS (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'LET* (CONS (CONS (CONS '~G1626 (CONS (CONS 'READ-TOKEN (CONS 'STR COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS '~G1627 (CONS (CONS 'CDR (CONS '~G1626 COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'UNLESS (CONS (CONS 'EQ (CONS (CONS 'CAR (CONS '~G1626 COMMON-LISP:NIL)) (CONS (CONS 'QUOTE (CONS 'VALUES COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'ERROR (CONS "VALUES expected instead of ~A." (CONS '~G1626 COMMON-LISP:NIL))) COMMON-LISP:NIL))) (CONS (CONS 'LET* (CONS (CONS (CONS 'TOKEN (CONS (CONS 'CAR (CONS '~G1627 COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS '~G1628 (CONS (CONS '|\|| (CONS (CONS 'CDR (CONS '~G1627 COMMON-LISP:NIL)) (CONS (CONS '%ERROR (CONS "Not enough VALUES." COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'LET* (CONS (CONS (CONS 'PKG (CONS (CONS 'CAR (CONS '~G1628 COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS '~G1629 (CONS (CONS '|\|| (CONS (CONS 'CDR (CONS '~G1628 COMMON-LISP:NIL)) (CONS (CONS '%ERROR (CONS "Not enough VALUES." COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'LET* (CONS (CONS (CONS 'SYM (CONS (CONS 'CAR (CONS '~G1629 COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL) (CONS (CONS '? (CONS (CONS 'EQ (CONS 'TOKEN (CONS (CONS 'QUOTE (CONS 'DOT COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'CONS (CONS (CONS 'QUOTE (CONS 'CONS COMMON-LISP:NIL)) (CONS (CONS 'READ-CONS (CONS 'STR COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'READ-LIST (CONS 'STR (CONS 'TOKEN (CONS 'PKG (CONS 'SYM COMMON-LISP:NIL))))) COMMON-LISP:NIL)))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'READ-CONS))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'READ-CONS-SLOT (CONS (CONS 'STR COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN READ-CONS-SLOT (STR) (BLOCK READ-CONS-SLOT (BLOCK COMMON-LISP:NIL (READ-SET-LISTPROP STR) (LABELS ((G4323 (~G1593) (PROGN (SETQ *DEFAULT-LISTPROP* *DEFAULT-LISTPROP*)) (LABELS ((G4324 (~G1636) (PROGN (SETQ *DEFAULT-LISTPROP* ~G1593)) ~G1636)) (G4324 (PROGN (LABELS ((G4325 (!) (? (== #\. (PEEK-CHAR STR)) (PROGN (READ-CHAR STR) (LABELS ((G4326 (~G1631) (LABELS ((G4327 (~G1632) (? (NOT (EQ (CAR ~G1631) 'VALUES)) (PROGN (ERROR "VALUES expected instead of ~A." ~G1631))) (LABELS ((G4328 (TOKEN) (LABELS ((G4329 (~G1633) (LABELS ((G4330 (PKG) (LABELS ((G4331 (~G1634) (LABELS ((G4332 (SYM) (READ-SLOT-VALUE (LIST ! (LIST-STRING SYM))))) (G4332 (CAR ~G1634))))) (G4331 (LABELS ((G4333 (~G1654) (? ~G1654 ~G1654 (%ERROR "Not enough VALUES.")))) (G4333 (CDR ~G1633))))))) (G4330 (CAR ~G1633))))) (G4329 (LABELS ((G4334 (~G1653) (? ~G1653 ~G1653 (%ERROR "Not enough VALUES.")))) (G4334 (CDR ~G1632))))))) (G4328 (CAR ~G1632))))) (G4327 (CDR ~G1631))))) (G4326 (READ-TOKEN STR)))) !))) (G4325 (READ-CONS STR)))))))) (G4323 *DEFAULT-LISTPROP*))))) (SETF (GETHASH #'READ-CONS-SLOT *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'STR COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'READ-CONS-SLOT (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'READ-SET-LISTPROP (CONS 'STR COMMON-LISP:NIL)) (CONS (CONS 'LET (CONS '~G1593 (CONS '*DEFAULT-LISTPROP* (CONS (CONS 'PROGN (CONS (CONS 'SETQ (CONS '*DEFAULT-LISTPROP* (CONS '*DEFAULT-LISTPROP* COMMON-LISP:NIL))) COMMON-LISP:NIL)) (CONS (CONS 'LET (CONS '~G1636 (CONS (CONS 'PROGN (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS '! COMMON-LISP:NIL) (CONS (CONS '? (CONS (CONS '== (CONS #\. (CONS (CONS 'PEEK-CHAR (CONS 'STR COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'PROGN (CONS (CONS 'READ-CHAR (CONS 'STR COMMON-LISP:NIL)) (CONS (CONS 'LET* (CONS (CONS (CONS '~G1631 (CONS (CONS 'READ-TOKEN (CONS 'STR COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS '~G1632 (CONS (CONS 'CDR (CONS '~G1631 COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'UNLESS (CONS (CONS 'EQ (CONS (CONS 'CAR (CONS '~G1631 COMMON-LISP:NIL)) (CONS (CONS 'QUOTE (CONS 'VALUES COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'ERROR (CONS "VALUES expected instead of ~A." (CONS '~G1631 COMMON-LISP:NIL))) COMMON-LISP:NIL))) (CONS (CONS 'LET* (CONS (CONS (CONS 'TOKEN (CONS (CONS 'CAR (CONS '~G1632 COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS '~G1633 (CONS (CONS '|\|| (CONS (CONS 'CDR (CONS '~G1632 COMMON-LISP:NIL)) (CONS (CONS '%ERROR (CONS "Not enough VALUES." COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'LET* (CONS (CONS (CONS 'PKG (CONS (CONS 'CAR (CONS '~G1633 COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS '~G1634 (CONS (CONS '|\|| (CONS (CONS 'CDR (CONS '~G1633 COMMON-LISP:NIL)) (CONS (CONS '%ERROR (CONS "Not enough VALUES." COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'LET* (CONS (CONS (CONS 'SYM (CONS (CONS 'CAR (CONS '~G1634 COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL) (CONS (CONS 'READ-SLOT-VALUE (CONS (CONS 'LIST (CONS '! (CONS (CONS 'LIST-STRING (CONS 'SYM COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) COMMON-LISP:NIL))) (CONS '! COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'READ-CONS (CONS 'STR COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'PROGN (CONS (CONS 'SETQ (CONS '*DEFAULT-LISTPROP* (CONS '~G1593 COMMON-LISP:NIL))) COMMON-LISP:NIL)) (CONS '~G1636 COMMON-LISP:NIL))))) COMMON-LISP:NIL))))) COMMON-LISP:NIL)))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'READ-CONS-SLOT))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'READ-EXPR (CONS (CONS 'STR COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN READ-EXPR (STR) (BLOCK READ-EXPR (BLOCK COMMON-LISP:NIL (LABELS ((G4335 (~G1637) (LABELS ((G4336 (~G1638) (? (NOT (EQ (CAR ~G1637) 'VALUES)) (PROGN (ERROR "VALUES expected instead of ~A." ~G1637))) (LABELS ((G4337 (TOKEN) (LABELS ((G4338 (~G1639) (LABELS ((G4339 (PKG) (LABELS ((G4340 (~G1640) (LABELS ((G4341 (SYM) (LABELS ((G4342 (~G1594) (? (EQ ~G1594 COMMON-LISP:NIL) COMMON-LISP:NIL (EQ ~G1594 'EOF) COMMON-LISP:NIL (EQ ~G1594 'BRACKET-OPEN) (READ-CONS-SLOT STR) (EQ ~G1594 'SQUARE-BRACKET-OPEN) (CONS 'SQUARE (READ-CONS-SLOT STR)) (EQ ~G1594 'CURLY-BRACKET-OPEN) (CONS 'CURLY (READ-CONS-SLOT STR)) (? (TOKEN-IS-QUOTE? TOKEN) (READ-QUOTE STR TOKEN) (READ-ATOM STR TOKEN PKG SYM))))) (G4342 TOKEN)))) (G4341 (CAR ~G1640))))) (G4340 (LABELS ((G4343 (~G1656) (? ~G1656 ~G1656 (%ERROR "Not enough VALUES.")))) (G4343 (CDR ~G1639))))))) (G4339 (CAR ~G1639))))) (G4338 (LABELS ((G4344 (~G1655) (? ~G1655 ~G1655 (%ERROR "Not enough VALUES.")))) (G4344 (CDR ~G1638))))))) (G4337 (CAR ~G1638))))) (G4336 (CDR ~G1637))))) (G4335 (READ-TOKEN STR)))))) (SETF (GETHASH #'READ-EXPR *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'STR COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'READ-EXPR (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'LET* (CONS (CONS (CONS '~G1637 (CONS (CONS 'READ-TOKEN (CONS 'STR COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS '~G1638 (CONS (CONS 'CDR (CONS '~G1637 COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'UNLESS (CONS (CONS 'EQ (CONS (CONS 'CAR (CONS '~G1637 COMMON-LISP:NIL)) (CONS (CONS 'QUOTE (CONS 'VALUES COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'ERROR (CONS "VALUES expected instead of ~A." (CONS '~G1637 COMMON-LISP:NIL))) COMMON-LISP:NIL))) (CONS (CONS 'LET* (CONS (CONS (CONS 'TOKEN (CONS (CONS 'CAR (CONS '~G1638 COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS '~G1639 (CONS (CONS '|\|| (CONS (CONS 'CDR (CONS '~G1638 COMMON-LISP:NIL)) (CONS (CONS '%ERROR (CONS "Not enough VALUES." COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'LET* (CONS (CONS (CONS 'PKG (CONS (CONS 'CAR (CONS '~G1639 COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS '~G1640 (CONS (CONS '|\|| (CONS (CONS 'CDR (CONS '~G1639 COMMON-LISP:NIL)) (CONS (CONS '%ERROR (CONS "Not enough VALUES." COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'LET* (CONS (CONS (CONS 'SYM (CONS (CONS 'CAR (CONS '~G1640 COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL) (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS '~G1594 COMMON-LISP:NIL) (CONS (CONS '? (CONS (CONS 'EQ (CONS '~G1594 (CONS COMMON-LISP:NIL COMMON-LISP:NIL))) (CONS COMMON-LISP:NIL (CONS (CONS 'EQ (CONS '~G1594 (CONS (CONS 'QUOTE (CONS 'EOF COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS COMMON-LISP:NIL (CONS (CONS 'EQ (CONS '~G1594 (CONS (CONS 'QUOTE (CONS 'BRACKET-OPEN COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'READ-CONS-SLOT (CONS 'STR COMMON-LISP:NIL)) (CONS (CONS 'EQ (CONS '~G1594 (CONS (CONS 'QUOTE (CONS 'SQUARE-BRACKET-OPEN COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'CONS (CONS (CONS 'QUOTE (CONS 'SQUARE COMMON-LISP:NIL)) (CONS (CONS 'READ-CONS-SLOT (CONS 'STR COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'EQ (CONS '~G1594 (CONS (CONS 'QUOTE (CONS 'CURLY-BRACKET-OPEN COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'CONS (CONS (CONS 'QUOTE (CONS 'CURLY COMMON-LISP:NIL)) (CONS (CONS 'READ-CONS-SLOT (CONS 'STR COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS '? (CONS (CONS 'TOKEN-IS-QUOTE? (CONS 'TOKEN COMMON-LISP:NIL)) (CONS (CONS 'READ-QUOTE (CONS 'STR (CONS 'TOKEN COMMON-LISP:NIL))) (CONS (CONS 'READ-ATOM (CONS 'STR (CONS 'TOKEN (CONS 'PKG (CONS 'SYM COMMON-LISP:NIL))))) COMMON-LISP:NIL)))) COMMON-LISP:NIL)))))))))))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS 'TOKEN COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'READ-EXPR))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'READ (CONS (CONS '&OPTIONAL (CONS (CONS 'STR (CONS '*STANDARD-INPUT* COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)))) (PROGN (DEFUN READ (&OPTIONAL (STR *STANDARD-INPUT*)) (BLOCK READ (BLOCK COMMON-LISP:NIL (SKIP-SPACES STR) (? (PEEK-CHAR STR) (READ-EXPR STR))))) (SETF (GETHASH #'READ *FUNCTION-ATOM-SOURCES*) (CONS (CONS '&OPTIONAL (CONS (CONS 'STR (CONS '*STANDARD-INPUT* COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'BLOCK (CONS 'READ (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'SKIP-SPACES (CONS 'STR COMMON-LISP:NIL)) (CONS (CONS '? (CONS (CONS 'PEEK-CHAR (CONS 'STR COMMON-LISP:NIL)) (CONS (CONS 'READ-EXPR (CONS 'STR COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'READ))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS 'READ-ALL (CONS (CONS 'STR COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN READ-ALL (STR) (BLOCK READ-ALL (BLOCK COMMON-LISP:NIL (SKIP-SPACES STR) (? (PEEK-CHAR STR) (CONS (READ STR) (READ-ALL STR)))))) (SETF (GETHASH #'READ-ALL *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'STR COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS 'READ-ALL (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'SKIP-SPACES (CONS 'STR COMMON-LISP:NIL)) (CONS (CONS '? (CONS (CONS 'PEEK-CHAR (CONS 'STR COMMON-LISP:NIL)) (CONS (CONS 'CONS (CONS (CONS 'READ (CONS 'STR COMMON-LISP:NIL)) (CONS (CONS 'READ-ALL (CONS 'STR COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL 'READ-ALL))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS '%LOAD-R (CONS (CONS 'S COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN %LOAD-R (S) (BLOCK %LOAD-R (BLOCK COMMON-LISP:NIL (? (PEEK-CHAR S) (PROGN (CONS (READ S) (%LOAD-R S))))))) (SETF (GETHASH #'%LOAD-R *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'S COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS '%LOAD-R (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS '? (CONS (CONS 'PEEK-CHAR (CONS 'S COMMON-LISP:NIL)) (CONS (CONS 'PROGN (CONS (CONS 'CONS (CONS (CONS 'READ (CONS 'S COMMON-LISP:NIL)) (CONS (CONS '%LOAD-R (CONS 'S COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL '%LOAD-R))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS '%EXPAND (CONS (CONS 'X COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN %EXPAND (X) (BLOCK %EXPAND (BLOCK COMMON-LISP:NIL (LABELS ((G4345 (!) (? (EQUAL X !) X (%EXPAND !)))) (G4345 (QUASIQUOTE-EXPAND (MACROEXPAND (DOT-EXPAND X)))))))) (SETF (GETHASH #'%EXPAND *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'X COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS '%EXPAND (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS (CONS 'FUNCTION (CONS (CONS (CONS '! COMMON-LISP:NIL) (CONS (CONS '? (CONS (CONS 'EQUAL (CONS 'X (CONS '! COMMON-LISP:NIL))) (CONS 'X (CONS (CONS '%EXPAND (CONS '! COMMON-LISP:NIL)) COMMON-LISP:NIL)))) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'QUASIQUOTE-EXPAND (CONS (CONS 'MACROEXPAND (CONS (CONS 'DOT-EXPAND (CONS 'X COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL '%EXPAND))
(BLOCK COMMON-LISP:NIL (PRINT-DEFINITION (CONS 'DEFUN (CONS '%LOAD (CONS (CONS 'PATHNAME COMMON-LISP:NIL) COMMON-LISP:NIL)))) (PROGN (DEFUN %LOAD (PATHNAME) (BLOCK %LOAD (BLOCK COMMON-LISP:NIL (PRINT (CONS '%LOAD (CONS PATHNAME COMMON-LISP:NIL))) (BLOCK COMMON-LISP:NIL (LABELS ((G4346 (~G1661) (LABELS ((G4347 (I) (TAGBODY ~G1659 (? (NOT ~G1661) (GO ~G1660)) (SETQ I (CAR ~G1661)) (%EVAL (%EXPAND I)) (SETQ ~G1661 (CDR ~G1661)) (GO ~G1659) ~G1660 (RETURN-FROM COMMON-LISP:NIL (PROGN))))) (G4347 COMMON-LISP:NIL)))) (G4346 (LABELS ((G4348 (S) (LABELS ((G4349 (~G1662) (CLOSE S) ~G1662)) (G4349 (PROGN (%LOAD-R S)))))) (G4348 (OPEN PATHNAME :DIRECTION 'INPUT))))))))) (SETF (GETHASH #'%LOAD *FUNCTION-ATOM-SOURCES*) (CONS (CONS 'PATHNAME COMMON-LISP:NIL) (CONS (CONS 'BLOCK (CONS '%LOAD (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'PRINT (CONS (CONS 'BACKQUOTE (CONS (CONS '%LOAD (CONS (CONS 'QUASIQUOTE (CONS 'PATHNAME COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'BLOCK (CONS COMMON-LISP:NIL (CONS (CONS 'LET (CONS '~G1661 (CONS (CONS 'WITH-OPEN-FILE (CONS 'S (CONS (CONS 'OPEN (CONS 'PATHNAME (CONS ':DIRECTION (CONS (CONS 'QUOTE (CONS 'INPUT COMMON-LISP:NIL)) COMMON-LISP:NIL)))) (CONS (CONS '%LOAD-R (CONS 'S COMMON-LISP:NIL)) COMMON-LISP:NIL)))) (CONS (CONS 'LET* (CONS (CONS (CONS 'I (CONS COMMON-LISP:NIL COMMON-LISP:NIL)) COMMON-LISP:NIL) (CONS (CONS 'TAGBODY (CONS '~G1659 (CONS (CONS '? (CONS (CONS 'NOT (CONS '~G1661 COMMON-LISP:NIL)) (CONS (CONS 'GO (CONS '~G1660 COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'SETQ (CONS 'I (CONS (CONS 'CAR (CONS '~G1661 COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS '%EVAL (CONS (CONS '%EXPAND (CONS 'I COMMON-LISP:NIL)) COMMON-LISP:NIL)) (CONS (CONS 'SETQ (CONS '~G1661 (CONS (CONS 'CDR (CONS '~G1661 COMMON-LISP:NIL)) COMMON-LISP:NIL))) (CONS (CONS 'GO (CONS '~G1659 COMMON-LISP:NIL)) (CONS '~G1660 (CONS (CONS 'RETURN-FROM (CONS COMMON-LISP:NIL (CONS (CONS 'PROGN COMMON-LISP:NIL) COMMON-LISP:NIL))) COMMON-LISP:NIL))))))))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) COMMON-LISP:NIL))) COMMON-LISP:NIL)))) (RETURN-FROM COMMON-LISP:NIL '%LOAD))
