(IN-PACKAGE :TRE-PARALLEL)
(CL:PROGN (CL:DEFUN EVAL (X) (%EVAL X)) (CL:SETF (CL:GETHASH #'EVAL *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X CL:NIL) (CL:CONS (CL:CONS '%EVAL (CL:CONS 'X CL:NIL)) CL:NIL))))
(CL:PROGN (CL:DEFUN STRING (X) (%STRING X)) (CL:SETF (CL:GETHASH #'STRING *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X CL:NIL) (CL:CONS (CL:CONS '%STRING (CL:CONS 'X CL:NIL)) CL:NIL))))
(CL:PROGN (CL:DEFUN EQ (CL:&REST X) (CL:APPLY #'%EQ (CL:LIST X))) (CL:SETF (CL:GETHASH #'EQ *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'CL:&REST (CL:CONS 'X CL:NIL)) (CL:CONS (CL:CONS 'CL:APPLY (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS '%EQ CL:NIL)) (CL:CONS (CL:CONS 'CL:LIST (CL:CONS 'X CL:NIL)) CL:NIL))) CL:NIL))))
(CL:PROGN (CL:DEFUN EQL (CL:&REST X) (CL:APPLY #'%EQL (CL:LIST X))) (CL:SETF (CL:GETHASH #'EQL *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'CL:&REST (CL:CONS 'X CL:NIL)) (CL:CONS (CL:CONS 'CL:APPLY (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS '%EQL CL:NIL)) (CL:CONS (CL:CONS 'CL:LIST (CL:CONS 'X CL:NIL)) CL:NIL))) CL:NIL))))
(CL:PROGN (CL:DEFUN NOT (CL:&REST X) (CL:APPLY #'%NOT X)) (CL:SETF (CL:GETHASH #'NOT *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'CL:&REST (CL:CONS 'X CL:NIL)) (CL:CONS (CL:CONS 'CL:APPLY (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS '%NOT CL:NIL)) (CL:CONS 'X CL:NIL))) CL:NIL))))
(CL:PROGN (CL:DEFUN MAKE-SYMBOL (X CL:&OPTIONAL (PACKAGE CL:NIL)) (%MAKE-SYMBOL X PACKAGE)) (CL:SETF (CL:GETHASH #'MAKE-SYMBOL *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X (CL:CONS 'CL:&OPTIONAL (CL:CONS (CL:CONS 'PACKAGE (CL:CONS CL:NIL CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS '%MAKE-SYMBOL (CL:CONS 'X (CL:CONS 'PACKAGE CL:NIL))) CL:NIL))))
(CL:PROGN (CL:DEFUN SYMBOL-NAME (X) (%SYMBOL-NAME X)) (CL:SETF (CL:GETHASH #'SYMBOL-NAME *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X CL:NIL) (CL:CONS (CL:CONS '%SYMBOL-NAME (CL:CONS 'X CL:NIL)) CL:NIL))))
(CL:PROGN (CL:DEFUN SYMBOL-VALUE (X) (%SYMBOL-VALUE X)) (CL:SETF (CL:GETHASH #'SYMBOL-VALUE *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X CL:NIL) (CL:CONS (CL:CONS '%SYMBOL-VALUE (CL:CONS 'X CL:NIL)) CL:NIL))))
(CL:PROGN (CL:DEFUN SYMBOL-FUNCTION (X) (%SYMBOL-FUNCTION X)) (CL:SETF (CL:GETHASH #'SYMBOL-FUNCTION *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X CL:NIL) (CL:CONS (CL:CONS '%SYMBOL-FUNCTION (CL:CONS 'X CL:NIL)) CL:NIL))))
(CL:PROGN (CL:DEFUN SYMBOL-PACKAGE (X) (%SYMBOL-PACKAGE X)) (CL:SETF (CL:GETHASH #'SYMBOL-PACKAGE *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X CL:NIL) (CL:CONS (CL:CONS '%SYMBOL-PACKAGE (CL:CONS 'X CL:NIL)) CL:NIL))))
(CL:PROGN (CL:DEFUN NUMBER? (X) (%NUMBER? X)) (CL:SETF (CL:GETHASH #'NUMBER? *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X CL:NIL) (CL:CONS (CL:CONS '%NUMBER? (CL:CONS 'X CL:NIL)) CL:NIL))))
(CL:PROGN (CL:DEFUN INTEGER (X) (%INTEGER X)) (CL:SETF (CL:GETHASH #'INTEGER *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X CL:NIL) (CL:CONS (CL:CONS '%INTEGER (CL:CONS 'X CL:NIL)) CL:NIL))))
(CL:PROGN (CL:DEFUN CODE-CHAR (X) (%CODE-CHAR (%INTEGER X))) (CL:SETF (CL:GETHASH #'CODE-CHAR *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X CL:NIL) (CL:CONS (CL:CONS '%CODE-CHAR (CL:CONS (CL:CONS '%INTEGER (CL:CONS 'X CL:NIL)) CL:NIL)) CL:NIL))))
(CL:PROGN (CL:DEFUN NUMBER+ (CL:&REST X) (CL:APPLY #'%+ X)) (CL:SETF (CL:GETHASH #'NUMBER+ *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'CL:&REST (CL:CONS 'X CL:NIL)) (CL:CONS (CL:CONS 'CL:APPLY (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS '%+ CL:NIL)) (CL:CONS 'X CL:NIL))) CL:NIL))))
(CL:PROGN (CL:DEFUN INTEGER+ (CL:&REST X) (CL:APPLY #'%+ X)) (CL:SETF (CL:GETHASH #'INTEGER+ *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'CL:&REST (CL:CONS 'X CL:NIL)) (CL:CONS (CL:CONS 'CL:APPLY (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS '%+ CL:NIL)) (CL:CONS 'X CL:NIL))) CL:NIL))))
(CL:PROGN (CL:DEFUN CHARACTER+ (CL:&REST X) (CL:APPLY #'%+ X)) (CL:SETF (CL:GETHASH #'CHARACTER+ *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'CL:&REST (CL:CONS 'X CL:NIL)) (CL:CONS (CL:CONS 'CL:APPLY (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS '%+ CL:NIL)) (CL:CONS 'X CL:NIL))) CL:NIL))))
(CL:PROGN (CL:DEFUN NUMBER- (CL:&REST X) (CL:APPLY #'%- X)) (CL:SETF (CL:GETHASH #'NUMBER- *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'CL:&REST (CL:CONS 'X CL:NIL)) (CL:CONS (CL:CONS 'CL:APPLY (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS '%- CL:NIL)) (CL:CONS 'X CL:NIL))) CL:NIL))))
(CL:PROGN (CL:DEFUN INTEGER- (CL:&REST X) (CL:APPLY #'%- X)) (CL:SETF (CL:GETHASH #'INTEGER- *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'CL:&REST (CL:CONS 'X CL:NIL)) (CL:CONS (CL:CONS 'CL:APPLY (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS '%- CL:NIL)) (CL:CONS 'X CL:NIL))) CL:NIL))))
(CL:PROGN (CL:DEFUN CHARACTER- (CL:&REST X) (CL:APPLY #'%- X)) (CL:SETF (CL:GETHASH #'CHARACTER- *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'CL:&REST (CL:CONS 'X CL:NIL)) (CL:CONS (CL:CONS 'CL:APPLY (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS '%- CL:NIL)) (CL:CONS 'X CL:NIL))) CL:NIL))))
(CL:PROGN (CL:DEFUN * (CL:&REST X) (CL:APPLY #'%* X)) (CL:SETF (CL:GETHASH #'* *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'CL:&REST (CL:CONS 'X CL:NIL)) (CL:CONS (CL:CONS 'CL:APPLY (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS '%* CL:NIL)) (CL:CONS 'X CL:NIL))) CL:NIL))))
(CL:PROGN (CL:DEFUN / (CL:&REST X) (CL:APPLY #'%/ X)) (CL:SETF (CL:GETHASH #'/ *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'CL:&REST (CL:CONS 'X CL:NIL)) (CL:CONS (CL:CONS 'CL:APPLY (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS '%/ CL:NIL)) (CL:CONS 'X CL:NIL))) CL:NIL))))
(CL:PROGN (CL:DEFUN < (CL:&REST X) (CL:APPLY #'%< X)) (CL:SETF (CL:GETHASH #'< *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'CL:&REST (CL:CONS 'X CL:NIL)) (CL:CONS (CL:CONS 'CL:APPLY (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS '%< CL:NIL)) (CL:CONS 'X CL:NIL))) CL:NIL))))
(CL:PROGN (CL:DEFUN > (CL:&REST X) (CL:APPLY #'%> X)) (CL:SETF (CL:GETHASH #'> *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'CL:&REST (CL:CONS 'X CL:NIL)) (CL:CONS (CL:CONS 'CL:APPLY (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS '%> CL:NIL)) (CL:CONS 'X CL:NIL))) CL:NIL))))
(CL:PROGN (CL:DEFUN FILTER (FUN X) (CL:MAPCAR FUN X)) (CL:SETF (CL:GETHASH #'FILTER *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'FUN (CL:CONS 'X CL:NIL)) (CL:CONS (CL:CONS 'CL:MAPCAR (CL:CONS 'FUN (CL:CONS 'X CL:NIL))) CL:NIL))))
(CL:PROGN (CL:DEFUN MAKE-ARRAY (CL:&OPTIONAL (DIMENSIONS 1)) (%MAKE-ARRAY DIMENSIONS)) (CL:SETF (CL:GETHASH #'MAKE-ARRAY *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'CL:&OPTIONAL (CL:CONS (CL:CONS 'DIMENSIONS (CL:CONS 1 CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS '%MAKE-ARRAY (CL:CONS 'DIMENSIONS CL:NIL)) CL:NIL))))
(CL:PROGN (CL:DEFUN MAKE-HASH-TABLE (CL:&KEY (TEST #'EQL)) (%MAKE-HASH-TABLE :TEST TEST)) (CL:SETF (CL:GETHASH #'MAKE-HASH-TABLE *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'CL:&KEY (CL:CONS (CL:CONS 'TEST (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS 'EQL CL:NIL)) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS '%MAKE-HASH-TABLE (CL:CONS ':TEST (CL:CONS 'TEST CL:NIL))) CL:NIL))))
(CL:PROGN (CL:DEFUN LOAD (PATHNAME) (%LOAD PATHNAME)) (CL:SETF (CL:GETHASH #'LOAD *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'PATHNAME CL:NIL) (CL:CONS (CL:CONS '%LOAD (CL:CONS 'PATHNAME CL:NIL)) CL:NIL))))
(%DEFVAR *MACROEXPAND* CL:NIL)
(CL:PROGN (CL:DEFUN MACROEXPAND-1 (X) (? *MACROEXPAND* (CL:APPLY *MACROEXPAND* (CL:LIST X)) X)) (CL:SETF (CL:GETHASH #'MACROEXPAND-1 *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS '*MACROEXPAND* (CL:CONS (CL:CONS 'CL:APPLY (CL:CONS '*MACROEXPAND* (CL:CONS (CL:CONS 'CL:LIST (CL:CONS 'X CL:NIL)) CL:NIL))) (CL:CONS 'X CL:NIL)))) CL:NIL))))
(CL:PROGN (CL:DEFUN MACROEXPAND-0 (OLD X) (? (%EQUAL X OLD) OLD (MACROEXPAND X))) (CL:SETF (CL:GETHASH #'MACROEXPAND-0 *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'OLD (CL:CONS 'X CL:NIL)) (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS '%EQUAL (CL:CONS 'X (CL:CONS 'OLD CL:NIL))) (CL:CONS 'OLD (CL:CONS (CL:CONS 'MACROEXPAND (CL:CONS 'X CL:NIL)) CL:NIL)))) CL:NIL))))
(CL:PROGN (CL:DEFUN MACROEXPAND (X) (MACROEXPAND-0 X (MACROEXPAND-1 X))) (CL:SETF (CL:GETHASH #'MACROEXPAND *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X CL:NIL) (CL:CONS (CL:CONS 'MACROEXPAND-0 (CL:CONS 'X (CL:CONS (CL:CONS 'MACROEXPAND-1 (CL:CONS 'X CL:NIL)) CL:NIL))) CL:NIL))))
(CL:PROGN (CL:DEFUN NANOTIME CL:NIL 0) (CL:SETF (CL:GETHASH #'NANOTIME *FUNCTION-ATOM-SOURCES*) (CL:CONS CL:NIL (CL:CONS 0 CL:NIL))))
(CL:PROGN (CL:DEFUN FUNCTION-BYTECODE (X) X CL:NIL) (CL:SETF (CL:GETHASH #'FUNCTION-BYTECODE *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X CL:NIL) (CL:CONS 'X (CL:CONS CL:NIL CL:NIL)))))
(%DEFVAR *FUNCTIONALS* CL:NIL)
(%DEFMACRO FUNCTIONAL (CL:&REST NAMES) (PRINT-DEFINITION (CL:CONS 'FUNCTIONAL (APPEND NAMES CL:NIL))) (CL:CONS 'CL:SETQ (CL:CONS '*FUNCTIONALS* (CL:CONS (CL:CONS '%NCONC (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS NAMES CL:NIL)) (CL:CONS '*FUNCTIONALS* CL:NIL))) CL:NIL))))
(CL:PROGN (CL:DEFUN FUNCTIONAL? (NAME) (MEMBER NAME *FUNCTIONALS* :TEST #'EQ)) (CL:SETF (CL:GETHASH #'FUNCTIONAL? *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'NAME CL:NIL) (CL:CONS (CL:CONS 'MEMBER (CL:CONS 'NAME (CL:CONS '*FUNCTIONALS* (CL:CONS ':TEST (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS 'EQ CL:NIL)) CL:NIL))))) CL:NIL))))
(CL:SETQ *FUNCTIONALS* (%NCONC (CL:CONS 'IDENTITY (CL:CONS '+ (CL:CONS '- (CL:CONS '* (CL:CONS '/ (CL:CONS 'CL:MOD (CL:CONS 'NUMBER+ (CL:CONS 'NUMBER- (CL:CONS 'NUMBER* (CL:CONS 'NUMBER/ (CL:CONS 'INTEGER+ (CL:CONS 'INTEGER- (CL:CONS 'INTEGER* (CL:CONS 'INTEGER/ (CL:CONS 'CHARACTER+ (CL:CONS 'CHARACTER- (CL:CONS 'LOGXOR (CL:CONS 'NUMBER? (CL:CONS '== (CL:CONS '< (CL:CONS '> (CL:CONS 'NUMBER== (CL:CONS 'NUMBER< (CL:CONS 'NUMBER> (CL:CONS 'INTEGER== (CL:CONS 'INTEGER< (CL:CONS 'INTEGER> (CL:CONS 'CHARACTER== (CL:CONS 'CHARACTER< (CL:CONS 'CHARACTER> (CL:CONS 'BIT-OR (CL:CONS 'BIT-AND (CL:CONS '<< (CL:CONS '>> (CL:CONS 'CODE-CHAR (CL:CONS 'INTEGER (CL:CONS 'CHARACTER? (CL:CONS 'NOT (CL:CONS 'EQ (CL:CONS 'EQL (CL:CONS 'MAKE-SYMBOL (CL:CONS 'CL:MAKE-PACKAGE (CL:CONS 'CL:ATOM (CL:CONS 'SYMBOL-VALUE (CL:CONS '%TYPE (CL:CONS '%%ID (CL:CONS '%MAKE-PTR (CL:CONS 'SYMBOL-FUNCTION (CL:CONS 'SYMBOL-PACKAGE (CL:CONS 'FUNCTION-NATIVE (CL:CONS 'SYMBOL? (CL:CONS 'FUNCTION? (CL:CONS 'BUILTIN? (CL:CONS 'MACRO? (CL:CONS 'CL:CONS (CL:CONS 'CL:LIST (CL:CONS 'CL:CAR (CL:CONS 'CL:CDR (CL:CONS 'CONS? (CL:CONS 'CL:ELT (CL:CONS 'CL:LENGTH (CL:CONS 'STRING? (CL:CONS 'CL:MAKE-STRING (CL:CONS 'STRING== (CL:CONS 'STRING-CONCAT (CL:CONS 'STRING (CL:CONS 'SYMBOL-NAME (CL:CONS 'LIST-STRING (CL:CONS 'MAKE-ARRAY (CL:CONS 'ARRAY? (CL:CONS 'CL:AREF (CL:CONS 'SLOT-VALUE (CL:CONS '%SLOT-VALUE (CL:CONS 'CL:LIST (CL:CONS 'IDENTITY (CL:CONS 'CL:LAST (CL:CONS 'CL:COPY-LIST (CL:CONS 'INTEGER? (CL:CONS 'CHARACTER? CL:NIL))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) *FUNCTIONALS*))
(%DEFVAR *DEFINITION-PRINTER* #'CL:PRINT)
(CL:PROGN (CL:DEFUN PRINT-DEFINITION (X) (? *PRINT-DEFINITIONS?* (CL:APPLY *DEFINITION-PRINTER* (CL:LIST X)))) (CL:SETF (CL:GETHASH #'PRINT-DEFINITION *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS '*PRINT-DEFINITIONS?* (CL:CONS (CL:CONS 'CL:APPLY (CL:CONS '*DEFINITION-PRINTER* (CL:CONS (CL:CONS 'CL:LIST (CL:CONS 'X CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL))))
(CL:PROGN (CL:DEFUN ANY-QUASIQUOTE? (X) (? (CONS? X) (? (EQ (CL:CAR X) 'QUASIQUOTE) CL:T (EQ (CL:CAR X) 'QUASIQUOTE-SPLICE) CL:T))) (CL:SETF (CL:GETHASH #'ANY-QUASIQUOTE? *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'CONS? (CL:CONS 'X CL:NIL)) (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'EQ (CL:CONS (CL:CONS 'CL:CAR (CL:CONS 'X CL:NIL)) (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'QUASIQUOTE CL:NIL)) CL:NIL))) (CL:CONS CL:T (CL:CONS (CL:CONS 'EQ (CL:CONS (CL:CONS 'CL:CAR (CL:CONS 'X CL:NIL)) (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'QUASIQUOTE-SPLICE CL:NIL)) CL:NIL))) (CL:CONS CL:T CL:NIL))))) CL:NIL))) CL:NIL))))
(CL:PROGN (CL:DEFUN %QUASIQUOTE-EXPAND (X) (? (CL:ATOM X) X (CL:ATOM (CL:CAR X)) (CL:CONS (CL:CAR X) (%QUASIQUOTE-EXPAND (CL:CDR X))) (EQ (CL:CAR (CL:CAR X)) 'CL:QUOTE) (CL:CONS (CL:CAR X) (%QUASIQUOTE-EXPAND (CL:CDR X))) (EQ (CL:CAR (CL:CAR X)) 'BACKQUOTE) (CL:CONS (CL:CAR X) (%QUASIQUOTE-EXPAND (CL:CDR X))) (EQ (CL:CAR (CL:CAR X)) 'QUASIQUOTE) (CL:CONS (EVAL (MACROEXPAND (CL:CAR (CL:CDR (CL:CAR X))))) (%QUASIQUOTE-EXPAND (CL:CDR X))) (EQ (CL:CAR (CL:CAR X)) 'QUASIQUOTE-SPLICE) (APPEND (EVAL (MACROEXPAND (CL:CAR (CL:CDR (CL:CAR X))))) (%QUASIQUOTE-EXPAND (CL:CDR X))) (CL:CONS (%QUASIQUOTE-EXPAND (CL:CAR X)) (%QUASIQUOTE-EXPAND (CL:CDR X))))) (CL:SETF (CL:GETHASH #'%QUASIQUOTE-EXPAND *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'CL:ATOM (CL:CONS 'X CL:NIL)) (CL:CONS 'X (CL:CONS (CL:CONS 'CL:ATOM (CL:CONS (CL:CONS 'CL:CAR (CL:CONS 'X CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'CL:CONS (CL:CONS (CL:CONS 'CL:CAR (CL:CONS 'X CL:NIL)) (CL:CONS (CL:CONS '%QUASIQUOTE-EXPAND (CL:CONS (CL:CONS 'CL:CDR (CL:CONS 'X CL:NIL)) CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'EQ (CL:CONS (CL:CONS 'CL:CAR (CL:CONS (CL:CONS 'CL:CAR (CL:CONS 'X CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'CL:QUOTE CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'CL:CONS (CL:CONS (CL:CONS 'CL:CAR (CL:CONS 'X CL:NIL)) (CL:CONS (CL:CONS '%QUASIQUOTE-EXPAND (CL:CONS (CL:CONS 'CL:CDR (CL:CONS 'X CL:NIL)) CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'EQ (CL:CONS (CL:CONS 'CL:CAR (CL:CONS (CL:CONS 'CL:CAR (CL:CONS 'X CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'BACKQUOTE CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'CL:CONS (CL:CONS (CL:CONS 'CL:CAR (CL:CONS 'X CL:NIL)) (CL:CONS (CL:CONS '%QUASIQUOTE-EXPAND (CL:CONS (CL:CONS 'CL:CDR (CL:CONS 'X CL:NIL)) CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'EQ (CL:CONS (CL:CONS 'CL:CAR (CL:CONS (CL:CONS 'CL:CAR (CL:CONS 'X CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'QUASIQUOTE CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'CL:CONS (CL:CONS (CL:CONS 'EVAL (CL:CONS (CL:CONS 'MACROEXPAND (CL:CONS (CL:CONS 'CL:CAR (CL:CONS (CL:CONS 'CL:CDR (CL:CONS (CL:CONS 'CL:CAR (CL:CONS 'X CL:NIL)) CL:NIL)) CL:NIL)) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS '%QUASIQUOTE-EXPAND (CL:CONS (CL:CONS 'CL:CDR (CL:CONS 'X CL:NIL)) CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'EQ (CL:CONS (CL:CONS 'CL:CAR (CL:CONS (CL:CONS 'CL:CAR (CL:CONS 'X CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'QUASIQUOTE-SPLICE CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'APPEND (CL:CONS (CL:CONS 'EVAL (CL:CONS (CL:CONS 'MACROEXPAND (CL:CONS (CL:CONS 'CL:CAR (CL:CONS (CL:CONS 'CL:CDR (CL:CONS (CL:CONS 'CL:CAR (CL:CONS 'X CL:NIL)) CL:NIL)) CL:NIL)) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS '%QUASIQUOTE-EXPAND (CL:CONS (CL:CONS 'CL:CDR (CL:CONS 'X CL:NIL)) CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'CL:CONS (CL:CONS (CL:CONS '%QUASIQUOTE-EXPAND (CL:CONS (CL:CONS 'CL:CAR (CL:CONS 'X CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS '%QUASIQUOTE-EXPAND (CL:CONS (CL:CONS 'CL:CDR (CL:CONS 'X CL:NIL)) CL:NIL)) CL:NIL))) CL:NIL)))))))))))))) CL:NIL))))
(CL:PROGN (CL:DEFUN QUASIQUOTE-EXPAND (X) (CL:CAR (%QUASIQUOTE-EXPAND (CL:LIST X)))) (CL:SETF (CL:GETHASH #'QUASIQUOTE-EXPAND *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X CL:NIL) (CL:CONS (CL:CONS 'CL:CAR (CL:CONS (CL:CONS '%QUASIQUOTE-EXPAND (CL:CONS (CL:CONS 'CL:LIST (CL:CONS 'X CL:NIL)) CL:NIL)) CL:NIL)) CL:NIL))))
(CL:SETQ *QUASIQUOTE-EXPAND* #'QUASIQUOTE-EXPAND)
(CL:PROGN (CL:DEFUN IDENTITY (X) X) (CL:SETF (CL:GETHASH #'IDENTITY *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X CL:NIL) (CL:CONS 'X CL:NIL))))
(CL:PROGN (CL:DEFUN + (CL:&REST X) (CL:LABELS ((G3598 (A) (? A (CL:APPLY (? (CONS? A) #'APPEND (STRING? A) #'STRING-CONCAT #'NUMBER+) X) (? (CL:CDR X) (CL:APPLY #'+ (CL:CDR X)))))) (G3598 (CL:CAR X)))) (CL:SETF (CL:GETHASH #'+ *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'CL:&REST (CL:CONS 'X CL:NIL)) (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS 'A CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS 'A (CL:CONS (CL:CONS 'CL:APPLY (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'CONS? (CL:CONS 'A CL:NIL)) (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS 'APPEND CL:NIL)) (CL:CONS (CL:CONS 'STRING? (CL:CONS 'A CL:NIL)) (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS 'STRING-CONCAT CL:NIL)) (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS 'NUMBER+ CL:NIL)) CL:NIL)))))) (CL:CONS 'X CL:NIL))) (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'CL:CDR (CL:CONS 'X CL:NIL)) (CL:CONS (CL:CONS 'CL:APPLY (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS '+ CL:NIL)) (CL:CONS (CL:CONS 'CL:CDR (CL:CONS 'X CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'CL:CAR (CL:CONS 'X CL:NIL)) CL:NIL)) CL:NIL))))
(CL:PROGN (CL:DEFUN - (CL:&REST X) (CL:APPLY #'NUMBER- X)) (CL:SETF (CL:GETHASH #'- *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'CL:&REST (CL:CONS 'X CL:NIL)) (CL:CONS (CL:CONS 'CL:APPLY (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS 'NUMBER- CL:NIL)) (CL:CONS 'X CL:NIL))) CL:NIL))))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'FUNCALL (CL:CONS (CL:CONS 'FUN (CL:CONS 'CL:&REST (CL:CONS 'ARGS CL:NIL))) CL:NIL)))) (CL:PROGN (CL:DEFUN FUNCALL (FUN CL:&REST ARGS) (CL:BLOCK FUNCALL (CL:BLOCK CL:NIL (CL:APPLY FUN ARGS)))) (CL:SETF (CL:GETHASH #'FUNCALL *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'FUN (CL:CONS 'CL:&REST (CL:CONS 'ARGS CL:NIL))) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'FUNCALL (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'CL:APPLY (CL:CONS 'FUN (CL:CONS 'ARGS CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'FUNCALL))
(CL:SETQ *FUNCTIONALS* (%NCONC (CL:CONS 'CAAR (CL:CONS 'CADR (CL:CONS 'CDAR (CL:CONS 'CDDR (CL:CONS 'CADAR (CL:CONS 'CDDAR (CL:CONS 'CAADAR (CL:CONS 'CADDR (CL:CONS 'CAADR (CL:CONS 'CDDDR (CL:CONS 'CDADAR (CL:CONS 'CAADDR (CL:CONS 'CADDAR (CL:CONS 'CDDDAR (CL:CONS 'CDDDDR (CL:CONS 'CADADR (CL:CONS 'CADADDR (CL:CONS 'CADADAR (CL:CONS 'CDDADAR CL:NIL))))))))))))))))))) *FUNCTIONALS*))
(CL:PROGN (CL:DEFUN CAAR (LST) (CL:CAR (CL:CAR LST))) (CL:SETF (CL:GETHASH #'CAAR *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'LST CL:NIL) (CL:CONS (CL:CONS 'CL:CAR (CL:CONS (CL:CONS 'CL:CAR (CL:CONS 'LST CL:NIL)) CL:NIL)) CL:NIL))))
(CL:PROGN (CL:DEFUN CADR (LST) (CL:CAR (CL:CDR LST))) (CL:SETF (CL:GETHASH #'CADR *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'LST CL:NIL) (CL:CONS (CL:CONS 'CL:CAR (CL:CONS (CL:CONS 'CL:CDR (CL:CONS 'LST CL:NIL)) CL:NIL)) CL:NIL))))
(CL:PROGN (CL:DEFUN CDAR (LST) (CL:CDR (CL:CAR LST))) (CL:SETF (CL:GETHASH #'CDAR *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'LST CL:NIL) (CL:CONS (CL:CONS 'CL:CDR (CL:CONS (CL:CONS 'CL:CAR (CL:CONS 'LST CL:NIL)) CL:NIL)) CL:NIL))))
(CL:PROGN (CL:DEFUN CDDR (LST) (CL:CDR (CL:CDR LST))) (CL:SETF (CL:GETHASH #'CDDR *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'LST CL:NIL) (CL:CONS (CL:CONS 'CL:CDR (CL:CONS (CL:CONS 'CL:CDR (CL:CONS 'LST CL:NIL)) CL:NIL)) CL:NIL))))
(CL:PROGN (CL:DEFUN CADAR (LST) (CADR (CL:CAR LST))) (CL:SETF (CL:GETHASH #'CADAR *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'LST CL:NIL) (CL:CONS (CL:CONS 'CADR (CL:CONS (CL:CONS 'CL:CAR (CL:CONS 'LST CL:NIL)) CL:NIL)) CL:NIL))))
(CL:PROGN (CL:DEFUN CDDAR (LST) (CDDR (CL:CAR LST))) (CL:SETF (CL:GETHASH #'CDDAR *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'LST CL:NIL) (CL:CONS (CL:CONS 'CDDR (CL:CONS (CL:CONS 'CL:CAR (CL:CONS 'LST CL:NIL)) CL:NIL)) CL:NIL))))
(CL:PROGN (CL:DEFUN CDADR (LST) (CDAR (CL:CDR LST))) (CL:SETF (CL:GETHASH #'CDADR *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'LST CL:NIL) (CL:CONS (CL:CONS 'CDAR (CL:CONS (CL:CONS 'CL:CDR (CL:CONS 'LST CL:NIL)) CL:NIL)) CL:NIL))))
(CL:PROGN (CL:DEFUN CADDR (LST) (CL:CAR (CDDR LST))) (CL:SETF (CL:GETHASH #'CADDR *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'LST CL:NIL) (CL:CONS (CL:CONS 'CL:CAR (CL:CONS (CL:CONS 'CDDR (CL:CONS 'LST CL:NIL)) CL:NIL)) CL:NIL))))
(CL:PROGN (CL:DEFUN CAADR (LST) (CL:CAR (CADR LST))) (CL:SETF (CL:GETHASH #'CAADR *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'LST CL:NIL) (CL:CONS (CL:CONS 'CL:CAR (CL:CONS (CL:CONS 'CADR (CL:CONS 'LST CL:NIL)) CL:NIL)) CL:NIL))))
(CL:PROGN (CL:DEFUN CDDDR (LST) (CL:CDR (CL:CDR (CL:CDR LST)))) (CL:SETF (CL:GETHASH #'CDDDR *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'LST CL:NIL) (CL:CONS (CL:CONS 'CL:CDR (CL:CONS (CL:CONS 'CL:CDR (CL:CONS (CL:CONS 'CL:CDR (CL:CONS 'LST CL:NIL)) CL:NIL)) CL:NIL)) CL:NIL))))
(CL:PROGN (CL:DEFUN CDDDDR (LST) (CL:CDR (CL:CDR (CL:CDR (CL:CDR LST))))) (CL:SETF (CL:GETHASH #'CDDDDR *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'LST CL:NIL) (CL:CONS (CL:CONS 'CL:CDR (CL:CONS (CL:CONS 'CL:CDR (CL:CONS (CL:CONS 'CL:CDR (CL:CONS (CL:CONS 'CL:CDR (CL:CONS 'LST CL:NIL)) CL:NIL)) CL:NIL)) CL:NIL)) CL:NIL))))
(CL:PROGN (CL:DEFUN CAADAR (LST) (CL:CAR (CADR (CL:CAR LST)))) (CL:SETF (CL:GETHASH #'CAADAR *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'LST CL:NIL) (CL:CONS (CL:CONS 'CL:CAR (CL:CONS (CL:CONS 'CADR (CL:CONS (CL:CONS 'CL:CAR (CL:CONS 'LST CL:NIL)) CL:NIL)) CL:NIL)) CL:NIL))))
(CL:PROGN (CL:DEFUN CDADAR (LST) (CL:CDR (CADR (CL:CAR LST)))) (CL:SETF (CL:GETHASH #'CDADAR *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'LST CL:NIL) (CL:CONS (CL:CONS 'CL:CDR (CL:CONS (CL:CONS 'CADR (CL:CONS (CL:CONS 'CL:CAR (CL:CONS 'LST CL:NIL)) CL:NIL)) CL:NIL)) CL:NIL))))
(CL:PROGN (CL:DEFUN CAADDR (LST) (CL:CAR (CADDR LST))) (CL:SETF (CL:GETHASH #'CAADDR *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'LST CL:NIL) (CL:CONS (CL:CONS 'CL:CAR (CL:CONS (CL:CONS 'CADDR (CL:CONS 'LST CL:NIL)) CL:NIL)) CL:NIL))))
(CL:PROGN (CL:DEFUN CADDAR (LST) (CADDR (CL:CAR LST))) (CL:SETF (CL:GETHASH #'CADDAR *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'LST CL:NIL) (CL:CONS (CL:CONS 'CADDR (CL:CONS (CL:CONS 'CL:CAR (CL:CONS 'LST CL:NIL)) CL:NIL)) CL:NIL))))
(CL:PROGN (CL:DEFUN CDDDAR (LST) (CDDDR (CL:CAR LST))) (CL:SETF (CL:GETHASH #'CDDDAR *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'LST CL:NIL) (CL:CONS (CL:CONS 'CDDDR (CL:CONS (CL:CONS 'CL:CAR (CL:CONS 'LST CL:NIL)) CL:NIL)) CL:NIL))))
(CL:PROGN (CL:DEFUN CADADR (LST) (CADR (CADR LST))) (CL:SETF (CL:GETHASH #'CADADR *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'LST CL:NIL) (CL:CONS (CL:CONS 'CADR (CL:CONS (CL:CONS 'CADR (CL:CONS 'LST CL:NIL)) CL:NIL)) CL:NIL))))
(CL:PROGN (CL:DEFUN CADADDR (LST) (CADR (CADDR LST))) (CL:SETF (CL:GETHASH #'CADADDR *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'LST CL:NIL) (CL:CONS (CL:CONS 'CADR (CL:CONS (CL:CONS 'CADDR (CL:CONS 'LST CL:NIL)) CL:NIL)) CL:NIL))))
(CL:PROGN (CL:DEFUN CADADAR (LST) (CADR (CADR (CL:CAR LST)))) (CL:SETF (CL:GETHASH #'CADADAR *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'LST CL:NIL) (CL:CONS (CL:CONS 'CADR (CL:CONS (CL:CONS 'CADR (CL:CONS (CL:CONS 'CL:CAR (CL:CONS 'LST CL:NIL)) CL:NIL)) CL:NIL)) CL:NIL))))
(CL:PROGN (CL:DEFUN CDDADAR (LST) (CDDR (CADR (CL:CAR LST)))) (CL:SETF (CL:GETHASH #'CDDADAR *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'LST CL:NIL) (CL:CONS (CL:CONS 'CDDR (CL:CONS (CL:CONS 'CADR (CL:CONS (CL:CONS 'CL:CAR (CL:CONS 'LST CL:NIL)) CL:NIL)) CL:NIL)) CL:NIL))))
(CL:SETQ *FUNCTIONALS* (%NCONC (CL:CONS 'EQUAL CL:NIL) *FUNCTIONALS*))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'EQUAL (CL:CONS (CL:CONS 'X (CL:CONS 'Y CL:NIL)) CL:NIL)))) (CL:PROGN (CL:DEFUN EQUAL (X Y) (CL:BLOCK EQUAL (CL:BLOCK CL:NIL (? (CL:LABELS ((G3599 (~G1411) (? ~G1411 ~G1411 (CL:ATOM Y)))) (G3599 (CL:ATOM X))) (EQL X Y) (EQUAL (CL:CAR X) (CL:CAR Y)) (EQUAL (CL:CDR X) (CL:CDR Y)))))) (CL:SETF (CL:GETHASH #'EQUAL *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X (CL:CONS 'Y CL:NIL)) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'EQUAL (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1411 CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS '~G1411 (CL:CONS '~G1411 (CL:CONS (CL:CONS 'CL:ATOM (CL:CONS 'Y CL:NIL)) CL:NIL)))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'CL:ATOM (CL:CONS 'X CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'EQL (CL:CONS 'X (CL:CONS 'Y CL:NIL))) (CL:CONS (CL:CONS 'EQUAL (CL:CONS (CL:CONS 'CL:CAR (CL:CONS 'X CL:NIL)) (CL:CONS (CL:CONS 'CL:CAR (CL:CONS 'Y CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'EQUAL (CL:CONS (CL:CONS 'CL:CDR (CL:CONS 'X CL:NIL)) (CL:CONS (CL:CONS 'CL:CDR (CL:CONS 'Y CL:NIL)) CL:NIL))) CL:NIL))))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'EQUAL))
CL:NIL
CL:NIL
(CL:SETQ *FUNCTIONALS* (%NCONC (CL:CONS '>= (CL:CONS '<= (CL:CONS 'CHARACTER>= (CL:CONS 'CHARACTER<= (CL:CONS 'INTEGER>= (CL:CONS 'INTEGER<= (CL:CONS 'NUMBER>= (CL:CONS 'NUMBER<= CL:NIL)))))))) *FUNCTIONALS*))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS '>= (CL:CONS (CL:CONS 'N (CL:CONS 'CL:&REST (CL:CONS 'X CL:NIL))) CL:NIL)))) (CL:PROGN (CL:DEFUN >= (N CL:&REST X) (CL:BLOCK >= (CL:BLOCK CL:NIL (CL:BLOCK CL:NIL (CL:LABELS ((G3600 (~G1422) (CL:LABELS ((G3601 (I) (CL:TAGBODY ~G1420 (? (NOT ~G1422) (CL:GO ~G1421)) (CL:SETQ I (CL:CAR ~G1422)) (CL:LABELS ((G3602 (~G1412) (? ~G1412 ~G1412 (CL:LABELS ((G3603 (~G1413) (? ~G1413 ~G1413 (CL:RETURN-FROM CL:NIL CL:NIL)))) (G3603 (> N I)))))) (G3602 (== N I))) (CL:SETQ N I) (CL:SETQ ~G1422 (CL:CDR ~G1422)) (CL:GO ~G1420) ~G1421 (CL:RETURN-FROM CL:NIL (CL:PROGN CL:T))))) (G3601 CL:NIL)))) (G3600 X)))))) (CL:SETF (CL:GETHASH #'>= *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'N (CL:CONS 'CL:&REST (CL:CONS 'X CL:NIL))) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS '>= (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'LET* (CL:CONS (CL:CONS (CL:CONS '~G1422 (CL:CONS 'X CL:NIL)) (CL:CONS (CL:CONS 'I (CL:CONS CL:NIL CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'CL:TAGBODY (CL:CONS '~G1420 (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'NOT (CL:CONS '~G1422 CL:NIL)) (CL:CONS (CL:CONS 'CL:GO (CL:CONS '~G1421 CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'CL:SETQ (CL:CONS 'I (CL:CONS (CL:CONS 'CL:CAR (CL:CONS '~G1422 CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1412 CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS '~G1412 (CL:CONS '~G1412 (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1413 CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS '~G1413 (CL:CONS '~G1413 (CL:CONS (CL:CONS 'CL:RETURN-FROM (CL:CONS CL:NIL (CL:CONS CL:NIL CL:NIL))) CL:NIL)))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS '> (CL:CONS 'N (CL:CONS 'I CL:NIL))) CL:NIL)) CL:NIL)))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS '== (CL:CONS 'N (CL:CONS 'I CL:NIL))) CL:NIL)) (CL:CONS (CL:CONS 'CL:SETQ (CL:CONS 'N (CL:CONS 'I CL:NIL))) (CL:CONS (CL:CONS 'CL:SETQ (CL:CONS '~G1422 (CL:CONS (CL:CONS 'CL:CDR (CL:CONS '~G1422 CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'CL:GO (CL:CONS '~G1420 CL:NIL)) (CL:CONS '~G1421 (CL:CONS (CL:CONS 'CL:RETURN (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS CL:T CL:NIL)) CL:NIL)) CL:NIL)))))))))) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL '>=))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS '<= (CL:CONS (CL:CONS 'N (CL:CONS 'CL:&REST (CL:CONS 'X CL:NIL))) CL:NIL)))) (CL:PROGN (CL:DEFUN <= (N CL:&REST X) (CL:BLOCK <= (CL:BLOCK CL:NIL (CL:BLOCK CL:NIL (CL:LABELS ((G3604 (~G1425) (CL:LABELS ((G3605 (I) (CL:TAGBODY ~G1423 (? (NOT ~G1425) (CL:GO ~G1424)) (CL:SETQ I (CL:CAR ~G1425)) (CL:LABELS ((G3606 (~G1414) (? ~G1414 ~G1414 (CL:LABELS ((G3607 (~G1415) (? ~G1415 ~G1415 (CL:RETURN-FROM CL:NIL CL:NIL)))) (G3607 (< N I)))))) (G3606 (== N I))) (CL:SETQ N I) (CL:SETQ ~G1425 (CL:CDR ~G1425)) (CL:GO ~G1423) ~G1424 (CL:RETURN-FROM CL:NIL (CL:PROGN CL:T))))) (G3605 CL:NIL)))) (G3604 X)))))) (CL:SETF (CL:GETHASH #'<= *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'N (CL:CONS 'CL:&REST (CL:CONS 'X CL:NIL))) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS '<= (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'LET* (CL:CONS (CL:CONS (CL:CONS '~G1425 (CL:CONS 'X CL:NIL)) (CL:CONS (CL:CONS 'I (CL:CONS CL:NIL CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'CL:TAGBODY (CL:CONS '~G1423 (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'NOT (CL:CONS '~G1425 CL:NIL)) (CL:CONS (CL:CONS 'CL:GO (CL:CONS '~G1424 CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'CL:SETQ (CL:CONS 'I (CL:CONS (CL:CONS 'CL:CAR (CL:CONS '~G1425 CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1414 CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS '~G1414 (CL:CONS '~G1414 (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1415 CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS '~G1415 (CL:CONS '~G1415 (CL:CONS (CL:CONS 'CL:RETURN-FROM (CL:CONS CL:NIL (CL:CONS CL:NIL CL:NIL))) CL:NIL)))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS '< (CL:CONS 'N (CL:CONS 'I CL:NIL))) CL:NIL)) CL:NIL)))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS '== (CL:CONS 'N (CL:CONS 'I CL:NIL))) CL:NIL)) (CL:CONS (CL:CONS 'CL:SETQ (CL:CONS 'N (CL:CONS 'I CL:NIL))) (CL:CONS (CL:CONS 'CL:SETQ (CL:CONS '~G1425 (CL:CONS (CL:CONS 'CL:CDR (CL:CONS '~G1425 CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'CL:GO (CL:CONS '~G1423 CL:NIL)) (CL:CONS '~G1424 (CL:CONS (CL:CONS 'CL:RETURN (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS CL:T CL:NIL)) CL:NIL)) CL:NIL)))))))))) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL '<=))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'CHARACTER>= (CL:CONS (CL:CONS 'X (CL:CONS 'Y CL:NIL)) CL:NIL)))) (CL:PROGN (CL:DEFUN CHARACTER>= (X Y) (CL:BLOCK CHARACTER>= (CL:BLOCK CL:NIL (CL:LABELS ((G3608 (~G1416) (? ~G1416 ~G1416 (CHARACTER> X Y)))) (G3608 (CHARACTER== X Y)))))) (CL:SETF (CL:GETHASH #'CHARACTER>= *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X (CL:CONS 'Y CL:NIL)) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'CHARACTER>= (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1416 CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS '~G1416 (CL:CONS '~G1416 (CL:CONS (CL:CONS 'CHARACTER> (CL:CONS 'X (CL:CONS 'Y CL:NIL))) CL:NIL)))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'CHARACTER== (CL:CONS 'X (CL:CONS 'Y CL:NIL))) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'CHARACTER>=))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'CHARACTER<= (CL:CONS (CL:CONS 'X (CL:CONS 'Y CL:NIL)) CL:NIL)))) (CL:PROGN (CL:DEFUN CHARACTER<= (X Y) (CL:BLOCK CHARACTER<= (CL:BLOCK CL:NIL (CL:LABELS ((G3609 (~G1417) (? ~G1417 ~G1417 (CHARACTER< X Y)))) (G3609 (CHARACTER== X Y)))))) (CL:SETF (CL:GETHASH #'CHARACTER<= *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X (CL:CONS 'Y CL:NIL)) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'CHARACTER<= (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1417 CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS '~G1417 (CL:CONS '~G1417 (CL:CONS (CL:CONS 'CHARACTER< (CL:CONS 'X (CL:CONS 'Y CL:NIL))) CL:NIL)))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'CHARACTER== (CL:CONS 'X (CL:CONS 'Y CL:NIL))) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'CHARACTER<=))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'INTEGER>= (CL:CONS (CL:CONS 'X (CL:CONS 'Y CL:NIL)) CL:NIL)))) (CL:PROGN (CL:DEFUN INTEGER>= (X Y) (CL:BLOCK INTEGER>= (CL:BLOCK CL:NIL (CL:LABELS ((G3610 (~G1418) (? ~G1418 ~G1418 (INTEGER> X Y)))) (G3610 (INTEGER== X Y)))))) (CL:SETF (CL:GETHASH #'INTEGER>= *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X (CL:CONS 'Y CL:NIL)) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'INTEGER>= (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1418 CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS '~G1418 (CL:CONS '~G1418 (CL:CONS (CL:CONS 'INTEGER> (CL:CONS 'X (CL:CONS 'Y CL:NIL))) CL:NIL)))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'INTEGER== (CL:CONS 'X (CL:CONS 'Y CL:NIL))) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'INTEGER>=))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'INTEGER<= (CL:CONS (CL:CONS 'X (CL:CONS 'Y CL:NIL)) CL:NIL)))) (CL:PROGN (CL:DEFUN INTEGER<= (X Y) (CL:BLOCK INTEGER<= (CL:BLOCK CL:NIL (CL:LABELS ((G3611 (~G1419) (? ~G1419 ~G1419 (INTEGER< X Y)))) (G3611 (INTEGER== X Y)))))) (CL:SETF (CL:GETHASH #'INTEGER<= *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X (CL:CONS 'Y CL:NIL)) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'INTEGER<= (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1419 CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS '~G1419 (CL:CONS '~G1419 (CL:CONS (CL:CONS 'INTEGER< (CL:CONS 'X (CL:CONS 'Y CL:NIL))) CL:NIL)))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'INTEGER== (CL:CONS 'X (CL:CONS 'Y CL:NIL))) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'INTEGER<=))
(CL:SETQ *FUNCTIONALS* (%NCONC (CL:CONS 'ZERO? (CL:CONS 'EVEN? (CL:CONS 'ODD? (CL:CONS 'END? (CL:CONS 'KEYWORD? CL:NIL))))) *FUNCTIONALS*))
CL:NIL
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'ZERO? (CL:CONS (CL:CONS 'X CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN ZERO? (X) (CL:BLOCK ZERO? (CL:BLOCK CL:NIL (== 0 X)))) (CL:SETF (CL:GETHASH #'ZERO? *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'ZERO? (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS '== (CL:CONS 0 (CL:CONS 'X CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'ZERO?))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'EVEN? (CL:CONS (CL:CONS 'X CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN EVEN? (X) (CL:BLOCK EVEN? (CL:BLOCK CL:NIL (== 0 (CL:MOD X 2))))) (CL:SETF (CL:GETHASH #'EVEN? *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'EVEN? (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS '== (CL:CONS 0 (CL:CONS (CL:CONS 'CL:MOD (CL:CONS 'X (CL:CONS 2 CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'EVEN?))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'ODD? (CL:CONS (CL:CONS 'X CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN ODD? (X) (CL:BLOCK ODD? (CL:BLOCK CL:NIL (== 1 (CL:MOD X 2))))) (CL:SETF (CL:GETHASH #'ODD? *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'ODD? (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS '== (CL:CONS 1 (CL:CONS (CL:CONS 'CL:MOD (CL:CONS 'X (CL:CONS 2 CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'ODD?))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'END? (CL:CONS (CL:CONS 'X CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN END? (X) (CL:BLOCK END? (CL:BLOCK CL:NIL (EQ CL:NIL X)))) (CL:SETF (CL:GETHASH #'END? *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'END? (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'EQ (CL:CONS CL:NIL (CL:CONS 'X CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'END?))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'KEYWORD? (CL:CONS (CL:CONS 'X CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN KEYWORD? (X) (CL:BLOCK KEYWORD? (CL:BLOCK CL:NIL (? (SYMBOL? X) (EQ *KEYWORD-PACKAGE* (SYMBOL-PACKAGE X)))))) (CL:SETF (CL:GETHASH #'KEYWORD? *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'KEYWORD? (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'SYMBOL? (CL:CONS 'X CL:NIL)) (CL:CONS (CL:CONS 'EQ (CL:CONS '*KEYWORD-PACKAGE* (CL:CONS (CL:CONS 'SYMBOL-PACKAGE (CL:CONS 'X CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'KEYWORD?))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'SOLE? (CL:CONS (CL:CONS 'X CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN SOLE? (X) (CL:BLOCK SOLE? (CL:BLOCK CL:NIL (== 1 (CL:LENGTH X))))) (CL:SETF (CL:GETHASH #'SOLE? *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'SOLE? (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS '== (CL:CONS 1 (CL:CONS (CL:CONS 'CL:LENGTH (CL:CONS 'X CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'SOLE?))
CL:NIL
CL:NIL
CL:NIL
CL:NIL
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS '%NCONC-0 (CL:CONS (CL:CONS 'LSTS CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN %NCONC-0 (LSTS) (CL:BLOCK %NCONC-0 (CL:BLOCK CL:NIL (? LSTS (CL:PROGN (CL:LABELS ((G3612 (!) (? ! (CL:PROGN (CL:RPLACD (CL:LAST !) (%NCONC-0 (CL:CDR LSTS))) !) (%NCONC-0 (CL:CDR LSTS))))) (G3612 (CL:CAR LSTS)))))))) (CL:SETF (CL:GETHASH #'%NCONC-0 *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'LSTS CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS '%NCONC-0 (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS '? (CL:CONS 'LSTS (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS 'LET (CL:CONS '! (CL:CONS (CL:CONS 'CL:CAR (CL:CONS 'LSTS CL:NIL)) (CL:CONS (CL:CONS '? (CL:CONS '! (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS 'CL:RPLACD (CL:CONS (CL:CONS 'CL:LAST (CL:CONS '! CL:NIL)) (CL:CONS (CL:CONS '%NCONC-0 (CL:CONS (CL:CONS 'CL:CDR (CL:CONS 'LSTS CL:NIL)) CL:NIL)) CL:NIL))) (CL:CONS '! CL:NIL))) (CL:CONS (CL:CONS '%!? (CL:CONS (CL:CONS '%NCONC-0 (CL:CONS (CL:CONS 'CL:CDR (CL:CONS 'LSTS CL:NIL)) CL:NIL)) CL:NIL)) CL:NIL)))) CL:NIL)))) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL '%NCONC-0))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'NCONC (CL:CONS (CL:CONS 'CL:&REST (CL:CONS 'LSTS CL:NIL)) CL:NIL)))) (CL:PROGN (CL:DEFUN NCONC (CL:&REST LSTS) (CL:BLOCK NCONC (CL:BLOCK CL:NIL (%NCONC-0 LSTS)))) (CL:SETF (CL:GETHASH #'NCONC *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'CL:&REST (CL:CONS 'LSTS CL:NIL)) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'NCONC (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS '%NCONC-0 (CL:CONS 'LSTS CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'NCONC))
(CL:BLOCK CL:NIL (%DEFMACRO NCONC! (PLACE CL:&REST LSTS) (CL:BLOCK NCONC! (CL:CONS '= (CL:CONS PLACE (CL:CONS (CL:CONS 'NCONC (CL:CONS PLACE (APPEND LSTS CL:NIL))) CL:NIL))))))
CL:NIL
CL:NIL
(CL:BLOCK CL:NIL (%DEFMACRO APPEND! (PLACE CL:&REST ARGS) (CL:BLOCK APPEND! (CL:CONS '= (CL:CONS PLACE (CL:CONS (CL:CONS 'APPEND (CL:CONS PLACE (APPEND ARGS CL:NIL))) CL:NIL))))))
CL:NIL
CL:NIL
CL:NIL
CL:NIL
CL:NIL
(CL:SETQ *FUNCTIONALS* (%NCONC (CL:CONS 'QUEUE-LIST (CL:CONS 'QUEUE-FRONT CL:NIL)) *FUNCTIONALS*))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'MAKE-QUEUE (CL:CONS CL:NIL CL:NIL)))) (CL:PROGN (CL:DEFUN MAKE-QUEUE CL:NIL (CL:BLOCK MAKE-QUEUE (CL:BLOCK CL:NIL (CL:CONS CL:NIL CL:NIL)))) (CL:SETF (CL:GETHASH #'MAKE-QUEUE *FUNCTION-ATOM-SOURCES*) (CL:CONS CL:NIL (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'MAKE-QUEUE (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'CL:CONS (CL:CONS CL:NIL (CL:CONS CL:NIL CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'MAKE-QUEUE))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'ENQUEUE (CL:CONS (CL:CONS 'X (CL:CONS 'CL:&REST (CL:CONS 'VALS CL:NIL))) CL:NIL)))) (CL:PROGN (CL:DEFUN ENQUEUE (X CL:&REST VALS) (CL:BLOCK ENQUEUE (CL:BLOCK CL:NIL (CL:RPLACA X (CL:CDR (CL:RPLACD (CL:LABELS ((G3615 (~G1426) (? ~G1426 ~G1426 X))) (G3615 (CL:CAR X))) VALS))) VALS))) (CL:SETF (CL:GETHASH #'ENQUEUE *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X (CL:CONS 'CL:&REST (CL:CONS 'VALS CL:NIL))) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'ENQUEUE (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'CL:RPLACA (CL:CONS 'X (CL:CONS (CL:CONS 'CL:CDR (CL:CONS (CL:CONS 'CL:RPLACD (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1426 CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS '~G1426 (CL:CONS '~G1426 (CL:CONS 'X CL:NIL)))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'CL:CAR (CL:CONS 'X CL:NIL)) CL:NIL)) (CL:CONS 'VALS CL:NIL))) CL:NIL)) CL:NIL))) (CL:CONS 'VALS CL:NIL)))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'ENQUEUE))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'ENQUEUE-LIST (CL:CONS (CL:CONS 'X (CL:CONS 'VALS CL:NIL)) CL:NIL)))) (CL:PROGN (CL:DEFUN ENQUEUE-LIST (X VALS) (CL:BLOCK ENQUEUE-LIST (CL:BLOCK CL:NIL (CL:RPLACD X (NCONC (CL:CDR X) VALS)) (CL:RPLACA X (CL:LAST VALS))))) (CL:SETF (CL:GETHASH #'ENQUEUE-LIST *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X (CL:CONS 'VALS CL:NIL)) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'ENQUEUE-LIST (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'CL:RPLACD (CL:CONS 'X (CL:CONS (CL:CONS 'NCONC (CL:CONS (CL:CONS 'CL:CDR (CL:CONS 'X CL:NIL)) (CL:CONS 'VALS CL:NIL))) CL:NIL))) (CL:CONS (CL:CONS 'CL:RPLACA (CL:CONS 'X (CL:CONS (CL:CONS 'CL:LAST (CL:CONS 'VALS CL:NIL)) CL:NIL))) CL:NIL)))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'ENQUEUE-LIST))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'QUEUE-POP (CL:CONS (CL:CONS 'X CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN QUEUE-POP (X) (CL:BLOCK QUEUE-POP (CL:BLOCK CL:NIL (CL:LABELS ((G3616 (~G1427) (? (NOT (CL:CDR (CL:CDR X))) (CL:RPLACA X CL:NIL)) (? (CL:CDR X) (CL:RPLACD X (CL:CDR (CL:CDR X)))) ~G1427)) (G3616 (CL:CAR (CL:CDR X))))))) (CL:SETF (CL:GETHASH #'QUEUE-POP *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'QUEUE-POP (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1427 CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'NOT (CL:CONS (CL:CONS 'CL:CDR (CL:CONS (CL:CONS 'CL:CDR (CL:CONS 'X CL:NIL)) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'CL:RPLACA (CL:CONS 'X (CL:CONS CL:NIL CL:NIL))) CL:NIL))) (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'CL:CDR (CL:CONS 'X CL:NIL)) (CL:CONS (CL:CONS 'CL:RPLACD (CL:CONS 'X (CL:CONS (CL:CONS 'CL:CDR (CL:CONS (CL:CONS 'CL:CDR (CL:CONS 'X CL:NIL)) CL:NIL)) CL:NIL))) CL:NIL))) (CL:CONS '~G1427 CL:NIL)))) CL:NIL)) (CL:CONS (CL:CONS 'CL:CAR (CL:CONS (CL:CONS 'CL:CDR (CL:CONS 'X CL:NIL)) CL:NIL)) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'QUEUE-POP))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'QUEUE-LIST (CL:CONS (CL:CONS 'X CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN QUEUE-LIST (X) (CL:BLOCK QUEUE-LIST (CL:BLOCK CL:NIL (CL:CDR X)))) (CL:SETF (CL:GETHASH #'QUEUE-LIST *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'QUEUE-LIST (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'CL:CDR (CL:CONS 'X CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'QUEUE-LIST))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'QUEUE-FRONT (CL:CONS (CL:CONS 'X CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN QUEUE-FRONT (X) (CL:BLOCK QUEUE-FRONT (CL:BLOCK CL:NIL (CL:CAR (CL:CDR X))))) (CL:SETF (CL:GETHASH #'QUEUE-FRONT *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'QUEUE-FRONT (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'CL:CAR (CL:CONS (CL:CONS 'CL:CDR (CL:CONS 'X CL:NIL)) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'QUEUE-FRONT))
CL:NIL
(CL:SETQ *FUNCTIONALS* (%NCONC (CL:CONS '++ (CL:CONS '-- (CL:CONS 'INTEGER++ (CL:CONS 'INTEGER-- CL:NIL)))) *FUNCTIONALS*))
CL:NIL
(CL:PROGN (CL:DEFUN ++ (X) (NUMBER+ X 1)) (CL:SETF (CL:GETHASH #'++ *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X CL:NIL) (CL:CONS (CL:CONS 'NUMBER+ (CL:CONS 'X (CL:CONS 1 CL:NIL))) CL:NIL))))
(CL:PROGN (CL:DEFUN -- (X) (NUMBER- X 1)) (CL:SETF (CL:GETHASH #'-- *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X CL:NIL) (CL:CONS (CL:CONS 'NUMBER- (CL:CONS 'X (CL:CONS 1 CL:NIL))) CL:NIL))))
(CL:PROGN (CL:DEFUN INTEGER++ (X) (INTEGER+ X 1)) (CL:SETF (CL:GETHASH #'INTEGER++ *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X CL:NIL) (CL:CONS (CL:CONS 'INTEGER+ (CL:CONS 'X (CL:CONS 1 CL:NIL))) CL:NIL))))
(CL:PROGN (CL:DEFUN INTEGER-- (X) (INTEGER- X 1)) (CL:SETF (CL:GETHASH #'INTEGER-- *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X CL:NIL) (CL:CONS (CL:CONS 'INTEGER- (CL:CONS 'X (CL:CONS 1 CL:NIL))) CL:NIL))))
CL:NIL
CL:NIL
(CL:BLOCK CL:NIL (%DEFMACRO FN (CL:&REST BODY) (CL:BLOCK FN (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '_ CL:NIL) (APPEND (? (? (CONS? (CL:CAR BODY)) (NOT (EQ '%SLOT-VALUE (CL:CAR (CL:CAR BODY))))) BODY (CL:LIST BODY)) CL:NIL)) CL:NIL)))))
(CL:BLOCK CL:NIL (%DEFMACRO SQUARE (CL:&REST BODY) (CL:BLOCK SQUARE (CL:CONS 'FN (APPEND BODY CL:NIL)))))
(CL:SETQ *FUNCTIONALS* (%NCONC (CL:CONS 'BUTLAST CL:NIL) *FUNCTIONALS*))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'BUTLAST (CL:CONS (CL:CONS 'PLIST CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN BUTLAST (PLIST) (CL:BLOCK BUTLAST (CL:BLOCK CL:NIL (? (CL:CDR PLIST) (CL:CONS (CL:CAR PLIST) (BUTLAST (CL:CDR PLIST))))))) (CL:SETF (CL:GETHASH #'BUTLAST *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'PLIST CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'BUTLAST (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'CL:CDR (CL:CONS 'PLIST CL:NIL)) (CL:CONS (CL:CONS 'CL:CONS (CL:CONS (CL:CONS 'CL:CAR (CL:CONS 'PLIST CL:NIL)) (CL:CONS (CL:CONS 'BUTLAST (CL:CONS (CL:CONS 'CL:CDR (CL:CONS 'PLIST CL:NIL)) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'BUTLAST))
CL:NIL
CL:NIL
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'VALUES (CL:CONS (CL:CONS 'CL:&REST (CL:CONS 'VALS CL:NIL)) CL:NIL)))) (CL:PROGN (CL:DEFUN VALUES (CL:&REST VALS) (CL:BLOCK VALUES (CL:BLOCK CL:NIL (CL:CONS 'VALUES VALS)))) (CL:SETF (CL:GETHASH #'VALUES *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'CL:&REST (CL:CONS 'VALS CL:NIL)) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'VALUES (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'CL:CONS (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'VALUES CL:NIL)) (CL:CONS 'VALS CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'VALUES))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'VALUES? (CL:CONS (CL:CONS 'X CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN VALUES? (X) (CL:BLOCK VALUES? (CL:BLOCK CL:NIL (? (CONS? X) (EQ 'VALUES (CL:CAR X)))))) (CL:SETF (CL:GETHASH #'VALUES? *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'VALUES? (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'CONS? (CL:CONS 'X CL:NIL)) (CL:CONS (CL:CONS 'EQ (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'VALUES CL:NIL)) (CL:CONS (CL:CONS 'CL:CAR (CL:CONS 'X CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'VALUES?))
(CL:SETQ *FUNCTIONALS* (%NCONC (CL:CONS 'RANGE? CL:NIL) *FUNCTIONALS*))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'RANGE? (CL:CONS (CL:CONS 'X (CL:CONS 'BOTTOM (CL:CONS 'TOP CL:NIL))) CL:NIL)))) (CL:PROGN (CL:DEFUN RANGE? (X BOTTOM TOP) (CL:BLOCK RANGE? (CL:BLOCK CL:NIL (? (>= X BOTTOM) (<= X TOP))))) (CL:SETF (CL:GETHASH #'RANGE? *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X (CL:CONS 'BOTTOM (CL:CONS 'TOP CL:NIL))) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'RANGE? (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS '>= (CL:CONS 'X (CL:CONS 'BOTTOM CL:NIL))) (CL:CONS (CL:CONS '<= (CL:CONS 'X (CL:CONS 'TOP CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'RANGE?))
(CL:SETQ *FUNCTIONALS* (%NCONC (CL:CONS 'CHAR-UPCASE (CL:CONS 'CHAR-DOWNCASE (CL:CONS 'CL:CHAR-CODE (CL:CONS 'CODE-CHAR CL:NIL)))) *FUNCTIONALS*))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'CHAR-UPCASE (CL:CONS (CL:CONS 'C CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN CHAR-UPCASE (C) (CL:BLOCK CHAR-UPCASE (CL:BLOCK CL:NIL (? (LOWER-CASE? C) (CHARACTER+ C (CHARACTER- #\A #\a)) C)))) (CL:SETF (CL:GETHASH #'CHAR-UPCASE *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'C CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'CHAR-UPCASE (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'LOWER-CASE? (CL:CONS 'C CL:NIL)) (CL:CONS (CL:CONS 'CHARACTER+ (CL:CONS 'C (CL:CONS (CL:CONS 'CHARACTER- (CL:CONS #\A (CL:CONS #\a CL:NIL))) CL:NIL))) (CL:CONS 'C CL:NIL)))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'CHAR-UPCASE))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'CHAR-DOWNCASE (CL:CONS (CL:CONS 'C CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN CHAR-DOWNCASE (C) (CL:BLOCK CHAR-DOWNCASE (CL:BLOCK CL:NIL (? (UPPER-CASE? C) (CHARACTER+ C (CHARACTER- #\a #\A)) C)))) (CL:SETF (CL:GETHASH #'CHAR-DOWNCASE *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'C CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'CHAR-DOWNCASE (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'UPPER-CASE? (CL:CONS 'C CL:NIL)) (CL:CONS (CL:CONS 'CHARACTER+ (CL:CONS 'C (CL:CONS (CL:CONS 'CHARACTER- (CL:CONS #\a (CL:CONS #\A CL:NIL))) CL:NIL))) (CL:CONS 'C CL:NIL)))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'CHAR-DOWNCASE))
(CL:SETQ *FUNCTIONALS* (%NCONC (CL:CONS 'LOWER-CASE? (CL:CONS 'UPPER-CASE? (CL:CONS 'ALPHA-CHAR? (CL:CONS 'DIGIT-CHAR? (CL:CONS 'ALPHANUMERIC? CL:NIL))))) *FUNCTIONALS*))
(CL:BLOCK CL:NIL (%DEFMACRO DEF-REST-PREDICATE (NAME ITER ARGS TEST-EXPR) (CL:BLOCK DEF-REST-PREDICATE (CL:LABELS ((G3617 (X) (CL:CONS 'DEFUN (CL:CONS NAME (CL:CONS (CL:CONS 'CL:&REST (CL:CONS X (APPEND ARGS CL:NIL))) (CL:CONS (CL:CONS '@ (CL:CONS (CL:CONS ITER (CL:CONS X (CL:CONS CL:T CL:NIL))) (CL:CONS (CL:CONS '|\|| (CL:CONS TEST-EXPR (CL:CONS (CL:CONS 'CL:RETURN (CL:CONS CL:NIL CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)))))) (G3617 (GENSYM))))))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'LOWER-CASE? (CL:CONS (CL:CONS 'CL:&REST (CL:CONS '~G1428 CL:NIL)) CL:NIL)))) (CL:PROGN (CL:DEFUN LOWER-CASE? (CL:&REST ~G1428) (CL:BLOCK LOWER-CASE? (CL:BLOCK CL:NIL (CL:BLOCK CL:NIL (CL:LABELS ((G3618 (~G1444) (CL:LABELS ((G3619 (C) (CL:TAGBODY ~G1442 (? (NOT ~G1444) (CL:GO ~G1443)) (CL:SETQ C (CL:CAR ~G1444)) (CL:LABELS ((G3620 (~G1438) (? ~G1438 ~G1438 (CL:RETURN-FROM CL:NIL CL:NIL)))) (G3620 (RANGE? C #\a #\z))) (CL:SETQ ~G1444 (CL:CDR ~G1444)) (CL:GO ~G1442) ~G1443 (CL:RETURN-FROM CL:NIL (CL:PROGN CL:T))))) (G3619 CL:NIL)))) (G3618 ~G1428)))))) (CL:SETF (CL:GETHASH #'LOWER-CASE? *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'CL:&REST (CL:CONS '~G1428 CL:NIL)) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'LOWER-CASE? (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'LET* (CL:CONS (CL:CONS (CL:CONS '~G1444 (CL:CONS '~G1428 CL:NIL)) (CL:CONS (CL:CONS 'C (CL:CONS CL:NIL CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'CL:TAGBODY (CL:CONS '~G1442 (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'NOT (CL:CONS '~G1444 CL:NIL)) (CL:CONS (CL:CONS 'CL:GO (CL:CONS '~G1443 CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'CL:SETQ (CL:CONS 'C (CL:CONS (CL:CONS 'CL:CAR (CL:CONS '~G1444 CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1438 CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS '~G1438 (CL:CONS '~G1438 (CL:CONS (CL:CONS 'CL:RETURN-FROM (CL:CONS CL:NIL (CL:CONS CL:NIL CL:NIL))) CL:NIL)))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'RANGE? (CL:CONS 'C (CL:CONS #\a (CL:CONS #\z CL:NIL)))) CL:NIL)) (CL:CONS (CL:CONS 'CL:SETQ (CL:CONS '~G1444 (CL:CONS (CL:CONS 'CL:CDR (CL:CONS '~G1444 CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'CL:GO (CL:CONS '~G1442 CL:NIL)) (CL:CONS '~G1443 (CL:CONS (CL:CONS 'CL:RETURN (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS CL:T CL:NIL)) CL:NIL)) CL:NIL))))))))) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'LOWER-CASE?))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'UPPER-CASE? (CL:CONS (CL:CONS 'CL:&REST (CL:CONS '~G1429 CL:NIL)) CL:NIL)))) (CL:PROGN (CL:DEFUN UPPER-CASE? (CL:&REST ~G1429) (CL:BLOCK UPPER-CASE? (CL:BLOCK CL:NIL (CL:BLOCK CL:NIL (CL:LABELS ((G3621 (~G1447) (CL:LABELS ((G3622 (C) (CL:TAGBODY ~G1445 (? (NOT ~G1447) (CL:GO ~G1446)) (CL:SETQ C (CL:CAR ~G1447)) (CL:LABELS ((G3623 (~G1439) (? ~G1439 ~G1439 (CL:RETURN-FROM CL:NIL CL:NIL)))) (G3623 (RANGE? C #\A #\Z))) (CL:SETQ ~G1447 (CL:CDR ~G1447)) (CL:GO ~G1445) ~G1446 (CL:RETURN-FROM CL:NIL (CL:PROGN CL:T))))) (G3622 CL:NIL)))) (G3621 ~G1429)))))) (CL:SETF (CL:GETHASH #'UPPER-CASE? *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'CL:&REST (CL:CONS '~G1429 CL:NIL)) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'UPPER-CASE? (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'LET* (CL:CONS (CL:CONS (CL:CONS '~G1447 (CL:CONS '~G1429 CL:NIL)) (CL:CONS (CL:CONS 'C (CL:CONS CL:NIL CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'CL:TAGBODY (CL:CONS '~G1445 (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'NOT (CL:CONS '~G1447 CL:NIL)) (CL:CONS (CL:CONS 'CL:GO (CL:CONS '~G1446 CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'CL:SETQ (CL:CONS 'C (CL:CONS (CL:CONS 'CL:CAR (CL:CONS '~G1447 CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1439 CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS '~G1439 (CL:CONS '~G1439 (CL:CONS (CL:CONS 'CL:RETURN-FROM (CL:CONS CL:NIL (CL:CONS CL:NIL CL:NIL))) CL:NIL)))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'RANGE? (CL:CONS 'C (CL:CONS #\A (CL:CONS #\Z CL:NIL)))) CL:NIL)) (CL:CONS (CL:CONS 'CL:SETQ (CL:CONS '~G1447 (CL:CONS (CL:CONS 'CL:CDR (CL:CONS '~G1447 CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'CL:GO (CL:CONS '~G1445 CL:NIL)) (CL:CONS '~G1446 (CL:CONS (CL:CONS 'CL:RETURN (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS CL:T CL:NIL)) CL:NIL)) CL:NIL))))))))) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'UPPER-CASE?))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'ALPHA-CHAR? (CL:CONS (CL:CONS 'CL:&REST (CL:CONS '~G1431 CL:NIL)) CL:NIL)))) (CL:PROGN (CL:DEFUN ALPHA-CHAR? (CL:&REST ~G1431) (CL:BLOCK ALPHA-CHAR? (CL:BLOCK CL:NIL (CL:BLOCK CL:NIL (CL:LABELS ((G3624 (~G1450) (CL:LABELS ((G3625 (C) (CL:TAGBODY ~G1448 (? (NOT ~G1450) (CL:GO ~G1449)) (CL:SETQ C (CL:CAR ~G1450)) (CL:LABELS ((G3626 (~G1440) (? ~G1440 ~G1440 (CL:RETURN-FROM CL:NIL CL:NIL)))) (G3626 (CL:LABELS ((G3627 (~G1430) (? ~G1430 ~G1430 (UPPER-CASE? C)))) (G3627 (LOWER-CASE? C))))) (CL:SETQ ~G1450 (CL:CDR ~G1450)) (CL:GO ~G1448) ~G1449 (CL:RETURN-FROM CL:NIL (CL:PROGN CL:T))))) (G3625 CL:NIL)))) (G3624 ~G1431)))))) (CL:SETF (CL:GETHASH #'ALPHA-CHAR? *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'CL:&REST (CL:CONS '~G1431 CL:NIL)) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'ALPHA-CHAR? (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'LET* (CL:CONS (CL:CONS (CL:CONS '~G1450 (CL:CONS '~G1431 CL:NIL)) (CL:CONS (CL:CONS 'C (CL:CONS CL:NIL CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'CL:TAGBODY (CL:CONS '~G1448 (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'NOT (CL:CONS '~G1450 CL:NIL)) (CL:CONS (CL:CONS 'CL:GO (CL:CONS '~G1449 CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'CL:SETQ (CL:CONS 'C (CL:CONS (CL:CONS 'CL:CAR (CL:CONS '~G1450 CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1440 CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS '~G1440 (CL:CONS '~G1440 (CL:CONS (CL:CONS 'CL:RETURN-FROM (CL:CONS CL:NIL (CL:CONS CL:NIL CL:NIL))) CL:NIL)))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1430 CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS '~G1430 (CL:CONS '~G1430 (CL:CONS (CL:CONS 'UPPER-CASE? (CL:CONS 'C CL:NIL)) CL:NIL)))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'LOWER-CASE? (CL:CONS 'C CL:NIL)) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'CL:SETQ (CL:CONS '~G1450 (CL:CONS (CL:CONS 'CL:CDR (CL:CONS '~G1450 CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'CL:GO (CL:CONS '~G1448 CL:NIL)) (CL:CONS '~G1449 (CL:CONS (CL:CONS 'CL:RETURN (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS CL:T CL:NIL)) CL:NIL)) CL:NIL))))))))) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'ALPHA-CHAR?))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'DECIMAL-DIGIT? (CL:CONS (CL:CONS 'X CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN DECIMAL-DIGIT? (X) (CL:BLOCK DECIMAL-DIGIT? (CL:BLOCK CL:NIL (RANGE? X #\0 #\9)))) (CL:SETF (CL:GETHASH #'DECIMAL-DIGIT? *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'DECIMAL-DIGIT? (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'RANGE? (CL:CONS 'X (CL:CONS #\0 (CL:CONS #\9 CL:NIL)))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'DECIMAL-DIGIT?))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS '%NONDECIMAL-DIGIT? (CL:CONS (CL:CONS 'X (CL:CONS 'START (CL:CONS 'BASE CL:NIL))) CL:NIL)))) (CL:PROGN (CL:DEFUN %NONDECIMAL-DIGIT? (X START BASE) (CL:BLOCK %NONDECIMAL-DIGIT? (CL:BLOCK CL:NIL (RANGE? X START (CHARACTER+ START (CHARACTER- BASE 10)))))) (CL:SETF (CL:GETHASH #'%NONDECIMAL-DIGIT? *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X (CL:CONS 'START (CL:CONS 'BASE CL:NIL))) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS '%NONDECIMAL-DIGIT? (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'RANGE? (CL:CONS 'X (CL:CONS 'START (CL:CONS (CL:CONS 'CHARACTER+ (CL:CONS 'START (CL:CONS (CL:CONS 'CHARACTER- (CL:CONS 'BASE (CL:CONS 10 CL:NIL))) CL:NIL))) CL:NIL)))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL '%NONDECIMAL-DIGIT?))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'NONDECIMAL-DIGIT? (CL:CONS (CL:CONS 'X (CL:CONS 'CL:&KEY (CL:CONS (CL:CONS 'BASE (CL:CONS 10 CL:NIL)) CL:NIL))) CL:NIL)))) (CL:PROGN (CL:DEFUN NONDECIMAL-DIGIT? (X CL:&KEY (BASE 10)) (CL:BLOCK NONDECIMAL-DIGIT? (CL:BLOCK CL:NIL (? (< 10 BASE) (CL:LABELS ((G3628 (~G1432) (? ~G1432 ~G1432 (%NONDECIMAL-DIGIT? X #\A BASE)))) (G3628 (%NONDECIMAL-DIGIT? X #\a BASE))))))) (CL:SETF (CL:GETHASH #'NONDECIMAL-DIGIT? *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X (CL:CONS 'CL:&KEY (CL:CONS (CL:CONS 'BASE (CL:CONS 10 CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'NONDECIMAL-DIGIT? (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS '< (CL:CONS 10 (CL:CONS 'BASE CL:NIL))) (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1432 CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS '~G1432 (CL:CONS '~G1432 (CL:CONS (CL:CONS '%NONDECIMAL-DIGIT? (CL:CONS 'X (CL:CONS #\A (CL:CONS 'BASE CL:NIL)))) CL:NIL)))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS '%NONDECIMAL-DIGIT? (CL:CONS 'X (CL:CONS #\a (CL:CONS 'BASE CL:NIL)))) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'NONDECIMAL-DIGIT?))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'DIGIT-CHAR? (CL:CONS (CL:CONS 'C (CL:CONS 'CL:&KEY (CL:CONS (CL:CONS 'BASE (CL:CONS 10 CL:NIL)) CL:NIL))) CL:NIL)))) (CL:PROGN (CL:DEFUN DIGIT-CHAR? (C CL:&KEY (BASE 10)) (CL:BLOCK DIGIT-CHAR? (CL:BLOCK CL:NIL (? (CHARACTER? C) (CL:LABELS ((G3629 (~G1433) (? ~G1433 ~G1433 (NONDECIMAL-DIGIT? C :BASE BASE)))) (G3629 (DECIMAL-DIGIT? C))))))) (CL:SETF (CL:GETHASH #'DIGIT-CHAR? *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'C (CL:CONS 'CL:&KEY (CL:CONS (CL:CONS 'BASE (CL:CONS 10 CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'DIGIT-CHAR? (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'CHARACTER? (CL:CONS 'C CL:NIL)) (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1433 CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS '~G1433 (CL:CONS '~G1433 (CL:CONS (CL:CONS 'NONDECIMAL-DIGIT? (CL:CONS 'C (CL:CONS ':BASE (CL:CONS 'BASE CL:NIL)))) CL:NIL)))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'DECIMAL-DIGIT? (CL:CONS 'C CL:NIL)) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'DIGIT-CHAR?))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'HEX-DIGIT-CHAR? (CL:CONS (CL:CONS 'X CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN HEX-DIGIT-CHAR? (X) (CL:BLOCK HEX-DIGIT-CHAR? (CL:BLOCK CL:NIL (CL:LABELS ((G3630 (~G1434) (? ~G1434 ~G1434 (CL:LABELS ((G3631 (~G1435) (? ~G1435 ~G1435 (? (>= X #\a) (<= X #\f))))) (G3631 (? (>= X #\A) (<= X #\F))))))) (G3630 (DIGIT-CHAR? X)))))) (CL:SETF (CL:GETHASH #'HEX-DIGIT-CHAR? *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'HEX-DIGIT-CHAR? (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1434 CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS '~G1434 (CL:CONS '~G1434 (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1435 CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS '~G1435 (CL:CONS '~G1435 (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS '>= (CL:CONS 'X (CL:CONS #\a CL:NIL))) (CL:CONS (CL:CONS '<= (CL:CONS 'X (CL:CONS #\f CL:NIL))) CL:NIL))) CL:NIL)))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS '>= (CL:CONS 'X (CL:CONS #\A CL:NIL))) (CL:CONS (CL:CONS '<= (CL:CONS 'X (CL:CONS #\F CL:NIL))) CL:NIL))) CL:NIL)) CL:NIL)))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'DIGIT-CHAR? (CL:CONS 'X CL:NIL)) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'HEX-DIGIT-CHAR?))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'ALPHANUMERIC? (CL:CONS (CL:CONS 'CL:&REST (CL:CONS '~G1437 CL:NIL)) CL:NIL)))) (CL:PROGN (CL:DEFUN ALPHANUMERIC? (CL:&REST ~G1437) (CL:BLOCK ALPHANUMERIC? (CL:BLOCK CL:NIL (CL:BLOCK CL:NIL (CL:LABELS ((G3632 (~G1453) (CL:LABELS ((G3633 (C) (CL:TAGBODY ~G1451 (? (NOT ~G1453) (CL:GO ~G1452)) (CL:SETQ C (CL:CAR ~G1453)) (CL:LABELS ((G3634 (~G1441) (? ~G1441 ~G1441 (CL:RETURN-FROM CL:NIL CL:NIL)))) (G3634 (CL:LABELS ((G3635 (~G1436) (? ~G1436 ~G1436 (DIGIT-CHAR? C)))) (G3635 (ALPHA-CHAR? C))))) (CL:SETQ ~G1453 (CL:CDR ~G1453)) (CL:GO ~G1451) ~G1452 (CL:RETURN-FROM CL:NIL (CL:PROGN CL:T))))) (G3633 CL:NIL)))) (G3632 ~G1437)))))) (CL:SETF (CL:GETHASH #'ALPHANUMERIC? *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'CL:&REST (CL:CONS '~G1437 CL:NIL)) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'ALPHANUMERIC? (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'LET* (CL:CONS (CL:CONS (CL:CONS '~G1453 (CL:CONS '~G1437 CL:NIL)) (CL:CONS (CL:CONS 'C (CL:CONS CL:NIL CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'CL:TAGBODY (CL:CONS '~G1451 (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'NOT (CL:CONS '~G1453 CL:NIL)) (CL:CONS (CL:CONS 'CL:GO (CL:CONS '~G1452 CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'CL:SETQ (CL:CONS 'C (CL:CONS (CL:CONS 'CL:CAR (CL:CONS '~G1453 CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1441 CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS '~G1441 (CL:CONS '~G1441 (CL:CONS (CL:CONS 'CL:RETURN-FROM (CL:CONS CL:NIL (CL:CONS CL:NIL CL:NIL))) CL:NIL)))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1436 CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS '~G1436 (CL:CONS '~G1436 (CL:CONS (CL:CONS 'DIGIT-CHAR? (CL:CONS 'C CL:NIL)) CL:NIL)))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'ALPHA-CHAR? (CL:CONS 'C CL:NIL)) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'CL:SETQ (CL:CONS '~G1453 (CL:CONS (CL:CONS 'CL:CDR (CL:CONS '~G1453 CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'CL:GO (CL:CONS '~G1451 CL:NIL)) (CL:CONS '~G1452 (CL:CONS (CL:CONS 'CL:RETURN (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS CL:T CL:NIL)) CL:NIL)) CL:NIL))))))))) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'ALPHANUMERIC?))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'WHITESPACE? (CL:CONS (CL:CONS 'X CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN WHITESPACE? (X) (CL:BLOCK WHITESPACE? (CL:BLOCK CL:NIL (? (< X 33) (>= X 0))))) (CL:SETF (CL:GETHASH #'WHITESPACE? *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'WHITESPACE? (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS '< (CL:CONS 'X (CL:CONS 33 CL:NIL))) (CL:CONS (CL:CONS '>= (CL:CONS 'X (CL:CONS 0 CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'WHITESPACE?))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'CONTROL-CHAR? (CL:CONS (CL:CONS 'X CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN CONTROL-CHAR? (X) (CL:BLOCK CONTROL-CHAR? (CL:BLOCK CL:NIL (< X 32)))) (CL:SETF (CL:GETHASH #'CONTROL-CHAR? *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'CONTROL-CHAR? (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS '< (CL:CONS 'X (CL:CONS 32 CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'CONTROL-CHAR?))
CL:NIL
CL:NIL
(CL:SETQ *FUNCTIONALS* (%NCONC (CL:CONS 'STRING-CONCAT (CL:CONS 'STRING== (CL:CONS 'UPCASE (CL:CONS 'DOWNCASE (CL:CONS 'LIST-STRING (CL:CONS 'STRING-LIST (CL:CONS 'QUEUE-STRING CL:NIL))))))) *FUNCTIONALS*))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'STRING<= (CL:CONS (CL:CONS 'A (CL:CONS 'B CL:NIL)) CL:NIL)))) (CL:PROGN (CL:DEFUN STRING<= (A B) (CL:BLOCK STRING<= (CL:BLOCK CL:NIL (CL:LABELS ((G3636 (LA) (CL:LABELS ((G3637 (LB) (CL:LABELS ((G3638 (~G1454) (CL:BLOCK CL:NIL (CL:LABELS ((G3639 (I) (CL:TAGBODY ~G1456 (? (INTEGER== I ~G1454) (CL:RETURN-FROM CL:NIL (CL:PROGN (<= LA LB)))) (? (> (CL:ELT A I) (CL:ELT B I)) (CL:RETURN-FROM CL:NIL CL:NIL)) (CL:SETQ I (INTEGER+ 1 I)) (CL:GO ~G1456)))) (G3639 0))))) (G3638 (INTEGER LA))))) (G3637 (CL:LENGTH B))))) (G3636 (CL:LENGTH A)))))) (CL:SETF (CL:GETHASH #'STRING<= *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'A (CL:CONS 'B CL:NIL)) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'STRING<= (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS 'LA CL:NIL) (CL:CONS (CL:CONS 'LET (CL:CONS 'LB (CL:CONS (CL:CONS 'CL:LENGTH (CL:CONS 'B CL:NIL)) (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1454 CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'LET* (CL:CONS (CL:CONS (CL:CONS 'I (CL:CONS 0 CL:NIL)) CL:NIL) (CL:CONS (CL:CONS 'CL:TAGBODY (CL:CONS '~G1456 (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'INTEGER== (CL:CONS 'I (CL:CONS '~G1454 CL:NIL))) (CL:CONS (CL:CONS 'CL:RETURN (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS '<= (CL:CONS 'LA (CL:CONS 'LB CL:NIL))) CL:NIL)) CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS '> (CL:CONS (CL:CONS 'CL:ELT (CL:CONS 'A (CL:CONS 'I CL:NIL))) (CL:CONS (CL:CONS 'CL:ELT (CL:CONS 'B (CL:CONS 'I CL:NIL))) CL:NIL))) (CL:CONS (CL:CONS 'CL:RETURN-FROM (CL:CONS CL:NIL (CL:CONS CL:NIL CL:NIL))) CL:NIL))) (CL:CONS (CL:CONS 'CL:SETQ (CL:CONS 'I (CL:CONS (CL:CONS 'INTEGER+ (CL:CONS 1 (CL:CONS 'I CL:NIL))) CL:NIL))) (CL:CONS (CL:CONS 'CL:GO (CL:CONS '~G1456 CL:NIL)) CL:NIL)))))) CL:NIL))) CL:NIL))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'INTEGER (CL:CONS 'LA CL:NIL)) CL:NIL)) CL:NIL)))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'CL:LENGTH (CL:CONS 'A CL:NIL)) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'STRING<=))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'STRING-LIST (CL:CONS (CL:CONS 'X CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN STRING-LIST (X) (CL:BLOCK STRING-LIST (CL:BLOCK CL:NIL (CL:LABELS ((G3640 (L) (CL:LABELS ((G3641 (S) (CL:BLOCK CL:NIL (CL:LABELS ((G3642 (I) (CL:TAGBODY ~G1455 (? (< I 0) (CL:RETURN-FROM CL:NIL (CL:PROGN))) (CL:PROGN (CL:SETQ S (CL:PROGN (CL:SETQ S (CL:CONS (CL:ELT X I) S))))) (CL:SETQ I (-- I)) (CL:GO ~G1455)))) (G3642 (-- L)))) S)) (G3641 CL:NIL)))) (G3640 (CL:LENGTH X)))))) (CL:SETF (CL:GETHASH #'STRING-LIST *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'STRING-LIST (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS 'L CL:NIL) (CL:CONS (CL:CONS 'LET (CL:CONS 'S (CL:CONS CL:NIL (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'LET (CL:CONS 'I (CL:CONS (CL:CONS '-- (CL:CONS 'L CL:NIL)) (CL:CONS (CL:CONS 'CL:TAGBODY (CL:CONS '~G1455 (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS '< (CL:CONS 'I (CL:CONS 0 CL:NIL))) (CL:CONS (CL:CONS 'CL:RETURN-FROM (CL:CONS CL:NIL (CL:CONS (CL:CONS 'CL:PROGN CL:NIL) CL:NIL))) CL:NIL))) (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS 'CL:SETQ (CL:CONS 'S (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS 'CL:SETQ (CL:CONS 'S (CL:CONS (CL:CONS 'CL:CONS (CL:CONS (CL:CONS 'CL:ELT (CL:CONS 'X (CL:CONS 'I CL:NIL))) (CL:CONS 'S CL:NIL))) CL:NIL))) CL:NIL)) CL:NIL))) CL:NIL)) (CL:CONS (CL:CONS 'CL:SETQ (CL:CONS 'I (CL:CONS (CL:CONS '-- (CL:CONS 'I CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'CL:GO (CL:CONS '~G1455 CL:NIL)) CL:NIL)))))) CL:NIL)))) CL:NIL))) (CL:CONS 'S CL:NIL))))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'CL:LENGTH (CL:CONS 'X CL:NIL)) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'STRING-LIST))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'QUEUE-STRING (CL:CONS (CL:CONS 'X CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN QUEUE-STRING (X) (CL:BLOCK QUEUE-STRING (CL:BLOCK CL:NIL (CL:APPLY #'STRING-CONCAT (CL:MAPCAR #'(CL:LAMBDA (_) (? (STRING? _) _ (CHARACTER? _) (STRING _))) (QUEUE-LIST X)))))) (CL:SETF (CL:GETHASH #'QUEUE-STRING *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'QUEUE-STRING (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'CL:APPLY (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS 'STRING-CONCAT CL:NIL)) (CL:CONS (CL:CONS 'CL:MAPCAR (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '_ CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'STRING? (CL:CONS '_ CL:NIL)) (CL:CONS '_ (CL:CONS (CL:CONS 'CHARACTER? (CL:CONS '_ CL:NIL)) (CL:CONS (CL:CONS 'STRING (CL:CONS '_ CL:NIL)) CL:NIL))))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'QUEUE-LIST (CL:CONS 'X CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'QUEUE-STRING))
CL:NIL
CL:NIL
CL:NIL
CL:NIL
CL:NIL
(CL:SETQ *FUNCTIONALS* (%NCONC (CL:CONS 'LIST-SYMBOL CL:NIL) *FUNCTIONALS*))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'LIST-SYMBOL (CL:CONS (CL:CONS 'X CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN LIST-SYMBOL (X) (CL:BLOCK LIST-SYMBOL (CL:BLOCK CL:NIL (MAKE-SYMBOL (LIST-STRING X))))) (CL:SETF (CL:GETHASH #'LIST-SYMBOL *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'LIST-SYMBOL (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'MAKE-SYMBOL (CL:CONS (CL:CONS 'LIST-STRING (CL:CONS 'X CL:NIL)) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'LIST-SYMBOL))
(CL:SETQ *FUNCTIONALS* (%NCONC (CL:CONS 'SUBSEQ CL:NIL) *FUNCTIONALS*))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'LIST-SUBSEQ (CL:CONS (CL:CONS 'SEQ (CL:CONS 'START (CL:CONS 'CL:&OPTIONAL (CL:CONS (CL:CONS 'END (CL:CONS 999999 CL:NIL)) CL:NIL)))) CL:NIL)))) (CL:PROGN (CL:DEFUN LIST-SUBSEQ (SEQ START CL:&OPTIONAL (END 999999)) (CL:BLOCK LIST-SUBSEQ (CL:BLOCK CL:NIL (? (? SEQ (NOT (== START END))) (CL:PROGN (? (> START END) (CL:LABELS ((G3643 (~G1457) (CL:PROGN (CL:SETQ START END) (CL:SETQ END ~G1457)))) (G3643 START))) (CL:LABELS ((COPY-NUM (LST LEN) (? LST (? (< 0 LEN) (CL:CONS (CL:CAR LST) (COPY-NUM (CL:CDR LST) (-- LEN))))))) (COPY-NUM (CL:NTHCDR START SEQ) (- END START)))))))) (CL:SETF (CL:GETHASH #'LIST-SUBSEQ *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'SEQ (CL:CONS 'START (CL:CONS 'CL:&OPTIONAL (CL:CONS (CL:CONS 'END (CL:CONS 999999 CL:NIL)) CL:NIL)))) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'LIST-SUBSEQ (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS '? (CL:CONS 'SEQ (CL:CONS (CL:CONS 'NOT (CL:CONS (CL:CONS '== (CL:CONS 'START (CL:CONS 'END CL:NIL))) CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS '> (CL:CONS 'START (CL:CONS 'END CL:NIL))) (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1457 CL:NIL) (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS 'CL:SETQ (CL:CONS 'START (CL:CONS 'END CL:NIL))) (CL:CONS (CL:CONS 'CL:SETQ (CL:CONS 'END (CL:CONS '~G1457 CL:NIL))) CL:NIL))) CL:NIL)) CL:NIL)) (CL:CONS 'START CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'CL:LABELS (CL:CONS (CL:CONS (CL:CONS 'COPY-NUM (CL:CONS (CL:CONS 'LST (CL:CONS 'LEN CL:NIL)) (CL:CONS (CL:CONS '? (CL:CONS 'LST (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS '< (CL:CONS 0 (CL:CONS 'LEN CL:NIL))) (CL:CONS (CL:CONS 'CL:CONS (CL:CONS (CL:CONS 'CL:CAR (CL:CONS 'LST CL:NIL)) (CL:CONS (CL:CONS 'COPY-NUM (CL:CONS (CL:CONS 'CL:CDR (CL:CONS 'LST CL:NIL)) (CL:CONS (CL:CONS '-- (CL:CONS 'LEN CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL) (CL:CONS (CL:CONS 'COPY-NUM (CL:CONS (CL:CONS 'CL:NTHCDR (CL:CONS 'START (CL:CONS 'SEQ CL:NIL))) (CL:CONS (CL:CONS '- (CL:CONS 'END (CL:CONS 'START CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'LIST-SUBSEQ))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS '%SUBSEQ-SEQUENCE (CL:CONS (CL:CONS 'MAKER (CL:CONS 'SEQ (CL:CONS 'START (CL:CONS 'END CL:NIL)))) CL:NIL)))) (CL:PROGN (CL:DEFUN %SUBSEQ-SEQUENCE (MAKER SEQ START END) (CL:BLOCK %SUBSEQ-SEQUENCE (CL:BLOCK CL:NIL (? (NOT (== START END)) (CL:PROGN (CL:LABELS ((G3644 (!) (? (< START !) (CL:PROGN (? (>= END !) (CL:PROGN (CL:SETQ END !))) (CL:LABELS ((G3645 (L) (CL:LABELS ((G3646 (S) (CL:LABELS ((G3647 (~G1458) (CL:BLOCK CL:NIL (CL:LABELS ((G3648 (X) (CL:TAGBODY ~G1461 (? (INTEGER== X ~G1458) (CL:RETURN-FROM CL:NIL (CL:PROGN S))) (CL:PROGN (=-ELT (CL:ELT SEQ (+ START X)) S X)) (CL:SETQ X (INTEGER+ 1 X)) (CL:GO ~G1461)))) (G3648 0))))) (G3647 (INTEGER L))))) (G3646 (FUNCALL MAKER L))))) (G3645 (- END START))))))) (G3644 (CL:LENGTH SEQ)))))))) (CL:SETF (CL:GETHASH #'%SUBSEQ-SEQUENCE *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'MAKER (CL:CONS 'SEQ (CL:CONS 'START (CL:CONS 'END CL:NIL)))) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS '%SUBSEQ-SEQUENCE (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS '& (CL:CONS (CL:CONS 'NOT (CL:CONS (CL:CONS '== (CL:CONS 'START (CL:CONS 'END CL:NIL))) CL:NIL)) (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '! CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS '< (CL:CONS 'START (CL:CONS '! CL:NIL))) (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS '>= (CL:CONS 'END (CL:CONS '! CL:NIL))) (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS 'CL:SETQ (CL:CONS 'END (CL:CONS '! CL:NIL))) CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS 'L CL:NIL) (CL:CONS (CL:CONS 'LET (CL:CONS 'S (CL:CONS (CL:CONS 'FUNCALL (CL:CONS 'MAKER (CL:CONS 'L CL:NIL))) (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1458 CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'LET* (CL:CONS (CL:CONS (CL:CONS 'X (CL:CONS 0 CL:NIL)) CL:NIL) (CL:CONS (CL:CONS 'CL:TAGBODY (CL:CONS '~G1461 (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'INTEGER== (CL:CONS 'X (CL:CONS '~G1458 CL:NIL))) (CL:CONS (CL:CONS 'CL:RETURN (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS 'S CL:NIL)) CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS '=-ELT (CL:CONS (CL:CONS 'CL:ELT (CL:CONS 'SEQ (CL:CONS (CL:CONS '+ (CL:CONS 'START (CL:CONS 'X CL:NIL))) CL:NIL))) (CL:CONS 'S (CL:CONS 'X CL:NIL)))) CL:NIL)) (CL:CONS (CL:CONS 'CL:SETQ (CL:CONS 'X (CL:CONS (CL:CONS 'INTEGER+ (CL:CONS 1 (CL:CONS 'X CL:NIL))) CL:NIL))) (CL:CONS (CL:CONS 'CL:GO (CL:CONS '~G1461 CL:NIL)) CL:NIL)))))) CL:NIL))) CL:NIL))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'INTEGER (CL:CONS 'L CL:NIL)) CL:NIL)) CL:NIL)))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS '- (CL:CONS 'END (CL:CONS 'START CL:NIL))) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'CL:LENGTH (CL:CONS 'SEQ CL:NIL)) CL:NIL)) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL '%SUBSEQ-SEQUENCE))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'SUBSEQ (CL:CONS (CL:CONS 'SEQ (CL:CONS 'START (CL:CONS 'CL:&OPTIONAL (CL:CONS (CL:CONS 'END (CL:CONS 99999 CL:NIL)) CL:NIL)))) CL:NIL)))) (CL:PROGN (CL:DEFUN SUBSEQ (SEQ START CL:&OPTIONAL (END 99999)) (CL:BLOCK SUBSEQ (CL:BLOCK CL:NIL (? SEQ (CL:PROGN (? (> START END) (CL:LABELS ((G3649 (~G1459) (CL:PROGN (CL:SETQ START END) (CL:SETQ END ~G1459)))) (G3649 START))) (CL:LABELS ((G3650 (~G1460) (? (CONS? ~G1460) (LIST-SUBSEQ SEQ START END) (STRING? ~G1460) (STRING-SUBSEQ SEQ START END) (ARRAY? ~G1460) (%SUBSEQ-SEQUENCE #'MAKE-ARRAY SEQ START END) (ERROR "Type of ~A not supported." SEQ)))) (G3650 SEQ))))))) (CL:SETF (CL:GETHASH #'SUBSEQ *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'SEQ (CL:CONS 'START (CL:CONS 'CL:&OPTIONAL (CL:CONS (CL:CONS 'END (CL:CONS 99999 CL:NIL)) CL:NIL)))) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'SUBSEQ (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS '? (CL:CONS 'SEQ (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS '> (CL:CONS 'START (CL:CONS 'END CL:NIL))) (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1459 CL:NIL) (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS 'CL:SETQ (CL:CONS 'START (CL:CONS 'END CL:NIL))) (CL:CONS (CL:CONS 'CL:SETQ (CL:CONS 'END (CL:CONS '~G1459 CL:NIL))) CL:NIL))) CL:NIL)) CL:NIL)) (CL:CONS 'START CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1460 CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'CONS? (CL:CONS '~G1460 CL:NIL)) (CL:CONS (CL:CONS 'LIST-SUBSEQ (CL:CONS 'SEQ (CL:CONS 'START (CL:CONS 'END CL:NIL)))) (CL:CONS (CL:CONS 'STRING? (CL:CONS '~G1460 CL:NIL)) (CL:CONS (CL:CONS 'STRING-SUBSEQ (CL:CONS 'SEQ (CL:CONS 'START (CL:CONS 'END CL:NIL)))) (CL:CONS (CL:CONS 'ARRAY? (CL:CONS '~G1460 CL:NIL)) (CL:CONS (CL:CONS '%SUBSEQ-SEQUENCE (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS 'MAKE-ARRAY CL:NIL)) (CL:CONS 'SEQ (CL:CONS 'START (CL:CONS 'END CL:NIL))))) (CL:CONS (CL:CONS 'ERROR (CL:CONS "Type of ~A not supported." (CL:CONS 'SEQ CL:NIL))) CL:NIL)))))))) CL:NIL)) CL:NIL)) (CL:CONS 'SEQ CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'SUBSEQ))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'STRING-SUBSEQ (CL:CONS (CL:CONS 'SEQ (CL:CONS 'START (CL:CONS 'CL:&OPTIONAL (CL:CONS (CL:CONS 'END (CL:CONS 99999 CL:NIL)) CL:NIL)))) CL:NIL)))) (CL:PROGN (CL:DEFUN STRING-SUBSEQ (SEQ START CL:&OPTIONAL (END 99999)) (CL:BLOCK STRING-SUBSEQ (CL:BLOCK CL:NIL (? (== START END) "" (CL:LABELS ((G3651 (SEQLEN) (? (< START SEQLEN) (CL:PROGN (? (>= END SEQLEN) (CL:PROGN (CL:PROGN (CL:SETQ END SEQLEN)))) (CL:LABELS ((G3652 (L) (CL:LABELS ((G3653 (S) (CL:LABELS ((G3654 (~G1462) (CL:BLOCK CL:NIL (CL:LABELS ((G3655 (X) (CL:TAGBODY ~G1463 (? (INTEGER== X ~G1462) (CL:RETURN-FROM CL:NIL (CL:PROGN S))) (CL:PROGN (CL:SETQ S (+ S (STRING (CL:ELT SEQ (+ START X)))))) (CL:SETQ X (INTEGER+ 1 X)) (CL:GO ~G1463)))) (G3655 0))))) (G3654 (INTEGER L))))) (G3653 (CL:MAKE-STRING 0))))) (G3652 (- END START))))))) (G3651 (CL:LENGTH SEQ))))))) (CL:SETF (CL:GETHASH #'STRING-SUBSEQ *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'SEQ (CL:CONS 'START (CL:CONS 'CL:&OPTIONAL (CL:CONS (CL:CONS 'END (CL:CONS 99999 CL:NIL)) CL:NIL)))) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'STRING-SUBSEQ (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS '== (CL:CONS 'START (CL:CONS 'END CL:NIL))) (CL:CONS "" (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS 'SEQLEN CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS '< (CL:CONS 'START (CL:CONS 'SEQLEN CL:NIL))) (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS '>= (CL:CONS 'END (CL:CONS 'SEQLEN CL:NIL))) (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS 'CL:SETQ (CL:CONS 'END (CL:CONS 'SEQLEN CL:NIL))) CL:NIL)) CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS 'L CL:NIL) (CL:CONS (CL:CONS 'LET (CL:CONS 'S (CL:CONS (CL:CONS 'CL:MAKE-STRING (CL:CONS 0 CL:NIL)) (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1462 CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'LET* (CL:CONS (CL:CONS (CL:CONS 'X (CL:CONS 0 CL:NIL)) CL:NIL) (CL:CONS (CL:CONS 'CL:TAGBODY (CL:CONS '~G1463 (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'INTEGER== (CL:CONS 'X (CL:CONS '~G1462 CL:NIL))) (CL:CONS (CL:CONS 'CL:RETURN (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS 'S CL:NIL)) CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS 'CL:SETQ (CL:CONS 'S (CL:CONS (CL:CONS '+ (CL:CONS 'S (CL:CONS (CL:CONS 'STRING (CL:CONS (CL:CONS 'CL:ELT (CL:CONS 'SEQ (CL:CONS (CL:CONS '+ (CL:CONS 'START (CL:CONS 'X CL:NIL))) CL:NIL))) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)) (CL:CONS (CL:CONS 'CL:SETQ (CL:CONS 'X (CL:CONS (CL:CONS 'INTEGER+ (CL:CONS 1 (CL:CONS 'X CL:NIL))) CL:NIL))) (CL:CONS (CL:CONS 'CL:GO (CL:CONS '~G1463 CL:NIL)) CL:NIL)))))) CL:NIL))) CL:NIL))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'INTEGER (CL:CONS 'L CL:NIL)) CL:NIL)) CL:NIL)))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS '- (CL:CONS 'END (CL:CONS 'START CL:NIL))) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'CL:LENGTH (CL:CONS 'SEQ CL:NIL)) CL:NIL)) CL:NIL)))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'STRING-SUBSEQ))
(CL:SETQ *FUNCTIONALS* (%NCONC (CL:CONS 'FIND (CL:CONS 'POSITION CL:NIL)) *FUNCTIONALS*))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS '%FIND-IF-LIST (CL:CONS (CL:CONS 'PRED (CL:CONS 'SEQ (CL:CONS 'FROM-END (CL:CONS 'WITH-INDEX CL:NIL)))) CL:NIL)))) (CL:PROGN (CL:DEFUN %FIND-IF-LIST (PRED SEQ FROM-END WITH-INDEX) (CL:BLOCK %FIND-IF-LIST (CL:BLOCK CL:NIL (CL:LABELS ((G3656 (!) (? WITH-INDEX (CL:LABELS ((G3657 (IDX) (CL:BLOCK CL:NIL (CL:LABELS ((G3658 (~G1472) (CL:LABELS ((G3659 (!) (CL:TAGBODY ~G1470 (? (NOT ~G1472) (CL:GO ~G1471)) (CL:SETQ ! (CL:CAR ~G1472)) (? (FUNCALL PRED ! IDX) (CL:RETURN-FROM CL:NIL !)) (CL:PROGN (CL:SETQ IDX (NUMBER+ IDX 1))) (CL:SETQ ~G1472 (CL:CDR ~G1472)) (CL:GO ~G1470) ~G1471 (CL:RETURN-FROM CL:NIL (CL:PROGN CL:NIL))))) (G3659 CL:NIL)))) (G3658 !))))) (G3657 0)) (CL:BLOCK CL:NIL (CL:LABELS ((G3660 (~G1475) (CL:LABELS ((G3661 (!) (CL:TAGBODY ~G1473 (? (NOT ~G1475) (CL:GO ~G1474)) (CL:SETQ ! (CL:CAR ~G1475)) (? (FUNCALL PRED !) (CL:RETURN-FROM CL:NIL !)) (CL:SETQ ~G1475 (CL:CDR ~G1475)) (CL:GO ~G1473) ~G1474 (CL:RETURN-FROM CL:NIL (CL:PROGN CL:NIL))))) (G3661 CL:NIL)))) (G3660 !)))))) (G3656 (? FROM-END (REVERSE SEQ) SEQ)))))) (CL:SETF (CL:GETHASH #'%FIND-IF-LIST *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'PRED (CL:CONS 'SEQ (CL:CONS 'FROM-END (CL:CONS 'WITH-INDEX CL:NIL)))) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS '%FIND-IF-LIST (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '! CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS 'WITH-INDEX (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS 'IDX CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'LET* (CL:CONS (CL:CONS (CL:CONS '~G1472 (CL:CONS '! CL:NIL)) (CL:CONS (CL:CONS '! (CL:CONS CL:NIL CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'CL:TAGBODY (CL:CONS '~G1470 (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'NOT (CL:CONS '~G1472 CL:NIL)) (CL:CONS (CL:CONS 'CL:GO (CL:CONS '~G1471 CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'CL:SETQ (CL:CONS '! (CL:CONS (CL:CONS 'CL:CAR (CL:CONS '~G1472 CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'FUNCALL (CL:CONS 'PRED (CL:CONS '! (CL:CONS 'IDX CL:NIL)))) (CL:CONS (CL:CONS 'CL:RETURN-FROM (CL:CONS CL:NIL (CL:CONS '! CL:NIL))) CL:NIL))) (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS 'CL:SETQ (CL:CONS 'IDX (CL:CONS (CL:CONS 'NUMBER+ (CL:CONS 'IDX (CL:CONS 1 CL:NIL))) CL:NIL))) CL:NIL)) (CL:CONS (CL:CONS 'CL:SETQ (CL:CONS '~G1472 (CL:CONS (CL:CONS 'CL:CDR (CL:CONS '~G1472 CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'CL:GO (CL:CONS '~G1470 CL:NIL)) (CL:CONS '~G1471 (CL:CONS (CL:CONS 'CL:RETURN (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS CL:NIL CL:NIL)) CL:NIL)) CL:NIL)))))))))) CL:NIL))) CL:NIL))) CL:NIL)) CL:NIL)) (CL:CONS 0 CL:NIL)) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'LET* (CL:CONS (CL:CONS (CL:CONS '~G1475 (CL:CONS '! CL:NIL)) (CL:CONS (CL:CONS '! (CL:CONS CL:NIL CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'CL:TAGBODY (CL:CONS '~G1473 (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'NOT (CL:CONS '~G1475 CL:NIL)) (CL:CONS (CL:CONS 'CL:GO (CL:CONS '~G1474 CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'CL:SETQ (CL:CONS '! (CL:CONS (CL:CONS 'CL:CAR (CL:CONS '~G1475 CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'FUNCALL (CL:CONS 'PRED (CL:CONS '! CL:NIL))) (CL:CONS (CL:CONS 'CL:RETURN-FROM (CL:CONS CL:NIL (CL:CONS '! CL:NIL))) CL:NIL))) (CL:CONS (CL:CONS 'CL:SETQ (CL:CONS '~G1475 (CL:CONS (CL:CONS 'CL:CDR (CL:CONS '~G1475 CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'CL:GO (CL:CONS '~G1473 CL:NIL)) (CL:CONS '~G1474 (CL:CONS (CL:CONS 'CL:RETURN (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS CL:NIL CL:NIL)) CL:NIL)) CL:NIL))))))))) CL:NIL))) CL:NIL))) CL:NIL)))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS '? (CL:CONS 'FROM-END (CL:CONS (CL:CONS 'REVERSE (CL:CONS 'SEQ CL:NIL)) (CL:CONS 'SEQ CL:NIL)))) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL '%FIND-IF-LIST))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS '%FIND-IF-SEQUENCE (CL:CONS (CL:CONS 'PRED (CL:CONS 'SEQ (CL:CONS 'START (CL:CONS 'END (CL:CONS 'FROM-END (CL:CONS 'WITH-INDEX CL:NIL)))))) CL:NIL)))) (CL:PROGN (CL:DEFUN %FIND-IF-SEQUENCE (PRED SEQ START END FROM-END WITH-INDEX) (CL:BLOCK %FIND-IF-SEQUENCE (CL:BLOCK CL:NIL (? SEQ (? (< 0 (CL:LENGTH SEQ)) (CL:LABELS ((G3662 (E) (CL:LABELS ((G3663 (S) (? (CL:LABELS ((G3664 (~G1466) (? ~G1466 ~G1466 (? (< S E) FROM-END)))) (G3664 (? (> S E) (NOT FROM-END)))) (CL:LABELS ((G3665 (~G1467) (CL:PROGN (CL:SETQ S E) (CL:SETQ E ~G1467)))) (G3665 S))) (CL:BLOCK CL:NIL (CL:LABELS ((G3666 (I) (CL:TAGBODY ~G1468 (? (? FROM-END (< I E) (> I E)) (CL:RETURN-FROM CL:NIL (CL:PROGN))) (CL:LABELS ((G3667 (!) (? (CL:APPLY PRED (CL:CONS ! (? WITH-INDEX (CL:LIST I)))) (CL:RETURN-FROM CL:NIL !)))) (G3667 (CL:ELT SEQ I))) (CL:SETQ I (? FROM-END (-- I) (++ I))) (CL:GO ~G1468)))) (G3666 S))))) (G3663 (CL:LABELS ((G3668 (~G1465) (? ~G1465 ~G1465 0))) (G3668 START)))))) (G3662 (CL:LABELS ((G3669 (~G1464) (? ~G1464 ~G1464 (-- (CL:LENGTH SEQ))))) (G3669 END))))))))) (CL:SETF (CL:GETHASH #'%FIND-IF-SEQUENCE *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'PRED (CL:CONS 'SEQ (CL:CONS 'START (CL:CONS 'END (CL:CONS 'FROM-END (CL:CONS 'WITH-INDEX CL:NIL)))))) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS '%FIND-IF-SEQUENCE (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS '? (CL:CONS 'SEQ (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS '< (CL:CONS 0 (CL:CONS (CL:CONS 'CL:LENGTH (CL:CONS 'SEQ CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS 'E CL:NIL) (CL:CONS (CL:CONS 'LET (CL:CONS 'S (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1465 CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS '~G1465 (CL:CONS '~G1465 (CL:CONS 0 CL:NIL)))) CL:NIL)) CL:NIL)) (CL:CONS 'START CL:NIL)) (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1466 CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS '~G1466 (CL:CONS '~G1466 (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS '< (CL:CONS 'S (CL:CONS 'E CL:NIL))) (CL:CONS 'FROM-END CL:NIL))) CL:NIL)))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS '> (CL:CONS 'S (CL:CONS 'E CL:NIL))) (CL:CONS (CL:CONS 'NOT (CL:CONS 'FROM-END CL:NIL)) CL:NIL))) CL:NIL)) (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1467 CL:NIL) (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS 'CL:SETQ (CL:CONS 'S (CL:CONS 'E CL:NIL))) (CL:CONS (CL:CONS 'CL:SETQ (CL:CONS 'E (CL:CONS '~G1467 CL:NIL))) CL:NIL))) CL:NIL)) CL:NIL)) (CL:CONS 'S CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'LET (CL:CONS 'I (CL:CONS 'S (CL:CONS (CL:CONS 'CL:TAGBODY (CL:CONS '~G1468 (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS '? (CL:CONS 'FROM-END (CL:CONS (CL:CONS '< (CL:CONS 'I (CL:CONS 'E CL:NIL))) (CL:CONS (CL:CONS '> (CL:CONS 'I (CL:CONS 'E CL:NIL))) CL:NIL)))) (CL:CONS (CL:CONS 'CL:RETURN-FROM (CL:CONS CL:NIL (CL:CONS (CL:CONS 'CL:PROGN CL:NIL) CL:NIL))) CL:NIL))) (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '! CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'CL:APPLY (CL:CONS 'PRED (CL:CONS (CL:CONS 'CL:CONS (CL:CONS '! (CL:CONS (CL:CONS '? (CL:CONS 'WITH-INDEX (CL:CONS (CL:CONS 'CL:LIST (CL:CONS 'I CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL))) (CL:CONS (CL:CONS 'CL:RETURN-FROM (CL:CONS CL:NIL (CL:CONS '! CL:NIL))) CL:NIL))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'CL:ELT (CL:CONS 'SEQ (CL:CONS 'I CL:NIL))) CL:NIL)) (CL:CONS (CL:CONS 'CL:SETQ (CL:CONS 'I (CL:CONS (CL:CONS '? (CL:CONS 'FROM-END (CL:CONS (CL:CONS '-- (CL:CONS 'I CL:NIL)) (CL:CONS (CL:CONS '++ (CL:CONS 'I CL:NIL)) CL:NIL)))) CL:NIL))) (CL:CONS (CL:CONS 'CL:GO (CL:CONS '~G1468 CL:NIL)) CL:NIL)))))) CL:NIL)))) CL:NIL))) CL:NIL))))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1464 CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS '~G1464 (CL:CONS '~G1464 (CL:CONS (CL:CONS '-- (CL:CONS (CL:CONS 'CL:LENGTH (CL:CONS 'SEQ CL:NIL)) CL:NIL)) CL:NIL)))) CL:NIL)) CL:NIL)) (CL:CONS 'END CL:NIL)) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL '%FIND-IF-SEQUENCE))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'FIND-IF (CL:CONS (CL:CONS 'PRED (CL:CONS 'SEQ (CL:CONS 'CL:&KEY (CL:CONS (CL:CONS 'START (CL:CONS CL:NIL CL:NIL)) (CL:CONS (CL:CONS 'END (CL:CONS CL:NIL CL:NIL)) (CL:CONS (CL:CONS 'FROM-END (CL:CONS CL:NIL CL:NIL)) (CL:CONS (CL:CONS 'WITH-INDEX (CL:CONS CL:NIL CL:NIL)) CL:NIL))))))) CL:NIL)))) (CL:PROGN (CL:DEFUN FIND-IF (PRED SEQ CL:&KEY (START CL:NIL) (END CL:NIL) (FROM-END CL:NIL) (WITH-INDEX CL:NIL)) (CL:BLOCK FIND-IF (CL:BLOCK CL:NIL (? (NOT (CL:ATOM SEQ) START END) (%FIND-IF-LIST PRED SEQ FROM-END WITH-INDEX) (%FIND-IF-SEQUENCE PRED SEQ START END FROM-END WITH-INDEX))))) (CL:SETF (CL:GETHASH #'FIND-IF *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'PRED (CL:CONS 'SEQ (CL:CONS 'CL:&KEY (CL:CONS (CL:CONS 'START (CL:CONS CL:NIL CL:NIL)) (CL:CONS (CL:CONS 'END (CL:CONS CL:NIL CL:NIL)) (CL:CONS (CL:CONS 'FROM-END (CL:CONS CL:NIL CL:NIL)) (CL:CONS (CL:CONS 'WITH-INDEX (CL:CONS CL:NIL CL:NIL)) CL:NIL))))))) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'FIND-IF (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'NOT (CL:CONS (CL:CONS 'CL:ATOM (CL:CONS 'SEQ CL:NIL)) (CL:CONS 'START (CL:CONS 'END CL:NIL)))) (CL:CONS (CL:CONS '%FIND-IF-LIST (CL:CONS 'PRED (CL:CONS 'SEQ (CL:CONS 'FROM-END (CL:CONS 'WITH-INDEX CL:NIL))))) (CL:CONS (CL:CONS '%FIND-IF-SEQUENCE (CL:CONS 'PRED (CL:CONS 'SEQ (CL:CONS 'START (CL:CONS 'END (CL:CONS 'FROM-END (CL:CONS 'WITH-INDEX CL:NIL))))))) CL:NIL)))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'FIND-IF))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'FIND (CL:CONS (CL:CONS 'OBJ (CL:CONS 'SEQ (CL:CONS 'CL:&KEY (CL:CONS (CL:CONS 'START (CL:CONS CL:NIL CL:NIL)) (CL:CONS (CL:CONS 'END (CL:CONS CL:NIL CL:NIL)) (CL:CONS (CL:CONS 'FROM-END (CL:CONS CL:NIL CL:NIL)) (CL:CONS (CL:CONS 'TEST (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS 'EQL CL:NIL)) CL:NIL)) CL:NIL))))))) CL:NIL)))) (CL:PROGN (CL:DEFUN FIND (OBJ SEQ CL:&KEY (START CL:NIL) (END CL:NIL) (FROM-END CL:NIL) (TEST #'EQL)) (CL:BLOCK FIND (CL:BLOCK CL:NIL (FIND-IF #'(CL:LAMBDA (_) (FUNCALL TEST _ OBJ)) SEQ :START START :END END :FROM-END FROM-END)))) (CL:SETF (CL:GETHASH #'FIND *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'OBJ (CL:CONS 'SEQ (CL:CONS 'CL:&KEY (CL:CONS (CL:CONS 'START (CL:CONS CL:NIL CL:NIL)) (CL:CONS (CL:CONS 'END (CL:CONS CL:NIL CL:NIL)) (CL:CONS (CL:CONS 'FROM-END (CL:CONS CL:NIL CL:NIL)) (CL:CONS (CL:CONS 'TEST (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS 'EQL CL:NIL)) CL:NIL)) CL:NIL))))))) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'FIND (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'FIND-IF (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '_ CL:NIL) (CL:CONS (CL:CONS 'FUNCALL (CL:CONS 'TEST (CL:CONS '_ (CL:CONS 'OBJ CL:NIL)))) CL:NIL)) CL:NIL)) (CL:CONS 'SEQ (CL:CONS ':START (CL:CONS 'START (CL:CONS ':END (CL:CONS 'END (CL:CONS ':FROM-END (CL:CONS 'FROM-END CL:NIL))))))))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'FIND))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'POSITION (CL:CONS (CL:CONS 'OBJ (CL:CONS 'SEQ (CL:CONS 'CL:&KEY (CL:CONS (CL:CONS 'START (CL:CONS CL:NIL CL:NIL)) (CL:CONS (CL:CONS 'END (CL:CONS CL:NIL CL:NIL)) (CL:CONS (CL:CONS 'FROM-END (CL:CONS CL:NIL CL:NIL)) (CL:CONS (CL:CONS 'TEST (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS 'EQL CL:NIL)) CL:NIL)) CL:NIL))))))) CL:NIL)))) (CL:PROGN (CL:DEFUN POSITION (OBJ SEQ CL:&KEY (START CL:NIL) (END CL:NIL) (FROM-END CL:NIL) (TEST #'EQL)) (CL:BLOCK POSITION (CL:BLOCK CL:NIL (CL:LABELS ((G3670 (!) (FIND-IF #'(CL:LAMBDA (X I) (? (FUNCALL TEST X OBJ) (CL:PROGN (CL:SETQ ! I)))) SEQ :START START :END END :FROM-END FROM-END :WITH-INDEX CL:T) !)) (G3670 CL:NIL))))) (CL:SETF (CL:GETHASH #'POSITION *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'OBJ (CL:CONS 'SEQ (CL:CONS 'CL:&KEY (CL:CONS (CL:CONS 'START (CL:CONS CL:NIL CL:NIL)) (CL:CONS (CL:CONS 'END (CL:CONS CL:NIL CL:NIL)) (CL:CONS (CL:CONS 'FROM-END (CL:CONS CL:NIL CL:NIL)) (CL:CONS (CL:CONS 'TEST (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS 'EQL CL:NIL)) CL:NIL)) CL:NIL))))))) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'POSITION (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '! CL:NIL) (CL:CONS (CL:CONS 'FIND-IF (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS 'X (CL:CONS 'I CL:NIL)) (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'FUNCALL (CL:CONS 'TEST (CL:CONS 'X (CL:CONS 'OBJ CL:NIL)))) (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS 'CL:SETQ (CL:CONS '! (CL:CONS 'I CL:NIL))) CL:NIL)) CL:NIL))) CL:NIL)) CL:NIL)) (CL:CONS 'SEQ (CL:CONS ':START (CL:CONS 'START (CL:CONS ':END (CL:CONS 'END (CL:CONS ':FROM-END (CL:CONS 'FROM-END (CL:CONS ':WITH-INDEX (CL:CONS CL:T CL:NIL))))))))))) (CL:CONS '! CL:NIL))) CL:NIL)) (CL:CONS CL:NIL CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'POSITION))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'POSITION-IF (CL:CONS (CL:CONS 'PRED (CL:CONS 'SEQ (CL:CONS 'CL:&KEY (CL:CONS (CL:CONS 'START (CL:CONS CL:NIL CL:NIL)) (CL:CONS (CL:CONS 'END (CL:CONS CL:NIL CL:NIL)) (CL:CONS (CL:CONS 'FROM-END (CL:CONS CL:NIL CL:NIL)) CL:NIL)))))) CL:NIL)))) (CL:PROGN (CL:DEFUN POSITION-IF (PRED SEQ CL:&KEY (START CL:NIL) (END CL:NIL) (FROM-END CL:NIL)) (CL:BLOCK POSITION-IF (CL:BLOCK CL:NIL (CL:LABELS ((G3671 (!) (FIND-IF #'(CL:LAMBDA (X I) (? (FUNCALL PRED X) (CL:PROGN (CL:SETQ ! I)))) SEQ :START START :END END :FROM-END FROM-END :WITH-INDEX CL:T) !)) (G3671 CL:NIL))))) (CL:SETF (CL:GETHASH #'POSITION-IF *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'PRED (CL:CONS 'SEQ (CL:CONS 'CL:&KEY (CL:CONS (CL:CONS 'START (CL:CONS CL:NIL CL:NIL)) (CL:CONS (CL:CONS 'END (CL:CONS CL:NIL CL:NIL)) (CL:CONS (CL:CONS 'FROM-END (CL:CONS CL:NIL CL:NIL)) CL:NIL)))))) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'POSITION-IF (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '! CL:NIL) (CL:CONS (CL:CONS 'FIND-IF (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS 'X (CL:CONS 'I CL:NIL)) (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'FUNCALL (CL:CONS 'PRED (CL:CONS 'X CL:NIL))) (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS 'CL:SETQ (CL:CONS '! (CL:CONS 'I CL:NIL))) CL:NIL)) CL:NIL))) CL:NIL)) CL:NIL)) (CL:CONS 'SEQ (CL:CONS ':START (CL:CONS 'START (CL:CONS ':END (CL:CONS 'END (CL:CONS ':FROM-END (CL:CONS 'FROM-END (CL:CONS ':WITH-INDEX (CL:CONS CL:T CL:NIL))))))))))) (CL:CONS '! CL:NIL))) CL:NIL)) (CL:CONS CL:NIL CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'POSITION-IF))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'SOME (CL:CONS (CL:CONS 'PRED (CL:CONS 'CL:&REST (CL:CONS 'SEQS CL:NIL))) CL:NIL)))) (CL:PROGN (CL:DEFUN SOME (PRED CL:&REST SEQS) (CL:BLOCK SOME (CL:BLOCK CL:NIL (FIND-IF PRED (CL:APPLY #'APPEND SEQS))))) (CL:SETF (CL:GETHASH #'SOME *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'PRED (CL:CONS 'CL:&REST (CL:CONS 'SEQS CL:NIL))) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'SOME (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'FIND-IF (CL:CONS 'PRED (CL:CONS (CL:CONS 'CL:APPLY (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS 'APPEND CL:NIL)) (CL:CONS 'SEQS CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'SOME))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'EVERY (CL:CONS (CL:CONS 'PRED (CL:CONS 'CL:&REST (CL:CONS 'SEQS CL:NIL))) CL:NIL)))) (CL:PROGN (CL:DEFUN EVERY (PRED CL:&REST SEQS) (CL:BLOCK EVERY (CL:BLOCK CL:NIL (CL:BLOCK CL:NIL (CL:LABELS ((G3672 (~G1479) (CL:LABELS ((G3673 (SEQ) (CL:TAGBODY ~G1477 (? (NOT ~G1479) (CL:GO ~G1478)) (CL:SETQ SEQ (CL:CAR ~G1479)) (CL:LABELS ((G3674 (~G1476) (CL:BLOCK CL:NIL (CL:LABELS ((G3675 (!) (CL:TAGBODY ~G1480 (? (INTEGER== ! ~G1476) (CL:RETURN-FROM CL:NIL (CL:PROGN CL:NIL))) (CL:LABELS ((G3676 (~G1469) (? ~G1469 ~G1469 (CL:RETURN-FROM EVERY CL:NIL)))) (G3676 (FUNCALL PRED (CL:ELT SEQ !)))) (CL:SETQ ! (INTEGER+ 1 !)) (CL:GO ~G1480)))) (G3675 0))))) (G3674 (INTEGER (CL:LENGTH SEQ)))) (CL:SETQ ~G1479 (CL:CDR ~G1479)) (CL:GO ~G1477) ~G1478 (CL:RETURN-FROM CL:NIL (CL:PROGN CL:T))))) (G3673 CL:NIL)))) (G3672 SEQS)))))) (CL:SETF (CL:GETHASH #'EVERY *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'PRED (CL:CONS 'CL:&REST (CL:CONS 'SEQS CL:NIL))) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'EVERY (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'LET* (CL:CONS (CL:CONS (CL:CONS '~G1479 (CL:CONS 'SEQS CL:NIL)) (CL:CONS (CL:CONS 'SEQ (CL:CONS CL:NIL CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'CL:TAGBODY (CL:CONS '~G1477 (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'NOT (CL:CONS '~G1479 CL:NIL)) (CL:CONS (CL:CONS 'CL:GO (CL:CONS '~G1478 CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'CL:SETQ (CL:CONS 'SEQ (CL:CONS (CL:CONS 'CL:CAR (CL:CONS '~G1479 CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'LET (CL:CONS '~G1476 (CL:CONS (CL:CONS 'INTEGER (CL:CONS (CL:CONS 'CL:LENGTH (CL:CONS 'SEQ CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'DO (CL:CONS (CL:CONS (CL:CONS '! (CL:CONS 0 (CL:CONS (CL:CONS 'INTEGER+ (CL:CONS 1 (CL:CONS '! CL:NIL))) CL:NIL))) CL:NIL) (CL:CONS (CL:CONS (CL:CONS 'INTEGER== (CL:CONS '! (CL:CONS '~G1476 CL:NIL))) (CL:CONS CL:NIL CL:NIL)) (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1469 CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS '~G1469 (CL:CONS '~G1469 (CL:CONS (CL:CONS 'CL:RETURN-FROM (CL:CONS 'EVERY (CL:CONS CL:NIL CL:NIL))) CL:NIL)))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'FUNCALL (CL:CONS 'PRED (CL:CONS (CL:CONS 'CL:ELT (CL:CONS 'SEQ (CL:CONS '! CL:NIL))) CL:NIL))) CL:NIL)) CL:NIL)))) CL:NIL)))) (CL:CONS (CL:CONS 'CL:SETQ (CL:CONS '~G1479 (CL:CONS (CL:CONS 'CL:CDR (CL:CONS '~G1479 CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'CL:GO (CL:CONS '~G1477 CL:NIL)) (CL:CONS '~G1478 (CL:CONS (CL:CONS 'CL:RETURN (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS CL:T CL:NIL)) CL:NIL)) CL:NIL))))))))) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'EVERY))
CL:NIL
CL:NIL
CL:NIL
CL:NIL
CL:NIL
CL:NIL
CL:NIL
CL:NIL
CL:NIL
CL:NIL
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'DOT-EXPAND-MAKE-EXPR (CL:CONS (CL:CONS 'WHICH (CL:CONS 'NUM (CL:CONS 'X CL:NIL))) CL:NIL)))) (CL:PROGN (CL:DEFUN DOT-EXPAND-MAKE-EXPR (WHICH NUM X) (CL:BLOCK DOT-EXPAND-MAKE-EXPR (CL:BLOCK CL:NIL (? (< 0 NUM) (CL:CONS WHICH (CL:CONS (DOT-EXPAND-MAKE-EXPR WHICH (-- NUM) X) CL:NIL)) X)))) (CL:SETF (CL:GETHASH #'DOT-EXPAND-MAKE-EXPR *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'WHICH (CL:CONS 'NUM (CL:CONS 'X CL:NIL))) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'DOT-EXPAND-MAKE-EXPR (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS '< (CL:CONS 0 (CL:CONS 'NUM CL:NIL))) (CL:CONS (CL:CONS 'BACKQUOTE (CL:CONS (CL:CONS (CL:CONS 'QUASIQUOTE (CL:CONS 'WHICH CL:NIL)) (CL:CONS (CL:CONS 'QUASIQUOTE (CL:CONS (CL:CONS 'DOT-EXPAND-MAKE-EXPR (CL:CONS 'WHICH (CL:CONS (CL:CONS '-- (CL:CONS 'NUM CL:NIL)) (CL:CONS 'X CL:NIL)))) CL:NIL)) CL:NIL)) CL:NIL)) (CL:CONS 'X CL:NIL)))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'DOT-EXPAND-MAKE-EXPR))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'DOT-EXPAND-HEAD-LENGTH (CL:CONS (CL:CONS 'X (CL:CONS 'CL:&OPTIONAL (CL:CONS (CL:CONS 'NUM (CL:CONS 0 CL:NIL)) CL:NIL))) CL:NIL)))) (CL:PROGN (CL:DEFUN DOT-EXPAND-HEAD-LENGTH (X CL:&OPTIONAL (NUM 0)) (CL:BLOCK DOT-EXPAND-HEAD-LENGTH (CL:BLOCK CL:NIL (? (== #\. (CL:CAR X)) (DOT-EXPAND-HEAD-LENGTH (CL:CDR X) (++ NUM)) (VALUES NUM X))))) (CL:SETF (CL:GETHASH #'DOT-EXPAND-HEAD-LENGTH *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X (CL:CONS 'CL:&OPTIONAL (CL:CONS (CL:CONS 'NUM (CL:CONS 0 CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'DOT-EXPAND-HEAD-LENGTH (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS '== (CL:CONS #\. (CL:CONS (CL:CONS 'CL:CAR (CL:CONS 'X CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'DOT-EXPAND-HEAD-LENGTH (CL:CONS (CL:CONS 'CL:CDR (CL:CONS 'X CL:NIL)) (CL:CONS (CL:CONS '++ (CL:CONS 'NUM CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'VALUES (CL:CONS 'NUM (CL:CONS 'X CL:NIL))) CL:NIL)))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'DOT-EXPAND-HEAD-LENGTH))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'DOT-EXPAND-TAIL-LENGTH (CL:CONS (CL:CONS 'X (CL:CONS 'CL:&OPTIONAL (CL:CONS (CL:CONS 'NUM (CL:CONS 0 CL:NIL)) CL:NIL))) CL:NIL)))) (CL:PROGN (CL:DEFUN DOT-EXPAND-TAIL-LENGTH (X CL:&OPTIONAL (NUM 0)) (CL:BLOCK DOT-EXPAND-TAIL-LENGTH (CL:BLOCK CL:NIL (? (== #\. (CL:CAR (CL:LAST X))) (DOT-EXPAND-TAIL-LENGTH (BUTLAST X) (++ NUM)) (VALUES NUM X))))) (CL:SETF (CL:GETHASH #'DOT-EXPAND-TAIL-LENGTH *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X (CL:CONS 'CL:&OPTIONAL (CL:CONS (CL:CONS 'NUM (CL:CONS 0 CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'DOT-EXPAND-TAIL-LENGTH (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS '== (CL:CONS #\. (CL:CONS (CL:CONS 'CL:CAR (CL:CONS (CL:CONS 'CL:LAST (CL:CONS 'X CL:NIL)) CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'DOT-EXPAND-TAIL-LENGTH (CL:CONS (CL:CONS 'BUTLAST (CL:CONS 'X CL:NIL)) (CL:CONS (CL:CONS '++ (CL:CONS 'NUM CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'VALUES (CL:CONS 'NUM (CL:CONS 'X CL:NIL))) CL:NIL)))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'DOT-EXPAND-TAIL-LENGTH))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'DOT-EXPAND-LIST (CL:CONS (CL:CONS 'X CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN DOT-EXPAND-LIST (X) (CL:BLOCK DOT-EXPAND-LIST (CL:BLOCK CL:NIL (CL:LABELS ((G3677 (~G1486) (CL:LABELS ((G3678 (~G1487) (? (NOT (EQ (CL:CAR ~G1486) 'VALUES)) (CL:PROGN (ERROR "VALUES expected instead of ~A." ~G1486))) (CL:LABELS ((G3679 (NUM-CDRS) (CL:LABELS ((G3680 (~G1488) (CL:LABELS ((G3681 (WITHOUT-START) (CL:LABELS ((G3682 (~G1492) (CL:LABELS ((G3683 (~G1493) (? (NOT (EQ (CL:CAR ~G1492) 'VALUES)) (CL:PROGN (ERROR "VALUES expected instead of ~A." ~G1492))) (CL:LABELS ((G3684 (NUM-CARS) (CL:LABELS ((G3685 (~G1494) (CL:LABELS ((G3686 (WITHOUT-END) (DOT-EXPAND-MAKE-EXPR 'CL:CAR NUM-CARS (DOT-EXPAND-MAKE-EXPR 'CL:CDR NUM-CDRS (DOT-EXPAND (LIST-SYMBOL WITHOUT-END)))))) (G3686 (CL:CAR ~G1494))))) (G3685 (CL:LABELS ((G3687 (~G1496) (? ~G1496 ~G1496 (%ERROR "Not enough VALUES.")))) (G3687 (CL:CDR ~G1493))))))) (G3684 (CL:CAR ~G1493))))) (G3683 (CL:CDR ~G1492))))) (G3682 (DOT-EXPAND-TAIL-LENGTH WITHOUT-START))))) (G3681 (CL:CAR ~G1488))))) (G3680 (CL:LABELS ((G3688 (~G1491) (? ~G1491 ~G1491 (%ERROR "Not enough VALUES.")))) (G3688 (CL:CDR ~G1487))))))) (G3679 (CL:CAR ~G1487))))) (G3678 (CL:CDR ~G1486))))) (G3677 (DOT-EXPAND-HEAD-LENGTH X)))))) (CL:SETF (CL:GETHASH #'DOT-EXPAND-LIST *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'DOT-EXPAND-LIST (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'LET* (CL:CONS (CL:CONS (CL:CONS '~G1486 (CL:CONS (CL:CONS 'DOT-EXPAND-HEAD-LENGTH (CL:CONS 'X CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS '~G1487 (CL:CONS (CL:CONS 'CL:CDR (CL:CONS '~G1486 CL:NIL)) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'UNLESS (CL:CONS (CL:CONS 'EQ (CL:CONS (CL:CONS 'CL:CAR (CL:CONS '~G1486 CL:NIL)) (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'VALUES CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'ERROR (CL:CONS "VALUES expected instead of ~A." (CL:CONS '~G1486 CL:NIL))) CL:NIL))) (CL:CONS (CL:CONS 'LET* (CL:CONS (CL:CONS (CL:CONS 'NUM-CDRS (CL:CONS (CL:CONS 'CL:CAR (CL:CONS '~G1487 CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS '~G1488 (CL:CONS (CL:CONS '|\|| (CL:CONS (CL:CONS 'CL:CDR (CL:CONS '~G1487 CL:NIL)) (CL:CONS (CL:CONS '%ERROR (CL:CONS "Not enough VALUES." CL:NIL)) CL:NIL))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'LET* (CL:CONS (CL:CONS (CL:CONS 'WITHOUT-START (CL:CONS (CL:CONS 'CL:CAR (CL:CONS '~G1488 CL:NIL)) CL:NIL)) CL:NIL) (CL:CONS (CL:CONS 'MULTIPLE-VALUE-BIND (CL:CONS (CL:CONS 'NUM-CARS (CL:CONS 'WITHOUT-END CL:NIL)) (CL:CONS (CL:CONS 'DOT-EXPAND-TAIL-LENGTH (CL:CONS 'WITHOUT-START CL:NIL)) (CL:CONS (CL:CONS 'DOT-EXPAND-MAKE-EXPR (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'CL:CAR CL:NIL)) (CL:CONS 'NUM-CARS (CL:CONS (CL:CONS 'DOT-EXPAND-MAKE-EXPR (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'CL:CDR CL:NIL)) (CL:CONS 'NUM-CDRS (CL:CONS (CL:CONS 'DOT-EXPAND (CL:CONS (CL:CONS 'LIST-SYMBOL (CL:CONS 'WITHOUT-END CL:NIL)) CL:NIL)) CL:NIL)))) CL:NIL)))) CL:NIL)))) CL:NIL))) CL:NIL))) CL:NIL)))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'DOT-EXPAND-LIST))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'DOT-POSITION (CL:CONS (CL:CONS 'X CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN DOT-POSITION (X) (CL:BLOCK DOT-POSITION (CL:BLOCK CL:NIL (POSITION #\. X :TEST #'==)))) (CL:SETF (CL:GETHASH #'DOT-POSITION *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'DOT-POSITION (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'POSITION (CL:CONS #\. (CL:CONS 'X (CL:CONS ':TEST (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS '== CL:NIL)) CL:NIL))))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'DOT-POSITION))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'NO-DOT-NOTATION? (CL:CONS (CL:CONS 'X CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN NO-DOT-NOTATION? (X) (CL:BLOCK NO-DOT-NOTATION? (CL:BLOCK CL:NIL (CL:LABELS ((G3689 (SL) (CL:LABELS ((G3690 (L) (CL:LABELS ((G3691 (P) (CL:LABELS ((G3692 (~G1481) (? ~G1481 ~G1481 (NOT P)))) (G3692 (== 1 L))))) (G3691 (DOT-POSITION SL))))) (G3690 (CL:LENGTH SL))))) (G3689 (STRING-LIST (SYMBOL-NAME X))))))) (CL:SETF (CL:GETHASH #'NO-DOT-NOTATION? *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'NO-DOT-NOTATION? (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS 'SL CL:NIL) (CL:CONS (CL:CONS 'LET (CL:CONS 'L (CL:CONS (CL:CONS 'CL:LENGTH (CL:CONS 'SL CL:NIL)) (CL:CONS (CL:CONS 'WITH (CL:CONS (CL:CONS 'P (CL:CONS (CL:CONS 'DOT-POSITION (CL:CONS 'SL CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1481 CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS '~G1481 (CL:CONS '~G1481 (CL:CONS (CL:CONS 'NOT (CL:CONS 'P CL:NIL)) CL:NIL)))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS '== (CL:CONS 1 (CL:CONS 'L CL:NIL))) CL:NIL)) CL:NIL))) CL:NIL)))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'STRING-LIST (CL:CONS (CL:CONS 'SYMBOL-NAME (CL:CONS 'X CL:NIL)) CL:NIL)) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'NO-DOT-NOTATION?))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'HAS-DOT-NOTATION? (CL:CONS (CL:CONS 'X CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN HAS-DOT-NOTATION? (X) (CL:BLOCK HAS-DOT-NOTATION? (CL:BLOCK CL:NIL (CL:LABELS ((G3693 (SL) (CL:LABELS ((G3694 (~G1482) (? ~G1482 ~G1482 (== #\. (CL:CAR (CL:LAST SL)))))) (G3694 (== #\. (CL:CAR SL)))))) (G3693 (STRING-LIST (SYMBOL-NAME X))))))) (CL:SETF (CL:GETHASH #'HAS-DOT-NOTATION? *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'HAS-DOT-NOTATION? (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS 'SL CL:NIL) (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1482 CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS '~G1482 (CL:CONS '~G1482 (CL:CONS (CL:CONS '== (CL:CONS #\. (CL:CONS (CL:CONS 'CL:CAR (CL:CONS (CL:CONS 'CL:LAST (CL:CONS 'SL CL:NIL)) CL:NIL)) CL:NIL))) CL:NIL)))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS '== (CL:CONS #\. (CL:CONS (CL:CONS 'CL:CAR (CL:CONS 'SL CL:NIL)) CL:NIL))) CL:NIL)) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'STRING-LIST (CL:CONS (CL:CONS 'SYMBOL-NAME (CL:CONS 'X CL:NIL)) CL:NIL)) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'HAS-DOT-NOTATION?))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'DOT-EXPAND-CONV (CL:CONS (CL:CONS 'X CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN DOT-EXPAND-CONV (X) (CL:BLOCK DOT-EXPAND-CONV (CL:BLOCK CL:NIL (CL:LABELS ((G3695 (SL) (CL:LABELS ((G3696 (P) (? (NO-DOT-NOTATION? X) X (HAS-DOT-NOTATION? X) (DOT-EXPAND-LIST SL) (CL:CONS '%SLOT-VALUE (CL:CONS (LIST-SYMBOL (SUBSEQ SL 0 P)) (CL:CONS (DOT-EXPAND-CONV (LIST-SYMBOL (SUBSEQ SL (++ P)))) CL:NIL)))))) (G3696 (DOT-POSITION SL))))) (G3695 (STRING-LIST (SYMBOL-NAME X))))))) (CL:SETF (CL:GETHASH #'DOT-EXPAND-CONV *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'DOT-EXPAND-CONV (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS 'SL CL:NIL) (CL:CONS (CL:CONS 'LET (CL:CONS 'P (CL:CONS (CL:CONS 'DOT-POSITION (CL:CONS 'SL CL:NIL)) (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'NO-DOT-NOTATION? (CL:CONS 'X CL:NIL)) (CL:CONS 'X (CL:CONS (CL:CONS 'HAS-DOT-NOTATION? (CL:CONS 'X CL:NIL)) (CL:CONS (CL:CONS 'DOT-EXPAND-LIST (CL:CONS 'SL CL:NIL)) (CL:CONS (CL:CONS 'BACKQUOTE (CL:CONS (CL:CONS '%SLOT-VALUE (CL:CONS (CL:CONS 'QUASIQUOTE (CL:CONS (CL:CONS 'LIST-SYMBOL (CL:CONS (CL:CONS 'SUBSEQ (CL:CONS 'SL (CL:CONS 0 (CL:CONS 'P CL:NIL)))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'QUASIQUOTE (CL:CONS (CL:CONS 'DOT-EXPAND-CONV (CL:CONS (CL:CONS 'LIST-SYMBOL (CL:CONS (CL:CONS 'SUBSEQ (CL:CONS 'SL (CL:CONS (CL:CONS '++ (CL:CONS 'P CL:NIL)) CL:NIL))) CL:NIL)) CL:NIL)) CL:NIL)) CL:NIL))) CL:NIL)) CL:NIL)))))) CL:NIL)))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'STRING-LIST (CL:CONS (CL:CONS 'SYMBOL-NAME (CL:CONS 'X CL:NIL)) CL:NIL)) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'DOT-EXPAND-CONV))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'DOT-EXPAND (CL:CONS (CL:CONS 'X CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN DOT-EXPAND (X) (CL:BLOCK DOT-EXPAND (CL:BLOCK CL:NIL (CL:LABELS ((LABEL? (_) (NOT (CL:LABELS ((G3697 (~G1483) (? ~G1483 ~G1483 (CL:LABELS ((G3698 (~G1484) (? ~G1484 ~G1484 (STRING? _)))) (G3698 (NUMBER? _)))))) (G3697 (CONS? _)))))) (? X (CL:PROGN (? (LABEL? X) (DOT-EXPAND-CONV X) (CONS? X) (CL:PROGN (CL:LABELS ((G3699 (~G1490) (CL:LABELS ((G3700 (!) (? ! (CL:PROGN (CL:PROGN (CL:SETQ *DEFAULT-LISTPROP* !)))))) (G3700 (? (CONS? ~G1490) (CPR ~G1490)))))) (G3699 X)) (CL:LABELS ((G3701 (~G1485) (RPLACP (CL:CONS (DOT-EXPAND (CL:CAR X)) (DOT-EXPAND (CL:CDR X))) ~G1485))) (G3701 *DEFAULT-LISTPROP*))) X))))))) (CL:SETF (CL:GETHASH #'DOT-EXPAND *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'DOT-EXPAND (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'CL:LABELS (CL:CONS (CL:CONS (CL:CONS 'LABEL? (CL:CONS (CL:CONS '_ CL:NIL) (CL:CONS (CL:CONS 'NOT (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1483 CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS '~G1483 (CL:CONS '~G1483 (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1484 CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS '~G1484 (CL:CONS '~G1484 (CL:CONS (CL:CONS 'STRING? (CL:CONS '_ CL:NIL)) CL:NIL)))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'NUMBER? (CL:CONS '_ CL:NIL)) CL:NIL)) CL:NIL)))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'CONS? (CL:CONS '_ CL:NIL)) CL:NIL)) CL:NIL)) CL:NIL))) CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS 'X (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'LABEL? (CL:CONS 'X CL:NIL)) (CL:CONS (CL:CONS 'DOT-EXPAND-CONV (CL:CONS 'X CL:NIL)) (CL:CONS (CL:CONS 'CONS? (CL:CONS 'X CL:NIL)) (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS 'LET (CL:CONS '~G1490 (CL:CONS 'X (CL:CONS (CL:CONS 'AWHEN (CL:CONS (CL:CONS '& (CL:CONS (CL:CONS 'CONS? (CL:CONS '~G1490 CL:NIL)) (CL:CONS (CL:CONS 'CPR (CL:CONS '~G1490 CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS '= (CL:CONS '*DEFAULT-LISTPROP* (CL:CONS '! CL:NIL))) CL:NIL))) CL:NIL)))) (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1485 CL:NIL) (CL:CONS (CL:CONS 'RPLACP (CL:CONS (CL:CONS 'CL:CONS (CL:CONS (CL:CONS 'DOT-EXPAND (CL:CONS (CL:CONS 'CL:CAR (CL:CONS 'X CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'DOT-EXPAND (CL:CONS (CL:CONS 'CL:CDR (CL:CONS 'X CL:NIL)) CL:NIL)) CL:NIL))) (CL:CONS '~G1485 CL:NIL))) CL:NIL)) CL:NIL)) (CL:CONS '*DEFAULT-LISTPROP* CL:NIL)) CL:NIL))) (CL:CONS 'X CL:NIL)))))) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'DOT-EXPAND))
(CL:PROGN (CL:SETQ *DOT-EXPAND* #'DOT-EXPAND))
(%DEFVAR *MEMORIZED-NUMBERS* (MAKE-HASH-TABLE :TEST #'==))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'MEMORIZED-NUMBER (CL:CONS (CL:CONS 'X CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN MEMORIZED-NUMBER (X) (CL:BLOCK MEMORIZED-NUMBER (CL:BLOCK CL:NIL (CL:LABELS ((G3702 (~G1497) (? ~G1497 ~G1497 (CL:PROGN (=-HREF X *MEMORIZED-NUMBERS* X))))) (G3702 (HREF *MEMORIZED-NUMBERS* X)))))) (CL:SETF (CL:GETHASH #'MEMORIZED-NUMBER *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'MEMORIZED-NUMBER (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'LET (CL:CONS '~G1497 (CL:CONS (CL:CONS 'HREF (CL:CONS '*MEMORIZED-NUMBERS* (CL:CONS 'X CL:NIL))) (CL:CONS (CL:CONS '? (CL:CONS '~G1497 (CL:CONS '~G1497 (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS '=-HREF (CL:CONS 'X (CL:CONS '*MEMORIZED-NUMBERS* (CL:CONS 'X CL:NIL)))) CL:NIL)) CL:NIL)))) CL:NIL)))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'MEMORIZED-NUMBER))
(%DEFVAR *TERPRI* (STRING (CODE-CHAR 10)))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'TERPRI (CL:CONS (CL:CONS 'CL:&OPTIONAL (CL:CONS (CL:CONS 'STR (CL:CONS '*STANDARD-OUTPUT* CL:NIL)) CL:NIL)) CL:NIL)))) (CL:PROGN (CL:DEFUN TERPRI (CL:&OPTIONAL (STR *STANDARD-OUTPUT*)) (CL:BLOCK TERPRI (CL:BLOCK CL:NIL (CL:LABELS ((G3703 (~G1498) (CL:LABELS ((G3704 (S) (CL:LABELS ((G3705 (~G1499) (? ~G1498 ~G1499 (GET-STREAM-STRING S)))) (G3705 (CL:PROGN (STREAM-PRINC (CODE-CHAR 10) S) (FORCE-OUTPUT S) CL:NIL))))) (G3704 (DEFAULT-STREAM ~G1498))))) (G3703 STR))))) (CL:SETF (CL:GETHASH #'TERPRI *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'CL:&OPTIONAL (CL:CONS (CL:CONS 'STR (CL:CONS '*STANDARD-OUTPUT* CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'TERPRI (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'LET (CL:CONS '~G1498 (CL:CONS 'STR (CL:CONS (CL:CONS 'WITH (CL:CONS (CL:CONS 'S (CL:CONS (CL:CONS 'DEFAULT-STREAM (CL:CONS '~G1498 CL:NIL)) (CL:CONS '~G1499 (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS 'STREAM-PRINC (CL:CONS (CL:CONS 'CODE-CHAR (CL:CONS 10 CL:NIL)) (CL:CONS 'S CL:NIL))) (CL:CONS (CL:CONS 'FORCE-OUTPUT (CL:CONS 'S CL:NIL)) (CL:CONS CL:NIL CL:NIL)))) CL:NIL)))) (CL:CONS (CL:CONS '? (CL:CONS '~G1498 (CL:CONS '~G1499 (CL:CONS (CL:CONS 'GET-STREAM-STRING (CL:CONS 'S CL:NIL)) CL:NIL)))) CL:NIL))) CL:NIL)))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'TERPRI))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'FRESH-LINE (CL:CONS (CL:CONS 'CL:&OPTIONAL (CL:CONS (CL:CONS 'STR (CL:CONS '*STANDARD-OUTPUT* CL:NIL)) CL:NIL)) CL:NIL)))) (CL:PROGN (CL:DEFUN FRESH-LINE (CL:&OPTIONAL (STR *STANDARD-OUTPUT*)) (CL:BLOCK FRESH-LINE (CL:BLOCK CL:NIL (CL:LABELS ((G3706 (~G1500) (CL:LABELS ((G3707 (S) (CL:LABELS ((G3708 (~G1501) (? ~G1500 ~G1501 (GET-STREAM-STRING S)))) (G3708 (CL:PROGN (? (NOT (FRESH-LINE? S)) (CL:PROGN (TERPRI S) CL:T))))))) (G3707 (DEFAULT-STREAM ~G1500))))) (G3706 STR))))) (CL:SETF (CL:GETHASH #'FRESH-LINE *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'CL:&OPTIONAL (CL:CONS (CL:CONS 'STR (CL:CONS '*STANDARD-OUTPUT* CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'FRESH-LINE (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'LET (CL:CONS '~G1500 (CL:CONS 'STR (CL:CONS (CL:CONS 'WITH (CL:CONS (CL:CONS 'S (CL:CONS (CL:CONS 'DEFAULT-STREAM (CL:CONS '~G1500 CL:NIL)) (CL:CONS '~G1501 (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'NOT (CL:CONS (CL:CONS 'FRESH-LINE? (CL:CONS 'S CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS 'TERPRI (CL:CONS 'S CL:NIL)) (CL:CONS CL:T CL:NIL))) CL:NIL))) CL:NIL)) CL:NIL)))) (CL:CONS (CL:CONS '? (CL:CONS '~G1500 (CL:CONS '~G1501 (CL:CONS (CL:CONS 'GET-STREAM-STRING (CL:CONS 'S CL:NIL)) CL:NIL)))) CL:NIL))) CL:NIL)))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'FRESH-LINE))
(%DEFVAR *DEFAULT-STREAM-TABSIZE* 8)
(CL:PROGN CL:NIL (CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'MAKE-STREAM-LOCATION (CL:CONS (CL:CONS 'CL:&KEY (CL:CONS (CL:CONS 'TRACK? (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'TRACK? CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'ID (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'ID CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'LINE (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'LINE CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'COLUMN (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'COLUMN CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'TABSIZE (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'TABSIZE CL:NIL)) CL:NIL)) CL:NIL)))))) CL:NIL)))) (CL:PROGN (CL:DEFUN MAKE-STREAM-LOCATION (CL:&KEY (TRACK? 'TRACK?) (ID 'ID) (LINE 'LINE) (COLUMN 'COLUMN) (TABSIZE 'TABSIZE)) (CL:BLOCK MAKE-STREAM-LOCATION (CL:BLOCK CL:NIL (CL:LABELS ((G3709 (~G1502) (CL:PROGN (=-AREF 'STRUCT ~G1502 0) (=-AREF 'STREAM-LOCATION ~G1502 1)) (CL:PROGN (=-AREF (? (EQ TRACK? 'TRACK?) CL:T TRACK?) ~G1502 2)) (CL:PROGN (=-AREF (? (EQ ID 'ID) CL:NIL ID) ~G1502 3)) (CL:PROGN (=-AREF (? (EQ LINE 'LINE) 1 LINE) ~G1502 4)) (CL:PROGN (=-AREF (? (EQ COLUMN 'COLUMN) 1 COLUMN) ~G1502 5)) (CL:PROGN (=-AREF (? (EQ TABSIZE 'TABSIZE) *DEFAULT-STREAM-TABSIZE* TABSIZE) ~G1502 6)) ~G1502)) (G3709 (MAKE-ARRAY 7)))))) (CL:SETF (CL:GETHASH #'MAKE-STREAM-LOCATION *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'CL:&KEY (CL:CONS (CL:CONS 'TRACK? (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'TRACK? CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'ID (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'ID CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'LINE (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'LINE CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'COLUMN (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'COLUMN CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'TABSIZE (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'TABSIZE CL:NIL)) CL:NIL)) CL:NIL)))))) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'MAKE-STREAM-LOCATION (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1502 CL:NIL) (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS '=-AREF (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'STRUCT CL:NIL)) (CL:CONS '~G1502 (CL:CONS 0 CL:NIL)))) (CL:CONS (CL:CONS '=-AREF (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'STREAM-LOCATION CL:NIL)) (CL:CONS '~G1502 (CL:CONS 1 CL:NIL)))) CL:NIL))) (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS '=-AREF (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'EQ (CL:CONS 'TRACK? (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'TRACK? CL:NIL)) CL:NIL))) (CL:CONS CL:T (CL:CONS 'TRACK? CL:NIL)))) (CL:CONS '~G1502 (CL:CONS 2 CL:NIL)))) CL:NIL)) (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS '=-AREF (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'EQ (CL:CONS 'ID (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'ID CL:NIL)) CL:NIL))) (CL:CONS CL:NIL (CL:CONS 'ID CL:NIL)))) (CL:CONS '~G1502 (CL:CONS 3 CL:NIL)))) CL:NIL)) (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS '=-AREF (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'EQ (CL:CONS 'LINE (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'LINE CL:NIL)) CL:NIL))) (CL:CONS 1 (CL:CONS 'LINE CL:NIL)))) (CL:CONS '~G1502 (CL:CONS 4 CL:NIL)))) CL:NIL)) (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS '=-AREF (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'EQ (CL:CONS 'COLUMN (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'COLUMN CL:NIL)) CL:NIL))) (CL:CONS 1 (CL:CONS 'COLUMN CL:NIL)))) (CL:CONS '~G1502 (CL:CONS 5 CL:NIL)))) CL:NIL)) (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS '=-AREF (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'EQ (CL:CONS 'TABSIZE (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'TABSIZE CL:NIL)) CL:NIL))) (CL:CONS '*DEFAULT-STREAM-TABSIZE* (CL:CONS 'TABSIZE CL:NIL)))) (CL:CONS '~G1502 (CL:CONS 6 CL:NIL)))) CL:NIL)) (CL:CONS '~G1502 CL:NIL)))))))) CL:NIL)) (CL:CONS (CL:CONS 'MAKE-ARRAY (CL:CONS 7 CL:NIL)) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'MAKE-STREAM-LOCATION)) (CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'STREAM-LOCATION? (CL:CONS (CL:CONS 'X CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN STREAM-LOCATION? (X) (CL:BLOCK STREAM-LOCATION? (CL:BLOCK CL:NIL (? (ARRAY? X) (? (EQ 'STRUCT (CL:AREF X 0)) (EQ 'STREAM-LOCATION (CL:AREF X 1))))))) (CL:SETF (CL:GETHASH #'STREAM-LOCATION? *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'STREAM-LOCATION? (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'ARRAY? (CL:CONS 'X CL:NIL)) (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'EQ (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'STRUCT CL:NIL)) (CL:CONS (CL:CONS 'CL:AREF (CL:CONS 'X (CL:CONS 0 CL:NIL))) CL:NIL))) (CL:CONS (CL:CONS 'EQ (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'STREAM-LOCATION CL:NIL)) (CL:CONS (CL:CONS 'CL:AREF (CL:CONS 'X (CL:CONS 1 CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'STREAM-LOCATION?)) (CL:PROGN (CL:SETQ *FUNCTIONALS* (%NCONC (CL:CONS 'STREAM-LOCATION-TRACK? CL:NIL) *FUNCTIONALS*)) CL:NIL (CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'STREAM-LOCATION-TRACK? (CL:CONS (CL:CONS 'ARR CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN STREAM-LOCATION-TRACK? (ARR) (CL:BLOCK STREAM-LOCATION-TRACK? (CL:BLOCK CL:NIL (CL:AREF ARR 2)))) (CL:SETF (CL:GETHASH #'STREAM-LOCATION-TRACK? *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'ARR CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'STREAM-LOCATION-TRACK? (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'CL:AREF (CL:CONS 'ARR (CL:CONS 2 CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'STREAM-LOCATION-TRACK?)) (CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS '=-STREAM-LOCATION-TRACK? (CL:CONS (CL:CONS 'VAL (CL:CONS 'ARR CL:NIL)) CL:NIL)))) (CL:PROGN (CL:DEFUN =-STREAM-LOCATION-TRACK? (VAL ARR) (CL:BLOCK =-STREAM-LOCATION-TRACK? (CL:BLOCK CL:NIL (CL:PROGN (=-AREF VAL ARR 2))))) (CL:SETF (CL:GETHASH #'=-STREAM-LOCATION-TRACK? *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'VAL (CL:CONS 'ARR CL:NIL)) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS '=-STREAM-LOCATION-TRACK? (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS '=-AREF (CL:CONS 'VAL (CL:CONS 'ARR (CL:CONS 2 CL:NIL)))) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL '=-STREAM-LOCATION-TRACK?))) (CL:PROGN (CL:SETQ *FUNCTIONALS* (%NCONC (CL:CONS 'STREAM-LOCATION-ID CL:NIL) *FUNCTIONALS*)) CL:NIL (CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'STREAM-LOCATION-ID (CL:CONS (CL:CONS 'ARR CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN STREAM-LOCATION-ID (ARR) (CL:BLOCK STREAM-LOCATION-ID (CL:BLOCK CL:NIL (CL:AREF ARR 3)))) (CL:SETF (CL:GETHASH #'STREAM-LOCATION-ID *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'ARR CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'STREAM-LOCATION-ID (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'CL:AREF (CL:CONS 'ARR (CL:CONS 3 CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'STREAM-LOCATION-ID)) (CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS '=-STREAM-LOCATION-ID (CL:CONS (CL:CONS 'VAL (CL:CONS 'ARR CL:NIL)) CL:NIL)))) (CL:PROGN (CL:DEFUN =-STREAM-LOCATION-ID (VAL ARR) (CL:BLOCK =-STREAM-LOCATION-ID (CL:BLOCK CL:NIL (CL:PROGN (=-AREF VAL ARR 3))))) (CL:SETF (CL:GETHASH #'=-STREAM-LOCATION-ID *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'VAL (CL:CONS 'ARR CL:NIL)) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS '=-STREAM-LOCATION-ID (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS '=-AREF (CL:CONS 'VAL (CL:CONS 'ARR (CL:CONS 3 CL:NIL)))) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL '=-STREAM-LOCATION-ID))) (CL:PROGN (CL:SETQ *FUNCTIONALS* (%NCONC (CL:CONS 'STREAM-LOCATION-LINE CL:NIL) *FUNCTIONALS*)) CL:NIL (CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'STREAM-LOCATION-LINE (CL:CONS (CL:CONS 'ARR CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN STREAM-LOCATION-LINE (ARR) (CL:BLOCK STREAM-LOCATION-LINE (CL:BLOCK CL:NIL (CL:AREF ARR 4)))) (CL:SETF (CL:GETHASH #'STREAM-LOCATION-LINE *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'ARR CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'STREAM-LOCATION-LINE (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'CL:AREF (CL:CONS 'ARR (CL:CONS 4 CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'STREAM-LOCATION-LINE)) (CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS '=-STREAM-LOCATION-LINE (CL:CONS (CL:CONS 'VAL (CL:CONS 'ARR CL:NIL)) CL:NIL)))) (CL:PROGN (CL:DEFUN =-STREAM-LOCATION-LINE (VAL ARR) (CL:BLOCK =-STREAM-LOCATION-LINE (CL:BLOCK CL:NIL (CL:PROGN (=-AREF VAL ARR 4))))) (CL:SETF (CL:GETHASH #'=-STREAM-LOCATION-LINE *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'VAL (CL:CONS 'ARR CL:NIL)) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS '=-STREAM-LOCATION-LINE (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS '=-AREF (CL:CONS 'VAL (CL:CONS 'ARR (CL:CONS 4 CL:NIL)))) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL '=-STREAM-LOCATION-LINE))) (CL:PROGN (CL:SETQ *FUNCTIONALS* (%NCONC (CL:CONS 'STREAM-LOCATION-COLUMN CL:NIL) *FUNCTIONALS*)) CL:NIL (CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'STREAM-LOCATION-COLUMN (CL:CONS (CL:CONS 'ARR CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN STREAM-LOCATION-COLUMN (ARR) (CL:BLOCK STREAM-LOCATION-COLUMN (CL:BLOCK CL:NIL (CL:AREF ARR 5)))) (CL:SETF (CL:GETHASH #'STREAM-LOCATION-COLUMN *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'ARR CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'STREAM-LOCATION-COLUMN (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'CL:AREF (CL:CONS 'ARR (CL:CONS 5 CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'STREAM-LOCATION-COLUMN)) (CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS '=-STREAM-LOCATION-COLUMN (CL:CONS (CL:CONS 'VAL (CL:CONS 'ARR CL:NIL)) CL:NIL)))) (CL:PROGN (CL:DEFUN =-STREAM-LOCATION-COLUMN (VAL ARR) (CL:BLOCK =-STREAM-LOCATION-COLUMN (CL:BLOCK CL:NIL (CL:PROGN (=-AREF VAL ARR 5))))) (CL:SETF (CL:GETHASH #'=-STREAM-LOCATION-COLUMN *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'VAL (CL:CONS 'ARR CL:NIL)) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS '=-STREAM-LOCATION-COLUMN (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS '=-AREF (CL:CONS 'VAL (CL:CONS 'ARR (CL:CONS 5 CL:NIL)))) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL '=-STREAM-LOCATION-COLUMN))) (CL:PROGN (CL:SETQ *FUNCTIONALS* (%NCONC (CL:CONS 'STREAM-LOCATION-TABSIZE CL:NIL) *FUNCTIONALS*)) CL:NIL (CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'STREAM-LOCATION-TABSIZE (CL:CONS (CL:CONS 'ARR CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN STREAM-LOCATION-TABSIZE (ARR) (CL:BLOCK STREAM-LOCATION-TABSIZE (CL:BLOCK CL:NIL (CL:AREF ARR 6)))) (CL:SETF (CL:GETHASH #'STREAM-LOCATION-TABSIZE *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'ARR CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'STREAM-LOCATION-TABSIZE (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'CL:AREF (CL:CONS 'ARR (CL:CONS 6 CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'STREAM-LOCATION-TABSIZE)) (CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS '=-STREAM-LOCATION-TABSIZE (CL:CONS (CL:CONS 'VAL (CL:CONS 'ARR CL:NIL)) CL:NIL)))) (CL:PROGN (CL:DEFUN =-STREAM-LOCATION-TABSIZE (VAL ARR) (CL:BLOCK =-STREAM-LOCATION-TABSIZE (CL:BLOCK CL:NIL (CL:PROGN (=-AREF VAL ARR 6))))) (CL:SETF (CL:GETHASH #'=-STREAM-LOCATION-TABSIZE *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'VAL (CL:CONS 'ARR CL:NIL)) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS '=-STREAM-LOCATION-TABSIZE (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS '=-AREF (CL:CONS 'VAL (CL:CONS 'ARR (CL:CONS 6 CL:NIL)))) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL '=-STREAM-LOCATION-TABSIZE))) (CL:BLOCK CL:NIL (%DEFMACRO WITH-STREAM-LOCATION (S CL:&REST BODY) (CL:BLOCK WITH-STREAM-LOCATION (CL:CONS 'WITH-STRUCT (CL:CONS 'STREAM-LOCATION (CL:CONS S (APPEND BODY CL:NIL))))))) (CL:BLOCK CL:NIL (%DEFMACRO DEF-STREAM-LOCATION (NAME ARGS CL:&REST BODY) (CL:BLOCK DEF-STREAM-LOCATION (CL:CONS 'DEFUN (CL:CONS NAME (CL:CONS ARGS (CL:CONS (CL:CONS 'WITH-STRUCT (CL:CONS 'STREAM-LOCATION (CL:CONS 'STREAM-LOCATION (APPEND BODY CL:NIL)))) CL:NIL))))))))
(CL:PROGN CL:NIL (CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'MAKE-STREAM (CL:CONS (CL:CONS 'CL:&KEY (CL:CONS (CL:CONS 'HANDLE (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'HANDLE CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'FUN-IN (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'FUN-IN CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'FUN-OUT (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'FUN-OUT CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'FUN-EOF (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'FUN-EOF CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'LAST-CHAR (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'LAST-CHAR CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'PEEKED-CHAR (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'PEEKED-CHAR CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'INPUT-LOCATION (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'INPUT-LOCATION CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'OUTPUT-LOCATION (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'OUTPUT-LOCATION CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'USER-DETAIL (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'USER-DETAIL CL:NIL)) CL:NIL)) CL:NIL)))))))))) CL:NIL)))) (CL:PROGN (CL:DEFUN MAKE-STREAM (CL:&KEY (HANDLE 'HANDLE) (FUN-IN 'FUN-IN) (FUN-OUT 'FUN-OUT) (FUN-EOF 'FUN-EOF) (LAST-CHAR 'LAST-CHAR) (PEEKED-CHAR 'PEEKED-CHAR) (INPUT-LOCATION 'INPUT-LOCATION) (OUTPUT-LOCATION 'OUTPUT-LOCATION) (USER-DETAIL 'USER-DETAIL)) (CL:BLOCK MAKE-STREAM (CL:BLOCK CL:NIL (CL:LABELS ((G3710 (~G1503) (CL:PROGN (=-AREF 'STRUCT ~G1503 0) (=-AREF 'STREAM ~G1503 1)) (CL:PROGN (=-AREF (? (EQ HANDLE 'HANDLE) CL:NIL HANDLE) ~G1503 2)) (CL:PROGN (=-AREF (? (EQ FUN-IN 'FUN-IN) CL:NIL FUN-IN) ~G1503 3)) (CL:PROGN (=-AREF (? (EQ FUN-OUT 'FUN-OUT) CL:NIL FUN-OUT) ~G1503 4)) (CL:PROGN (=-AREF (? (EQ FUN-EOF 'FUN-EOF) CL:NIL FUN-EOF) ~G1503 5)) (CL:PROGN (=-AREF (? (EQ LAST-CHAR 'LAST-CHAR) CL:NIL LAST-CHAR) ~G1503 6)) (CL:PROGN (=-AREF (? (EQ PEEKED-CHAR 'PEEKED-CHAR) CL:NIL PEEKED-CHAR) ~G1503 7)) (CL:PROGN (=-AREF (? (EQ INPUT-LOCATION 'INPUT-LOCATION) (MAKE-STREAM-LOCATION) INPUT-LOCATION) ~G1503 8)) (CL:PROGN (=-AREF (? (EQ OUTPUT-LOCATION 'OUTPUT-LOCATION) (MAKE-STREAM-LOCATION :TRACK? CL:NIL) OUTPUT-LOCATION) ~G1503 9)) (CL:PROGN (=-AREF (? (EQ USER-DETAIL 'USER-DETAIL) CL:NIL USER-DETAIL) ~G1503 10)) ~G1503)) (G3710 (MAKE-ARRAY 11)))))) (CL:SETF (CL:GETHASH #'MAKE-STREAM *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'CL:&KEY (CL:CONS (CL:CONS 'HANDLE (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'HANDLE CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'FUN-IN (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'FUN-IN CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'FUN-OUT (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'FUN-OUT CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'FUN-EOF (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'FUN-EOF CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'LAST-CHAR (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'LAST-CHAR CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'PEEKED-CHAR (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'PEEKED-CHAR CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'INPUT-LOCATION (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'INPUT-LOCATION CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'OUTPUT-LOCATION (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'OUTPUT-LOCATION CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'USER-DETAIL (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'USER-DETAIL CL:NIL)) CL:NIL)) CL:NIL)))))))))) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'MAKE-STREAM (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1503 CL:NIL) (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS '=-AREF (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'STRUCT CL:NIL)) (CL:CONS '~G1503 (CL:CONS 0 CL:NIL)))) (CL:CONS (CL:CONS '=-AREF (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'STREAM CL:NIL)) (CL:CONS '~G1503 (CL:CONS 1 CL:NIL)))) CL:NIL))) (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS '=-AREF (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'EQ (CL:CONS 'HANDLE (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'HANDLE CL:NIL)) CL:NIL))) (CL:CONS CL:NIL (CL:CONS 'HANDLE CL:NIL)))) (CL:CONS '~G1503 (CL:CONS 2 CL:NIL)))) CL:NIL)) (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS '=-AREF (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'EQ (CL:CONS 'FUN-IN (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'FUN-IN CL:NIL)) CL:NIL))) (CL:CONS CL:NIL (CL:CONS 'FUN-IN CL:NIL)))) (CL:CONS '~G1503 (CL:CONS 3 CL:NIL)))) CL:NIL)) (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS '=-AREF (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'EQ (CL:CONS 'FUN-OUT (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'FUN-OUT CL:NIL)) CL:NIL))) (CL:CONS CL:NIL (CL:CONS 'FUN-OUT CL:NIL)))) (CL:CONS '~G1503 (CL:CONS 4 CL:NIL)))) CL:NIL)) (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS '=-AREF (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'EQ (CL:CONS 'FUN-EOF (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'FUN-EOF CL:NIL)) CL:NIL))) (CL:CONS CL:NIL (CL:CONS 'FUN-EOF CL:NIL)))) (CL:CONS '~G1503 (CL:CONS 5 CL:NIL)))) CL:NIL)) (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS '=-AREF (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'EQ (CL:CONS 'LAST-CHAR (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'LAST-CHAR CL:NIL)) CL:NIL))) (CL:CONS CL:NIL (CL:CONS 'LAST-CHAR CL:NIL)))) (CL:CONS '~G1503 (CL:CONS 6 CL:NIL)))) CL:NIL)) (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS '=-AREF (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'EQ (CL:CONS 'PEEKED-CHAR (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'PEEKED-CHAR CL:NIL)) CL:NIL))) (CL:CONS CL:NIL (CL:CONS 'PEEKED-CHAR CL:NIL)))) (CL:CONS '~G1503 (CL:CONS 7 CL:NIL)))) CL:NIL)) (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS '=-AREF (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'EQ (CL:CONS 'INPUT-LOCATION (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'INPUT-LOCATION CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'MAKE-STREAM-LOCATION CL:NIL) (CL:CONS 'INPUT-LOCATION CL:NIL)))) (CL:CONS '~G1503 (CL:CONS 8 CL:NIL)))) CL:NIL)) (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS '=-AREF (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'EQ (CL:CONS 'OUTPUT-LOCATION (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'OUTPUT-LOCATION CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'MAKE-STREAM-LOCATION (CL:CONS ':TRACK? (CL:CONS CL:NIL CL:NIL))) (CL:CONS 'OUTPUT-LOCATION CL:NIL)))) (CL:CONS '~G1503 (CL:CONS 9 CL:NIL)))) CL:NIL)) (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS '=-AREF (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'EQ (CL:CONS 'USER-DETAIL (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'USER-DETAIL CL:NIL)) CL:NIL))) (CL:CONS CL:NIL (CL:CONS 'USER-DETAIL CL:NIL)))) (CL:CONS '~G1503 (CL:CONS 10 CL:NIL)))) CL:NIL)) (CL:CONS '~G1503 CL:NIL)))))))))))) CL:NIL)) (CL:CONS (CL:CONS 'MAKE-ARRAY (CL:CONS 11 CL:NIL)) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'MAKE-STREAM)) (CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'STREAM? (CL:CONS (CL:CONS 'X CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN STREAM? (X) (CL:BLOCK STREAM? (CL:BLOCK CL:NIL (? (ARRAY? X) (? (EQ 'STRUCT (CL:AREF X 0)) (EQ 'STREAM (CL:AREF X 1))))))) (CL:SETF (CL:GETHASH #'STREAM? *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'STREAM? (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'ARRAY? (CL:CONS 'X CL:NIL)) (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'EQ (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'STRUCT CL:NIL)) (CL:CONS (CL:CONS 'CL:AREF (CL:CONS 'X (CL:CONS 0 CL:NIL))) CL:NIL))) (CL:CONS (CL:CONS 'EQ (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'STREAM CL:NIL)) (CL:CONS (CL:CONS 'CL:AREF (CL:CONS 'X (CL:CONS 1 CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'STREAM?)) (CL:PROGN (CL:SETQ *FUNCTIONALS* (%NCONC (CL:CONS 'STREAM-HANDLE CL:NIL) *FUNCTIONALS*)) CL:NIL (CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'STREAM-HANDLE (CL:CONS (CL:CONS 'ARR CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN STREAM-HANDLE (ARR) (CL:BLOCK STREAM-HANDLE (CL:BLOCK CL:NIL (CL:AREF ARR 2)))) (CL:SETF (CL:GETHASH #'STREAM-HANDLE *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'ARR CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'STREAM-HANDLE (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'CL:AREF (CL:CONS 'ARR (CL:CONS 2 CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'STREAM-HANDLE)) (CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS '=-STREAM-HANDLE (CL:CONS (CL:CONS 'VAL (CL:CONS 'ARR CL:NIL)) CL:NIL)))) (CL:PROGN (CL:DEFUN =-STREAM-HANDLE (VAL ARR) (CL:BLOCK =-STREAM-HANDLE (CL:BLOCK CL:NIL (CL:PROGN (=-AREF VAL ARR 2))))) (CL:SETF (CL:GETHASH #'=-STREAM-HANDLE *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'VAL (CL:CONS 'ARR CL:NIL)) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS '=-STREAM-HANDLE (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS '=-AREF (CL:CONS 'VAL (CL:CONS 'ARR (CL:CONS 2 CL:NIL)))) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL '=-STREAM-HANDLE))) (CL:PROGN (CL:SETQ *FUNCTIONALS* (%NCONC (CL:CONS 'STREAM-FUN-IN CL:NIL) *FUNCTIONALS*)) CL:NIL (CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'STREAM-FUN-IN (CL:CONS (CL:CONS 'ARR CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN STREAM-FUN-IN (ARR) (CL:BLOCK STREAM-FUN-IN (CL:BLOCK CL:NIL (CL:AREF ARR 3)))) (CL:SETF (CL:GETHASH #'STREAM-FUN-IN *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'ARR CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'STREAM-FUN-IN (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'CL:AREF (CL:CONS 'ARR (CL:CONS 3 CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'STREAM-FUN-IN)) (CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS '=-STREAM-FUN-IN (CL:CONS (CL:CONS 'VAL (CL:CONS 'ARR CL:NIL)) CL:NIL)))) (CL:PROGN (CL:DEFUN =-STREAM-FUN-IN (VAL ARR) (CL:BLOCK =-STREAM-FUN-IN (CL:BLOCK CL:NIL (CL:PROGN (=-AREF VAL ARR 3))))) (CL:SETF (CL:GETHASH #'=-STREAM-FUN-IN *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'VAL (CL:CONS 'ARR CL:NIL)) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS '=-STREAM-FUN-IN (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS '=-AREF (CL:CONS 'VAL (CL:CONS 'ARR (CL:CONS 3 CL:NIL)))) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL '=-STREAM-FUN-IN))) (CL:PROGN (CL:SETQ *FUNCTIONALS* (%NCONC (CL:CONS 'STREAM-FUN-OUT CL:NIL) *FUNCTIONALS*)) CL:NIL (CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'STREAM-FUN-OUT (CL:CONS (CL:CONS 'ARR CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN STREAM-FUN-OUT (ARR) (CL:BLOCK STREAM-FUN-OUT (CL:BLOCK CL:NIL (CL:AREF ARR 4)))) (CL:SETF (CL:GETHASH #'STREAM-FUN-OUT *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'ARR CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'STREAM-FUN-OUT (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'CL:AREF (CL:CONS 'ARR (CL:CONS 4 CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'STREAM-FUN-OUT)) (CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS '=-STREAM-FUN-OUT (CL:CONS (CL:CONS 'VAL (CL:CONS 'ARR CL:NIL)) CL:NIL)))) (CL:PROGN (CL:DEFUN =-STREAM-FUN-OUT (VAL ARR) (CL:BLOCK =-STREAM-FUN-OUT (CL:BLOCK CL:NIL (CL:PROGN (=-AREF VAL ARR 4))))) (CL:SETF (CL:GETHASH #'=-STREAM-FUN-OUT *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'VAL (CL:CONS 'ARR CL:NIL)) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS '=-STREAM-FUN-OUT (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS '=-AREF (CL:CONS 'VAL (CL:CONS 'ARR (CL:CONS 4 CL:NIL)))) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL '=-STREAM-FUN-OUT))) (CL:PROGN (CL:SETQ *FUNCTIONALS* (%NCONC (CL:CONS 'STREAM-FUN-EOF CL:NIL) *FUNCTIONALS*)) CL:NIL (CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'STREAM-FUN-EOF (CL:CONS (CL:CONS 'ARR CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN STREAM-FUN-EOF (ARR) (CL:BLOCK STREAM-FUN-EOF (CL:BLOCK CL:NIL (CL:AREF ARR 5)))) (CL:SETF (CL:GETHASH #'STREAM-FUN-EOF *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'ARR CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'STREAM-FUN-EOF (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'CL:AREF (CL:CONS 'ARR (CL:CONS 5 CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'STREAM-FUN-EOF)) (CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS '=-STREAM-FUN-EOF (CL:CONS (CL:CONS 'VAL (CL:CONS 'ARR CL:NIL)) CL:NIL)))) (CL:PROGN (CL:DEFUN =-STREAM-FUN-EOF (VAL ARR) (CL:BLOCK =-STREAM-FUN-EOF (CL:BLOCK CL:NIL (CL:PROGN (=-AREF VAL ARR 5))))) (CL:SETF (CL:GETHASH #'=-STREAM-FUN-EOF *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'VAL (CL:CONS 'ARR CL:NIL)) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS '=-STREAM-FUN-EOF (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS '=-AREF (CL:CONS 'VAL (CL:CONS 'ARR (CL:CONS 5 CL:NIL)))) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL '=-STREAM-FUN-EOF))) (CL:PROGN (CL:SETQ *FUNCTIONALS* (%NCONC (CL:CONS 'STREAM-LAST-CHAR CL:NIL) *FUNCTIONALS*)) CL:NIL (CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'STREAM-LAST-CHAR (CL:CONS (CL:CONS 'ARR CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN STREAM-LAST-CHAR (ARR) (CL:BLOCK STREAM-LAST-CHAR (CL:BLOCK CL:NIL (CL:AREF ARR 6)))) (CL:SETF (CL:GETHASH #'STREAM-LAST-CHAR *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'ARR CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'STREAM-LAST-CHAR (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'CL:AREF (CL:CONS 'ARR (CL:CONS 6 CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'STREAM-LAST-CHAR)) (CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS '=-STREAM-LAST-CHAR (CL:CONS (CL:CONS 'VAL (CL:CONS 'ARR CL:NIL)) CL:NIL)))) (CL:PROGN (CL:DEFUN =-STREAM-LAST-CHAR (VAL ARR) (CL:BLOCK =-STREAM-LAST-CHAR (CL:BLOCK CL:NIL (CL:PROGN (=-AREF VAL ARR 6))))) (CL:SETF (CL:GETHASH #'=-STREAM-LAST-CHAR *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'VAL (CL:CONS 'ARR CL:NIL)) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS '=-STREAM-LAST-CHAR (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS '=-AREF (CL:CONS 'VAL (CL:CONS 'ARR (CL:CONS 6 CL:NIL)))) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL '=-STREAM-LAST-CHAR))) (CL:PROGN (CL:SETQ *FUNCTIONALS* (%NCONC (CL:CONS 'STREAM-PEEKED-CHAR CL:NIL) *FUNCTIONALS*)) CL:NIL (CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'STREAM-PEEKED-CHAR (CL:CONS (CL:CONS 'ARR CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN STREAM-PEEKED-CHAR (ARR) (CL:BLOCK STREAM-PEEKED-CHAR (CL:BLOCK CL:NIL (CL:AREF ARR 7)))) (CL:SETF (CL:GETHASH #'STREAM-PEEKED-CHAR *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'ARR CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'STREAM-PEEKED-CHAR (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'CL:AREF (CL:CONS 'ARR (CL:CONS 7 CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'STREAM-PEEKED-CHAR)) (CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS '=-STREAM-PEEKED-CHAR (CL:CONS (CL:CONS 'VAL (CL:CONS 'ARR CL:NIL)) CL:NIL)))) (CL:PROGN (CL:DEFUN =-STREAM-PEEKED-CHAR (VAL ARR) (CL:BLOCK =-STREAM-PEEKED-CHAR (CL:BLOCK CL:NIL (CL:PROGN (=-AREF VAL ARR 7))))) (CL:SETF (CL:GETHASH #'=-STREAM-PEEKED-CHAR *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'VAL (CL:CONS 'ARR CL:NIL)) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS '=-STREAM-PEEKED-CHAR (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS '=-AREF (CL:CONS 'VAL (CL:CONS 'ARR (CL:CONS 7 CL:NIL)))) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL '=-STREAM-PEEKED-CHAR))) (CL:PROGN (CL:SETQ *FUNCTIONALS* (%NCONC (CL:CONS 'STREAM-INPUT-LOCATION CL:NIL) *FUNCTIONALS*)) CL:NIL (CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'STREAM-INPUT-LOCATION (CL:CONS (CL:CONS 'ARR CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN STREAM-INPUT-LOCATION (ARR) (CL:BLOCK STREAM-INPUT-LOCATION (CL:BLOCK CL:NIL (CL:AREF ARR 8)))) (CL:SETF (CL:GETHASH #'STREAM-INPUT-LOCATION *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'ARR CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'STREAM-INPUT-LOCATION (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'CL:AREF (CL:CONS 'ARR (CL:CONS 8 CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'STREAM-INPUT-LOCATION)) (CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS '=-STREAM-INPUT-LOCATION (CL:CONS (CL:CONS 'VAL (CL:CONS 'ARR CL:NIL)) CL:NIL)))) (CL:PROGN (CL:DEFUN =-STREAM-INPUT-LOCATION (VAL ARR) (CL:BLOCK =-STREAM-INPUT-LOCATION (CL:BLOCK CL:NIL (CL:PROGN (=-AREF VAL ARR 8))))) (CL:SETF (CL:GETHASH #'=-STREAM-INPUT-LOCATION *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'VAL (CL:CONS 'ARR CL:NIL)) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS '=-STREAM-INPUT-LOCATION (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS '=-AREF (CL:CONS 'VAL (CL:CONS 'ARR (CL:CONS 8 CL:NIL)))) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL '=-STREAM-INPUT-LOCATION))) (CL:PROGN (CL:SETQ *FUNCTIONALS* (%NCONC (CL:CONS 'STREAM-OUTPUT-LOCATION CL:NIL) *FUNCTIONALS*)) CL:NIL (CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'STREAM-OUTPUT-LOCATION (CL:CONS (CL:CONS 'ARR CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN STREAM-OUTPUT-LOCATION (ARR) (CL:BLOCK STREAM-OUTPUT-LOCATION (CL:BLOCK CL:NIL (CL:AREF ARR 9)))) (CL:SETF (CL:GETHASH #'STREAM-OUTPUT-LOCATION *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'ARR CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'STREAM-OUTPUT-LOCATION (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'CL:AREF (CL:CONS 'ARR (CL:CONS 9 CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'STREAM-OUTPUT-LOCATION)) (CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS '=-STREAM-OUTPUT-LOCATION (CL:CONS (CL:CONS 'VAL (CL:CONS 'ARR CL:NIL)) CL:NIL)))) (CL:PROGN (CL:DEFUN =-STREAM-OUTPUT-LOCATION (VAL ARR) (CL:BLOCK =-STREAM-OUTPUT-LOCATION (CL:BLOCK CL:NIL (CL:PROGN (=-AREF VAL ARR 9))))) (CL:SETF (CL:GETHASH #'=-STREAM-OUTPUT-LOCATION *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'VAL (CL:CONS 'ARR CL:NIL)) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS '=-STREAM-OUTPUT-LOCATION (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS '=-AREF (CL:CONS 'VAL (CL:CONS 'ARR (CL:CONS 9 CL:NIL)))) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL '=-STREAM-OUTPUT-LOCATION))) (CL:PROGN (CL:SETQ *FUNCTIONALS* (%NCONC (CL:CONS 'STREAM-USER-DETAIL CL:NIL) *FUNCTIONALS*)) CL:NIL (CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'STREAM-USER-DETAIL (CL:CONS (CL:CONS 'ARR CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN STREAM-USER-DETAIL (ARR) (CL:BLOCK STREAM-USER-DETAIL (CL:BLOCK CL:NIL (CL:AREF ARR 10)))) (CL:SETF (CL:GETHASH #'STREAM-USER-DETAIL *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'ARR CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'STREAM-USER-DETAIL (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'CL:AREF (CL:CONS 'ARR (CL:CONS 10 CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'STREAM-USER-DETAIL)) (CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS '=-STREAM-USER-DETAIL (CL:CONS (CL:CONS 'VAL (CL:CONS 'ARR CL:NIL)) CL:NIL)))) (CL:PROGN (CL:DEFUN =-STREAM-USER-DETAIL (VAL ARR) (CL:BLOCK =-STREAM-USER-DETAIL (CL:BLOCK CL:NIL (CL:PROGN (=-AREF VAL ARR 10))))) (CL:SETF (CL:GETHASH #'=-STREAM-USER-DETAIL *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'VAL (CL:CONS 'ARR CL:NIL)) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS '=-STREAM-USER-DETAIL (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS '=-AREF (CL:CONS 'VAL (CL:CONS 'ARR (CL:CONS 10 CL:NIL)))) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL '=-STREAM-USER-DETAIL))) (CL:BLOCK CL:NIL (%DEFMACRO WITH-STREAM (S CL:&REST BODY) (CL:BLOCK WITH-STREAM (CL:CONS 'WITH-STRUCT (CL:CONS 'STREAM (CL:CONS S (APPEND BODY CL:NIL))))))) (CL:BLOCK CL:NIL (%DEFMACRO DEF-STREAM (NAME ARGS CL:&REST BODY) (CL:BLOCK DEF-STREAM (CL:CONS 'DEFUN (CL:CONS NAME (CL:CONS ARGS (CL:CONS (CL:CONS 'WITH-STRUCT (CL:CONS 'STREAM (CL:CONS 'STREAM (APPEND BODY CL:NIL)))) CL:NIL))))))))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'NEXT-TABULATOR-COLUMN (CL:CONS (CL:CONS 'COLUMN (CL:CONS 'SIZE CL:NIL)) CL:NIL)))) (CL:PROGN (CL:DEFUN NEXT-TABULATOR-COLUMN (COLUMN SIZE) (CL:BLOCK NEXT-TABULATOR-COLUMN (CL:BLOCK CL:NIL (++ (* SIZE (++ (INTEGER (/ (-- COLUMN) SIZE)))))))) (CL:SETF (CL:GETHASH #'NEXT-TABULATOR-COLUMN *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'COLUMN (CL:CONS 'SIZE CL:NIL)) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'NEXT-TABULATOR-COLUMN (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS '++ (CL:CONS (CL:CONS '* (CL:CONS 'SIZE (CL:CONS (CL:CONS '++ (CL:CONS (CL:CONS 'INTEGER (CL:CONS (CL:CONS '/ (CL:CONS (CL:CONS '-- (CL:CONS 'COLUMN CL:NIL)) (CL:CONS 'SIZE CL:NIL))) CL:NIL)) CL:NIL)) CL:NIL))) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'NEXT-TABULATOR-COLUMN))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS '%TRACK-LOCATION (CL:CONS (CL:CONS 'STREAM-LOCATION (CL:CONS 'X CL:NIL)) CL:NIL)))) (CL:PROGN (CL:DEFUN %TRACK-LOCATION (STREAM-LOCATION X) (CL:BLOCK %TRACK-LOCATION (CL:BLOCK CL:NIL (CL:LABELS ((G3711 (STREAM-LOCATION) (CL:LABELS ((G3712 (TRACK?) (CL:LABELS ((G3713 (ID) (CL:LABELS ((G3714 (LINE) (CL:LABELS ((G3715 (COLUMN) (CL:LABELS ((G3716 (TABSIZE) TRACK? ID LINE COLUMN TABSIZE (? TRACK? (CL:PROGN (? (STRING? X) (CL:BLOCK CL:NIL (CL:LABELS ((G3717 (~G1506) (CL:LABELS ((G3718 (!) (CL:TAGBODY ~G1504 (? (NOT ~G1506) (CL:GO ~G1505)) (CL:SETQ ! (CL:CAR ~G1506)) (%TRACK-LOCATION STREAM-LOCATION !) (CL:SETQ ~G1506 (CL:CDR ~G1506)) (CL:GO ~G1504) ~G1505 (CL:RETURN-FROM CL:NIL (CL:PROGN CL:NIL))))) (G3718 CL:NIL)))) (G3717 (STRING-LIST X)))) (? X (CL:PROGN (? (== 10 X) (CL:PROGN (CL:PROGN (=-STREAM-LOCATION-COLUMN 1 STREAM-LOCATION)) (CL:PROGN (=-STREAM-LOCATION-LINE (NUMBER+ (STREAM-LOCATION-LINE STREAM-LOCATION) 1) STREAM-LOCATION))) (? (== 9 X) (CL:PROGN (=-STREAM-LOCATION-COLUMN (NEXT-TABULATOR-COLUMN COLUMN TABSIZE) STREAM-LOCATION)) (< 31 X) (CL:PROGN (=-STREAM-LOCATION-COLUMN (NUMBER+ (STREAM-LOCATION-COLUMN STREAM-LOCATION) 1) STREAM-LOCATION))))))))) X)) (G3716 (STREAM-LOCATION-TABSIZE STREAM-LOCATION))))) (G3715 (STREAM-LOCATION-COLUMN STREAM-LOCATION))))) (G3714 (STREAM-LOCATION-LINE STREAM-LOCATION))))) (G3713 (STREAM-LOCATION-ID STREAM-LOCATION))))) (G3712 (STREAM-LOCATION-TRACK? STREAM-LOCATION))))) (G3711 STREAM-LOCATION))))) (CL:SETF (CL:GETHASH #'%TRACK-LOCATION *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'STREAM-LOCATION (CL:CONS 'X CL:NIL)) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS '%TRACK-LOCATION (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'LET (CL:CONS 'STREAM-LOCATION (CL:CONS 'STREAM-LOCATION (CL:CONS (CL:CONS 'LET* (CL:CONS (CL:CONS (CL:CONS 'TRACK? (CL:CONS (CL:CONS 'STREAM-LOCATION-TRACK? (CL:CONS 'STREAM-LOCATION CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'ID (CL:CONS (CL:CONS 'STREAM-LOCATION-ID (CL:CONS 'STREAM-LOCATION CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'LINE (CL:CONS (CL:CONS 'STREAM-LOCATION-LINE (CL:CONS 'STREAM-LOCATION CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'COLUMN (CL:CONS (CL:CONS 'STREAM-LOCATION-COLUMN (CL:CONS 'STREAM-LOCATION CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'TABSIZE (CL:CONS (CL:CONS 'STREAM-LOCATION-TABSIZE (CL:CONS 'STREAM-LOCATION CL:NIL)) CL:NIL)) CL:NIL))))) (CL:CONS 'TRACK? (CL:CONS 'ID (CL:CONS 'LINE (CL:CONS 'COLUMN (CL:CONS 'TABSIZE (CL:CONS (CL:CONS '? (CL:CONS 'TRACK? (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'STRING? (CL:CONS 'X CL:NIL)) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'LET (CL:CONS '~G1506 (CL:CONS (CL:CONS 'STRING-LIST (CL:CONS 'X CL:NIL)) (CL:CONS (CL:CONS 'LET* (CL:CONS (CL:CONS (CL:CONS '! (CL:CONS CL:NIL CL:NIL)) CL:NIL) (CL:CONS (CL:CONS 'CL:TAGBODY (CL:CONS '~G1504 (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'NOT (CL:CONS '~G1506 CL:NIL)) (CL:CONS (CL:CONS 'CL:GO (CL:CONS '~G1505 CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'CL:SETQ (CL:CONS '! (CL:CONS (CL:CONS 'CL:CAR (CL:CONS '~G1506 CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS '%TRACK-LOCATION (CL:CONS 'STREAM-LOCATION (CL:CONS '! CL:NIL))) (CL:CONS (CL:CONS 'CL:SETQ (CL:CONS '~G1506 (CL:CONS (CL:CONS 'CL:CDR (CL:CONS '~G1506 CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'CL:GO (CL:CONS '~G1504 CL:NIL)) (CL:CONS '~G1505 (CL:CONS (CL:CONS 'CL:RETURN-FROM (CL:CONS CL:NIL (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS CL:NIL CL:NIL)) CL:NIL))) CL:NIL))))))))) CL:NIL))) CL:NIL)))) CL:NIL))) (CL:CONS (CL:CONS '? (CL:CONS 'X (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS '== (CL:CONS 10 (CL:CONS 'X CL:NIL))) (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS '=-STREAM-LOCATION-COLUMN (CL:CONS 1 (CL:CONS 'STREAM-LOCATION CL:NIL))) CL:NIL)) (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS '=-STREAM-LOCATION-LINE (CL:CONS (CL:CONS 'NUMBER+ (CL:CONS (CL:CONS 'STREAM-LOCATION-LINE (CL:CONS 'STREAM-LOCATION CL:NIL)) (CL:CONS 1 CL:NIL))) (CL:CONS 'STREAM-LOCATION CL:NIL))) CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS '== (CL:CONS 9 (CL:CONS 'X CL:NIL))) (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS '=-STREAM-LOCATION-COLUMN (CL:CONS (CL:CONS 'NEXT-TABULATOR-COLUMN (CL:CONS 'COLUMN (CL:CONS 'TABSIZE CL:NIL))) (CL:CONS 'STREAM-LOCATION CL:NIL))) CL:NIL)) (CL:CONS (CL:CONS '< (CL:CONS 31 (CL:CONS 'X CL:NIL))) (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS '=-STREAM-LOCATION-COLUMN (CL:CONS (CL:CONS 'NUMBER+ (CL:CONS (CL:CONS 'STREAM-LOCATION-COLUMN (CL:CONS 'STREAM-LOCATION CL:NIL)) (CL:CONS 1 CL:NIL))) (CL:CONS 'STREAM-LOCATION CL:NIL))) CL:NIL)) CL:NIL))))) CL:NIL)))) CL:NIL)) CL:NIL))) CL:NIL)))) CL:NIL)) CL:NIL))) (CL:CONS 'X CL:NIL))))))))) CL:NIL)))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL '%TRACK-LOCATION))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'STREAM-PRINC (CL:CONS (CL:CONS 'X (CL:CONS 'STR CL:NIL)) CL:NIL)))) (CL:PROGN (CL:DEFUN STREAM-PRINC (X STR) (CL:BLOCK STREAM-PRINC (CL:BLOCK CL:NIL (? (CONS? X) (CL:BLOCK CL:NIL (CL:LABELS ((G3719 (~G1509) (CL:LABELS ((G3720 (!) (CL:TAGBODY ~G1507 (? (NOT ~G1509) (CL:GO ~G1508)) (CL:SETQ ! (CL:CAR ~G1509)) (STREAM-PRINC ! STR) (CL:SETQ ~G1509 (CL:CDR ~G1509)) (CL:GO ~G1507) ~G1508 (CL:RETURN-FROM CL:NIL (CL:PROGN X))))) (G3720 CL:NIL)))) (G3719 X))) (? (NOT (? (STRING? X) (ZERO? (CL:LENGTH X)))) (CL:PROGN (CL:PROGN (=-STREAM-LAST-CHAR (? (STRING? X) (CL:ELT X (-- (CL:LENGTH X))) X) STR)) (%TRACK-LOCATION (STREAM-OUTPUT-LOCATION STR) X) (FUNCALL (STREAM-FUN-OUT STR) X STR))))))) (CL:SETF (CL:GETHASH #'STREAM-PRINC *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X (CL:CONS 'STR CL:NIL)) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'STREAM-PRINC (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'CONS? (CL:CONS 'X CL:NIL)) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'LET* (CL:CONS (CL:CONS (CL:CONS '~G1509 (CL:CONS 'X CL:NIL)) (CL:CONS (CL:CONS '! (CL:CONS CL:NIL CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'CL:TAGBODY (CL:CONS '~G1507 (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'NOT (CL:CONS '~G1509 CL:NIL)) (CL:CONS (CL:CONS 'CL:GO (CL:CONS '~G1508 CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'CL:SETQ (CL:CONS '! (CL:CONS (CL:CONS 'CL:CAR (CL:CONS '~G1509 CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'STREAM-PRINC (CL:CONS '! (CL:CONS 'STR CL:NIL))) (CL:CONS (CL:CONS 'CL:SETQ (CL:CONS '~G1509 (CL:CONS (CL:CONS 'CL:CDR (CL:CONS '~G1509 CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'CL:GO (CL:CONS '~G1507 CL:NIL)) (CL:CONS '~G1508 (CL:CONS (CL:CONS 'CL:RETURN (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS 'X CL:NIL)) CL:NIL)) CL:NIL))))))))) CL:NIL))) CL:NIL))) (CL:CONS (CL:CONS '& (CL:CONS (CL:CONS 'NOT (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'STRING? (CL:CONS 'X CL:NIL)) (CL:CONS (CL:CONS 'ZERO? (CL:CONS (CL:CONS 'CL:LENGTH (CL:CONS 'X CL:NIL)) CL:NIL)) CL:NIL))) CL:NIL)) (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS '=-STREAM-LAST-CHAR (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'STRING? (CL:CONS 'X CL:NIL)) (CL:CONS (CL:CONS 'CL:ELT (CL:CONS 'X (CL:CONS (CL:CONS '-- (CL:CONS (CL:CONS 'CL:LENGTH (CL:CONS 'X CL:NIL)) CL:NIL)) CL:NIL))) (CL:CONS 'X CL:NIL)))) (CL:CONS 'STR CL:NIL))) CL:NIL)) (CL:CONS (CL:CONS '%TRACK-LOCATION (CL:CONS (CL:CONS 'STREAM-OUTPUT-LOCATION (CL:CONS 'STR CL:NIL)) (CL:CONS 'X CL:NIL))) (CL:CONS (CL:CONS 'FUNCALL (CL:CONS (CL:CONS 'STREAM-FUN-OUT (CL:CONS 'STR CL:NIL)) (CL:CONS 'X (CL:CONS 'STR CL:NIL)))) CL:NIL)))) CL:NIL))) CL:NIL)))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'STREAM-PRINC))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'READ-PEEKED-CHAR (CL:CONS (CL:CONS 'STR CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN READ-PEEKED-CHAR (STR) (CL:BLOCK READ-PEEKED-CHAR (CL:BLOCK CL:NIL (CL:LABELS ((G3721 (!) (? ! (CL:PROGN (CL:PROGN (=-STREAM-PEEKED-CHAR CL:NIL STR)) !)))) (G3721 (STREAM-PEEKED-CHAR STR)))))) (CL:SETF (CL:GETHASH #'READ-PEEKED-CHAR *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'STR CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'READ-PEEKED-CHAR (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '! CL:NIL) (CL:CONS (CL:CONS '& (CL:CONS '! (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS '=-STREAM-PEEKED-CHAR (CL:CONS CL:NIL (CL:CONS 'STR CL:NIL))) CL:NIL)) (CL:CONS '! CL:NIL))) CL:NIL))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'STREAM-PEEKED-CHAR (CL:CONS 'STR CL:NIL)) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'READ-PEEKED-CHAR))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'READ-CHAR-0 (CL:CONS (CL:CONS 'STR CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN READ-CHAR-0 (STR) (CL:BLOCK READ-CHAR-0 (CL:BLOCK CL:NIL (CL:LABELS ((G3722 (~G1510) (? ~G1510 ~G1510 (CL:PROGN (=-STREAM-LAST-CHAR (FUNCALL (STREAM-FUN-IN STR) STR) STR))))) (G3722 (READ-PEEKED-CHAR STR)))))) (CL:SETF (CL:GETHASH #'READ-CHAR-0 *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'STR CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'READ-CHAR-0 (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1510 CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS '~G1510 (CL:CONS '~G1510 (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS '=-STREAM-LAST-CHAR (CL:CONS (CL:CONS 'FUNCALL (CL:CONS (CL:CONS 'STREAM-FUN-IN (CL:CONS 'STR CL:NIL)) (CL:CONS 'STR CL:NIL))) (CL:CONS 'STR CL:NIL))) CL:NIL)) CL:NIL)))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'READ-PEEKED-CHAR (CL:CONS 'STR CL:NIL)) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'READ-CHAR-0))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'READ-CHAR (CL:CONS (CL:CONS 'CL:&OPTIONAL (CL:CONS (CL:CONS 'STR (CL:CONS '*STANDARD-INPUT* CL:NIL)) CL:NIL)) CL:NIL)))) (CL:PROGN (CL:DEFUN READ-CHAR (CL:&OPTIONAL (STR *STANDARD-INPUT*)) (CL:BLOCK READ-CHAR (CL:BLOCK CL:NIL (%TRACK-LOCATION (STREAM-INPUT-LOCATION STR) (READ-CHAR-0 STR))))) (CL:SETF (CL:GETHASH #'READ-CHAR *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'CL:&OPTIONAL (CL:CONS (CL:CONS 'STR (CL:CONS '*STANDARD-INPUT* CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'READ-CHAR (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS '%TRACK-LOCATION (CL:CONS (CL:CONS 'STREAM-INPUT-LOCATION (CL:CONS 'STR CL:NIL)) (CL:CONS (CL:CONS 'READ-CHAR-0 (CL:CONS 'STR CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'READ-CHAR))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'PEEK-CHAR (CL:CONS (CL:CONS 'CL:&OPTIONAL (CL:CONS (CL:CONS 'STR (CL:CONS '*STANDARD-INPUT* CL:NIL)) CL:NIL)) CL:NIL)))) (CL:PROGN (CL:DEFUN PEEK-CHAR (CL:&OPTIONAL (STR *STANDARD-INPUT*)) (CL:BLOCK PEEK-CHAR (CL:BLOCK CL:NIL (CL:LABELS ((G3723 (~G1511) (? ~G1511 ~G1511 (CL:PROGN (=-STREAM-PEEKED-CHAR (READ-CHAR-0 STR) STR))))) (G3723 (STREAM-PEEKED-CHAR STR)))))) (CL:SETF (CL:GETHASH #'PEEK-CHAR *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'CL:&OPTIONAL (CL:CONS (CL:CONS 'STR (CL:CONS '*STANDARD-INPUT* CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'PEEK-CHAR (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1511 CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS '~G1511 (CL:CONS '~G1511 (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS '=-STREAM-PEEKED-CHAR (CL:CONS (CL:CONS 'READ-CHAR-0 (CL:CONS 'STR CL:NIL)) (CL:CONS 'STR CL:NIL))) CL:NIL)) CL:NIL)))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'STREAM-PEEKED-CHAR (CL:CONS 'STR CL:NIL)) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'PEEK-CHAR))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'DEFAULT-STREAM (CL:CONS (CL:CONS 'X CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN DEFAULT-STREAM (X) (CL:BLOCK DEFAULT-STREAM (CL:BLOCK CL:NIL (CL:LABELS ((G3724 (~G1512) (? (EQ ~G1512 CL:NIL) (MAKE-STRING-STREAM) (EQ ~G1512 CL:T) *STANDARD-OUTPUT* X))) (G3724 X))))) (CL:SETF (CL:GETHASH #'DEFAULT-STREAM *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'DEFAULT-STREAM (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1512 CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'EQ (CL:CONS '~G1512 (CL:CONS CL:NIL CL:NIL))) (CL:CONS (CL:CONS 'MAKE-STRING-STREAM CL:NIL) (CL:CONS (CL:CONS 'EQ (CL:CONS '~G1512 (CL:CONS CL:T CL:NIL))) (CL:CONS '*STANDARD-OUTPUT* (CL:CONS 'X CL:NIL)))))) CL:NIL)) CL:NIL)) (CL:CONS 'X CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'DEFAULT-STREAM))
(CL:BLOCK CL:NIL (%DEFMACRO WITH-DEFAULT-STREAM (NSTR STR CL:&REST BODY) (CL:BLOCK WITH-DEFAULT-STREAM (CL:LABELS ((G3725 (G) (CL:LABELS ((G3726 (BODY-RESULT) (CL:CONS 'WITH (CL:CONS (CL:CONS G (CL:CONS STR (CL:CONS NSTR (CL:CONS (CL:CONS 'DEFAULT-STREAM (CL:CONS G CL:NIL)) (CL:CONS BODY-RESULT (CL:CONS (CL:CONS 'CL:PROGN (APPEND BODY CL:NIL)) CL:NIL)))))) (CL:CONS (CL:CONS '? (CL:CONS G (CL:CONS BODY-RESULT (CL:CONS (CL:CONS 'GET-STREAM-STRING (CL:CONS NSTR CL:NIL)) CL:NIL)))) CL:NIL))))) (G3726 (GENSYM))))) (G3725 (GENSYM))))))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'MAKE-STRING-STREAM (CL:CONS CL:NIL CL:NIL)))) (CL:PROGN (CL:DEFUN MAKE-STRING-STREAM CL:NIL (CL:BLOCK MAKE-STRING-STREAM (CL:BLOCK CL:NIL (MAKE-STREAM :USER-DETAIL (MAKE-QUEUE) :FUN-IN #'(CL:LAMBDA (STR) (CL:LABELS ((G3727 (!) (? (STRING? (CL:CAR !)) (CL:PROGN (CL:PROGN (=-STREAM-USER-DETAIL (MAKE-QUEUE) STR)) (ENQUEUE-LIST (STREAM-USER-DETAIL STR) (APPEND (STRING-LIST (CL:CAR !)) (CL:CDR !))))))) (G3727 (QUEUE-LIST (STREAM-USER-DETAIL STR)))) (QUEUE-POP (STREAM-USER-DETAIL STR))) :FUN-OUT #'(CL:LAMBDA (X STR) (ENQUEUE (STREAM-USER-DETAIL STR) X)) :FUN-EOF #'(CL:LAMBDA (STR) (NOT (QUEUE-LIST (STREAM-USER-DETAIL STR)))))))) (CL:SETF (CL:GETHASH #'MAKE-STRING-STREAM *FUNCTION-ATOM-SOURCES*) (CL:CONS CL:NIL (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'MAKE-STRING-STREAM (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'MAKE-STREAM (CL:CONS ':USER-DETAIL (CL:CONS (CL:CONS 'MAKE-QUEUE CL:NIL) (CL:CONS ':FUN-IN (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS 'STR CL:NIL) (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '! CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'STRING? (CL:CONS (CL:CONS 'CL:CAR (CL:CONS '! CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS '=-STREAM-USER-DETAIL (CL:CONS (CL:CONS 'MAKE-QUEUE CL:NIL) (CL:CONS 'STR CL:NIL))) CL:NIL)) (CL:CONS (CL:CONS 'ENQUEUE-LIST (CL:CONS (CL:CONS 'STREAM-USER-DETAIL (CL:CONS 'STR CL:NIL)) (CL:CONS (CL:CONS 'APPEND (CL:CONS (CL:CONS 'STRING-LIST (CL:CONS (CL:CONS 'CL:CAR (CL:CONS '! CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'CL:CDR (CL:CONS '! CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'QUEUE-LIST (CL:CONS (CL:CONS 'STREAM-USER-DETAIL (CL:CONS 'STR CL:NIL)) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'QUEUE-POP (CL:CONS (CL:CONS 'STREAM-USER-DETAIL (CL:CONS 'STR CL:NIL)) CL:NIL)) CL:NIL))) CL:NIL)) (CL:CONS ':FUN-OUT (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS 'X (CL:CONS 'STR CL:NIL)) (CL:CONS (CL:CONS 'ENQUEUE (CL:CONS (CL:CONS 'STREAM-USER-DETAIL (CL:CONS 'STR CL:NIL)) (CL:CONS 'X CL:NIL))) CL:NIL)) CL:NIL)) (CL:CONS ':FUN-EOF (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS 'STR CL:NIL) (CL:CONS (CL:CONS 'NOT (CL:CONS (CL:CONS 'QUEUE-LIST (CL:CONS (CL:CONS 'STREAM-USER-DETAIL (CL:CONS 'STR CL:NIL)) CL:NIL)) CL:NIL)) CL:NIL)) CL:NIL)) CL:NIL))))))))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'MAKE-STRING-STREAM))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'GET-STREAM-STRING (CL:CONS (CL:CONS 'STR CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN GET-STREAM-STRING (STR) (CL:BLOCK GET-STREAM-STRING (CL:BLOCK CL:NIL (CL:LABELS ((G3728 (~G1513) (CL:PROGN (=-STREAM-USER-DETAIL (MAKE-QUEUE) STR)) ~G1513)) (G3728 (QUEUE-STRING (STREAM-USER-DETAIL STR))))))) (CL:SETF (CL:GETHASH #'GET-STREAM-STRING *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'STR CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'GET-STREAM-STRING (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1513 CL:NIL) (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS '=-STREAM-USER-DETAIL (CL:CONS (CL:CONS 'MAKE-QUEUE CL:NIL) (CL:CONS 'STR CL:NIL))) CL:NIL)) (CL:CONS '~G1513 CL:NIL))) CL:NIL)) (CL:CONS (CL:CONS 'QUEUE-STRING (CL:CONS (CL:CONS 'STREAM-USER-DETAIL (CL:CONS 'STR CL:NIL)) CL:NIL)) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'GET-STREAM-STRING))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'MAKE-STREAM-STREAM (CL:CONS (CL:CONS 'CL:&KEY (CL:CONS 'STREAM (CL:CONS (CL:CONS 'INPUT-LOCATION (CL:CONS (CL:CONS 'MAKE-STREAM-LOCATION CL:NIL) CL:NIL)) (CL:CONS (CL:CONS 'OUTPUT-LOCATION (CL:CONS (CL:CONS 'MAKE-STREAM-LOCATION (CL:CONS ':TRACK? (CL:CONS CL:NIL CL:NIL))) CL:NIL)) CL:NIL)))) CL:NIL)))) (CL:PROGN (CL:DEFUN MAKE-STREAM-STREAM (CL:&KEY STREAM (INPUT-LOCATION (MAKE-STREAM-LOCATION)) (OUTPUT-LOCATION (MAKE-STREAM-LOCATION :TRACK? CL:NIL))) (CL:BLOCK MAKE-STREAM-STREAM (CL:BLOCK CL:NIL (MAKE-STREAM :HANDLE STREAM :INPUT-LOCATION INPUT-LOCATION :OUTPUT-LOCATION OUTPUT-LOCATION :FUN-IN #'(CL:LAMBDA (_) (%READ-CHAR (STREAM-HANDLE _))) :FUN-OUT #'(CL:LAMBDA (C STR) (%PRINC C (STREAM-HANDLE STR))) :FUN-EOF #'(CL:LAMBDA (_) (%FEOF (STREAM-HANDLE _))))))) (CL:SETF (CL:GETHASH #'MAKE-STREAM-STREAM *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'CL:&KEY (CL:CONS 'STREAM (CL:CONS (CL:CONS 'INPUT-LOCATION (CL:CONS (CL:CONS 'MAKE-STREAM-LOCATION CL:NIL) CL:NIL)) (CL:CONS (CL:CONS 'OUTPUT-LOCATION (CL:CONS (CL:CONS 'MAKE-STREAM-LOCATION (CL:CONS ':TRACK? (CL:CONS CL:NIL CL:NIL))) CL:NIL)) CL:NIL)))) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'MAKE-STREAM-STREAM (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'MAKE-STREAM (CL:CONS ':HANDLE (CL:CONS 'STREAM (CL:CONS ':INPUT-LOCATION (CL:CONS 'INPUT-LOCATION (CL:CONS ':OUTPUT-LOCATION (CL:CONS 'OUTPUT-LOCATION (CL:CONS ':FUN-IN (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '_ CL:NIL) (CL:CONS (CL:CONS '%READ-CHAR (CL:CONS (CL:CONS 'STREAM-HANDLE (CL:CONS '_ CL:NIL)) CL:NIL)) CL:NIL)) CL:NIL)) (CL:CONS ':FUN-OUT (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS 'C (CL:CONS 'STR CL:NIL)) (CL:CONS (CL:CONS '%PRINC (CL:CONS 'C (CL:CONS (CL:CONS 'STREAM-HANDLE (CL:CONS 'STR CL:NIL)) CL:NIL))) CL:NIL)) CL:NIL)) (CL:CONS ':FUN-EOF (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '_ CL:NIL) (CL:CONS (CL:CONS '%FEOF (CL:CONS (CL:CONS 'STREAM-HANDLE (CL:CONS '_ CL:NIL)) CL:NIL)) CL:NIL)) CL:NIL)) CL:NIL))))))))))))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'MAKE-STREAM-STREAM))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS '%FOPEN-DIRECTION (CL:CONS (CL:CONS 'DIRECTION CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN %FOPEN-DIRECTION (DIRECTION) (CL:BLOCK %FOPEN-DIRECTION (CL:BLOCK CL:NIL (CL:LABELS ((G3729 (~G1514) (? (EQUAL ~G1514 'INPUT) "r" (EQUAL ~G1514 'OUTPUT) "w" (EQUAL ~G1514 'APPEND) "a" (ERROR ":DIRECTION isn't specified.")))) (G3729 DIRECTION))))) (CL:SETF (CL:GETHASH #'%FOPEN-DIRECTION *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'DIRECTION CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS '%FOPEN-DIRECTION (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1514 CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'EQUAL (CL:CONS '~G1514 (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'INPUT CL:NIL)) CL:NIL))) (CL:CONS "r" (CL:CONS (CL:CONS 'EQUAL (CL:CONS '~G1514 (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'OUTPUT CL:NIL)) CL:NIL))) (CL:CONS "w" (CL:CONS (CL:CONS 'EQUAL (CL:CONS '~G1514 (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'APPEND CL:NIL)) CL:NIL))) (CL:CONS "a" (CL:CONS (CL:CONS 'ERROR (CL:CONS ":DIRECTION isn't specified." CL:NIL)) CL:NIL)))))))) CL:NIL)) CL:NIL)) (CL:CONS 'DIRECTION CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL '%FOPEN-DIRECTION))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'OPEN (CL:CONS (CL:CONS 'PATH (CL:CONS 'CL:&KEY (CL:CONS 'DIRECTION CL:NIL))) CL:NIL)))) (CL:PROGN (CL:DEFUN OPEN (PATH CL:&KEY DIRECTION) (CL:BLOCK OPEN (CL:BLOCK CL:NIL (CL:LABELS ((G3730 (!) (? ! (MAKE-STREAM-STREAM :STREAM ! :INPUT-LOCATION (MAKE-STREAM-LOCATION :ID PATH)) (ERROR "Couldn't open file `~A'." PATH)))) (G3730 (%FOPEN PATH (%FOPEN-DIRECTION DIRECTION))))))) (CL:SETF (CL:GETHASH #'OPEN *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'PATH (CL:CONS 'CL:&KEY (CL:CONS 'DIRECTION CL:NIL))) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'OPEN (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'LET (CL:CONS '! (CL:CONS (CL:CONS '%FOPEN (CL:CONS 'PATH (CL:CONS (CL:CONS '%FOPEN-DIRECTION (CL:CONS 'DIRECTION CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS '? (CL:CONS '! (CL:CONS (CL:CONS 'MAKE-STREAM-STREAM (CL:CONS ':STREAM (CL:CONS '! (CL:CONS ':INPUT-LOCATION (CL:CONS (CL:CONS 'MAKE-STREAM-LOCATION (CL:CONS ':ID (CL:CONS 'PATH CL:NIL))) CL:NIL))))) (CL:CONS (CL:CONS '%!? (CL:CONS (CL:CONS 'ERROR (CL:CONS "Couldn't open file `~A'." (CL:CONS 'PATH CL:NIL))) CL:NIL)) CL:NIL)))) CL:NIL)))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'OPEN))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'CLOSE (CL:CONS (CL:CONS 'STR CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN CLOSE (STR) (CL:BLOCK CLOSE (CL:BLOCK CL:NIL (%FCLOSE (STREAM-HANDLE STR))))) (CL:SETF (CL:GETHASH #'CLOSE *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'STR CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'CLOSE (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS '%FCLOSE (CL:CONS (CL:CONS 'STREAM-HANDLE (CL:CONS 'STR CL:NIL)) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'CLOSE))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'NUMBER-DIGIT (CL:CONS (CL:CONS 'X CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN NUMBER-DIGIT (X) (CL:BLOCK NUMBER-DIGIT (CL:BLOCK CL:NIL (CODE-CHAR (+ X #\0))))) (CL:SETF (CL:GETHASH #'NUMBER-DIGIT *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'NUMBER-DIGIT (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'CODE-CHAR (CL:CONS (CL:CONS '+ (CL:CONS 'X (CL:CONS #\0 CL:NIL))) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'NUMBER-DIGIT))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'INTEGER-CHARS-0 (CL:CONS (CL:CONS 'X CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN INTEGER-CHARS-0 (X) (CL:BLOCK INTEGER-CHARS-0 (CL:BLOCK CL:NIL (CL:LABELS ((G3731 (!) (CL:CONS (NUMBER-DIGIT !) (? (<= 10 X) (INTEGER-CHARS-0 (/ (- X !) 10)))))) (G3731 (INTEGER (CL:MOD X 10))))))) (CL:SETF (CL:GETHASH #'INTEGER-CHARS-0 *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'INTEGER-CHARS-0 (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '! CL:NIL) (CL:CONS (CL:CONS 'CL:CONS (CL:CONS (CL:CONS 'NUMBER-DIGIT (CL:CONS '! CL:NIL)) (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS '<= (CL:CONS 10 (CL:CONS 'X CL:NIL))) (CL:CONS (CL:CONS 'INTEGER-CHARS-0 (CL:CONS (CL:CONS '/ (CL:CONS (CL:CONS '- (CL:CONS 'X (CL:CONS '! CL:NIL))) (CL:CONS 10 CL:NIL))) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'INTEGER (CL:CONS (CL:CONS 'CL:MOD (CL:CONS 'X (CL:CONS 10 CL:NIL))) CL:NIL)) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'INTEGER-CHARS-0))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'INTEGER-CHARS (CL:CONS (CL:CONS 'X CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN INTEGER-CHARS (X) (CL:BLOCK INTEGER-CHARS (CL:BLOCK CL:NIL (REVERSE (INTEGER-CHARS-0 (INTEGER (ABS X))))))) (CL:SETF (CL:GETHASH #'INTEGER-CHARS *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'INTEGER-CHARS (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'REVERSE (CL:CONS (CL:CONS 'INTEGER-CHARS-0 (CL:CONS (CL:CONS 'INTEGER (CL:CONS (CL:CONS 'ABS (CL:CONS 'X CL:NIL)) CL:NIL)) CL:NIL)) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'INTEGER-CHARS))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'FRACTION-CHARS-0 (CL:CONS (CL:CONS 'X CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN FRACTION-CHARS-0 (X) (CL:BLOCK FRACTION-CHARS-0 (CL:BLOCK CL:NIL (CL:LABELS ((G3732 (!) (? (< 0 !) (CL:CONS (NUMBER-DIGIT !) (FRACTION-CHARS-0 !))))) (G3732 (CL:MOD (* X 10) 10)))))) (CL:SETF (CL:GETHASH #'FRACTION-CHARS-0 *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'FRACTION-CHARS-0 (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '! CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS '< (CL:CONS 0 (CL:CONS '! CL:NIL))) (CL:CONS (CL:CONS 'CL:CONS (CL:CONS (CL:CONS 'NUMBER-DIGIT (CL:CONS '! CL:NIL)) (CL:CONS (CL:CONS 'FRACTION-CHARS-0 (CL:CONS '! CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'CL:MOD (CL:CONS (CL:CONS '* (CL:CONS 'X (CL:CONS 10 CL:NIL))) (CL:CONS 10 CL:NIL))) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'FRACTION-CHARS-0))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'FRACTION-CHARS (CL:CONS (CL:CONS 'X CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN FRACTION-CHARS (X) (CL:BLOCK FRACTION-CHARS (CL:BLOCK CL:NIL (FRACTION-CHARS-0 (CL:MOD (ABS X) 1))))) (CL:SETF (CL:GETHASH #'FRACTION-CHARS *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'FRACTION-CHARS (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'FRACTION-CHARS-0 (CL:CONS (CL:CONS 'CL:MOD (CL:CONS (CL:CONS 'ABS (CL:CONS 'X CL:NIL)) (CL:CONS 1 CL:NIL))) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'FRACTION-CHARS))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'PRINC-NUMBER (CL:CONS (CL:CONS 'X (CL:CONS 'STR CL:NIL)) CL:NIL)))) (CL:PROGN (CL:DEFUN PRINC-NUMBER (X STR) (CL:BLOCK PRINC-NUMBER (CL:BLOCK CL:NIL (? (< X 0) (PRINC #\- STR)) (STREAM-PRINC (INTEGER-CHARS X) STR) (CL:LABELS ((G3733 (!) (? (NOT (ZERO? !)) (CL:PROGN (PRINC #\. STR) (STREAM-PRINC (FRACTION-CHARS !) STR))))) (G3733 (CL:MOD X 1)))))) (CL:SETF (CL:GETHASH #'PRINC-NUMBER *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X (CL:CONS 'STR CL:NIL)) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'PRINC-NUMBER (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS '< (CL:CONS 'X (CL:CONS 0 CL:NIL))) (CL:CONS (CL:CONS 'PRINC (CL:CONS #\- (CL:CONS 'STR CL:NIL))) CL:NIL))) (CL:CONS (CL:CONS 'STREAM-PRINC (CL:CONS (CL:CONS 'INTEGER-CHARS (CL:CONS 'X CL:NIL)) (CL:CONS 'STR CL:NIL))) (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '! CL:NIL) (CL:CONS (CL:CONS '& (CL:CONS (CL:CONS 'NOT (CL:CONS (CL:CONS 'ZERO? (CL:CONS '! CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS 'PRINC (CL:CONS #\. (CL:CONS 'STR CL:NIL))) (CL:CONS (CL:CONS 'STREAM-PRINC (CL:CONS (CL:CONS 'FRACTION-CHARS (CL:CONS '! CL:NIL)) (CL:CONS 'STR CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'CL:MOD (CL:CONS 'X (CL:CONS 1 CL:NIL))) CL:NIL)) CL:NIL))))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'PRINC-NUMBER))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'PRINC (CL:CONS (CL:CONS 'X (CL:CONS 'CL:&OPTIONAL (CL:CONS (CL:CONS 'STR (CL:CONS '*STANDARD-OUTPUT* CL:NIL)) CL:NIL))) CL:NIL)))) (CL:PROGN (CL:DEFUN PRINC (X CL:&OPTIONAL (STR *STANDARD-OUTPUT*)) (CL:BLOCK PRINC (CL:BLOCK CL:NIL (CL:LABELS ((G3734 (~G1515) (CL:LABELS ((G3735 (S) (CL:LABELS ((G3736 (~G1516) (? ~G1515 ~G1516 (GET-STREAM-STRING S)))) (G3736 (CL:PROGN (? (STRING? X) (STREAM-PRINC X S) (CHARACTER? X) (STREAM-PRINC X S) (NUMBER? X) (PRINC-NUMBER X S) (SYMBOL? X) (STREAM-PRINC (SYMBOL-NAME X) S)) X))))) (G3735 (DEFAULT-STREAM ~G1515))))) (G3734 STR))))) (CL:SETF (CL:GETHASH #'PRINC *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X (CL:CONS 'CL:&OPTIONAL (CL:CONS (CL:CONS 'STR (CL:CONS '*STANDARD-OUTPUT* CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'PRINC (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'LET (CL:CONS '~G1515 (CL:CONS 'STR (CL:CONS (CL:CONS 'WITH (CL:CONS (CL:CONS 'S (CL:CONS (CL:CONS 'DEFAULT-STREAM (CL:CONS '~G1515 CL:NIL)) (CL:CONS '~G1516 (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'STRING? (CL:CONS 'X CL:NIL)) (CL:CONS (CL:CONS 'STREAM-PRINC (CL:CONS 'X (CL:CONS 'S CL:NIL))) (CL:CONS (CL:CONS 'CHARACTER? (CL:CONS 'X CL:NIL)) (CL:CONS (CL:CONS 'STREAM-PRINC (CL:CONS 'X (CL:CONS 'S CL:NIL))) (CL:CONS (CL:CONS 'NUMBER? (CL:CONS 'X CL:NIL)) (CL:CONS (CL:CONS 'PRINC-NUMBER (CL:CONS 'X (CL:CONS 'S CL:NIL))) (CL:CONS (CL:CONS 'SYMBOL? (CL:CONS 'X CL:NIL)) (CL:CONS (CL:CONS 'STREAM-PRINC (CL:CONS (CL:CONS 'SYMBOL-NAME (CL:CONS 'X CL:NIL)) (CL:CONS 'S CL:NIL))) CL:NIL))))))))) (CL:CONS 'X CL:NIL))) CL:NIL)))) (CL:CONS (CL:CONS '? (CL:CONS '~G1515 (CL:CONS '~G1516 (CL:CONS (CL:CONS 'GET-STREAM-STRING (CL:CONS 'S CL:NIL)) CL:NIL)))) CL:NIL))) CL:NIL)))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'PRINC))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'SPLIT-IF (CL:CONS (CL:CONS 'PREDICATE (CL:CONS 'SEQ (CL:CONS 'CL:&KEY (CL:CONS (CL:CONS 'INCLUDE? (CL:CONS CL:NIL CL:NIL)) CL:NIL)))) CL:NIL)))) (CL:PROGN (CL:DEFUN SPLIT-IF (PREDICATE SEQ CL:&KEY (INCLUDE? CL:NIL)) (CL:BLOCK SPLIT-IF (CL:BLOCK CL:NIL (? SEQ (CL:LABELS ((G3737 (!) (? ! (CL:CONS (SUBSEQ SEQ 0 (? INCLUDE? (++ !) !)) (SPLIT-IF PREDICATE (SUBSEQ SEQ (++ !)) :INCLUDE? INCLUDE?)) (CL:LIST SEQ)))) (G3737 (POSITION-IF PREDICATE SEQ))))))) (CL:SETF (CL:GETHASH #'SPLIT-IF *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'PREDICATE (CL:CONS 'SEQ (CL:CONS 'CL:&KEY (CL:CONS (CL:CONS 'INCLUDE? (CL:CONS CL:NIL CL:NIL)) CL:NIL)))) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'SPLIT-IF (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS '? (CL:CONS 'SEQ (CL:CONS (CL:CONS 'LET (CL:CONS '! (CL:CONS (CL:CONS 'POSITION-IF (CL:CONS 'PREDICATE (CL:CONS 'SEQ CL:NIL))) (CL:CONS (CL:CONS '? (CL:CONS '! (CL:CONS (CL:CONS 'CL:CONS (CL:CONS (CL:CONS 'SUBSEQ (CL:CONS 'SEQ (CL:CONS 0 (CL:CONS (CL:CONS '? (CL:CONS 'INCLUDE? (CL:CONS (CL:CONS '++ (CL:CONS '! CL:NIL)) (CL:CONS '! CL:NIL)))) CL:NIL)))) (CL:CONS (CL:CONS 'SPLIT-IF (CL:CONS 'PREDICATE (CL:CONS (CL:CONS 'SUBSEQ (CL:CONS 'SEQ (CL:CONS (CL:CONS '++ (CL:CONS '! CL:NIL)) CL:NIL))) (CL:CONS ':INCLUDE? (CL:CONS 'INCLUDE? CL:NIL))))) CL:NIL))) (CL:CONS (CL:CONS '%!? (CL:CONS (CL:CONS 'CL:LIST (CL:CONS 'SEQ CL:NIL)) CL:NIL)) CL:NIL)))) CL:NIL)))) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'SPLIT-IF))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'GENERIC-SPLIT (CL:CONS (CL:CONS 'OBJ (CL:CONS 'SEQ (CL:CONS 'CL:&KEY (CL:CONS (CL:CONS 'TEST (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS 'EQL CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'INCLUDE? (CL:CONS CL:NIL CL:NIL)) CL:NIL))))) CL:NIL)))) (CL:PROGN (CL:DEFUN GENERIC-SPLIT (OBJ SEQ CL:&KEY (TEST #'EQL) (INCLUDE? CL:NIL)) (CL:BLOCK GENERIC-SPLIT (CL:BLOCK CL:NIL (? SEQ (CL:LABELS ((G3738 (!) (? ! (CL:CONS (SUBSEQ SEQ 0 (? INCLUDE? (++ !) !)) (GENERIC-SPLIT OBJ (SUBSEQ SEQ (++ !)) :TEST TEST :INCLUDE? INCLUDE?)) (CL:LIST SEQ)))) (G3738 (POSITION OBJ SEQ :TEST TEST))))))) (CL:SETF (CL:GETHASH #'GENERIC-SPLIT *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'OBJ (CL:CONS 'SEQ (CL:CONS 'CL:&KEY (CL:CONS (CL:CONS 'TEST (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS 'EQL CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'INCLUDE? (CL:CONS CL:NIL CL:NIL)) CL:NIL))))) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'GENERIC-SPLIT (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS '? (CL:CONS 'SEQ (CL:CONS (CL:CONS 'LET (CL:CONS '! (CL:CONS (CL:CONS 'POSITION (CL:CONS 'OBJ (CL:CONS 'SEQ (CL:CONS ':TEST (CL:CONS 'TEST CL:NIL))))) (CL:CONS (CL:CONS '? (CL:CONS '! (CL:CONS (CL:CONS 'CL:CONS (CL:CONS (CL:CONS 'SUBSEQ (CL:CONS 'SEQ (CL:CONS 0 (CL:CONS (CL:CONS '? (CL:CONS 'INCLUDE? (CL:CONS (CL:CONS '++ (CL:CONS '! CL:NIL)) (CL:CONS '! CL:NIL)))) CL:NIL)))) (CL:CONS (CL:CONS 'GENERIC-SPLIT (CL:CONS 'OBJ (CL:CONS (CL:CONS 'SUBSEQ (CL:CONS 'SEQ (CL:CONS (CL:CONS '++ (CL:CONS '! CL:NIL)) CL:NIL))) (CL:CONS ':TEST (CL:CONS 'TEST (CL:CONS ':INCLUDE? (CL:CONS 'INCLUDE? CL:NIL))))))) CL:NIL))) (CL:CONS (CL:CONS '%!? (CL:CONS (CL:CONS 'CL:LIST (CL:CONS 'SEQ CL:NIL)) CL:NIL)) CL:NIL)))) CL:NIL)))) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'GENERIC-SPLIT))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'SPLIT (CL:CONS (CL:CONS 'OBJ (CL:CONS 'SEQ (CL:CONS 'CL:&KEY (CL:CONS (CL:CONS 'TEST (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS 'EQL CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'INCLUDE? (CL:CONS CL:NIL CL:NIL)) CL:NIL))))) CL:NIL)))) (CL:PROGN (CL:DEFUN SPLIT (OBJ SEQ CL:&KEY (TEST #'EQL) (INCLUDE? CL:NIL)) (CL:BLOCK SPLIT (CL:BLOCK CL:NIL (GENERIC-SPLIT OBJ SEQ :TEST TEST :INCLUDE? INCLUDE?)))) (CL:SETF (CL:GETHASH #'SPLIT *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'OBJ (CL:CONS 'SEQ (CL:CONS 'CL:&KEY (CL:CONS (CL:CONS 'TEST (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS 'EQL CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'INCLUDE? (CL:CONS CL:NIL CL:NIL)) CL:NIL))))) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'SPLIT (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'GENERIC-SPLIT (CL:CONS 'OBJ (CL:CONS 'SEQ (CL:CONS ':TEST (CL:CONS 'TEST (CL:CONS ':INCLUDE? (CL:CONS 'INCLUDE? CL:NIL))))))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'SPLIT))
(CL:SETQ *FUNCTIONALS* (%NCONC (CL:CONS 'DIGIT-NUMBER CL:NIL) *FUNCTIONALS*))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'DIGIT-NUMBER (CL:CONS (CL:CONS 'X CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN DIGIT-NUMBER (X) (CL:BLOCK DIGIT-NUMBER (CL:BLOCK CL:NIL (- X #\0)))) (CL:SETF (CL:GETHASH #'DIGIT-NUMBER *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'DIGIT-NUMBER (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS '- (CL:CONS 'X (CL:CONS #\0 CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'DIGIT-NUMBER))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'PEEK-DIGIT (CL:CONS (CL:CONS 'STR CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN PEEK-DIGIT (STR) (CL:BLOCK PEEK-DIGIT (CL:BLOCK CL:NIL (CL:LABELS ((G3739 (!) (? ! (CL:PROGN (? (DIGIT-CHAR? !) !))))) (G3739 (PEEK-CHAR STR)))))) (CL:SETF (CL:GETHASH #'PEEK-DIGIT *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'STR CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'PEEK-DIGIT (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '! CL:NIL) (CL:CONS (CL:CONS '& (CL:CONS '! (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'DIGIT-CHAR? (CL:CONS '! CL:NIL)) (CL:CONS '! CL:NIL))) CL:NIL)) CL:NIL))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'PEEK-CHAR (CL:CONS 'STR CL:NIL)) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'PEEK-DIGIT))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'PEEK-DOT (CL:CONS (CL:CONS 'STR CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN PEEK-DOT (STR) (CL:BLOCK PEEK-DOT (CL:BLOCK CL:NIL (CL:LABELS ((G3740 (!) (? ! (CL:PROGN (== #\. !))))) (G3740 (PEEK-CHAR STR)))))) (CL:SETF (CL:GETHASH #'PEEK-DOT *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'STR CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'PEEK-DOT (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '! CL:NIL) (CL:CONS (CL:CONS '& (CL:CONS '! (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS '== (CL:CONS #\. (CL:CONS '! CL:NIL))) CL:NIL)) CL:NIL))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'PEEK-CHAR (CL:CONS 'STR CL:NIL)) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'PEEK-DOT))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'READ-DECIMAL-PLACES-0 (CL:CONS (CL:CONS 'STR (CL:CONS 'V (CL:CONS 'S CL:NIL))) CL:NIL)))) (CL:PROGN (CL:DEFUN READ-DECIMAL-PLACES-0 (STR V S) (CL:BLOCK READ-DECIMAL-PLACES-0 (CL:BLOCK CL:NIL (? (PEEK-DIGIT STR) (READ-DECIMAL-PLACES-0 STR (+ V (* S (DIGIT-NUMBER (READ-CHAR STR)))) (/ S 10)) V)))) (CL:SETF (CL:GETHASH #'READ-DECIMAL-PLACES-0 *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'STR (CL:CONS 'V (CL:CONS 'S CL:NIL))) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'READ-DECIMAL-PLACES-0 (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'PEEK-DIGIT (CL:CONS 'STR CL:NIL)) (CL:CONS (CL:CONS 'READ-DECIMAL-PLACES-0 (CL:CONS 'STR (CL:CONS (CL:CONS '+ (CL:CONS 'V (CL:CONS (CL:CONS '* (CL:CONS 'S (CL:CONS (CL:CONS 'DIGIT-NUMBER (CL:CONS (CL:CONS 'READ-CHAR (CL:CONS 'STR CL:NIL)) CL:NIL)) CL:NIL))) CL:NIL))) (CL:CONS (CL:CONS '/ (CL:CONS 'S (CL:CONS 10 CL:NIL))) CL:NIL)))) (CL:CONS 'V CL:NIL)))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'READ-DECIMAL-PLACES-0))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'READ-DECIMAL-PLACES (CL:CONS (CL:CONS 'CL:&OPTIONAL (CL:CONS (CL:CONS 'STR (CL:CONS '*STANDARD-INPUT* CL:NIL)) CL:NIL)) CL:NIL)))) (CL:PROGN (CL:DEFUN READ-DECIMAL-PLACES (CL:&OPTIONAL (STR *STANDARD-INPUT*)) (CL:BLOCK READ-DECIMAL-PLACES (CL:BLOCK CL:NIL (? (CL:LABELS ((G3741 (!) (? ! (DIGIT-CHAR? !)))) (G3741 (PEEK-CHAR STR))) (READ-DECIMAL-PLACES-0 STR 0 0.1))))) (CL:SETF (CL:GETHASH #'READ-DECIMAL-PLACES *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'CL:&OPTIONAL (CL:CONS (CL:CONS 'STR (CL:CONS '*STANDARD-INPUT* CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'READ-DECIMAL-PLACES (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'LET (CL:CONS '! (CL:CONS (CL:CONS 'PEEK-CHAR (CL:CONS 'STR CL:NIL)) (CL:CONS (CL:CONS '? (CL:CONS '! (CL:CONS (CL:CONS 'DIGIT-CHAR? (CL:CONS '! CL:NIL)) CL:NIL))) CL:NIL)))) (CL:CONS (CL:CONS 'READ-DECIMAL-PLACES-0 (CL:CONS 'STR (CL:CONS 0 (CL:CONS 0.1 CL:NIL)))) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'READ-DECIMAL-PLACES))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'READ-INTEGER-0 (CL:CONS (CL:CONS 'STR (CL:CONS 'V CL:NIL)) CL:NIL)))) (CL:PROGN (CL:DEFUN READ-INTEGER-0 (STR V) (CL:BLOCK READ-INTEGER-0 (CL:BLOCK CL:NIL (? (PEEK-DIGIT STR) (READ-INTEGER-0 STR (+ (* V 10) (DIGIT-NUMBER (READ-CHAR STR)))) V)))) (CL:SETF (CL:GETHASH #'READ-INTEGER-0 *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'STR (CL:CONS 'V CL:NIL)) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'READ-INTEGER-0 (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'PEEK-DIGIT (CL:CONS 'STR CL:NIL)) (CL:CONS (CL:CONS 'READ-INTEGER-0 (CL:CONS 'STR (CL:CONS (CL:CONS '+ (CL:CONS (CL:CONS '* (CL:CONS 'V (CL:CONS 10 CL:NIL))) (CL:CONS (CL:CONS 'DIGIT-NUMBER (CL:CONS (CL:CONS 'READ-CHAR (CL:CONS 'STR CL:NIL)) CL:NIL)) CL:NIL))) CL:NIL))) (CL:CONS 'V CL:NIL)))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'READ-INTEGER-0))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'READ-INTEGER (CL:CONS (CL:CONS 'CL:&OPTIONAL (CL:CONS (CL:CONS 'STR (CL:CONS '*STANDARD-INPUT* CL:NIL)) CL:NIL)) CL:NIL)))) (CL:PROGN (CL:DEFUN READ-INTEGER (CL:&OPTIONAL (STR *STANDARD-INPUT*)) (CL:BLOCK READ-INTEGER (CL:BLOCK CL:NIL (? (PEEK-DIGIT STR) (INTEGER (READ-INTEGER-0 STR 0)))))) (CL:SETF (CL:GETHASH #'READ-INTEGER *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'CL:&OPTIONAL (CL:CONS (CL:CONS 'STR (CL:CONS '*STANDARD-INPUT* CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'READ-INTEGER (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'PEEK-DIGIT (CL:CONS 'STR CL:NIL)) (CL:CONS (CL:CONS 'INTEGER (CL:CONS (CL:CONS 'READ-INTEGER-0 (CL:CONS 'STR (CL:CONS 0 CL:NIL))) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'READ-INTEGER))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'READ-NUMBER (CL:CONS (CL:CONS 'CL:&OPTIONAL (CL:CONS (CL:CONS 'STR (CL:CONS '*STANDARD-INPUT* CL:NIL)) CL:NIL)) CL:NIL)))) (CL:PROGN (CL:DEFUN READ-NUMBER (CL:&OPTIONAL (STR *STANDARD-INPUT*)) (CL:BLOCK READ-NUMBER (CL:BLOCK CL:NIL (* (? (== #\- (PEEK-CHAR STR)) (CL:PROGN (READ-CHAR STR) -1) 1) (+ (READ-INTEGER STR) (CL:LABELS ((G3742 (~G1517) (? ~G1517 ~G1517 0))) (G3742 (? (PEEK-DOT STR) (? (READ-CHAR STR) (READ-DECIMAL-PLACES STR)))))))))) (CL:SETF (CL:GETHASH #'READ-NUMBER *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'CL:&OPTIONAL (CL:CONS (CL:CONS 'STR (CL:CONS '*STANDARD-INPUT* CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'READ-NUMBER (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS '* (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS '== (CL:CONS #\- (CL:CONS (CL:CONS 'PEEK-CHAR (CL:CONS 'STR CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS 'READ-CHAR (CL:CONS 'STR CL:NIL)) (CL:CONS -1 CL:NIL))) (CL:CONS 1 CL:NIL)))) (CL:CONS (CL:CONS '+ (CL:CONS (CL:CONS 'READ-INTEGER (CL:CONS 'STR CL:NIL)) (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1517 CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS '~G1517 (CL:CONS '~G1517 (CL:CONS 0 CL:NIL)))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'PEEK-DOT (CL:CONS 'STR CL:NIL)) (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'READ-CHAR (CL:CONS 'STR CL:NIL)) (CL:CONS (CL:CONS 'READ-DECIMAL-PLACES (CL:CONS 'STR CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'READ-NUMBER))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'TOKEN-IS-QUOTE? (CL:CONS (CL:CONS 'X CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN TOKEN-IS-QUOTE? (X) (CL:BLOCK TOKEN-IS-QUOTE? (CL:BLOCK CL:NIL (CL:LABELS ((G3743 (~G1546) (? ~G1546 ~G1546 (CL:LABELS ((G3744 (~G1547) (? ~G1547 ~G1547 (CL:LABELS ((G3745 (~G1548) (? ~G1548 ~G1548 (CL:LABELS ((G3746 (~G1549) (? ~G1549 ~G1549 (EQ X 'ACCENT-CIRCONFLEX)))) (G3746 (EQ X 'QUASIQUOTE-SPLICE)))))) (G3745 (EQ X 'QUASIQUOTE)))))) (G3744 (EQ X 'BACKQUOTE)))))) (G3743 (EQ X 'CL:QUOTE)))))) (CL:SETF (CL:GETHASH #'TOKEN-IS-QUOTE? *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'TOKEN-IS-QUOTE? (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'LET (CL:CONS '~G1546 (CL:CONS (CL:CONS 'EQ (CL:CONS 'X (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'CL:QUOTE CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS '? (CL:CONS '~G1546 (CL:CONS '~G1546 (CL:CONS (CL:CONS 'LET (CL:CONS '~G1547 (CL:CONS (CL:CONS 'EQ (CL:CONS 'X (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'BACKQUOTE CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS '? (CL:CONS '~G1547 (CL:CONS '~G1547 (CL:CONS (CL:CONS 'LET (CL:CONS '~G1548 (CL:CONS (CL:CONS 'EQ (CL:CONS 'X (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'QUASIQUOTE CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS '? (CL:CONS '~G1548 (CL:CONS '~G1548 (CL:CONS (CL:CONS 'LET (CL:CONS '~G1549 (CL:CONS (CL:CONS 'EQ (CL:CONS 'X (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'QUASIQUOTE-SPLICE CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS '? (CL:CONS '~G1549 (CL:CONS '~G1549 (CL:CONS (CL:CONS 'EQ (CL:CONS 'X (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'ACCENT-CIRCONFLEX CL:NIL)) CL:NIL))) CL:NIL)))) CL:NIL)))) CL:NIL)))) CL:NIL)))) CL:NIL)))) CL:NIL)))) CL:NIL)))) CL:NIL)))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'TOKEN-IS-QUOTE?))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS '%READ-CLOSING-BRACKET? (CL:CONS (CL:CONS 'X CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN %READ-CLOSING-BRACKET? (X) (CL:BLOCK %READ-CLOSING-BRACKET? (CL:BLOCK CL:NIL (CL:LABELS ((G3747 (~G1550) (? ~G1550 ~G1550 (CL:LABELS ((G3748 (~G1551) (? ~G1551 ~G1551 (EQ X 'CURLY-BRACKET-CLOSE)))) (G3748 (EQ X 'SQUARE-BRACKET-CLOSE)))))) (G3747 (EQ X 'BRACKET-CLOSE)))))) (CL:SETF (CL:GETHASH #'%READ-CLOSING-BRACKET? *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS '%READ-CLOSING-BRACKET? (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'LET (CL:CONS '~G1550 (CL:CONS (CL:CONS 'EQ (CL:CONS 'X (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'BRACKET-CLOSE CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS '? (CL:CONS '~G1550 (CL:CONS '~G1550 (CL:CONS (CL:CONS 'LET (CL:CONS '~G1551 (CL:CONS (CL:CONS 'EQ (CL:CONS 'X (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'SQUARE-BRACKET-CLOSE CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS '? (CL:CONS '~G1551 (CL:CONS '~G1551 (CL:CONS (CL:CONS 'EQ (CL:CONS 'X (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'CURLY-BRACKET-CLOSE CL:NIL)) CL:NIL))) CL:NIL)))) CL:NIL)))) CL:NIL)))) CL:NIL)))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL '%READ-CLOSING-BRACKET?))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'SPECIAL-CHAR? (CL:CONS (CL:CONS 'X CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN SPECIAL-CHAR? (X) (CL:BLOCK SPECIAL-CHAR? (CL:BLOCK CL:NIL (CL:LABELS ((G3749 (~G1552) (? ~G1552 ~G1552 (CL:LABELS ((G3750 (~G1553) (? ~G1553 ~G1553 (CL:LABELS ((G3751 (~G1554) (? ~G1554 ~G1554 (CL:LABELS ((G3752 (~G1555) (? ~G1555 ~G1555 (CL:LABELS ((G3753 (~G1556) (? ~G1556 ~G1556 (CL:LABELS ((G3754 (~G1557) (? ~G1557 ~G1557 (CL:LABELS ((G3755 (~G1558) (? ~G1558 ~G1558 (CL:LABELS ((G3756 (~G1559) (? ~G1559 ~G1559 (CL:LABELS ((G3757 (~G1560) (? ~G1560 ~G1560 (CL:LABELS ((G3758 (~G1561) (? ~G1561 ~G1561 (CL:LABELS ((G3759 (~G1562) (? ~G1562 ~G1562 (CL:LABELS ((G3760 (~G1563) (? ~G1563 ~G1563 (CL:LABELS ((G3761 (~G1564) (? ~G1564 ~G1564 (== X #\^)))) (G3761 (== X #\#)))))) (G3760 (== X #\")))))) (G3759 (== X #\;)))))) (G3758 (== X #\:)))))) (G3757 (== X #\,)))))) (G3756 (== X #\`)))))) (G3755 (== X #\')))))) (G3754 (== X #\})))))) (G3753 (== X #\{)))))) (G3752 (== X #\])))))) (G3751 (== X #\[)))))) (G3750 (== X #\))))))) (G3749 (== X #\()))))) (CL:SETF (CL:GETHASH #'SPECIAL-CHAR? *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'SPECIAL-CHAR? (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'LET (CL:CONS '~G1552 (CL:CONS (CL:CONS '== (CL:CONS 'X (CL:CONS #\( CL:NIL))) (CL:CONS (CL:CONS '? (CL:CONS '~G1552 (CL:CONS '~G1552 (CL:CONS (CL:CONS 'LET (CL:CONS '~G1553 (CL:CONS (CL:CONS '== (CL:CONS 'X (CL:CONS #\) CL:NIL))) (CL:CONS (CL:CONS '? (CL:CONS '~G1553 (CL:CONS '~G1553 (CL:CONS (CL:CONS 'LET (CL:CONS '~G1554 (CL:CONS (CL:CONS '== (CL:CONS 'X (CL:CONS #\[ CL:NIL))) (CL:CONS (CL:CONS '? (CL:CONS '~G1554 (CL:CONS '~G1554 (CL:CONS (CL:CONS 'LET (CL:CONS '~G1555 (CL:CONS (CL:CONS '== (CL:CONS 'X (CL:CONS #\] CL:NIL))) (CL:CONS (CL:CONS '? (CL:CONS '~G1555 (CL:CONS '~G1555 (CL:CONS (CL:CONS 'LET (CL:CONS '~G1556 (CL:CONS (CL:CONS '== (CL:CONS 'X (CL:CONS #\{ CL:NIL))) (CL:CONS (CL:CONS '? (CL:CONS '~G1556 (CL:CONS '~G1556 (CL:CONS (CL:CONS 'LET (CL:CONS '~G1557 (CL:CONS (CL:CONS '== (CL:CONS 'X (CL:CONS #\} CL:NIL))) (CL:CONS (CL:CONS '? (CL:CONS '~G1557 (CL:CONS '~G1557 (CL:CONS (CL:CONS 'LET (CL:CONS '~G1558 (CL:CONS (CL:CONS '== (CL:CONS 'X (CL:CONS #\' CL:NIL))) (CL:CONS (CL:CONS '? (CL:CONS '~G1558 (CL:CONS '~G1558 (CL:CONS (CL:CONS 'LET (CL:CONS '~G1559 (CL:CONS (CL:CONS '== (CL:CONS 'X (CL:CONS #\` CL:NIL))) (CL:CONS (CL:CONS '? (CL:CONS '~G1559 (CL:CONS '~G1559 (CL:CONS (CL:CONS 'LET (CL:CONS '~G1560 (CL:CONS (CL:CONS '== (CL:CONS 'X (CL:CONS #\, CL:NIL))) (CL:CONS (CL:CONS '? (CL:CONS '~G1560 (CL:CONS '~G1560 (CL:CONS (CL:CONS 'LET (CL:CONS '~G1561 (CL:CONS (CL:CONS '== (CL:CONS 'X (CL:CONS #\: CL:NIL))) (CL:CONS (CL:CONS '? (CL:CONS '~G1561 (CL:CONS '~G1561 (CL:CONS (CL:CONS 'LET (CL:CONS '~G1562 (CL:CONS (CL:CONS '== (CL:CONS 'X (CL:CONS #\; CL:NIL))) (CL:CONS (CL:CONS '? (CL:CONS '~G1562 (CL:CONS '~G1562 (CL:CONS (CL:CONS 'LET (CL:CONS '~G1563 (CL:CONS (CL:CONS '== (CL:CONS 'X (CL:CONS #\" CL:NIL))) (CL:CONS (CL:CONS '? (CL:CONS '~G1563 (CL:CONS '~G1563 (CL:CONS (CL:CONS 'LET (CL:CONS '~G1564 (CL:CONS (CL:CONS '== (CL:CONS 'X (CL:CONS #\# CL:NIL))) (CL:CONS (CL:CONS '? (CL:CONS '~G1564 (CL:CONS '~G1564 (CL:CONS (CL:CONS '== (CL:CONS 'X (CL:CONS #\^ CL:NIL))) CL:NIL)))) CL:NIL)))) CL:NIL)))) CL:NIL)))) CL:NIL)))) CL:NIL)))) CL:NIL)))) CL:NIL)))) CL:NIL)))) CL:NIL)))) CL:NIL)))) CL:NIL)))) CL:NIL)))) CL:NIL)))) CL:NIL)))) CL:NIL)))) CL:NIL)))) CL:NIL)))) CL:NIL)))) CL:NIL)))) CL:NIL)))) CL:NIL)))) CL:NIL)))) CL:NIL)))) CL:NIL)))) CL:NIL)))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'SPECIAL-CHAR?))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'SYMBOL-CHAR? (CL:CONS (CL:CONS 'X CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN SYMBOL-CHAR? (X) (CL:BLOCK SYMBOL-CHAR? (CL:BLOCK CL:NIL (? (> X 32) (NOT (SPECIAL-CHAR? X)))))) (CL:SETF (CL:GETHASH #'SYMBOL-CHAR? *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'SYMBOL-CHAR? (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS '> (CL:CONS 'X (CL:CONS 32 CL:NIL))) (CL:CONS (CL:CONS 'NOT (CL:CONS (CL:CONS 'SPECIAL-CHAR? (CL:CONS 'X CL:NIL)) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'SYMBOL-CHAR?))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'SKIP-COMMENT (CL:CONS (CL:CONS 'STR CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN SKIP-COMMENT (STR) (CL:BLOCK SKIP-COMMENT (CL:BLOCK CL:NIL (CL:LABELS ((G3762 (C) (? C (CL:PROGN (? (== C 10) (SKIP-SPACES STR) (SKIP-COMMENT STR)))))) (G3762 (READ-CHAR STR)))))) (CL:SETF (CL:GETHASH #'SKIP-COMMENT *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'STR CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'SKIP-COMMENT (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS 'C CL:NIL) (CL:CONS (CL:CONS '& (CL:CONS 'C (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS '== (CL:CONS 'C (CL:CONS 10 CL:NIL))) (CL:CONS (CL:CONS 'SKIP-SPACES (CL:CONS 'STR CL:NIL)) (CL:CONS (CL:CONS 'SKIP-COMMENT (CL:CONS 'STR CL:NIL)) CL:NIL)))) CL:NIL)) CL:NIL))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'READ-CHAR (CL:CONS 'STR CL:NIL)) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'SKIP-COMMENT))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'SKIP-SPACES (CL:CONS (CL:CONS 'STR CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN SKIP-SPACES (STR) (CL:BLOCK SKIP-SPACES (CL:BLOCK CL:NIL (CL:LABELS ((G3763 (C) (? C (CL:PROGN (? (== #\; C) (CL:PROGN (SKIP-COMMENT STR))) (? (WHITESPACE? C) (CL:PROGN (READ-CHAR STR) (SKIP-SPACES STR))))))) (G3763 (PEEK-CHAR STR)))))) (CL:SETF (CL:GETHASH #'SKIP-SPACES *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'STR CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'SKIP-SPACES (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS 'C CL:NIL) (CL:CONS (CL:CONS '& (CL:CONS 'C (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS '== (CL:CONS #\; (CL:CONS 'C CL:NIL))) (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS 'SKIP-COMMENT (CL:CONS 'STR CL:NIL)) CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'WHITESPACE? (CL:CONS 'C CL:NIL)) (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS 'READ-CHAR (CL:CONS 'STR CL:NIL)) (CL:CONS (CL:CONS 'SKIP-SPACES (CL:CONS 'STR CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'PEEK-CHAR (CL:CONS 'STR CL:NIL)) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'SKIP-SPACES))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'GET-SYMBOL-0 (CL:CONS (CL:CONS 'STR CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN GET-SYMBOL-0 (STR) (CL:BLOCK GET-SYMBOL-0 (CL:BLOCK CL:NIL (CL:LABELS ((G3764 (C) (? (== #\; C) (CL:PROGN (SKIP-COMMENT STR) (GET-SYMBOL-0 STR)) (? (SYMBOL-CHAR? C) (CL:CONS (CHAR-UPCASE (READ-CHAR STR)) (GET-SYMBOL-0 STR)))))) (G3764 (CHAR-UPCASE (PEEK-CHAR STR))))))) (CL:SETF (CL:GETHASH #'GET-SYMBOL-0 *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'STR CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'GET-SYMBOL-0 (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS 'C CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS '== (CL:CONS #\; (CL:CONS 'C CL:NIL))) (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS 'SKIP-COMMENT (CL:CONS 'STR CL:NIL)) (CL:CONS (CL:CONS 'GET-SYMBOL-0 (CL:CONS 'STR CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'SYMBOL-CHAR? (CL:CONS 'C CL:NIL)) (CL:CONS (CL:CONS 'CL:CONS (CL:CONS (CL:CONS 'CHAR-UPCASE (CL:CONS (CL:CONS 'READ-CHAR (CL:CONS 'STR CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'GET-SYMBOL-0 (CL:CONS 'STR CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'CHAR-UPCASE (CL:CONS (CL:CONS 'PEEK-CHAR (CL:CONS 'STR CL:NIL)) CL:NIL)) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'GET-SYMBOL-0))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'GET-SYMBOL (CL:CONS (CL:CONS 'STR CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN GET-SYMBOL (STR) (CL:BLOCK GET-SYMBOL (CL:BLOCK CL:NIL (CL:LABELS ((G3765 (C) (? C (CL:PROGN (? (NOT (SPECIAL-CHAR? C)) (CL:PROGN (GET-SYMBOL-0 STR))))))) (G3765 (PEEK-CHAR STR)))))) (CL:SETF (CL:GETHASH #'GET-SYMBOL *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'STR CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'GET-SYMBOL (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS 'C CL:NIL) (CL:CONS (CL:CONS '& (CL:CONS 'C (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS '& (CL:CONS (CL:CONS 'NOT (CL:CONS (CL:CONS 'SPECIAL-CHAR? (CL:CONS 'C CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS 'GET-SYMBOL-0 (CL:CONS 'STR CL:NIL)) CL:NIL)) CL:NIL))) CL:NIL)) CL:NIL))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'PEEK-CHAR (CL:CONS 'STR CL:NIL)) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'GET-SYMBOL))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'GET-SYMBOL-AND-PACKAGE (CL:CONS (CL:CONS 'STR CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN GET-SYMBOL-AND-PACKAGE (STR) (CL:BLOCK GET-SYMBOL-AND-PACKAGE (CL:BLOCK CL:NIL (SKIP-SPACES STR) (CL:LABELS ((G3766 (SYM) (CL:LABELS ((G3767 (!) (? ! (CL:PROGN (? (== ! #\:) (VALUES (CL:LABELS ((G3768 (~G1518) (? ~G1518 ~G1518 CL:T))) (G3768 SYM)) (? (READ-CHAR STR) (GET-SYMBOL STR))) (VALUES CL:NIL SYM)))))) (G3767 (PEEK-CHAR STR))))) (G3766 (GET-SYMBOL STR)))))) (CL:SETF (CL:GETHASH #'GET-SYMBOL-AND-PACKAGE *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'STR CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'GET-SYMBOL-AND-PACKAGE (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'SKIP-SPACES (CL:CONS 'STR CL:NIL)) (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS 'SYM CL:NIL) (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '! CL:NIL) (CL:CONS (CL:CONS '& (CL:CONS '! (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS '== (CL:CONS '! (CL:CONS #\: CL:NIL))) (CL:CONS (CL:CONS 'VALUES (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1518 CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS '~G1518 (CL:CONS '~G1518 (CL:CONS CL:T CL:NIL)))) CL:NIL)) CL:NIL)) (CL:CONS 'SYM CL:NIL)) (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'READ-CHAR (CL:CONS 'STR CL:NIL)) (CL:CONS (CL:CONS 'GET-SYMBOL (CL:CONS 'STR CL:NIL)) CL:NIL))) CL:NIL))) (CL:CONS (CL:CONS 'VALUES (CL:CONS CL:NIL (CL:CONS 'SYM CL:NIL))) CL:NIL)))) CL:NIL)) CL:NIL))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'PEEK-CHAR (CL:CONS 'STR CL:NIL)) CL:NIL)) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'GET-SYMBOL (CL:CONS 'STR CL:NIL)) CL:NIL)) CL:NIL)))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'GET-SYMBOL-AND-PACKAGE))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'READ-STRING-0 (CL:CONS (CL:CONS 'STR CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN READ-STRING-0 (STR) (CL:BLOCK READ-STRING-0 (CL:BLOCK CL:NIL (CL:LABELS ((G3769 (C) (? (NOT (== C #\")) (CL:PROGN (CL:CONS (? (== C #\\) (READ-CHAR STR) C) (READ-STRING-0 STR)))))) (G3769 (READ-CHAR STR)))))) (CL:SETF (CL:GETHASH #'READ-STRING-0 *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'STR CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'READ-STRING-0 (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS 'C CL:NIL) (CL:CONS (CL:CONS '& (CL:CONS (CL:CONS 'NOT (CL:CONS (CL:CONS '== (CL:CONS 'C (CL:CONS #\" CL:NIL))) CL:NIL)) (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS 'CL:CONS (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS '== (CL:CONS 'C (CL:CONS #\\ CL:NIL))) (CL:CONS (CL:CONS 'READ-CHAR (CL:CONS 'STR CL:NIL)) (CL:CONS 'C CL:NIL)))) (CL:CONS (CL:CONS 'READ-STRING-0 (CL:CONS 'STR CL:NIL)) CL:NIL))) CL:NIL)) CL:NIL))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'READ-CHAR (CL:CONS 'STR CL:NIL)) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'READ-STRING-0))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'READ-STRING (CL:CONS (CL:CONS 'STR CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN READ-STRING (STR) (CL:BLOCK READ-STRING (CL:BLOCK CL:NIL (LIST-STRING (READ-STRING-0 STR))))) (CL:SETF (CL:GETHASH #'READ-STRING *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'STR CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'READ-STRING (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'LIST-STRING (CL:CONS (CL:CONS 'READ-STRING-0 (CL:CONS 'STR CL:NIL)) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'READ-STRING))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'READ-COMMENT-BLOCK (CL:CONS (CL:CONS 'STR CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN READ-COMMENT-BLOCK (STR) (CL:BLOCK READ-COMMENT-BLOCK (CL:BLOCK CL:NIL (CL:BLOCK CL:NIL (CL:PROGN (CL:TAGBODY ~G1565 (? (NOT (NOT (? (== #\| (READ-CHAR STR)) (== #\# (PEEK-CHAR STR))))) (CL:RETURN-FROM CL:NIL (CL:PROGN (READ-CHAR STR)))) CL:NIL (CL:GO ~G1565))))))) (CL:SETF (CL:GETHASH #'READ-COMMENT-BLOCK *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'STR CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'READ-COMMENT-BLOCK (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'LET* (CL:CONS CL:NIL (CL:CONS (CL:CONS 'CL:TAGBODY (CL:CONS '~G1565 (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'NOT (CL:CONS (CL:CONS 'NOT (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS '== (CL:CONS #\| (CL:CONS (CL:CONS 'READ-CHAR (CL:CONS 'STR CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS '== (CL:CONS #\# (CL:CONS (CL:CONS 'PEEK-CHAR (CL:CONS 'STR CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'CL:RETURN (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS 'READ-CHAR (CL:CONS 'STR CL:NIL)) CL:NIL)) CL:NIL)) CL:NIL))) (CL:CONS CL:NIL (CL:CONS (CL:CONS 'CL:GO (CL:CONS '~G1565 CL:NIL)) CL:NIL))))) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'READ-COMMENT-BLOCK))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'LIST-NUMBER? (CL:CONS (CL:CONS 'X CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN LIST-NUMBER? (X) (CL:BLOCK LIST-NUMBER? (CL:BLOCK CL:NIL (? (CL:LABELS ((G3770 (~G1520) (? ~G1520 ~G1520 (DIGIT-CHAR? (CL:CAR X))))) (G3770 (? (CL:CDR X) (CL:LABELS ((G3771 (~G1519) (? ~G1519 ~G1519 (== #\. (CL:CAR X))))) (G3771 (== #\- (CL:CAR X))))))) (? (CL:CDR X) (EVERY #'(CL:LAMBDA (_) (CL:LABELS ((G3772 (~G1586) (? ~G1586 ~G1586 (== #\. _)))) (G3772 (DIGIT-CHAR? _)))) (CL:CDR X)) CL:T))))) (CL:SETF (CL:GETHASH #'LIST-NUMBER? *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'LIST-NUMBER? (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1520 CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS '~G1520 (CL:CONS '~G1520 (CL:CONS (CL:CONS 'DIGIT-CHAR? (CL:CONS (CL:CONS 'CL:CAR (CL:CONS 'X CL:NIL)) CL:NIL)) CL:NIL)))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'CL:CDR (CL:CONS 'X CL:NIL)) (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1519 CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS '~G1519 (CL:CONS '~G1519 (CL:CONS (CL:CONS '== (CL:CONS #\. (CL:CONS (CL:CONS 'CL:CAR (CL:CONS 'X CL:NIL)) CL:NIL))) CL:NIL)))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS '== (CL:CONS #\- (CL:CONS (CL:CONS 'CL:CAR (CL:CONS 'X CL:NIL)) CL:NIL))) CL:NIL)) CL:NIL))) CL:NIL)) (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'CL:CDR (CL:CONS 'X CL:NIL)) (CL:CONS (CL:CONS 'EVERY (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '_ CL:NIL) (CL:CONS (CL:CONS '|\|| (CL:CONS (CL:CONS 'DIGIT-CHAR? (CL:CONS '_ CL:NIL)) (CL:CONS (CL:CONS '== (CL:CONS #\. (CL:CONS '_ CL:NIL))) CL:NIL))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'CL:CDR (CL:CONS 'X CL:NIL)) CL:NIL))) (CL:CONS CL:T CL:NIL)))) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'LIST-NUMBER?))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'READ-TOKEN (CL:CONS (CL:CONS 'STR CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN READ-TOKEN (STR) (CL:BLOCK READ-TOKEN (CL:BLOCK CL:NIL (CL:LABELS ((G3773 (!) (? ! (CL:PROGN (CL:LABELS ((G3774 (~G1566) (CL:LABELS ((G3775 (~G1567) (? (NOT (EQ (CL:CAR ~G1566) 'VALUES)) (CL:PROGN (ERROR "VALUES expected instead of ~A." ~G1566))) (CL:LABELS ((G3776 (PKG) (CL:LABELS ((G3777 (~G1568) (CL:LABELS ((G3778 (SYM) (VALUES (? (? SYM (? (NOT (CL:CDR SYM)) (== #\. (CL:CAR SYM)))) 'DOT (? SYM (? (LIST-NUMBER? SYM) 'NUMBER 'SYMBOL) (CL:LABELS ((G3779 (~G1522) (? (CHARACTER== ~G1522 #\() 'BRACKET-OPEN (CHARACTER== ~G1522 #\)) 'BRACKET-CLOSE (CHARACTER== ~G1522 #\[) 'SQUARE-BRACKET-OPEN (CHARACTER== ~G1522 #\]) 'SQUARE-BRACKET-CLOSE (CHARACTER== ~G1522 #\{) 'CURLY-BRACKET-OPEN (CHARACTER== ~G1522 #\}) 'CURLY-BRACKET-CLOSE (CHARACTER== ~G1522 #\') 'CL:QUOTE (CHARACTER== ~G1522 #\`) 'BACKQUOTE (CHARACTER== ~G1522 #\^) 'ACCENT-CIRCONFLEX (CHARACTER== ~G1522 #\") 'DBLQUOTE (CHARACTER== ~G1522 #\,) (? (== #\@ (PEEK-CHAR STR)) (? (READ-CHAR STR) 'QUASIQUOTE-SPLICE) 'QUASIQUOTE) (CHARACTER== ~G1522 #\#) (CL:LABELS ((G3780 (~G1521) (? (CHARACTER== ~G1521 #\\) 'CHAR (CHARACTER== ~G1521 #\x) 'HEXNUM (CHARACTER== ~G1521 #\') 'CL:FUNCTION (CHARACTER== ~G1521 #\|) (READ-COMMENT-BLOCK STR) (ERROR "Invalid character after '#'.")))) (G3780 (READ-CHAR STR))) (CHARACTER== ~G1522 -1) 'EOF))) (G3779 (READ-CHAR STR))))) PKG SYM))) (G3778 (CL:CAR ~G1568))))) (G3777 (CL:LABELS ((G3781 (~G1587) (? ~G1587 ~G1587 (%ERROR "Not enough VALUES.")))) (G3781 (CL:CDR ~G1567))))))) (G3776 (CL:CAR ~G1567))))) (G3775 (CL:CDR ~G1566))))) (G3774 !)))))) (G3773 (GET-SYMBOL-AND-PACKAGE STR)))))) (CL:SETF (CL:GETHASH #'READ-TOKEN *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'STR CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'READ-TOKEN (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '! CL:NIL) (CL:CONS (CL:CONS '& (CL:CONS '! (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS 'LET* (CL:CONS (CL:CONS (CL:CONS '~G1566 (CL:CONS '! CL:NIL)) (CL:CONS (CL:CONS '~G1567 (CL:CONS (CL:CONS 'CL:CDR (CL:CONS '~G1566 CL:NIL)) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'UNLESS (CL:CONS (CL:CONS 'EQ (CL:CONS (CL:CONS 'CL:CAR (CL:CONS '~G1566 CL:NIL)) (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'VALUES CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'ERROR (CL:CONS "VALUES expected instead of ~A." (CL:CONS '~G1566 CL:NIL))) CL:NIL))) (CL:CONS (CL:CONS 'LET* (CL:CONS (CL:CONS (CL:CONS 'PKG (CL:CONS (CL:CONS 'CL:CAR (CL:CONS '~G1567 CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS '~G1568 (CL:CONS (CL:CONS '|\|| (CL:CONS (CL:CONS 'CL:CDR (CL:CONS '~G1567 CL:NIL)) (CL:CONS (CL:CONS '%ERROR (CL:CONS "Not enough VALUES." CL:NIL)) CL:NIL))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'LET* (CL:CONS (CL:CONS (CL:CONS 'SYM (CL:CONS (CL:CONS 'CL:CAR (CL:CONS '~G1568 CL:NIL)) CL:NIL)) CL:NIL) (CL:CONS (CL:CONS 'VALUES (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS '? (CL:CONS 'SYM (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'NOT (CL:CONS (CL:CONS 'CL:CDR (CL:CONS 'SYM CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS '== (CL:CONS #\. (CL:CONS (CL:CONS 'CL:CAR (CL:CONS 'SYM CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL))) (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'DOT CL:NIL)) (CL:CONS (CL:CONS '? (CL:CONS 'SYM (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'LIST-NUMBER? (CL:CONS 'SYM CL:NIL)) (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'NUMBER CL:NIL)) (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'SYMBOL CL:NIL)) CL:NIL)))) (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1522 CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'CHARACTER== (CL:CONS '~G1522 (CL:CONS #\( CL:NIL))) (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'BRACKET-OPEN CL:NIL)) (CL:CONS (CL:CONS 'CHARACTER== (CL:CONS '~G1522 (CL:CONS #\) CL:NIL))) (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'BRACKET-CLOSE CL:NIL)) (CL:CONS (CL:CONS 'CHARACTER== (CL:CONS '~G1522 (CL:CONS #\[ CL:NIL))) (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'SQUARE-BRACKET-OPEN CL:NIL)) (CL:CONS (CL:CONS 'CHARACTER== (CL:CONS '~G1522 (CL:CONS #\] CL:NIL))) (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'SQUARE-BRACKET-CLOSE CL:NIL)) (CL:CONS (CL:CONS 'CHARACTER== (CL:CONS '~G1522 (CL:CONS #\{ CL:NIL))) (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'CURLY-BRACKET-OPEN CL:NIL)) (CL:CONS (CL:CONS 'CHARACTER== (CL:CONS '~G1522 (CL:CONS #\} CL:NIL))) (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'CURLY-BRACKET-CLOSE CL:NIL)) (CL:CONS (CL:CONS 'CHARACTER== (CL:CONS '~G1522 (CL:CONS #\' CL:NIL))) (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'CL:QUOTE CL:NIL)) (CL:CONS (CL:CONS 'CHARACTER== (CL:CONS '~G1522 (CL:CONS #\` CL:NIL))) (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'BACKQUOTE CL:NIL)) (CL:CONS (CL:CONS 'CHARACTER== (CL:CONS '~G1522 (CL:CONS #\^ CL:NIL))) (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'ACCENT-CIRCONFLEX CL:NIL)) (CL:CONS (CL:CONS 'CHARACTER== (CL:CONS '~G1522 (CL:CONS #\" CL:NIL))) (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'DBLQUOTE CL:NIL)) (CL:CONS (CL:CONS 'CHARACTER== (CL:CONS '~G1522 (CL:CONS #\, CL:NIL))) (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS '== (CL:CONS #\@ (CL:CONS (CL:CONS 'PEEK-CHAR (CL:CONS 'STR CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'READ-CHAR (CL:CONS 'STR CL:NIL)) (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'QUASIQUOTE-SPLICE CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'QUASIQUOTE CL:NIL)) CL:NIL)))) (CL:CONS (CL:CONS 'CHARACTER== (CL:CONS '~G1522 (CL:CONS #\# CL:NIL))) (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1521 CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'CHARACTER== (CL:CONS '~G1521 (CL:CONS #\\ CL:NIL))) (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'CHAR CL:NIL)) (CL:CONS (CL:CONS 'CHARACTER== (CL:CONS '~G1521 (CL:CONS #\x CL:NIL))) (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'HEXNUM CL:NIL)) (CL:CONS (CL:CONS 'CHARACTER== (CL:CONS '~G1521 (CL:CONS #\' CL:NIL))) (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'CL:FUNCTION CL:NIL)) (CL:CONS (CL:CONS 'CHARACTER== (CL:CONS '~G1521 (CL:CONS #\| CL:NIL))) (CL:CONS (CL:CONS 'READ-COMMENT-BLOCK (CL:CONS 'STR CL:NIL)) (CL:CONS (CL:CONS 'ERROR (CL:CONS "Invalid character after '#'." CL:NIL)) CL:NIL)))))))))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'READ-CHAR (CL:CONS 'STR CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'CHARACTER== (CL:CONS '~G1522 (CL:CONS -1 CL:NIL))) (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'EOF CL:NIL)) CL:NIL))))))))))))))))))))))))))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'READ-CHAR (CL:CONS 'STR CL:NIL)) CL:NIL)) CL:NIL)))) CL:NIL)))) (CL:CONS 'PKG (CL:CONS 'SYM CL:NIL)))) CL:NIL))) CL:NIL))) CL:NIL)))) CL:NIL)) CL:NIL))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'GET-SYMBOL-AND-PACKAGE (CL:CONS 'STR CL:NIL)) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'READ-TOKEN))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'READ-SLOT-VALUE (CL:CONS (CL:CONS 'X CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN READ-SLOT-VALUE (X) (CL:BLOCK READ-SLOT-VALUE (CL:BLOCK CL:NIL (? X (? (CL:CDR X) (CL:CONS 'SLOT-VALUE (CL:CONS (READ-SLOT-VALUE (BUTLAST X)) (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS (MAKE-SYMBOL (CL:CAR (CL:LAST X))) CL:NIL)) CL:NIL))) (? (STRING? (CL:CAR X)) (MAKE-SYMBOL (CL:CAR X)) (CL:CAR X))))))) (CL:SETF (CL:GETHASH #'READ-SLOT-VALUE *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'READ-SLOT-VALUE (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS '? (CL:CONS 'X (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'CL:CDR (CL:CONS 'X CL:NIL)) (CL:CONS (CL:CONS 'BACKQUOTE (CL:CONS (CL:CONS 'SLOT-VALUE (CL:CONS (CL:CONS 'QUASIQUOTE (CL:CONS (CL:CONS 'READ-SLOT-VALUE (CL:CONS (CL:CONS 'BUTLAST (CL:CONS 'X CL:NIL)) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS (CL:CONS 'QUASIQUOTE (CL:CONS (CL:CONS 'MAKE-SYMBOL (CL:CONS (CL:CONS 'CL:CAR (CL:CONS (CL:CONS 'CL:LAST (CL:CONS 'X CL:NIL)) CL:NIL)) CL:NIL)) CL:NIL)) CL:NIL)) CL:NIL))) CL:NIL)) (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'STRING? (CL:CONS (CL:CONS 'CL:CAR (CL:CONS 'X CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'MAKE-SYMBOL (CL:CONS (CL:CONS 'CL:CAR (CL:CONS 'X CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'CL:CAR (CL:CONS 'X CL:NIL)) CL:NIL)))) CL:NIL)))) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'READ-SLOT-VALUE))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'READ-SYMBOL-OR-SLOT-VALUE (CL:CONS (CL:CONS 'SYM (CL:CONS 'PKG CL:NIL)) CL:NIL)))) (CL:PROGN (CL:DEFUN READ-SYMBOL-OR-SLOT-VALUE (SYM PKG) (CL:BLOCK READ-SYMBOL-OR-SLOT-VALUE (CL:BLOCK CL:NIL (CL:LABELS ((G3782 (!) (? (? (CL:CDR !) (? (CL:CAR !) (CL:CAR (CL:LAST !)))) (READ-SLOT-VALUE !) (MAKE-SYMBOL (LIST-STRING SYM) (? (NOT PKG) CL:NIL (EQ CL:T PKG) *KEYWORD-PACKAGE* (CL:FIND-PACKAGE (LIST-STRING PKG))))))) (G3782 (CL:MAPCAR #'(CL:LAMBDA (_) (? _ (LIST-STRING _))) (SPLIT #\. SYM))))))) (CL:SETF (CL:GETHASH #'READ-SYMBOL-OR-SLOT-VALUE *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'SYM (CL:CONS 'PKG CL:NIL)) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'READ-SYMBOL-OR-SLOT-VALUE (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '! CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'CL:CDR (CL:CONS '! CL:NIL)) (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'CL:CAR (CL:CONS '! CL:NIL)) (CL:CONS (CL:CONS 'CL:CAR (CL:CONS (CL:CONS 'CL:LAST (CL:CONS '! CL:NIL)) CL:NIL)) CL:NIL))) CL:NIL))) (CL:CONS (CL:CONS 'READ-SLOT-VALUE (CL:CONS '! CL:NIL)) (CL:CONS (CL:CONS 'MAKE-SYMBOL (CL:CONS (CL:CONS 'LIST-STRING (CL:CONS 'SYM CL:NIL)) (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'NOT (CL:CONS 'PKG CL:NIL)) (CL:CONS CL:NIL (CL:CONS (CL:CONS 'EQ (CL:CONS CL:T (CL:CONS 'PKG CL:NIL))) (CL:CONS '*KEYWORD-PACKAGE* (CL:CONS (CL:CONS 'CL:FIND-PACKAGE (CL:CONS (CL:CONS 'LIST-STRING (CL:CONS 'PKG CL:NIL)) CL:NIL)) CL:NIL)))))) CL:NIL))) CL:NIL)))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'CL:MAPCAR (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '_ CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS '_ (CL:CONS (CL:CONS 'LIST-STRING (CL:CONS '_ CL:NIL)) CL:NIL))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'SPLIT (CL:CONS #\. (CL:CONS 'SYM CL:NIL))) CL:NIL))) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'READ-SYMBOL-OR-SLOT-VALUE))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'READ-ATOM (CL:CONS (CL:CONS 'STR (CL:CONS 'TOKEN (CL:CONS 'PKG (CL:CONS 'SYM CL:NIL)))) CL:NIL)))) (CL:PROGN (CL:DEFUN READ-ATOM (STR TOKEN PKG SYM) (CL:BLOCK READ-ATOM (CL:BLOCK CL:NIL (CL:LABELS ((G3783 (~G1523) (? (EQ ~G1523 'DBLQUOTE) (READ-STRING STR) (EQ ~G1523 'CHAR) (READ-CHAR STR) (EQ ~G1523 'NUMBER) (CL:LABELS ((G3784 (S) (PRINC (LIST-STRING SYM) S) (CL:PROGN (READ-NUMBER S)))) (G3784 (MAKE-STRING-STREAM))) (EQ ~G1523 'HEXNUM) (READ-HEX STR) (EQ ~G1523 'CL:FUNCTION) (CL:CONS 'CL:FUNCTION (CL:CONS (READ-EXPR STR) CL:NIL)) (EQ ~G1523 'SYMBOL) (READ-SYMBOL-OR-SLOT-VALUE SYM PKG) (ERROR "Syntax error: token ~A, sym ~A." TOKEN SYM)))) (G3783 TOKEN))))) (CL:SETF (CL:GETHASH #'READ-ATOM *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'STR (CL:CONS 'TOKEN (CL:CONS 'PKG (CL:CONS 'SYM CL:NIL)))) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'READ-ATOM (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1523 CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'EQ (CL:CONS '~G1523 (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'DBLQUOTE CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'READ-STRING (CL:CONS 'STR CL:NIL)) (CL:CONS (CL:CONS 'EQ (CL:CONS '~G1523 (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'CHAR CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'READ-CHAR (CL:CONS 'STR CL:NIL)) (CL:CONS (CL:CONS 'EQ (CL:CONS '~G1523 (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'NUMBER CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS 'S CL:NIL) (CL:CONS (CL:CONS 'PRINC (CL:CONS (CL:CONS 'LIST-STRING (CL:CONS 'SYM CL:NIL)) (CL:CONS 'S CL:NIL))) (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS 'READ-NUMBER (CL:CONS 'S CL:NIL)) CL:NIL)) CL:NIL))) CL:NIL)) (CL:CONS (CL:CONS 'MAKE-STRING-STREAM CL:NIL) CL:NIL)) (CL:CONS (CL:CONS 'EQ (CL:CONS '~G1523 (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'HEXNUM CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'READ-HEX (CL:CONS 'STR CL:NIL)) (CL:CONS (CL:CONS 'EQ (CL:CONS '~G1523 (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'CL:FUNCTION CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'BACKQUOTE (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS 'QUASIQUOTE (CL:CONS (CL:CONS 'READ-EXPR (CL:CONS 'STR CL:NIL)) CL:NIL)) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'EQ (CL:CONS '~G1523 (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'SYMBOL CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'READ-SYMBOL-OR-SLOT-VALUE (CL:CONS 'SYM (CL:CONS 'PKG CL:NIL))) (CL:CONS (CL:CONS 'ERROR (CL:CONS "Syntax error: token ~A, sym ~A." (CL:CONS 'TOKEN (CL:CONS 'SYM CL:NIL)))) CL:NIL)))))))))))))) CL:NIL)) CL:NIL)) (CL:CONS 'TOKEN CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'READ-ATOM))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'READ-QUOTE (CL:CONS (CL:CONS 'STR (CL:CONS 'TOKEN CL:NIL)) CL:NIL)))) (CL:PROGN (CL:DEFUN READ-QUOTE (STR TOKEN) (CL:BLOCK READ-QUOTE (CL:BLOCK CL:NIL (CL:LIST TOKEN (READ-EXPR STR))))) (CL:SETF (CL:GETHASH #'READ-QUOTE *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'STR (CL:CONS 'TOKEN CL:NIL)) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'READ-QUOTE (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'CL:LIST (CL:CONS 'TOKEN (CL:CONS (CL:CONS 'READ-EXPR (CL:CONS 'STR CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'READ-QUOTE))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'READ-SET-LISTPROP (CL:CONS (CL:CONS 'STR CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN READ-SET-LISTPROP (STR) (CL:BLOCK READ-SET-LISTPROP (CL:BLOCK CL:NIL (CL:LABELS ((G3785 (!) (CL:PROGN (CL:SETQ *DEFAULT-LISTPROP* (CL:CONS (STREAM-LOCATION-ID !) (CL:CONS (MEMORIZED-NUMBER (STREAM-LOCATION-COLUMN !)) (MEMORIZED-NUMBER (STREAM-LOCATION-LINE !)))))))) (G3785 (STREAM-INPUT-LOCATION STR)))))) (CL:SETF (CL:GETHASH #'READ-SET-LISTPROP *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'STR CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'READ-SET-LISTPROP (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '! CL:NIL) (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS 'CL:SETQ (CL:CONS '*DEFAULT-LISTPROP* (CL:CONS (CL:CONS 'CL:CONS (CL:CONS (CL:CONS 'STREAM-LOCATION-ID (CL:CONS '! CL:NIL)) (CL:CONS (CL:CONS 'CL:CONS (CL:CONS (CL:CONS 'MEMORIZED-NUMBER (CL:CONS (CL:CONS 'STREAM-LOCATION-COLUMN (CL:CONS '! CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'MEMORIZED-NUMBER (CL:CONS (CL:CONS 'STREAM-LOCATION-LINE (CL:CONS '! CL:NIL)) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL)) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'STREAM-INPUT-LOCATION (CL:CONS 'STR CL:NIL)) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'READ-SET-LISTPROP))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'READ-CONS (CL:CONS (CL:CONS 'STR CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN READ-CONS (STR) (CL:BLOCK READ-CONS (CL:BLOCK CL:NIL (CL:LABELS ((G3786 (LOC) (CL:LABELS ((G3787 (LINE) (CL:LABELS ((G3788 (COLUMN) (CL:LABELS ((G3789 (FILE) (CL:LABELS ((ERR (_) (ERROR "~A in form starting at line ~A, column ~A in file ~A." _ LINE COLUMN FILE)) (F (TOKEN PKG SYM) (? (NOT (%READ-CLOSING-BRACKET? TOKEN)) (CL:PROGN (CL:CONS (CL:LABELS ((G3790 (~G1525) (CL:PROGN (CL:SETQ *DEFAULT-LISTPROP* *DEFAULT-LISTPROP*)) (CL:LABELS ((G3791 (~G1528) (CL:PROGN (CL:SETQ *DEFAULT-LISTPROP* ~G1525)) ~G1528)) (G3791 (CL:PROGN (CL:LABELS ((G3792 (~G1524) (? (EQ ~G1524 'BRACKET-OPEN) (READ-CONS-SLOT STR) (EQ ~G1524 'SQUARE-BRACKET-OPEN) (CL:CONS 'SQUARE (READ-CONS-SLOT STR)) (EQ ~G1524 'CURLY-BRACKET-OPEN) (CL:CONS 'CURLY (READ-CONS-SLOT STR)) (? (TOKEN-IS-QUOTE? TOKEN) (READ-QUOTE STR TOKEN) (READ-ATOM STR TOKEN PKG SYM))))) (G3792 TOKEN))))))) (G3790 *DEFAULT-LISTPROP*)) (CL:LABELS ((G3793 (~G1527) (CL:PROGN (CL:SETQ *DEFAULT-LISTPROP* *DEFAULT-LISTPROP*)) (CL:LABELS ((G3794 (~G1534) (CL:PROGN (CL:SETQ *DEFAULT-LISTPROP* ~G1527)) ~G1534)) (G3794 (CL:PROGN (CL:LABELS ((G3795 (!) (? ! (CL:LABELS ((G3796 (~G1529) (CL:LABELS ((G3797 (~G1530) (? (NOT (EQ (CL:CAR ~G1529) 'VALUES)) (CL:PROGN (ERROR "VALUES expected instead of ~A." ~G1529))) (CL:LABELS ((G3798 (TOKEN) (CL:LABELS ((G3799 (~G1531) (CL:LABELS ((G3800 (PKG) (CL:LABELS ((G3801 (~G1532) (CL:LABELS ((G3802 (SYM) (? (EQ 'DOT TOKEN) (CL:LABELS ((G3803 (X) (CL:LABELS ((G3804 (~G1537) (CL:LABELS ((G3805 (~G1538) (? (NOT (EQ (CL:CAR ~G1537) 'VALUES)) (CL:PROGN (ERROR "VALUES expected instead of ~A." ~G1537))) (CL:LABELS ((G3806 (TOKEN) (CL:LABELS ((G3807 (~G1539) (CL:LABELS ((G3808 (PKG) (CL:LABELS ((G3809 (~G1540) (CL:LABELS ((G3810 (SYM) (CL:LABELS ((G3811 (~G1526) (? ~G1526 ~G1526 (ERR "Only one value allowed after dotted cons")))) (G3811 (%READ-CLOSING-BRACKET? TOKEN))) X)) (G3810 (CL:CAR ~G1540))))) (G3809 (CL:LABELS ((G3812 (~G1543) (? ~G1543 ~G1543 (%ERROR "Not enough VALUES.")))) (G3812 (CL:CDR ~G1539))))))) (G3808 (CL:CAR ~G1539))))) (G3807 (CL:LABELS ((G3813 (~G1542) (? ~G1542 ~G1542 (%ERROR "Not enough VALUES.")))) (G3813 (CL:CDR ~G1538))))))) (G3806 (CL:CAR ~G1538))))) (G3805 (CL:CDR ~G1537))))) (G3804 (READ-TOKEN STR))))) (G3803 (READ-EXPR STR))) (F TOKEN PKG SYM)))) (G3802 (CL:CAR ~G1532))))) (G3801 (CL:LABELS ((G3814 (~G1536) (? ~G1536 ~G1536 (%ERROR "Not enough VALUES.")))) (G3814 (CL:CDR ~G1531))))))) (G3800 (CL:CAR ~G1531))))) (G3799 (CL:LABELS ((G3815 (~G1535) (? ~G1535 ~G1535 (%ERROR "Not enough VALUES.")))) (G3815 (CL:CDR ~G1530))))))) (G3798 (CL:CAR ~G1530))))) (G3797 (CL:CDR ~G1529))))) (G3796 !)) (ERR "Missing closing bracket")))) (G3795 (READ-TOKEN STR)))))))) (G3793 *DEFAULT-LISTPROP*))))))) (CL:LABELS ((G3816 (~G1570) (CL:LABELS ((G3817 (~G1571) (? (NOT (EQ (CL:CAR ~G1570) 'VALUES)) (CL:PROGN (ERROR "VALUES expected instead of ~A." ~G1570))) (CL:LABELS ((G3818 (TOKEN) (CL:LABELS ((G3819 (~G1572) (CL:LABELS ((G3820 (PKG) (CL:LABELS ((G3821 (~G1573) (CL:LABELS ((G3822 (SYM) (? (EQ TOKEN 'DOT) (CL:CONS 'CL:CONS (READ-CONS STR)) (F TOKEN PKG SYM)))) (G3822 (CL:CAR ~G1573))))) (G3821 (CL:LABELS ((G3823 (~G1589) (? ~G1589 ~G1589 (%ERROR "Not enough VALUES.")))) (G3823 (CL:CDR ~G1572))))))) (G3820 (CL:CAR ~G1572))))) (G3819 (CL:LABELS ((G3824 (~G1588) (? ~G1588 ~G1588 (%ERROR "Not enough VALUES.")))) (G3824 (CL:CDR ~G1571))))))) (G3818 (CL:CAR ~G1571))))) (G3817 (CL:CDR ~G1570))))) (G3816 (READ-TOKEN STR)))))) (G3789 (STREAM-LOCATION-ID LOC))))) (G3788 (STREAM-LOCATION-COLUMN LOC))))) (G3787 (STREAM-LOCATION-LINE LOC))))) (G3786 (STREAM-INPUT-LOCATION STR)))))) (CL:SETF (CL:GETHASH #'READ-CONS *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'STR CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'READ-CONS (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS 'LOC CL:NIL) (CL:CONS (CL:CONS 'LET (CL:CONS 'LINE (CL:CONS (CL:CONS 'STREAM-LOCATION-LINE (CL:CONS 'LOC CL:NIL)) (CL:CONS (CL:CONS 'WITH (CL:CONS (CL:CONS 'COLUMN (CL:CONS (CL:CONS 'STREAM-LOCATION-COLUMN (CL:CONS 'LOC CL:NIL)) (CL:CONS 'FILE (CL:CONS (CL:CONS 'STREAM-LOCATION-ID (CL:CONS 'LOC CL:NIL)) (CL:CONS 'ERR (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '_ CL:NIL) (CL:CONS (CL:CONS 'ERROR (CL:CONS "~A in form starting at line ~A, column ~A in file ~A." (CL:CONS '_ (CL:CONS 'LINE (CL:CONS 'COLUMN (CL:CONS 'FILE CL:NIL)))))) CL:NIL)) CL:NIL)) (CL:CONS 'F (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS 'TOKEN (CL:CONS 'PKG (CL:CONS 'SYM CL:NIL))) (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'NOT (CL:CONS (CL:CONS '%READ-CLOSING-BRACKET? (CL:CONS 'TOKEN CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS 'CL:CONS (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1525 CL:NIL) (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS 'CL:SETQ (CL:CONS '*DEFAULT-LISTPROP* (CL:CONS '*DEFAULT-LISTPROP* CL:NIL))) CL:NIL)) (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1528 CL:NIL) (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS 'CL:SETQ (CL:CONS '*DEFAULT-LISTPROP* (CL:CONS '~G1525 CL:NIL))) CL:NIL)) (CL:CONS '~G1528 CL:NIL))) CL:NIL)) (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1524 CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'EQ (CL:CONS '~G1524 (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'BRACKET-OPEN CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'READ-CONS-SLOT (CL:CONS 'STR CL:NIL)) (CL:CONS (CL:CONS 'EQ (CL:CONS '~G1524 (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'SQUARE-BRACKET-OPEN CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'CL:CONS (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'SQUARE CL:NIL)) (CL:CONS (CL:CONS 'READ-CONS-SLOT (CL:CONS 'STR CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'EQ (CL:CONS '~G1524 (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'CURLY-BRACKET-OPEN CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'CL:CONS (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'CURLY CL:NIL)) (CL:CONS (CL:CONS 'READ-CONS-SLOT (CL:CONS 'STR CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'TOKEN-IS-QUOTE? (CL:CONS 'TOKEN CL:NIL)) (CL:CONS (CL:CONS 'READ-QUOTE (CL:CONS 'STR (CL:CONS 'TOKEN CL:NIL))) (CL:CONS (CL:CONS 'READ-ATOM (CL:CONS 'STR (CL:CONS 'TOKEN (CL:CONS 'PKG (CL:CONS 'SYM CL:NIL))))) CL:NIL)))) CL:NIL)))))))) CL:NIL)) CL:NIL)) (CL:CONS 'TOKEN CL:NIL)) CL:NIL)) CL:NIL)) CL:NIL))) CL:NIL)) (CL:CONS '*DEFAULT-LISTPROP* CL:NIL)) (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1527 CL:NIL) (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS 'CL:SETQ (CL:CONS '*DEFAULT-LISTPROP* (CL:CONS '*DEFAULT-LISTPROP* CL:NIL))) CL:NIL)) (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1534 CL:NIL) (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS 'CL:SETQ (CL:CONS '*DEFAULT-LISTPROP* (CL:CONS '~G1527 CL:NIL))) CL:NIL)) (CL:CONS '~G1534 CL:NIL))) CL:NIL)) (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '! CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS '! (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1529 CL:NIL) (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1530 CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'NOT (CL:CONS (CL:CONS 'EQ (CL:CONS (CL:CONS 'CL:CAR (CL:CONS '~G1529 CL:NIL)) (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'VALUES CL:NIL)) CL:NIL))) CL:NIL)) (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS 'ERROR (CL:CONS "VALUES expected instead of ~A." (CL:CONS '~G1529 CL:NIL))) CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS 'TOKEN CL:NIL) (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1531 CL:NIL) (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS 'PKG CL:NIL) (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1532 CL:NIL) (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS 'SYM CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'EQ (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'DOT CL:NIL)) (CL:CONS 'TOKEN CL:NIL))) (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS 'X CL:NIL) (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1537 CL:NIL) (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1538 CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'NOT (CL:CONS (CL:CONS 'EQ (CL:CONS (CL:CONS 'CL:CAR (CL:CONS '~G1537 CL:NIL)) (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'VALUES CL:NIL)) CL:NIL))) CL:NIL)) (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS 'ERROR (CL:CONS "VALUES expected instead of ~A." (CL:CONS '~G1537 CL:NIL))) CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS 'TOKEN CL:NIL) (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1539 CL:NIL) (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS 'PKG CL:NIL) (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1540 CL:NIL) (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS 'SYM CL:NIL) (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1526 CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS '~G1526 (CL:CONS '~G1526 (CL:CONS (CL:CONS 'ERR (CL:CONS "Only one value allowed after dotted cons" CL:NIL)) CL:NIL)))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS '%READ-CLOSING-BRACKET? (CL:CONS 'TOKEN CL:NIL)) CL:NIL)) (CL:CONS 'X CL:NIL))) CL:NIL)) (CL:CONS (CL:CONS 'CL:CAR (CL:CONS '~G1540 CL:NIL)) CL:NIL)) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1543 CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS '~G1543 (CL:CONS '~G1543 (CL:CONS (CL:CONS '%ERROR (CL:CONS "Not enough VALUES." CL:NIL)) CL:NIL)))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'CL:CDR (CL:CONS '~G1539 CL:NIL)) CL:NIL)) CL:NIL)) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'CL:CAR (CL:CONS '~G1539 CL:NIL)) CL:NIL)) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1542 CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS '~G1542 (CL:CONS '~G1542 (CL:CONS (CL:CONS '%ERROR (CL:CONS "Not enough VALUES." CL:NIL)) CL:NIL)))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'CL:CDR (CL:CONS '~G1538 CL:NIL)) CL:NIL)) CL:NIL)) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'CL:CAR (CL:CONS '~G1538 CL:NIL)) CL:NIL)) CL:NIL))) CL:NIL)) (CL:CONS (CL:CONS 'CL:CDR (CL:CONS '~G1537 CL:NIL)) CL:NIL)) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'READ-TOKEN (CL:CONS 'STR CL:NIL)) CL:NIL)) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'READ-EXPR (CL:CONS 'STR CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'F (CL:CONS 'TOKEN (CL:CONS 'PKG (CL:CONS 'SYM CL:NIL)))) CL:NIL)))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'CL:CAR (CL:CONS '~G1532 CL:NIL)) CL:NIL)) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1536 CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS '~G1536 (CL:CONS '~G1536 (CL:CONS (CL:CONS '%ERROR (CL:CONS "Not enough VALUES." CL:NIL)) CL:NIL)))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'CL:CDR (CL:CONS '~G1531 CL:NIL)) CL:NIL)) CL:NIL)) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'CL:CAR (CL:CONS '~G1531 CL:NIL)) CL:NIL)) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1535 CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS '~G1535 (CL:CONS '~G1535 (CL:CONS (CL:CONS '%ERROR (CL:CONS "Not enough VALUES." CL:NIL)) CL:NIL)))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'CL:CDR (CL:CONS '~G1530 CL:NIL)) CL:NIL)) CL:NIL)) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'CL:CAR (CL:CONS '~G1530 CL:NIL)) CL:NIL)) CL:NIL))) CL:NIL)) (CL:CONS (CL:CONS 'CL:CDR (CL:CONS '~G1529 CL:NIL)) CL:NIL)) CL:NIL)) CL:NIL)) (CL:CONS '! CL:NIL)) (CL:CONS (CL:CONS 'ERR (CL:CONS "Missing closing bracket" CL:NIL)) CL:NIL)))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'READ-TOKEN (CL:CONS 'STR CL:NIL)) CL:NIL)) CL:NIL)) CL:NIL)) CL:NIL))) CL:NIL)) (CL:CONS '*DEFAULT-LISTPROP* CL:NIL)) CL:NIL))) CL:NIL)) CL:NIL))) CL:NIL)) CL:NIL)) CL:NIL)))))))) (CL:CONS (CL:CONS 'LET* (CL:CONS (CL:CONS (CL:CONS '~G1570 (CL:CONS (CL:CONS 'READ-TOKEN (CL:CONS 'STR CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS '~G1571 (CL:CONS (CL:CONS 'CL:CDR (CL:CONS '~G1570 CL:NIL)) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'UNLESS (CL:CONS (CL:CONS 'EQ (CL:CONS (CL:CONS 'CL:CAR (CL:CONS '~G1570 CL:NIL)) (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'VALUES CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'ERROR (CL:CONS "VALUES expected instead of ~A." (CL:CONS '~G1570 CL:NIL))) CL:NIL))) (CL:CONS (CL:CONS 'LET* (CL:CONS (CL:CONS (CL:CONS 'TOKEN (CL:CONS (CL:CONS 'CL:CAR (CL:CONS '~G1571 CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS '~G1572 (CL:CONS (CL:CONS '|\|| (CL:CONS (CL:CONS 'CL:CDR (CL:CONS '~G1571 CL:NIL)) (CL:CONS (CL:CONS '%ERROR (CL:CONS "Not enough VALUES." CL:NIL)) CL:NIL))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'LET* (CL:CONS (CL:CONS (CL:CONS 'PKG (CL:CONS (CL:CONS 'CL:CAR (CL:CONS '~G1572 CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS '~G1573 (CL:CONS (CL:CONS '|\|| (CL:CONS (CL:CONS 'CL:CDR (CL:CONS '~G1572 CL:NIL)) (CL:CONS (CL:CONS '%ERROR (CL:CONS "Not enough VALUES." CL:NIL)) CL:NIL))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'LET* (CL:CONS (CL:CONS (CL:CONS 'SYM (CL:CONS (CL:CONS 'CL:CAR (CL:CONS '~G1573 CL:NIL)) CL:NIL)) CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'EQ (CL:CONS 'TOKEN (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'DOT CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'CL:CONS (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'CL:CONS CL:NIL)) (CL:CONS (CL:CONS 'READ-CONS (CL:CONS 'STR CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'F (CL:CONS 'TOKEN (CL:CONS 'PKG (CL:CONS 'SYM CL:NIL)))) CL:NIL)))) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL)))) CL:NIL))) CL:NIL)))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'STREAM-INPUT-LOCATION (CL:CONS 'STR CL:NIL)) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'READ-CONS))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'READ-CONS-SLOT (CL:CONS (CL:CONS 'STR CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN READ-CONS-SLOT (STR) (CL:BLOCK READ-CONS-SLOT (CL:BLOCK CL:NIL (READ-SET-LISTPROP STR) (CL:LABELS ((G3825 (~G1544) (CL:PROGN (CL:SETQ *DEFAULT-LISTPROP* *DEFAULT-LISTPROP*)) (CL:LABELS ((G3826 (~G1580) (CL:PROGN (CL:SETQ *DEFAULT-LISTPROP* ~G1544)) ~G1580)) (G3826 (CL:PROGN (CL:LABELS ((G3827 (!) (? (== #\. (PEEK-CHAR STR)) (CL:PROGN (READ-CHAR STR) (CL:LABELS ((G3828 (~G1575) (CL:LABELS ((G3829 (~G1576) (? (NOT (EQ (CL:CAR ~G1575) 'VALUES)) (CL:PROGN (ERROR "VALUES expected instead of ~A." ~G1575))) (CL:LABELS ((G3830 (TOKEN) (CL:LABELS ((G3831 (~G1577) (CL:LABELS ((G3832 (PKG) (CL:LABELS ((G3833 (~G1578) (CL:LABELS ((G3834 (SYM) (READ-SLOT-VALUE (CL:LIST ! (LIST-STRING SYM))))) (G3834 (CL:CAR ~G1578))))) (G3833 (CL:LABELS ((G3835 (~G1591) (? ~G1591 ~G1591 (%ERROR "Not enough VALUES.")))) (G3835 (CL:CDR ~G1577))))))) (G3832 (CL:CAR ~G1577))))) (G3831 (CL:LABELS ((G3836 (~G1590) (? ~G1590 ~G1590 (%ERROR "Not enough VALUES.")))) (G3836 (CL:CDR ~G1576))))))) (G3830 (CL:CAR ~G1576))))) (G3829 (CL:CDR ~G1575))))) (G3828 (READ-TOKEN STR)))) !))) (G3827 (READ-CONS STR)))))))) (G3825 *DEFAULT-LISTPROP*))))) (CL:SETF (CL:GETHASH #'READ-CONS-SLOT *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'STR CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'READ-CONS-SLOT (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'READ-SET-LISTPROP (CL:CONS 'STR CL:NIL)) (CL:CONS (CL:CONS 'LET (CL:CONS '~G1544 (CL:CONS '*DEFAULT-LISTPROP* (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS 'CL:SETQ (CL:CONS '*DEFAULT-LISTPROP* (CL:CONS '*DEFAULT-LISTPROP* CL:NIL))) CL:NIL)) (CL:CONS (CL:CONS 'LET (CL:CONS '~G1580 (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '! CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS '== (CL:CONS #\. (CL:CONS (CL:CONS 'PEEK-CHAR (CL:CONS 'STR CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS 'READ-CHAR (CL:CONS 'STR CL:NIL)) (CL:CONS (CL:CONS 'LET* (CL:CONS (CL:CONS (CL:CONS '~G1575 (CL:CONS (CL:CONS 'READ-TOKEN (CL:CONS 'STR CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS '~G1576 (CL:CONS (CL:CONS 'CL:CDR (CL:CONS '~G1575 CL:NIL)) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'UNLESS (CL:CONS (CL:CONS 'EQ (CL:CONS (CL:CONS 'CL:CAR (CL:CONS '~G1575 CL:NIL)) (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'VALUES CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'ERROR (CL:CONS "VALUES expected instead of ~A." (CL:CONS '~G1575 CL:NIL))) CL:NIL))) (CL:CONS (CL:CONS 'LET* (CL:CONS (CL:CONS (CL:CONS 'TOKEN (CL:CONS (CL:CONS 'CL:CAR (CL:CONS '~G1576 CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS '~G1577 (CL:CONS (CL:CONS '|\|| (CL:CONS (CL:CONS 'CL:CDR (CL:CONS '~G1576 CL:NIL)) (CL:CONS (CL:CONS '%ERROR (CL:CONS "Not enough VALUES." CL:NIL)) CL:NIL))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'LET* (CL:CONS (CL:CONS (CL:CONS 'PKG (CL:CONS (CL:CONS 'CL:CAR (CL:CONS '~G1577 CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS '~G1578 (CL:CONS (CL:CONS '|\|| (CL:CONS (CL:CONS 'CL:CDR (CL:CONS '~G1577 CL:NIL)) (CL:CONS (CL:CONS '%ERROR (CL:CONS "Not enough VALUES." CL:NIL)) CL:NIL))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'LET* (CL:CONS (CL:CONS (CL:CONS 'SYM (CL:CONS (CL:CONS 'CL:CAR (CL:CONS '~G1578 CL:NIL)) CL:NIL)) CL:NIL) (CL:CONS (CL:CONS 'READ-SLOT-VALUE (CL:CONS (CL:CONS 'CL:LIST (CL:CONS '! (CL:CONS (CL:CONS 'LIST-STRING (CL:CONS 'SYM CL:NIL)) CL:NIL))) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL)))) CL:NIL))) (CL:CONS '! CL:NIL)))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'READ-CONS (CL:CONS 'STR CL:NIL)) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS 'CL:SETQ (CL:CONS '*DEFAULT-LISTPROP* (CL:CONS '~G1544 CL:NIL))) CL:NIL)) (CL:CONS '~G1580 CL:NIL))))) CL:NIL))))) CL:NIL)))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'READ-CONS-SLOT))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'READ-EXPR (CL:CONS (CL:CONS 'STR CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN READ-EXPR (STR) (CL:BLOCK READ-EXPR (CL:BLOCK CL:NIL (CL:LABELS ((G3837 (~G1581) (CL:LABELS ((G3838 (~G1582) (? (NOT (EQ (CL:CAR ~G1581) 'VALUES)) (CL:PROGN (ERROR "VALUES expected instead of ~A." ~G1581))) (CL:LABELS ((G3839 (TOKEN) (CL:LABELS ((G3840 (~G1583) (CL:LABELS ((G3841 (PKG) (CL:LABELS ((G3842 (~G1584) (CL:LABELS ((G3843 (SYM) (CL:LABELS ((G3844 (~G1545) (? (EQ ~G1545 CL:NIL) CL:NIL (EQ ~G1545 'EOF) CL:NIL (EQ ~G1545 'BRACKET-OPEN) (READ-CONS-SLOT STR) (EQ ~G1545 'SQUARE-BRACKET-OPEN) (CL:CONS 'SQUARE (READ-CONS-SLOT STR)) (EQ ~G1545 'CURLY-BRACKET-OPEN) (CL:CONS 'CURLY (READ-CONS-SLOT STR)) (? (TOKEN-IS-QUOTE? TOKEN) (READ-QUOTE STR TOKEN) (READ-ATOM STR TOKEN PKG SYM))))) (G3844 TOKEN)))) (G3843 (CL:CAR ~G1584))))) (G3842 (CL:LABELS ((G3845 (~G1593) (? ~G1593 ~G1593 (%ERROR "Not enough VALUES.")))) (G3845 (CL:CDR ~G1583))))))) (G3841 (CL:CAR ~G1583))))) (G3840 (CL:LABELS ((G3846 (~G1592) (? ~G1592 ~G1592 (%ERROR "Not enough VALUES.")))) (G3846 (CL:CDR ~G1582))))))) (G3839 (CL:CAR ~G1582))))) (G3838 (CL:CDR ~G1581))))) (G3837 (READ-TOKEN STR)))))) (CL:SETF (CL:GETHASH #'READ-EXPR *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'STR CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'READ-EXPR (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'LET* (CL:CONS (CL:CONS (CL:CONS '~G1581 (CL:CONS (CL:CONS 'READ-TOKEN (CL:CONS 'STR CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS '~G1582 (CL:CONS (CL:CONS 'CL:CDR (CL:CONS '~G1581 CL:NIL)) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'UNLESS (CL:CONS (CL:CONS 'EQ (CL:CONS (CL:CONS 'CL:CAR (CL:CONS '~G1581 CL:NIL)) (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'VALUES CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'ERROR (CL:CONS "VALUES expected instead of ~A." (CL:CONS '~G1581 CL:NIL))) CL:NIL))) (CL:CONS (CL:CONS 'LET* (CL:CONS (CL:CONS (CL:CONS 'TOKEN (CL:CONS (CL:CONS 'CL:CAR (CL:CONS '~G1582 CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS '~G1583 (CL:CONS (CL:CONS '|\|| (CL:CONS (CL:CONS 'CL:CDR (CL:CONS '~G1582 CL:NIL)) (CL:CONS (CL:CONS '%ERROR (CL:CONS "Not enough VALUES." CL:NIL)) CL:NIL))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'LET* (CL:CONS (CL:CONS (CL:CONS 'PKG (CL:CONS (CL:CONS 'CL:CAR (CL:CONS '~G1583 CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS '~G1584 (CL:CONS (CL:CONS '|\|| (CL:CONS (CL:CONS 'CL:CDR (CL:CONS '~G1583 CL:NIL)) (CL:CONS (CL:CONS '%ERROR (CL:CONS "Not enough VALUES." CL:NIL)) CL:NIL))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'LET* (CL:CONS (CL:CONS (CL:CONS 'SYM (CL:CONS (CL:CONS 'CL:CAR (CL:CONS '~G1584 CL:NIL)) CL:NIL)) CL:NIL) (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '~G1545 CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'EQ (CL:CONS '~G1545 (CL:CONS CL:NIL CL:NIL))) (CL:CONS CL:NIL (CL:CONS (CL:CONS 'EQ (CL:CONS '~G1545 (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'EOF CL:NIL)) CL:NIL))) (CL:CONS CL:NIL (CL:CONS (CL:CONS 'EQ (CL:CONS '~G1545 (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'BRACKET-OPEN CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'READ-CONS-SLOT (CL:CONS 'STR CL:NIL)) (CL:CONS (CL:CONS 'EQ (CL:CONS '~G1545 (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'SQUARE-BRACKET-OPEN CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'CL:CONS (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'SQUARE CL:NIL)) (CL:CONS (CL:CONS 'READ-CONS-SLOT (CL:CONS 'STR CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'EQ (CL:CONS '~G1545 (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'CURLY-BRACKET-OPEN CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'CL:CONS (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'CURLY CL:NIL)) (CL:CONS (CL:CONS 'READ-CONS-SLOT (CL:CONS 'STR CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'TOKEN-IS-QUOTE? (CL:CONS 'TOKEN CL:NIL)) (CL:CONS (CL:CONS 'READ-QUOTE (CL:CONS 'STR (CL:CONS 'TOKEN CL:NIL))) (CL:CONS (CL:CONS 'READ-ATOM (CL:CONS 'STR (CL:CONS 'TOKEN (CL:CONS 'PKG (CL:CONS 'SYM CL:NIL))))) CL:NIL)))) CL:NIL)))))))))))) CL:NIL)) CL:NIL)) (CL:CONS 'TOKEN CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL)))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'READ-EXPR))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'READ (CL:CONS (CL:CONS 'CL:&OPTIONAL (CL:CONS (CL:CONS 'STR (CL:CONS '*STANDARD-INPUT* CL:NIL)) CL:NIL)) CL:NIL)))) (CL:PROGN (CL:DEFUN READ (CL:&OPTIONAL (STR *STANDARD-INPUT*)) (CL:BLOCK READ (CL:BLOCK CL:NIL (SKIP-SPACES STR) (? (PEEK-CHAR STR) (READ-EXPR STR))))) (CL:SETF (CL:GETHASH #'READ *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'CL:&OPTIONAL (CL:CONS (CL:CONS 'STR (CL:CONS '*STANDARD-INPUT* CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'READ (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'SKIP-SPACES (CL:CONS 'STR CL:NIL)) (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'PEEK-CHAR (CL:CONS 'STR CL:NIL)) (CL:CONS (CL:CONS 'READ-EXPR (CL:CONS 'STR CL:NIL)) CL:NIL))) CL:NIL)))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'READ))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS 'READ-ALL (CL:CONS (CL:CONS 'STR CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN READ-ALL (STR) (CL:BLOCK READ-ALL (CL:BLOCK CL:NIL (SKIP-SPACES STR) (? (PEEK-CHAR STR) (CL:CONS (READ STR) (READ-ALL STR)))))) (CL:SETF (CL:GETHASH #'READ-ALL *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'STR CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS 'READ-ALL (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'SKIP-SPACES (CL:CONS 'STR CL:NIL)) (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'PEEK-CHAR (CL:CONS 'STR CL:NIL)) (CL:CONS (CL:CONS 'CL:CONS (CL:CONS (CL:CONS 'READ (CL:CONS 'STR CL:NIL)) (CL:CONS (CL:CONS 'READ-ALL (CL:CONS 'STR CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL 'READ-ALL))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS '%LOAD-R (CL:CONS (CL:CONS 'S CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN %LOAD-R (S) (CL:BLOCK %LOAD-R (CL:BLOCK CL:NIL (? (PEEK-CHAR S) (CL:PROGN (CL:CONS (READ S) (%LOAD-R S))))))) (CL:SETF (CL:GETHASH #'%LOAD-R *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'S CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS '%LOAD-R (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'PEEK-CHAR (CL:CONS 'S CL:NIL)) (CL:CONS (CL:CONS 'CL:PROGN (CL:CONS (CL:CONS 'CL:CONS (CL:CONS (CL:CONS 'READ (CL:CONS 'S CL:NIL)) (CL:CONS (CL:CONS '%LOAD-R (CL:CONS 'S CL:NIL)) CL:NIL))) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL '%LOAD-R))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS '%EXPAND (CL:CONS (CL:CONS 'X CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN %EXPAND (X) (CL:BLOCK %EXPAND (CL:BLOCK CL:NIL (CL:LABELS ((G3847 (!) (? (EQUAL X !) X (%EXPAND !)))) (G3847 (QUASIQUOTE-EXPAND (MACROEXPAND (DOT-EXPAND X)))))))) (CL:SETF (CL:GETHASH #'%EXPAND *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'X CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS '%EXPAND (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS '! CL:NIL) (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'EQUAL (CL:CONS 'X (CL:CONS '! CL:NIL))) (CL:CONS 'X (CL:CONS (CL:CONS '%EXPAND (CL:CONS '! CL:NIL)) CL:NIL)))) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'QUASIQUOTE-EXPAND (CL:CONS (CL:CONS 'MACROEXPAND (CL:CONS (CL:CONS 'DOT-EXPAND (CL:CONS 'X CL:NIL)) CL:NIL)) CL:NIL)) CL:NIL)) CL:NIL))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL '%EXPAND))
(CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS 'DEFUN (CL:CONS '%LOAD (CL:CONS (CL:CONS 'PATHNAME CL:NIL) CL:NIL)))) (CL:PROGN (CL:DEFUN %LOAD (PATHNAME) (CL:BLOCK %LOAD (CL:BLOCK CL:NIL (PRINT-DEFINITION (CL:CONS '%LOAD (CL:CONS PATHNAME CL:NIL))) (CL:BLOCK CL:NIL (CL:LABELS ((G3848 (~G1596) (CL:LABELS ((G3849 (I) (CL:TAGBODY ~G1594 (? (NOT ~G1596) (CL:GO ~G1595)) (CL:SETQ I (CL:CAR ~G1596)) (%EVAL (%EXPAND I)) (CL:SETQ ~G1596 (CL:CDR ~G1596)) (CL:GO ~G1594) ~G1595 (CL:RETURN-FROM CL:NIL (CL:PROGN))))) (G3849 CL:NIL)))) (G3848 (CL:LABELS ((G3850 (S) (CL:LABELS ((G3851 (~G1597) (CLOSE S) ~G1597)) (G3851 (CL:PROGN (%LOAD-R S)))))) (G3850 (OPEN PATHNAME :DIRECTION 'INPUT))))))))) (CL:SETF (CL:GETHASH #'%LOAD *FUNCTION-ATOM-SOURCES*) (CL:CONS (CL:CONS 'PATHNAME CL:NIL) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS '%LOAD (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'PRINT-DEFINITION (CL:CONS (CL:CONS 'BACKQUOTE (CL:CONS (CL:CONS '%LOAD (CL:CONS (CL:CONS 'QUASIQUOTE (CL:CONS 'PATHNAME CL:NIL)) CL:NIL)) CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'CL:BLOCK (CL:CONS CL:NIL (CL:CONS (CL:CONS 'LET (CL:CONS '~G1596 (CL:CONS (CL:CONS 'WITH-OPEN-FILE (CL:CONS 'S (CL:CONS (CL:CONS 'OPEN (CL:CONS 'PATHNAME (CL:CONS ':DIRECTION (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS 'INPUT CL:NIL)) CL:NIL)))) (CL:CONS (CL:CONS '%LOAD-R (CL:CONS 'S CL:NIL)) CL:NIL)))) (CL:CONS (CL:CONS 'LET* (CL:CONS (CL:CONS (CL:CONS 'I (CL:CONS CL:NIL CL:NIL)) CL:NIL) (CL:CONS (CL:CONS 'CL:TAGBODY (CL:CONS '~G1594 (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'NOT (CL:CONS '~G1596 CL:NIL)) (CL:CONS (CL:CONS 'CL:GO (CL:CONS '~G1595 CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'CL:SETQ (CL:CONS 'I (CL:CONS (CL:CONS 'CL:CAR (CL:CONS '~G1596 CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS '%EVAL (CL:CONS (CL:CONS '%EXPAND (CL:CONS 'I CL:NIL)) CL:NIL)) (CL:CONS (CL:CONS 'CL:SETQ (CL:CONS '~G1596 (CL:CONS (CL:CONS 'CL:CDR (CL:CONS '~G1596 CL:NIL)) CL:NIL))) (CL:CONS (CL:CONS 'CL:GO (CL:CONS '~G1594 CL:NIL)) (CL:CONS '~G1595 (CL:CONS (CL:CONS 'CL:RETURN-FROM (CL:CONS CL:NIL (CL:CONS (CL:CONS 'CL:PROGN CL:NIL) CL:NIL))) CL:NIL))))))))) CL:NIL))) CL:NIL)))) CL:NIL))) CL:NIL)))) CL:NIL))) CL:NIL)))) (CL:RETURN-FROM CL:NIL '%LOAD))
