Test 1, APPLY one argument<br>
Test 2, APPLY many arguments<br>
Test 3, APPLY many arguments<br>
Test 4, EQ with symbols<br>
Test 5, EQL with symbols<br>
Test 6, EQL with numbers<br>
Test 7, BACKQUOTE<br>
Test 8, QUASIQUOTE<br>
Test 9, QUASIQUOTE-SPLICE<br>
Test 10, LIST? for cell<br>
Test 11, LIST? for NIL<br>
Test 12, LIST? fails with number<br>
Test 13, LIST? fails with symbol<br>
Test 14, COUNT<br>
Test 15, %SIMPLE-MAPCAR<br>
Test 16, ++<br>
Test 17, --<br>
Test 18, NOT works with NIL<br>
Test 19, NOT works with T<br>
Test 20, KEYWORDP recognizes keyword-packaged symbols<br>
Test 21, KEYWORDP works with standard symbols<br>
Test 22, CAR accepts NIL<br>
Test 23, CDR accepts NIL<br>
Test 24, RPLACA returns cons<br>
Test 25, RPLACD returns cons<br>
Test 26, ATOM recognizes atoms<br>
Test 27, ATOM fails on conses<br>
Test 28, CONS?<br>
Test 29, CONS? fails on atoms<br>
Test 30, CONS? fails on numbers<br>
Test 31, CONS? fails on characters<br>
Test 32, CONS? fails on strings<br>
Test 33, CONS? fails on arrays<br>
Test 34, SYMBOL?<br>
Test 35, SYMBOL? fails on cells<br>
Test 36, SYMBOL? fails on numbers<br>
Test 37, SYMBOL? fails on characters<br>
Test 38, SYMBOL? fails on strings<br>
Test 39, SYMBOL? fails on arrays<br>
Test 40, NUMBER? recognizes numbers<br>
Test 41, NUMBER? recognizes characters<br>
Test 42, NUMBER? fails on arrays<br>
Test 43, NUMBER? fails on symbols<br>
Test 44, CHARACTER? recognizes characters<br>
Test 45, CHARACTER? fails on symbols<br>
Test 46, CHARACTER? fails on cells<br>
Test 47, CHARACTER? fails on numbers<br>
Test 48, CHARACTER? fails on arrays<br>
Test 49, CHARACTER? fails on strings<br>
Test 50, EQL wants same type of numbers<br>
Test 51, FUNCTION? recognizes functions<br>
Test 52, FUNCTION? recognizes built-in functions<br>
Test 53, STRING? recognizes strings<br>
Test 54, STRING? fails on numbers<br>
Test 55, STRING? fails on symbols<br>
Test 56, CODE-CHAR converts number to char<br>
Test 57, CHAR-CODE converts char to number<br>
Test 58, SETQ returns the last value set<br>
Test 59, IDENTITY<br>
Test 60, LAST works<br>
Test 61, LAST returns NIL for empty list<br>
Test 62, == works with floats<br>
Test 63, == works with characters<br>
Test 64, 0 is a boolean T<br>
Test 65, ELT returns CHARACTER of STRING<br>
Test 66, NTHCDR works at the start<br>
Test 67, NTHCDR works in the middle<br>
Test 68, NTHCDR works at the end<br>
Test 69, NTHCDR works beyond the end<br>
Test 70, NOT 0 is NIL<br>
Test 71, LENGHT with conses<br>
Test 72, LENGHT with strings<br>
Test 73, CHARACTER- literal<br>
Test 74, CHARACTER+ literal<br>
Test 75, INTEGER- literal<br>
Test 76, INTEGER+ literal<br>
Test 77, + INTEGER and CHARACTER<br>
Test 78, INTEGER== to be T<br>
Test 79, INTEGER== to be NIL<br>
Test 80, INTEGER> to be T<br>
Test 81, INTEGER> to be NIL<br>
Test 82, INTEGER< to be T<br>
Test 83, INTEGER< to be NIL<br>
Test 84, EQUAL with CONS<br>
Test 85, EQUAL fails on different lists<br>
Test 86, NTHCDR basically works<br>
Test 87, ENQUEUE and QUEUE-LIST work<br>
Test 88, MEMBER finds elements<br>
Test 89, MEMBER finds elements with user predicate<br>
Test 90, MEMBER falsely detects foureign elements<br>
Test 91, can handle nested functions with double argument names<br>
Test 92, can handle nested functions with double argument names<br>
Test 93, can handle closures<br>
Test 94, LAMBDA? works<br>
Test 95, LAMBDA? works with LAMBDA<br>
Test 96, LAMBDA-CALL? works<br>
Test 97, $<br>
Test 98, REVERSE works<br>
Test 99, APPEND works with two lists<br>
Test 100, APPEND works with empty lists<br>
Test 101, APPEND works with three lists<br>
Test 102, APPEND copies last<br>
Test 103, NCONC works<br>
Test 104, NCONC works with empty lists<br>
Test 105, NCONC with NIL first<br>
Test 106, NCONC with NIL second<br>
Test 107, ADJOIN doesn't add known member<br>
Test 108, ADJOIN adds new member<br>
Test 109, BUTLAST basically works<br>
Test 110, BUTLAST returns NIL for single cons<br>
Test 111, COPY-WHILE<br>
Test 112, LIST-SUBSEQ work at the beginning<br>
Test 113, LIST-SUBSEQ works in the middle<br>
Test 114, LIST-SUBSEQ works at the end<br>
Test 115, SUBSEQ returns NIL when totally out of range<br>
Test 116, SUBSEQ returns empty string when start and end are the same<br>
Test 117, DIGIT-CHAR? #0<br>
Test 118, DIGIT-CHAR? #a<br>
Test 119, ELT on string returns char<br>
Test 120, ELT on string returns right char<br>
Test 121, STRING== works<br>
Test 122, LIST-STRING works<br>
Test 123, STRING-LIST works<br>
Test 124, UPCASE works<br>
Test 125, DOWNCASE works<br>
Test 126, FIND finds elements<br>
Test 127, FIND accepts :FROM-END<br>
Test 128, FIND accepts :END<br>
Test 129, FIND accepts :START<br>
Test 130, FIND accepts :START, :END, :FROM-END<br>
Test 131, FIND-IF finds elements<br>
Test 132, POSITION works with character list<br>
Test 133, POSITION works with strings<br>
Test 134, SOME works<br>
Test 135, EVERY works<br>
Test 136, argument expansion works with simple list<br>
Test 137, argument expansion works without :apply-values?<br>
Test 138, argument expansion can handle nested lists<br>
Test 139, argument expansion can handle nested lists without :apply-values?<br>
Test 140, argument expansion can handle &REST<br>
Test 141, argument expansion can handle &REST without :apply-values?<br>
Test 142, argument expansion can handle missing &REST<br>
Test 143, argument expansion can handle missing &REST without :apply-values?<br>
Test 144, argument expansion can handle &OPTIONAL<br>
Test 145, argument expansion can handle &OPTIONAL without :apply-values?<br>
Test 146, argument expansion can handle &OPTIONAL with init forms<br>
Test 147, argument expansion can handle &OPTIONAL with init forms without :apply-values?<br>
Test 148, argument expansion can handle &KEY<br>
Test 149, argument expansion can handle &KEY with overloaded init forms<br>
Test 150, argument expansion can handle &KEY without :apply-values?<br>
Test 151, argument expansion can handle &OPTIONAL and &KEY with init forms without :apply-values?<br>
Test 152, argument expansion can handle &OPTIONAL and &KEY with init forms with :apply-values?<br>
Test 153, COUNT-IF<br>
Test 154, SPLIT works on string<br>
Test 155, SPLIT works on string with gaps<br>
Test 156, TRIM-HEAD works<br>
Test 157, TRIM-TAIL works<br>
Test 158, TRIM works<br>
Test 159, EMPTY-STRING? works<br>
Tests done.((BLOCK BUTLAST (BLOCK NIL (? (CDR PLIST) (CONS (CAR PLIST) (BUTLAST (CDR PLIST)))))))
