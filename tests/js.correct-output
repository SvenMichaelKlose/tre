Test 1, APPLY one argument<br>
Test 2, APPLY many arguments<br>
Test 3, APPLY many arguments<br>
Test 4, EQ with symbols<br>
Test 5, EQ with three symbols<br>
Test 6, EQL with symbols<br>
Test 7, EQL with three symbols<br>
Test 8, EQL with numbers<br>
Test 9, BACKQUOTE<br>
Test 10, QUASIQUOTE<br>
Test 11, QUASIQUOTE-SPLICE<br>
Test 12, LIST? for cell<br>
Test 13, LIST? for NIL<br>
Test 14, LIST? fails with number<br>
Test 15, LIST? fails with symbol<br>
Test 16, COUNT<br>
Test 17, %SIMPLE-MAPCAR<br>
Test 18, ++<br>
Test 19, --<br>
Test 20, NOT works with NIL<br>
Test 21, NOT works with T<br>
Test 22, KEYWORDP recognizes keyword-packaged symbols<br>
Test 23, KEYWORDP works with standard symbols<br>
Test 24, CAR accepts NIL<br>
Test 25, CDR accepts NIL<br>
Test 26, RPLACA returns cons<br>
Test 27, RPLACD returns cons<br>
Test 28, ATOM recognizes atoms<br>
Test 29, ATOM fails on conses<br>
Test 30, CONS?<br>
Test 31, CONS? fails on atoms<br>
Test 32, CONS? fails on numbers<br>
Test 33, CONS? fails on characters<br>
Test 34, CONS? fails on strings<br>
Test 35, CONS? fails on arrays<br>
Test 36, SYMBOL?<br>
Test 37, SYMBOL? fails on cells<br>
Test 38, SYMBOL? fails on numbers<br>
Test 39, SYMBOL? fails on characters<br>
Test 40, SYMBOL? fails on strings<br>
Test 41, SYMBOL? fails on arrays<br>
Test 42, NUMBER? recognizes numbers<br>
Test 43, NUMBER? recognizes characters<br>
Test 44, NUMBER? fails on arrays<br>
Test 45, NUMBER? fails on symbols<br>
Test 46, CHARACTER? recognizes characters<br>
Test 47, CHARACTER? fails on symbols<br>
Test 48, CHARACTER? fails on cells<br>
Test 49, CHARACTER? fails on numbers<br>
Test 50, CHARACTER? fails on arrays<br>
Test 51, CHARACTER? fails on strings<br>
Test 52, EQL wants same type of numbers<br>
Test 53, FUNCTION? recognizes functions<br>
Test 54, FUNCTION? recognizes built-in functions<br>
Test 55, STRING? recognizes strings<br>
Test 56, STRING? fails on numbers<br>
Test 57, STRING? fails on symbols<br>
Test 58, CODE-CHAR converts number to char<br>
Test 59, CHAR-CODE converts char to number<br>
Test 60, SETQ returns the last value set<br>
Test 61, IDENTITY<br>
Test 62, LAST works<br>
Test 63, LAST returns NIL for empty list<br>
Test 64, == works with floats<br>
Test 65, == works with characters<br>
Test 66, 0 is a boolean T<br>
Test 67, ELT returns CHARACTER of STRING<br>
Test 68, NTHCDR works at the start<br>
Test 69, NTHCDR works in the middle<br>
Test 70, NTHCDR works at the end<br>
Test 71, NTHCDR works beyond the end<br>
Test 72, NOT 0 is NIL<br>
Test 73, %NCONC with NIL first<br>
Test 74, %NCONC with NIL second<br>
Test 75, LENGHT with conses<br>
Test 76, LENGHT with strings<br>
Test 77, CHARACTER- literal<br>
Test 78, CHARACTER+ literal<br>
Test 79, INTEGER- literal<br>
Test 80, INTEGER+ literal<br>
Test 81, + INTEGER and CHARACTER<br>
Test 82, INTEGER== to be T<br>
Test 83, INTEGER== to be NIL<br>
Test 84, INTEGER> to be T<br>
Test 85, INTEGER> to be NIL<br>
Test 86, INTEGER< to be T<br>
Test 87, INTEGER< to be NIL<br>
Test 88, EQUAL with CONS<br>
Test 89, EQUAL fails on different lists<br>
Test 90, NTHCDR basically works<br>
Test 91, ENQUEUE and QUEUE-LIST work<br>
Test 92, MEMBER finds elements<br>
Test 93, MEMBER finds elements with user predicate<br>
Test 94, MEMBER falsely detects foureign elements<br>
Test 95, can handle nested functions with double argument names<br>
Test 96, can handle nested functions with double argument names<br>
Test 97, can handle closures<br>
Test 98, LAMBDA? works<br>
Test 99, LAMBDA? works with LAMBDA<br>
Test 100, LAMBDA-CALL? works<br>
Test 101, $<br>
Test 102, REVERSE works<br>
Test 103, APPEND works with two lists<br>
Test 104, APPEND works with empty lists<br>
Test 105, APPEND works with three lists<br>
Test 106, APPEND copies last<br>
Test 107, NCONC works<br>
Test 108, NCONC works with empty lists<br>
Test 109, ADJOIN doesn't add known member<br>
Test 110, ADJOIN adds new member<br>
Test 111, BUTLAST basically works<br>
Test 112, BUTLAST returns NIL for single cons<br>
Test 113, COPY-WHILE<br>
Test 114, COPY-NUM<br>
Test 115, LIST-SUBSEQ work at the beginning<br>
Test 116, LIST-SUBSEQ works in the middle<br>
Test 117, LIST-SUBSEQ works at the end<br>
Test 118, SUBSEQ returns NIL when totally out of range<br>
Test 119, SUBSEQ returns empty string when start and end are the same<br>
Test 120, DIGIT-CHAR? #0<br>
Test 121, DIGIT-CHAR? #a<br>
Test 122, ELT on string returns char<br>
Test 123, ELT on string returns right char<br>
Test 124, STRING== works<br>
Test 125, LIST-STRING works<br>
Test 126, STRING-LIST works<br>
Test 127, STRING-UPCASE works<br>
Test 128, STRING-DOWNCASE works<br>
Test 129, FIND finds elements<br>
Test 130, FIND accepts :FROM-END<br>
Test 131, FIND accepts :END<br>
Test 132, FIND accepts :START<br>
Test 133, FIND accepts :START, :END, :FROM-END<br>
Test 134, FIND-IF finds elements<br>
Test 135, POSITION works with character list<br>
Test 136, POSITION works with strings<br>
Test 137, SOME works<br>
Test 138, EVERY works<br>
Test 139, HREF symbol key<br>
Test 140, HREF number key<br>
Test 141, HREF string key<br>
Test 142, HREF empty string key<br>
Test 143, HREF character key<br>
Test 144, HREF hashtable key<br>
Test 145, HREF array key<br>
Test 146, argument expansion works with simple list<br>
Test 147, argument expansion works without :apply-values?<br>
Test 148, argument expansion can handle nested lists<br>
Test 149, argument expansion can handle nested lists without :apply-values?<br>
Test 150, argument expansion can handle &REST keyword<br>
Test 151, argument expansion can handle &REST keyword without :apply-values?<br>
Test 152, argument expansion can handle missing &REST<br>
Test 153, argument expansion can handle missing &REST without :apply-values?<br>
Test 154, argument expansion can handle &OPTIONAL keyword<br>
Test 155, argument expansion can handle &OPTIONAL keyword without :apply-values?<br>
Test 156, argument expansion can handle &OPTIONAL keyword with init forms<br>
Test 157, argument expansion can handle &OPTIONAL keyword with init forms without :apply-values?<br>
Test 158, argument expansion can handle &KEY keyword<br>
Test 159, argument expansion can handle &KEY keyword with overloaded init forms<br>
Test 160, argument expansion can handle &KEY keyword without :apply-values?<br>
Test 161, argument expansion can handle &OPTIONAL and &KEY keyword with init forms without :apply-values?<br>
Test 162, argument expansion can handle &OPTIONAL and &KEY keyword with init forms with :apply-values?<br>
Test 163, COUNT-IF<br>
Test 164, SPLIT works on string<br>
Test 165, SPLIT works on string with gaps<br>
Test 166, TRIM-HEAD works<br>
Test 167, TRIM-TAIL works<br>
Test 168, TRIM works<br>
Test 169, EMPTY-STRING? works<br>
