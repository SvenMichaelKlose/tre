; trÃ© Common Lisp core, generated by 'makefiles/boot-common.lisp'.
(declaim #+sbcl(sb-ext:muffle-conditions compiler-note style-warning))
(proclaim '(optimize (speed 3) (space 0) (safety 3) (debug 0)))
(DEFPACKAGE "TRE-CORE" (:EXPORT "NIL" "T" "SETQ" "COND" "PROGN" "BLOCK" "RETURN-FROM" "TAGBODY" "GO" "LABELS" "QUOTE" "FUNCTION" "LAMBDA" "SLOT-VALUE" "&REST" "&BODY" "&OPTIONAL" "&KEY" "BACKQUOTE" "QUASIQUOTE" "QUASIQUOTE-SPLICE" "SQUARE" "CURLY" "ACCENT-CIRCONFLEX" "ATOM" "APPLY" "CONS" "CAR" "CDR" "RPLACA" "RPLACD" "LIST" "LAST" "COPY-LIST" "NTHCDR" "NTH" "MAPCAR" "LENGTH" "MAKE-STRING" "MOD" "SQRT" "SIN" "COS" "TAN" "ASIN" "ACOS" "ATAN" "EXP" "ROUND" "FLOOR" "AREF" "CHAR-CODE" "MAKE-PACKAGE" "PACKAGE-NAME" "FIND-PACKAGE" "PRINT" "BREAK" "POW" "CHARACTER>" "CHARACTER<" "CHARACTER==" "NUMBER>" "NUMBER<" "NUMBER/" "NUMBER*" "NUMBER-" "NUMBER+" "NUMBER==" "%/" "%*" ">=" "<=" ">" "<" "==" "/" "*" "-" "%CODE-CHAR" "INTEGER" "CHARACTER?" "NUMBER?" "ARRAY?" "STRING?" "FUNCTION?" "SYMBOL?" "CONS?" "NANOTIME" "UNIX-SH-RM" "UNIX-SH-MKDIR" "UNIX-SH-CP" "SH" "FIND-SYMBOL" "=-SYMBOL-FUNCTION" "SYMBOL-PACKAGE" "SYMBOL-FUNCTION" "SYMBOL-VALUE" "SYMBOL-NAME" "MAKE-SYMBOL" "LIST-STRING" "STRING==" "STRING" "STRING-CONCAT" "%SET-ELT" "ELT" "EQL" "EQ" "NOT" "<<" ">>" "BIT-XOR" "BIT-OR" "BIT-AND" "CODE-CHAR" "NANOTIME" "QUIT" "MACROEXPAND" "MACROEXPAND-1" "%%MACRO?" "%%MACROCALL" "MACRO?" "LOAD" "APPEND" "FILTER" "%START-CORE" "SYS-IMAGE-CREATE" "HASHKEYS" "COPY-HASH-TABLE" "HREMOVE" "=-HREF" "HREF" "HASH-TABLE?" "MAKE-HASH-TABLE" "FUNCTION-BYTECODE" "=-FUNCTION-SOURCE" "FUNCTION-SOURCE" "FUNCTION-NATIVE" "FILE-EXISTS?" "%READ-CHAR" "%FCLOSE" "%FOPEN" "%FORCE-OUTPUT" "%PRINC" "EVAL" "%ERROR" "ENV-LOAD" "=-AREF" "MAKE-ARRAY" "BUILTIN?" "%DEFUN-QUIET" "%DEFUN" "%DEFVAR" "%DEFMACRO" "?" "*UNIVERSE*" "*VARIABLES*" "*FUNCTIONS*" "*ENVIRONMENT-PATH*" "*ENVIRONMENT-FILENAMES*" "*MACROEXPAND*" "*QUASIQUOTE-EXPAND*" "*DOT-EXPAND*" "*PACKAGE*" "*KEYWORD-PACKAGE*" "*POINTER-SIZE*" "*LAUNCHFILE*" "*ASSERT?*" "*TARGETS*" "*ENDIANESS*" "*CPU-TYPE*" "*LIBC-PATH*" "*RAND-MAX*" "*EVAL*" "CONS?" "SYMBOL?" "FUNCTION?" "STRING?" "ARRAY?" "NUMBER?" "CHARACTER?" "INTEGER" "%CODE-CHAR" "-" "*" "/" "==" "<" ">" "<=" ">=" "%*" "%/" "NUMBER==" "NUMBER+" "NUMBER-" "NUMBER*" "NUMBER/" "NUMBER<" "NUMBER>" "CHARACTER==" "CHARACTER<" "CHARACTER>" "POW") (:IMPORT-FROM "CL" "NIL" "T" "SETQ" "COND" "PROGN" "BLOCK" "RETURN-FROM" "TAGBODY" "GO" "LABELS" "QUOTE" "FUNCTION" "LAMBDA" "SLOT-VALUE" "&REST" "&BODY" "&OPTIONAL" "&KEY" "ATOM" "APPLY" "CONS" "CAR" "CDR" "RPLACA" "RPLACD" "LIST" "LAST" "COPY-LIST" "NTHCDR" "NTH" "MAPCAR" "LENGTH" "MAKE-STRING" "MOD" "SQRT" "SIN" "COS" "TAN" "ASIN" "ACOS" "ATAN" "EXP" "ROUND" "FLOOR" "AREF" "CHAR-CODE" "MAKE-PACKAGE" "PACKAGE-NAME" "FIND-PACKAGE" "PRINT" "BREAK"))
(DEFPACKAGE "TRE" (:USE "TRE-CORE"))
(CL:IN-PACKAGE :TRE-CORE)
"Section CL-CORE"
(CL:DEFVAR *UNIVERSE*)
(CL:DEFVAR *VARIABLES*)
(CL:DEFVAR *LAUNCHFILE*)
(CL:DEFVAR *POINTER-SIZE*)
(CL:DEFVAR *ASSERT?*)
(CL:DEFVAR *ENDIANESS*)
(CL:DEFVAR *CPU-TYPE*)
(CL:DEFVAR *LIBC-PATH*)
(CL:DEFVAR *RAND-MAX*)
(CL:DEFVAR *PRINT-DEFINITIONS?*)
(CL:DEFVAR *DEFAULT-STREAM-TABSIZE*)
(CL:DEFVAR *QUASIQUOTE-EXPAND*)
(CL:DEFVAR *DOT-EXPAND*)
(CL:DEFVAR *BUILTIN-ATOMS* (CL:MAKE-HASH-TABLE :TEST (CL:FUNCTION CL:EQ)))
(CL:PROGN (CL:DEFUN BUILTIN? (X) (CL:LABELS ((~G786 (~G759) (CL:COND (~G759 ~G759) (T (CL:MEMBER X +CL-FUNCTION-IMPORTS+))))) (~G786 (CL:GETHASH X *BUILTIN-ATOMS*)))) (CL:SETF (CL:GETHASH 'BUILTIN? *BUILTIN-ATOMS*) (CL:FUNCTION BUILTIN?)))
(CL:PROGN (CL:DEFUN MAKE-ARRAY (CL:&OPTIONAL (DIMENSIONS 1)) (CL:MAKE-ARRAY DIMENSIONS)) (CL:SETF (CL:GETHASH 'MAKE-ARRAY *BUILTIN-ATOMS*) (CL:FUNCTION MAKE-ARRAY)))
(CL:PROGN (CL:DEFUN =-AREF (V X I) (CL:SETF (CL:AREF X I) V)) (CL:SETF (CL:GETHASH '=-AREF *BUILTIN-ATOMS*) (CL:FUNCTION =-AREF)))
(CL:DEFVAR *ENVIRONMENT-PATH*)
(CL:DEFVAR *ENVIRONMENT-FILENAMES*)
(CL:PROGN (CL:DEFUN ENV-LOAD (PATHNAME CL:&REST TARGETS) (PRINT-DEFINITION `(ENV-LOAD ,PATHNAME ,@TARGETS)) (CL:SETQ *ENVIRONMENT-FILENAMES* (CL:CONS (CL:CONS PATHNAME TARGETS) *ENVIRONMENT-FILENAMES*)) (CL:COND ((CL:LABELS ((~G787 (~G760) (CL:COND (~G760 ~G760) (T (MEMBER :CL TARGETS))))) (~G787 (NOT TARGETS))) (CL:PROGN (LOAD (+ *ENVIRONMENT-PATH* "/environment/" PATHNAME)))))) (CL:SETF (CL:GETHASH 'ENV-LOAD *BUILTIN-ATOMS*) (CL:FUNCTION ENV-LOAD)))
(CL:DEFVAR +ANONYMOUS-FUNCTION-SOURCES?+)
(CL:DEFUN MAKE-SCOPING-FUNCTION (X) (CL:LABELS ((~G788 (G) `(CL:LABELS ((,G ,@(MAKE-LAMBDAS (CADAR X)))) (,G ,@(MAKE-LAMBDAS (CL:CDR X)))))) (~G788 (GENSYM))))
(CL:DEFUN MAKE-ANONYMOUS-FUNCTION (X) (CL:LABELS ((~G789 (!) (CL:COND ((EQUAL ! '(NIL)) `(CL:LAMBDA NIL NIL)) (T `(CL:LAMBDA ,@!))))) (~G789 (MAKE-LAMBDAS (CL:CAR (CL:CDR X))))))
(CL:DEFUN LAMBDA-EXPR-WITHOUT-LAMBDA-KEYWORD? (X) (CL:COND ((CONS? X) (CL:COND ((EQ 'CL:FUNCTION (CL:CAR X)) (CL:COND ((NOT (CL:ATOM (CL:CAR (CL:CDR X)))) (NOT (EQ 'CL:LAMBDA (CL:CAR (CL:CAR (CL:CDR X))))))))))))
(CL:DEFUN MAKE-LAMBDAS (X) (CL:COND ((EQ 'CL:&BODY X) 'CL:&REST) ((CL:ATOM X) X) ((EQ 'CL:QUOTE (CL:CAR X)) X) ((LAMBDA-EXPR-WITHOUT-LAMBDA-KEYWORD? (CL:CAR X)) (MAKE-SCOPING-FUNCTION X)) ((LAMBDA-EXPR-WITHOUT-LAMBDA-KEYWORD? X) (MAKE-ANONYMOUS-FUNCTION X)) (T (DYNAMIC-MAP (CL:FUNCTION MAKE-LAMBDAS) X))))
(CL:PROGN (CL:DEFUN %ERROR (MSG) (CL:BREAK (NEUTRALIZE-FORMAT-STRING MSG))) (CL:SETF (CL:GETHASH '%ERROR *BUILTIN-ATOMS*) (CL:FUNCTION %ERROR)))
(CL:DEFUN TRE2CL (X) (MAKE-LAMBDAS (QUOTE-EXPAND (SPECIALEXPAND (QUOTE-EXPAND X)))))
(CL:DEFVAR *EVAL*)
(CL:PROGN (CL:DEFUN EVAL (X) (CL:EVAL (CL:PROGN (CL:SETQ *EVAL* (TRE2CL X))))) (CL:SETF (CL:GETHASH 'EVAL *BUILTIN-ATOMS*) (CL:FUNCTION EVAL)))
(CL:PROGN (CL:DEFUN %PRINC (X STREAM) (CL:LABELS ((~G790 (!) (CL:COND ((CHARACTER? X) (CL:WRITE-BYTE (CL:CHAR-CODE X) !)) ((STRING? X) (CL:LABELS ((~G791 (~G762) (CL:COND (~G762 (CL:PROGN (CL:LABELS ((~G792 (~G764) (CL:BLOCK NIL (CL:LABELS ((~G793 (~G763) (CL:TAGBODY ~G765 (CL:COND ((== ~G763 ~G764) (CL:RETURN-FROM NIL (CL:PROGN)))) (CL:LABELS ((~G794 (I) (%PRINC I !))) (~G794 (ELT ~G762 ~G763))) (CL:SETQ ~G763 (NUMBER+ 1 ~G763)) (CL:GO ~G765)))) (~G793 0))))) (~G792 (INTEGER (CL:LENGTH ~G762))))))))) (~G791 X))) (T (CL:PRINC X !))))) (~G790 (CL:LABELS ((~G795 (~G761) (CL:COND (~G761 ~G761) (T CL:*STANDARD-OUTPUT*)))) (~G795 STREAM))))) (CL:SETF (CL:GETHASH '%PRINC *BUILTIN-ATOMS*) (CL:FUNCTION %PRINC)))
(CL:PROGN (CL:DEFUN %FORCE-OUTPUT (STREAM) (CL:FORCE-OUTPUT STREAM)) (CL:SETF (CL:GETHASH '%FORCE-OUTPUT *BUILTIN-ATOMS*) (CL:FUNCTION %FORCE-OUTPUT)))
(CL:PROGN (CL:DEFUN %FOPEN (PATHNAME MODE) (CL:OPEN PATHNAME :DIRECTION (CL:COND ((CL:FIND #\w MODE :TEST (CL:FUNCTION CL:EQUAL)) :OUTPUT) (T :INPUT)) :IF-EXISTS :SUPERSEDE :ELEMENT-TYPE '(CL:UNSIGNED-BYTE 8))) (CL:SETF (CL:GETHASH '%FOPEN *BUILTIN-ATOMS*) (CL:FUNCTION %FOPEN)))
(CL:PROGN (CL:DEFUN %FCLOSE (STREAM) (CL:CLOSE STREAM)) (CL:SETF (CL:GETHASH '%FCLOSE *BUILTIN-ATOMS*) (CL:FUNCTION %FCLOSE)))
(CL:PROGN (CL:DEFUN %READ-CHAR (STR) (CL:LABELS ((~G796 (!) (CL:COND ((NOT (EQ ! 'EOF)) (CL:PROGN (CL:CODE-CHAR !)))))) (~G796 (CL:READ-BYTE (CL:LABELS ((~G797 (~G766) (CL:COND (~G766 ~G766) (T CL:*STANDARD-INPUT*)))) (~G797 STR)) NIL 'EOF)))) (CL:SETF (CL:GETHASH '%READ-CHAR *BUILTIN-ATOMS*) (CL:FUNCTION %READ-CHAR)))
(CL:PROGN (CL:DEFUN FILE-EXISTS? (PATHNAME) (CL:COND ((CL:PROBE-FILE PATHNAME) T))) (CL:SETF (CL:GETHASH 'FILE-EXISTS? *BUILTIN-ATOMS*) (CL:FUNCTION FILE-EXISTS?)))
(CL:DEFVAR *FUNCTIONS*)
(CL:PROGN (CL:DEFUN FUNCTION-NATIVE (X) X) (CL:SETF (CL:GETHASH 'FUNCTION-NATIVE *BUILTIN-ATOMS*) (CL:FUNCTION FUNCTION-NATIVE)))
(CL:PROGN (CL:DEFUN FUNCTION-SOURCE (X) (CL:CDR (CL:ASSOC X *FUNCTIONS* :TEST (CL:FUNCTION CL:EQ)))) (CL:SETF (CL:GETHASH 'FUNCTION-SOURCE *BUILTIN-ATOMS*) (CL:FUNCTION FUNCTION-SOURCE)))
(CL:PROGN (CL:DEFUN =-FUNCTION-SOURCE (V X) (ERROR "Can't set function source in the Common Lisp core.")) (CL:SETF (CL:GETHASH '=-FUNCTION-SOURCE *BUILTIN-ATOMS*) (CL:FUNCTION =-FUNCTION-SOURCE)))
(CL:PROGN (CL:DEFUN FUNCTION-BYTECODE (X) X NIL) (CL:SETF (CL:GETHASH 'FUNCTION-BYTECODE *BUILTIN-ATOMS*) (CL:FUNCTION FUNCTION-BYTECODE)))
(CL:PROGN (CL:DEFUN MAKE-HASH-TABLE (CL:&KEY (TEST (CL:FUNCTION EQL))) (CL:MAKE-HASH-TABLE :TEST (CL:COND ((CL:EQ TEST (CL:FUNCTION EQ)) (CL:FUNCTION CL:EQ)) ((CL:LABELS ((~G798 (~G767) (CL:COND (~G767 ~G767) (T (CL:EQ TEST (CL:FUNCTION ==)))))) (~G798 (CL:EQ TEST (CL:FUNCTION EQL)))) (CL:FUNCTION CL:EQL)) ((CL:EQ TEST (CL:FUNCTION STRING==)) (CL:FUNCTION CL:EQUAL)) (T TEST)))) (CL:SETF (CL:GETHASH 'MAKE-HASH-TABLE *BUILTIN-ATOMS*) (CL:FUNCTION MAKE-HASH-TABLE)))
(CL:PROGN (CL:DEFUN HASH-TABLE? (X) (CL:HASH-TABLE-P X)) (CL:SETF (CL:GETHASH 'HASH-TABLE? *BUILTIN-ATOMS*) (CL:FUNCTION HASH-TABLE?)))
(CL:PROGN (CL:DEFUN HREF (X I) (CL:GETHASH I X)) (CL:SETF (CL:GETHASH 'HREF *BUILTIN-ATOMS*) (CL:FUNCTION HREF)))
(CL:PROGN (CL:DEFUN =-HREF (V X I) (CL:SETF (CL:GETHASH I X) V)) (CL:SETF (CL:GETHASH '=-HREF *BUILTIN-ATOMS*) (CL:FUNCTION =-HREF)))
(CL:PROGN (CL:DEFUN HREMOVE (X K) (CL:REMHASH K X)) (CL:SETF (CL:GETHASH 'HREMOVE *BUILTIN-ATOMS*) (CL:FUNCTION HREMOVE)))
(CL:PROGN (CL:DEFUN COPY-HASH-TABLE (X) (CL:LABELS ((~G799 (!) (CL:MAPHASH (CL:LAMBDA (K V) (CL:SETF (CL:GETHASH K !) V)) X) !)) (~G799 (CL:MAKE-HASH-TABLE :TEST (CL:HASH-TABLE-TEST X) :SIZE (CL:HASH-TABLE-SIZE X))))) (CL:SETF (CL:GETHASH 'COPY-HASH-TABLE *BUILTIN-ATOMS*) (CL:FUNCTION COPY-HASH-TABLE)))
(CL:PROGN (CL:DEFUN HASHKEYS (X) (CL:LABELS ((~G800 (!) (CL:MAPHASH (CL:LAMBDA (K V) V (CL:PUSH K !)) X) !)) (~G800 NIL))) (CL:SETF (CL:GETHASH 'HASHKEYS *BUILTIN-ATOMS*) (CL:FUNCTION HASHKEYS)))
(CL:PROGN (CL:DEFUN SYS-IMAGE-CREATE (PATHNAME FUN) (SB-EXT:SAVE-LISP-AND-DIE PATHNAME :TOPLEVEL (CL:LAMBDA NIL (CL:FUNCALL FUN)))) (CL:SETF (CL:GETHASH 'SYS-IMAGE-CREATE *BUILTIN-ATOMS*) (CL:FUNCTION SYS-IMAGE-CREATE)))
(CL:PROGN (CL:DEFUN %START-CORE NIL (CL:SETQ *LAUNCHFILE* (CADR (CL:LABELS ((~G801 (~G768) (CL:COND (~G768 ~G768) (T NIL)))) (~G801 SB-EXT:*POSIX-ARGV*))))) (CL:SETF (CL:GETHASH '%START-CORE *BUILTIN-ATOMS*) (CL:FUNCTION %START-CORE)))
(CL:PROGN (CL:DEFUN FILTER (FUN X) (CL:MAPCAR FUN X)) (CL:SETF (CL:GETHASH 'FILTER *BUILTIN-ATOMS*) (CL:FUNCTION FILTER)))
(CL:PROGN (CL:DEFUN APPEND (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:NCONC) (CL:MAPCAR (CL:FUNCTION CL:COPY-LIST) X))) (CL:SETF (CL:GETHASH 'APPEND *BUILTIN-ATOMS*) (CL:FUNCTION APPEND)))
(CL:DEFUN %LOAD-R (S) (CL:COND ((PEEK-CHAR S) (CL:PROGN (CL:CONS (READ S) (%LOAD-R S))))))
(CL:DEFUN %EXPAND (X) (CL:LABELS ((~G802 (!) (CL:COND ((EQUAL X !) X) (T (%EXPAND !))))) (~G802 (QUASIQUOTE-EXPAND (MACROEXPAND (DOT-EXPAND X))))))
(CL:PROGN (CL:DEFUN LOAD (PATHNAME) (PRINT-DEFINITION `(LOAD ,PATHNAME)) (CL:BLOCK NIL (CL:LABELS ((~G803 (~G772) (CL:LABELS ((~G804 (I) (CL:TAGBODY ~G770 (CL:COND ((NOT ~G772) (CL:GO ~G771))) (CL:SETQ I (CL:CAR ~G772)) (EVAL (%EXPAND I)) (CL:SETQ ~G772 (CL:CDR ~G772)) (CL:GO ~G770) ~G771 (CL:RETURN-FROM NIL (CL:PROGN))))) (~G804 NIL)))) (~G803 (CL:LABELS ((~G805 (S) (CL:LABELS ((~G806 (~G769) (CLOSE S) ~G769)) (~G806 (CL:BLOCK NIL (%LOAD-R S)))))) (~G805 (OPEN PATHNAME :DIRECTION 'INPUT))))))) (CL:SETF (CL:GETHASH 'LOAD *BUILTIN-ATOMS*) (CL:FUNCTION LOAD)))
(CL:DEFUN ENV-MACROS NIL (SYMBOL-VALUE (TRE-SYMBOL '*MACROS*)))
(CL:PROGN (CL:DEFUN MACRO? (X) (CL:RASSOC X (ENV-MACROS) :TEST (CL:FUNCTION EQ))) (CL:SETF (CL:GETHASH 'MACRO? *BUILTIN-ATOMS*) (CL:FUNCTION MACRO?)))
(CL:PROGN (CL:DEFUN %%MACROCALL (X) (CL:LABELS ((~G807 (!) (CL:APPLY (CL:CDR !) (ARGUMENT-EXPAND-VALUES (CL:CAR X) (CL:CAR (CL:CAR !)) (CL:CDR X))))) (~G807 (CL:CDR (ASSOC (CL:CAR X) (ENV-MACROS) :TEST (CL:FUNCTION EQ)))))) (CL:SETF (CL:GETHASH '%%MACROCALL *BUILTIN-ATOMS*) (CL:FUNCTION %%MACROCALL)))
(CL:PROGN (CL:DEFUN %%MACRO? (X) (CL:COND ((CONS? X) (CL:COND ((SYMBOL? (CL:CAR X)) (CL:LABELS ((~G808 (!) (CL:COND ((CONS? !) (ASSOC (CL:CAR X) ! :TEST (CL:FUNCTION EQ)))))) (~G808 (ENV-MACROS)))))))) (CL:SETF (CL:GETHASH '%%MACRO? *BUILTIN-ATOMS*) (CL:FUNCTION %%MACRO?)))
(CL:DEFVAR *MACROEXPAND*)
(CL:PROGN (CL:DEFUN MACROEXPAND-1 (X) (CL:LABELS ((~G809 (!) (CL:COND (! (CL:APPLY ! (CL:LIST X))) (T X)))) (~G809 (SYMBOL-VALUE (TRE-SYMBOL '*MACROEXPAND*))))) (CL:SETF (CL:GETHASH 'MACROEXPAND-1 *BUILTIN-ATOMS*) (CL:FUNCTION MACROEXPAND-1)))
(CL:PROGN (CL:DEFUN MACROEXPAND (X) (CL:LABELS ((F (OLD X) (CL:COND ((EQUAL OLD X) X) (T (MACROEXPAND X))))) (F X (MACROEXPAND-1 X)))) (CL:SETF (CL:GETHASH 'MACROEXPAND *BUILTIN-ATOMS*) (CL:FUNCTION MACROEXPAND)))
(CL:PROGN (CL:DEFUN QUIT (CL:&OPTIONAL EXIT-CODE) (SB-EXT:QUIT :UNIX-STATUS EXIT-CODE)) (CL:SETF (CL:GETHASH 'QUIT *BUILTIN-ATOMS*) (CL:FUNCTION QUIT)))
(CL:PROGN (CL:DEFUN NANOTIME NIL 0) (CL:SETF (CL:GETHASH 'NANOTIME *BUILTIN-ATOMS*) (CL:FUNCTION NANOTIME)))
(CL:PROGN (CL:DEFUN CODE-CHAR (X) (CL:COND ((CL:CHARACTERP X) X) (T (CL:CODE-CHAR X)))) (CL:SETF (CL:GETHASH 'CODE-CHAR *BUILTIN-ATOMS*) (CL:FUNCTION CODE-CHAR)))
(CL:DEFUN BITS-INTEGER (BITS) (CL:REDUCE (CL:LAMBDA (A B) (+ (* A 2) B)) BITS))
(CL:DEFUN NUMBER (X) (CL:COND ((CHARACTER? X) (CL:CHAR-CODE X)) (T X)))
(CL:DEFUN INTEGER-BITS (X) (CL:LABELS ((~G810 (!) (CL:LABELS ((~G811 (L) (CL:LABELS ((~G812 (~G773) (CL:BLOCK NIL (CL:LABELS ((~G813 (I) (CL:TAGBODY ~G774 (CL:COND ((== I ~G773) (CL:RETURN-FROM NIL (CL:PROGN)))) (CL:MULTIPLE-VALUE-BIND (I R) (CL:TRUNCATE ! 2) (CL:PROGN (CL:SETQ ! I)) (CL:PUSH R L)) (CL:SETQ I (NUMBER+ 1 I)) (CL:GO ~G774)))) (~G813 0))))) (~G812 (INTEGER 32))) (CL:COERCE L 'CL:BIT-VECTOR))) (~G811 NIL)))) (~G810 (NUMBER X))))
(CL:PROGN (CL:DEFUN BIT-AND (A B) (BITS-INTEGER (CL:BIT-AND (INTEGER-BITS A) (INTEGER-BITS B)))) (CL:SETF (CL:GETHASH 'BIT-AND *BUILTIN-ATOMS*) (CL:FUNCTION BIT-AND)))
(CL:PROGN (CL:DEFUN BIT-OR (A B) (BITS-INTEGER (CL:BIT-IOR (INTEGER-BITS A) (INTEGER-BITS B)))) (CL:SETF (CL:GETHASH 'BIT-OR *BUILTIN-ATOMS*) (CL:FUNCTION BIT-OR)))
(CL:PROGN (CL:DEFUN BIT-XOR (A B) (BITS-INTEGER (CL:BIT-XOR (INTEGER-BITS A) (INTEGER-BITS B)))) (CL:SETF (CL:GETHASH 'BIT-XOR *BUILTIN-ATOMS*) (CL:FUNCTION BIT-XOR)))
(CL:PROGN (CL:DEFUN >> (X BITS) (CL:LABELS ((~G814 (~G775) (CL:BLOCK NIL (CL:LABELS ((~G815 (N) (CL:TAGBODY ~G776 (CL:COND ((== N ~G775) (CL:RETURN-FROM NIL (CL:PROGN X)))) (CL:MULTIPLE-VALUE-BIND (I R) (CL:TRUNCATE X 2) (CL:PROGN (CL:SETQ X I))) (CL:SETQ N (NUMBER+ 1 N)) (CL:GO ~G776)))) (~G815 0))))) (~G814 (INTEGER BITS)))) (CL:SETF (CL:GETHASH '>> *BUILTIN-ATOMS*) (CL:FUNCTION >>)))
(CL:PROGN (CL:DEFUN << (X BITS) (CL:LABELS ((~G816 (~G777) (CL:BLOCK NIL (CL:LABELS ((~G817 (N) (CL:TAGBODY ~G778 (CL:COND ((== N ~G777) (CL:RETURN-FROM NIL (CL:PROGN X)))) (CL:PROGN (CL:SETQ X (* X 2))) (CL:SETQ N (NUMBER+ 1 N)) (CL:GO ~G778)))) (~G817 0))))) (~G816 (INTEGER BITS)))) (CL:SETF (CL:GETHASH '<< *BUILTIN-ATOMS*) (CL:FUNCTION <<)))
(CL:PROGN (CL:DEFUN NOT (CL:&REST X) (CL:EVERY (CL:FUNCTION CL:NOT) X)) (CL:SETF (CL:GETHASH 'NOT *BUILTIN-ATOMS*) (CL:FUNCTION NOT)))
(CL:PROGN (CL:DEFUN EQ (A B) (CL:EQ A B)) (CL:SETF (CL:GETHASH 'EQ *BUILTIN-ATOMS*) (CL:FUNCTION EQ)))
(CL:PROGN (CL:DEFUN EQL (A B) (CL:LABELS ((~G818 (~G779) (CL:COND (~G779 ~G779) (T (CL:COND ((CL:COND ((CL:CHARACTERP A) (CL:CHARACTERP B))) (CL:= (CL:CHAR-CODE A) (CL:CHAR-CODE B))) ((CL:COND ((NOT (CL:CHARACTERP A) (CL:CHARACTERP B)) (CL:COND ((NUMBER? A) (NUMBER? B))))) (CL:= A B)) ((CL:COND ((CL:CONSP A) (CL:CONSP B))) (CL:COND ((EQL (CL:CAR A) (CL:CAR B)) (EQL (CL:CDR A) (CL:CDR B))))) ((CL:COND ((CL:STRINGP A) (CL:STRINGP B))) (CL:STRING= A B))))))) (~G818 (CL:EQ A B)))) (CL:SETF (CL:GETHASH 'EQL *BUILTIN-ATOMS*) (CL:FUNCTION EQL)))
(CL:PROGN (CL:DEFUN ELT (SEQ IDX) (CL:COND (SEQ (CL:COND ((CL:< IDX (CL:LENGTH SEQ)) (CL:ELT SEQ IDX)))))) (CL:SETF (CL:GETHASH 'ELT *BUILTIN-ATOMS*) (CL:FUNCTION ELT)))
(CL:PROGN (CL:DEFUN %SET-ELT (OBJ SEQ IDX) (CL:SETF (CL:ELT SEQ IDX) OBJ)) (CL:SETF (CL:GETHASH '%SET-ELT *BUILTIN-ATOMS*) (CL:FUNCTION %SET-ELT)))
(CL:PROGN (CL:DEFUN STRING-CONCAT (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:CONCATENATE) 'CL:STRING X)) (CL:SETF (CL:GETHASH 'STRING-CONCAT *BUILTIN-ATOMS*) (CL:FUNCTION STRING-CONCAT)))
(CL:PROGN (CL:DEFUN STRING (X) (CL:COND ((CL:NUMBERP X) (CL:FORMAT NIL "~A" X)) (T (CL:STRING X)))) (CL:SETF (CL:GETHASH 'STRING *BUILTIN-ATOMS*) (CL:FUNCTION STRING)))
(CL:PROGN (CL:DEFUN STRING== (A B) (CL:STRING= A B)) (CL:SETF (CL:GETHASH 'STRING== *BUILTIN-ATOMS*) (CL:FUNCTION STRING==)))
(CL:PROGN (CL:DEFUN LIST-STRING (X) (CL:LABELS ((~G819 (~G780) (CL:COND (~G780 ~G780) (T (ERROR "List expected instead of ~A." X))))) (~G819 (LIST? X))) (CL:CONCATENATE 'CL:STRING X)) (CL:SETF (CL:GETHASH 'LIST-STRING *BUILTIN-ATOMS*) (CL:FUNCTION LIST-STRING)))
(CL:DEFVAR *SPECIAL-FORMS*)
(CL:DEFUN SPECIAL-%%MACROCALL (X) (CL:LABELS ((~G820 (!) (CL:APPLY (CL:CDR !) (ARGUMENT-EXPAND-VALUES (CL:CAR X) (CL:CAR !) (CL:CDR X))))) (~G820 (CL:CDR (ASSOC (CL:CAR X) *SPECIAL-FORMS* :TEST (CL:FUNCTION EQ))))))
(CL:DEFUN SPECIAL-%%MACRO? (X) (CL:COND ((CONS? X) (CL:COND ((SYMBOL? (CL:CAR X)) (ASSOC (CL:CAR X) *SPECIAL-FORMS* :TEST (CL:FUNCTION EQ)))))))
(CL:DEFUN SPECIALEXPAND (X) (CL:LABELS ((~G821 (~G781) (CL:PROGN (CL:SETQ *MACRO?* (CL:FUNCTION SPECIAL-%%MACRO?))) (CL:LABELS ((~G822 (~G782) (CL:PROGN (CL:SETQ *MACRO?* ~G781)) ~G782)) (~G822 (CL:PROGN (CL:LABELS ((~G823 (~G783) (CL:PROGN (CL:SETQ *MACROCALL* (CL:FUNCTION SPECIAL-%%MACROCALL))) (CL:LABELS ((~G824 (~G784) (CL:PROGN (CL:SETQ *MACROCALL* ~G783)) ~G784)) (~G824 (CL:PROGN (CL:LABELS ((F (OLD X) (CL:COND ((EQUAL OLD X) X) (T (F X (%MACROEXPAND X)))))) (F X (%MACROEXPAND X)))))))) (~G823 *MACROCALL*))))))) (~G821 *MACRO?*)))
(CL:DEFUN MAKE-%DEFUN-QUIET (NAME ARGS BODY) `(CL:PROGN (CL:PUSH (CL:CONS ',NAME ',(CL:CONS ARGS BODY)) *FUNCTIONS*) (CL:DEFUN ,NAME ,ARGS ,@BODY)))
(CL:DEFVAR *KEYWORD-PACKAGE*)
(CL:DEFVAR *PACKAGE*)
(CL:PROGN (CL:DEFUN MAKE-SYMBOL (X CL:&OPTIONAL (PACKAGE NIL)) (CL:INTERN X (CL:COND ((CL:NOT PACKAGE) (CL:LABELS ((~G825 (~G785) (CL:COND (~G785 ~G785) (T "TRE")))) (~G825 (CL:LABELS ((~G826 (!) (CL:COND (! (SYMBOL-NAME !))))) (~G826 *PACKAGE*))))) ((CL:PACKAGEP PACKAGE) (CL:PACKAGE-NAME PACKAGE)) ((CL:SYMBOLP PACKAGE) (CL:SYMBOL-NAME PACKAGE)) (T PACKAGE)))) (CL:SETF (CL:GETHASH 'MAKE-SYMBOL *BUILTIN-ATOMS*) (CL:FUNCTION MAKE-SYMBOL)))
(CL:PROGN (CL:DEFUN SYMBOL-NAME (X) (CL:COND ((CL:PACKAGEP X) (CL:PACKAGE-NAME X)) (T (CL:SYMBOL-NAME X)))) (CL:SETF (CL:GETHASH 'SYMBOL-NAME *BUILTIN-ATOMS*) (CL:FUNCTION SYMBOL-NAME)))
(CL:PROGN (CL:DEFUN SYMBOL-VALUE (X) (CL:COND ((CL:BOUNDP X) (CL:SYMBOL-VALUE X)) (T X))) (CL:SETF (CL:GETHASH 'SYMBOL-VALUE *BUILTIN-ATOMS*) (CL:FUNCTION SYMBOL-VALUE)))
(CL:PROGN (CL:DEFUN SYMBOL-FUNCTION (X) (CL:COND ((CL:FBOUNDP X) (CL:SYMBOL-FUNCTION X)))) (CL:SETF (CL:GETHASH 'SYMBOL-FUNCTION *BUILTIN-ATOMS*) (CL:FUNCTION SYMBOL-FUNCTION)))
(CL:PROGN (CL:DEFUN SYMBOL-PACKAGE (X) (CL:SYMBOL-PACKAGE X)) (CL:SETF (CL:GETHASH 'SYMBOL-PACKAGE *BUILTIN-ATOMS*) (CL:FUNCTION SYMBOL-PACKAGE)))
(CL:PROGN (CL:DEFUN =-SYMBOL-FUNCTION (V X) (CL:SETF (CL:SYMBOL-FUNCTION X) V)) (CL:SETF (CL:GETHASH '=-SYMBOL-FUNCTION *BUILTIN-ATOMS*) (CL:FUNCTION =-SYMBOL-FUNCTION)))
(CL:PROGN (CL:DEFUN FIND-SYMBOL (X CL:&OPTIONAL (PKG *PACKAGE*)) (CL:FIND-SYMBOL (SYMBOL-NAME X) (CL:FIND-PACKAGE (SYMBOL-NAME *PACKAGE*)))) (CL:SETF (CL:GETHASH 'FIND-SYMBOL *BUILTIN-ATOMS*) (CL:FUNCTION FIND-SYMBOL)))
(CL:DEFUN TRE-SYMBOL (X) (CL:INTERN (SYMBOL-NAME X) "TRE"))
(CL:PROGN (CL:DEFUN SH (PROGRAM CL:&REST ARGUMENTS) (SB-EXT:RUN-PROGRAM PROGRAM ARGUMENTS :PTY CL:*STANDARD-OUTPUT*)) (CL:SETF (CL:GETHASH 'SH *BUILTIN-ATOMS*) (CL:FUNCTION SH)))
(CL:PROGN (CL:DEFUN UNIX-SH-CP (FROM TO CL:&KEY (VERBOSE? NIL) (RECURSIVELY? NIL)) (CL:APPLY (CL:FUNCTION SH) "/bin/cp" `(,@(CL:COND (VERBOSE? '("-v"))) ,@(CL:COND (RECURSIVELY? '("-r"))) ,FROM ,TO))) (CL:SETF (CL:GETHASH 'UNIX-SH-CP *BUILTIN-ATOMS*) (CL:FUNCTION UNIX-SH-CP)))
(CL:PROGN (CL:DEFUN UNIX-SH-MKDIR (PATHNAME CL:&KEY (PARENTS NIL)) (CL:APPLY (CL:FUNCTION SH) "/bin/mkdir" `(,@(CL:COND (PARENTS '("-p"))) ,PATHNAME))) (CL:SETF (CL:GETHASH 'UNIX-SH-MKDIR *BUILTIN-ATOMS*) (CL:FUNCTION UNIX-SH-MKDIR)))
(CL:PROGN (CL:DEFUN UNIX-SH-RM (X CL:&KEY (VERBOSE? NIL) (RECURSIVELY? NIL) (FORCE? NIL)) (CL:APPLY (CL:FUNCTION SH) "/bin/rm" `(,@(CL:COND (VERBOSE? '("-v"))) ,@(CL:COND (RECURSIVELY? '("-r"))) ,@(CL:COND (FORCE? '("-f"))) ,X))) (CL:SETF (CL:GETHASH 'UNIX-SH-RM *BUILTIN-ATOMS*) (CL:FUNCTION UNIX-SH-RM)))
(CL:PROGN (CL:DEFUN NANOTIME NIL 0) (CL:SETF (CL:GETHASH 'NANOTIME *BUILTIN-ATOMS*) (CL:FUNCTION NANOTIME)))
(CL:PROGN (CL:DEFUN CONS? (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:CONSP) X)) (CL:SETF (CL:GETHASH 'CONS? *BUILTIN-ATOMS*) (CL:FUNCTION CONS?)))
(CL:PROGN (CL:DEFUN SYMBOL? (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:SYMBOLP) X)) (CL:SETF (CL:GETHASH 'SYMBOL? *BUILTIN-ATOMS*) (CL:FUNCTION SYMBOL?)))
(CL:PROGN (CL:DEFUN FUNCTION? (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:FUNCTIONP) X)) (CL:SETF (CL:GETHASH 'FUNCTION? *BUILTIN-ATOMS*) (CL:FUNCTION FUNCTION?)))
(CL:PROGN (CL:DEFUN STRING? (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:STRINGP) X)) (CL:SETF (CL:GETHASH 'STRING? *BUILTIN-ATOMS*) (CL:FUNCTION STRING?)))
(CL:PROGN (CL:DEFUN ARRAY? (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:ARRAYP) X)) (CL:SETF (CL:GETHASH 'ARRAY? *BUILTIN-ATOMS*) (CL:FUNCTION ARRAY?)))
(CL:PROGN (CL:DEFUN NUMBER? (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:NUMBERP) X)) (CL:SETF (CL:GETHASH 'NUMBER? *BUILTIN-ATOMS*) (CL:FUNCTION NUMBER?)))
(CL:PROGN (CL:DEFUN CHARACTER? (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:CHARACTERP) X)) (CL:SETF (CL:GETHASH 'CHARACTER? *BUILTIN-ATOMS*) (CL:FUNCTION CHARACTER?)))
(CL:PROGN (CL:DEFUN INTEGER (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:FLOOR) X)) (CL:SETF (CL:GETHASH 'INTEGER *BUILTIN-ATOMS*) (CL:FUNCTION INTEGER)))
(CL:PROGN (CL:DEFUN %CODE-CHAR (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:CODE-CHAR) X)) (CL:SETF (CL:GETHASH '%CODE-CHAR *BUILTIN-ATOMS*) (CL:FUNCTION %CODE-CHAR)))
(CL:PROGN (CL:DEFUN - (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:-) X)) (CL:SETF (CL:GETHASH '- *BUILTIN-ATOMS*) (CL:FUNCTION -)))
(CL:PROGN (CL:DEFUN * (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:*) X)) (CL:SETF (CL:GETHASH '* *BUILTIN-ATOMS*) (CL:FUNCTION *)))
(CL:PROGN (CL:DEFUN / (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:/) X)) (CL:SETF (CL:GETHASH '/ *BUILTIN-ATOMS*) (CL:FUNCTION /)))
(CL:PROGN (CL:DEFUN == (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:=) X)) (CL:SETF (CL:GETHASH '== *BUILTIN-ATOMS*) (CL:FUNCTION ==)))
(CL:PROGN (CL:DEFUN < (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:<) X)) (CL:SETF (CL:GETHASH '< *BUILTIN-ATOMS*) (CL:FUNCTION <)))
(CL:PROGN (CL:DEFUN > (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:>) X)) (CL:SETF (CL:GETHASH '> *BUILTIN-ATOMS*) (CL:FUNCTION >)))
(CL:PROGN (CL:DEFUN <= (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:<=) X)) (CL:SETF (CL:GETHASH '<= *BUILTIN-ATOMS*) (CL:FUNCTION <=)))
(CL:PROGN (CL:DEFUN >= (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:>=) X)) (CL:SETF (CL:GETHASH '>= *BUILTIN-ATOMS*) (CL:FUNCTION >=)))
(CL:PROGN (CL:DEFUN %* (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:*) X)) (CL:SETF (CL:GETHASH '%* *BUILTIN-ATOMS*) (CL:FUNCTION %*)))
(CL:PROGN (CL:DEFUN %/ (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:/) X)) (CL:SETF (CL:GETHASH '%/ *BUILTIN-ATOMS*) (CL:FUNCTION %/)))
(CL:PROGN (CL:DEFUN NUMBER== (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:=) X)) (CL:SETF (CL:GETHASH 'NUMBER== *BUILTIN-ATOMS*) (CL:FUNCTION NUMBER==)))
(CL:PROGN (CL:DEFUN NUMBER+ (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:+) X)) (CL:SETF (CL:GETHASH 'NUMBER+ *BUILTIN-ATOMS*) (CL:FUNCTION NUMBER+)))
(CL:PROGN (CL:DEFUN NUMBER- (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:-) X)) (CL:SETF (CL:GETHASH 'NUMBER- *BUILTIN-ATOMS*) (CL:FUNCTION NUMBER-)))
(CL:PROGN (CL:DEFUN NUMBER* (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:*) X)) (CL:SETF (CL:GETHASH 'NUMBER* *BUILTIN-ATOMS*) (CL:FUNCTION NUMBER*)))
(CL:PROGN (CL:DEFUN NUMBER/ (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:/) X)) (CL:SETF (CL:GETHASH 'NUMBER/ *BUILTIN-ATOMS*) (CL:FUNCTION NUMBER/)))
(CL:PROGN (CL:DEFUN NUMBER< (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:<) X)) (CL:SETF (CL:GETHASH 'NUMBER< *BUILTIN-ATOMS*) (CL:FUNCTION NUMBER<)))
(CL:PROGN (CL:DEFUN NUMBER> (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:>) X)) (CL:SETF (CL:GETHASH 'NUMBER> *BUILTIN-ATOMS*) (CL:FUNCTION NUMBER>)))
(CL:PROGN (CL:DEFUN CHARACTER== (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:CHAR=) X)) (CL:SETF (CL:GETHASH 'CHARACTER== *BUILTIN-ATOMS*) (CL:FUNCTION CHARACTER==)))
(CL:PROGN (CL:DEFUN CHARACTER< (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:CHAR<) X)) (CL:SETF (CL:GETHASH 'CHARACTER< *BUILTIN-ATOMS*) (CL:FUNCTION CHARACTER<)))
(CL:PROGN (CL:DEFUN CHARACTER> (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:CHAR>) X)) (CL:SETF (CL:GETHASH 'CHARACTER> *BUILTIN-ATOMS*) (CL:FUNCTION CHARACTER>)))
(CL:PROGN (CL:DEFUN POW (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:EXPT) X)) (CL:SETF (CL:GETHASH 'POW *BUILTIN-ATOMS*) (CL:FUNCTION POW)))
(CL:DEFVAR *DEFINITION-PRINTER*)
(CL:DEFVAR *GENSYM-PREFIX*)
(CL:DEFVAR *PRINT-AUTOMATIC-NEWLINE?*)
(CL:DEFVAR *STANDARD-INPUT*)
(CL:DEFVAR *MACROEXPAND-BACKQUOTE*)
(CL:DEFVAR *MACROCALL*)
(CL:DEFVAR *MACRO?*)
(CL:DEFVAR +CL-FUNCTION-IMPORTS+)
(CL:DEFVAR *STANDARD-OUTPUT*)
(CL:DEFVAR *GENSYM-COUNTER*)
(CL:DEFVAR *VALUES-MAGIC*)
(CL:DEFVAR *PRINTER-ABBREVIATIONS*)
(CL:DEFVAR *ALWAYS-PRINT-PACKAGE-NAMES?*)
(CL:DEFVAR *INVISIBLE-PACKAGE-NAMES*)
(CL:DEFVAR *PRINTER-ARGUMENT-DEFINITIONS*)
(CL:DEFUN %GET-PRINTER-ARGUMENT-DEFINITION (X) (CL:BLOCK %GET-PRINTER-ARGUMENT-DEFINITION (CL:BLOCK NIL (HREF *PRINTER-ARGUMENT-DEFINITIONS* X))))
(CL:DEFUN MAKE-KEYWORD (X) (CL:BLOCK MAKE-KEYWORD (CL:BLOCK NIL (CL:COND (X (MAKE-SYMBOL (CL:COND ((SYMBOL? X) (SYMBOL-NAME X)) (T X)) *KEYWORD-PACKAGE*))))))
(CL:DEFUN %PRINT-GET-ARGS (ARGS DEF) (CL:BLOCK %PRINT-GET-ARGS (CL:BLOCK NIL (ARGUMENT-EXPAND 'CL:PRINT DEF ARGS :CONCATENATE-SUBLISTS? NIL :BREAK-ON-ERRORS? NIL))))
(CL:DEFUN %PRINT-GAP (STR) (CL:BLOCK %PRINT-GAP (CL:BLOCK NIL (CL:LABELS ((~G827 (~G186) (CL:COND (~G186 ~G186) (T (PRINC " " STR))))) (~G827 (FRESH-LINE? STR))))))
(CL:DEFUN INVISIBLE-PACKAGE? (X) (CL:BLOCK INVISIBLE-PACKAGE? (CL:BLOCK NIL (CL:LABELS ((~G828 (!) (SOME (CL:LAMBDA (_) (CL:BLOCK NIL (STRING== ! _))) *INVISIBLE-PACKAGE-NAMES*))) (~G828 (CL:PACKAGE-NAME X))))))
(CL:DEFUN ABBREVIATED-PACKAGE-NAME (X) (CL:BLOCK ABBREVIATED-PACKAGE-NAME (CL:BLOCK NIL (CL:COND ((STRING== "COMMON-LISP" X) "CL") (T X)))))
(CL:DEFUN %PRINT-ESCAPED-SYMBOL (X STR) (CL:BLOCK %PRINT-ESCAPED-SYMBOL (CL:BLOCK NIL (PRINC #\| STR) (CL:BLOCK NIL (CL:LABELS ((~G829 (~G206) (CL:LABELS ((~G830 (I) (CL:TAGBODY ~G204 (CL:COND ((NOT ~G206) (CL:GO ~G205))) (CL:SETQ I (CL:CAR ~G206)) (CL:COND ((EQL I #\|) (PRINC "\\|" STR)) (T (PRINC I STR))) (CL:SETQ ~G206 (CL:CDR ~G206)) (CL:GO ~G204) ~G205 (CL:RETURN-FROM NIL (CL:PROGN))))) (~G830 NIL)))) (~G829 (STRING-LIST X)))) (PRINC #\| STR))))
(CL:DEFUN SYMBOL-CHAR-NEEDS-ESCAPING? (X) (CL:BLOCK SYMBOL-CHAR-NEEDS-ESCAPING? (CL:BLOCK NIL (CL:LABELS ((~G831 (~G207) (CL:COND (~G207 ~G207) (T (LOWER-CASE? X))))) (~G831 (EQL #\| X))))))
(CL:DEFUN SOME (PRED CL:&REST SEQS) (CL:BLOCK SOME (CL:BLOCK NIL (FIND-IF PRED (CL:APPLY (CL:FUNCTION APPEND) SEQS)))))
(CL:DEFUN %PRINT-REST (X STR INFO) (CL:BLOCK %PRINT-REST (CL:BLOCK NIL (CL:COND (X (CL:PROGN (CL:COND ((CONS? X) (CL:PROGN (%PRINT-GAP STR) (%LATE-PRINT (CL:CAR X) STR INFO) (%PRINT-REST (CL:CDR X) STR INFO))) (T (CL:PROGN (PRINC " . " STR) (%LATE-PRINT X STR INFO))))))))))
(CL:DEFUN %PRINT-CALL (X ARGDEF STR INFO) (CL:BLOCK %PRINT-CALL (CL:BLOCK NIL (CL:PROGN (%PRINT-INDENTATION STR INFO) (CL:PROGN (=-PRINT-INFO-COLUMNS (CL:CONS (STREAM-LOCATION-COLUMN (STREAM-OUTPUT-LOCATION STR)) (PRINT-INFO-COLUMNS INFO)) INFO)) (PRINC "(" STR) (%LATE-PRINT (CL:CAR X) STR INFO) (CL:LABELS ((~G832 (EXPANDED) (CL:COND ((EQ EXPANDED 'ERROR) (%PRINT-REST (CL:CDR X) STR INFO)) (T (CL:BLOCK NIL (CL:LABELS ((~G833 (~G199) (CL:LABELS ((~G834 (I) (CL:TAGBODY ~G197 (CL:COND ((NOT ~G199) (CL:GO ~G198))) (CL:SETQ I (CL:CAR ~G199)) (%PRINT-GAP STR) (CL:COND ((CL:COND ((%BODY? (CL:CDR I)) (CL:CDR (CL:CDR I)))) (CL:PROGN (CL:COND (*PRINT-AUTOMATIC-NEWLINE?* (FRESH-LINE STR))) (%PRINT-BODY (CL:CDR (CL:CDR I)) STR INFO))) ((%REST? (CL:CDR I)) (%PRINT-REST (CL:CDR (CL:CDR I)) STR INFO)) ((%KEY? (CL:CDR I)) (CL:PROGN (%PRINT-SYMBOL (MAKE-KEYWORD (CL:CAR I)) STR INFO) (PRINC " " STR) (%LATE-PRINT (CL:CDR (CL:CDR I)) STR INFO))) (T (CL:LABELS ((~G835 (~G195) (CL:PROGN (CL:SETQ *PRINT-AUTOMATIC-NEWLINE?* NIL)) (CL:LABELS ((~G836 (~G196) (CL:PROGN (CL:SETQ *PRINT-AUTOMATIC-NEWLINE?* ~G195)) ~G196)) (~G836 (CL:PROGN (%LATE-PRINT (CL:CDR I) STR INFO)))))) (~G835 *PRINT-AUTOMATIC-NEWLINE?*)))) (CL:SETQ ~G199 (CL:CDR ~G199)) (CL:GO ~G197) ~G198 (CL:RETURN-FROM NIL (CL:PROGN))))) (~G834 NIL)))) (~G833 EXPANDED))))))) (~G832 (%PRINT-GET-ARGS (CL:CDR X) ARGDEF))) (PRINC ")" STR) (CL:LABELS ((~G837 (RET) (CL:PROGN (=-PRINT-INFO-COLUMNS (CL:CDR (PRINT-INFO-COLUMNS INFO)) INFO)) RET)) (~G837 (CL:CAR (PRINT-INFO-COLUMNS INFO))))))))
(CL:DEFUN %PRINT-CALL? (X INFO) (CL:BLOCK %PRINT-CALL? (CL:BLOCK NIL (CL:COND ((PRINT-INFO-PRETTY-PRINT? INFO) (CL:COND ((CONS? X) (CL:COND ((CL:CAR X) (CL:COND ((SYMBOL? (CL:CAR X)) (CL:COND ((LIST? (CL:CDR X)) (CL:LABELS ((~G838 (~G200) (CL:COND (~G200 ~G200) (T (CL:COND ((NOT (BUILTIN? (CL:CAR X))) (CL:PROGN (CL:COND ((FUNCTION? (SYMBOL-FUNCTION (CL:CAR X))) (FUNCTION-ARGUMENTS (CL:CAR X))))))))))) (~G838 (%GET-PRINTER-ARGUMENT-DEFINITION (CL:CAR X)))))))))))))))))
(CL:DEFUN %PRINT-LIST (X STR INFO) (CL:BLOCK %PRINT-LIST (CL:BLOCK NIL (CL:LABELS ((~G839 (!) (CL:COND (! (CL:COND ((FUNCTION? !) (FUNCALL ! X STR INFO)) (T (%PRINT-CALL X ! STR INFO)))) (T (CL:PROGN (%PRINT-INDENTATION STR INFO) (CL:PROGN (=-PRINT-INFO-COLUMNS (CL:CONS (STREAM-LOCATION-COLUMN (STREAM-OUTPUT-LOCATION STR)) (PRINT-INFO-COLUMNS INFO)) INFO)) (PRINC "(" STR) (%LATE-PRINT (CL:CAR X) STR INFO) (%PRINT-REST (CL:CDR X) STR INFO) (PRINC ")" STR) (CL:LABELS ((~G840 (RET) (CL:PROGN (=-PRINT-INFO-COLUMNS (CL:CDR (PRINT-INFO-COLUMNS INFO)) INFO)) RET)) (~G840 (CL:CAR (PRINT-INFO-COLUMNS INFO))))))))) (~G839 (%PRINT-CALL? X INFO))))))
(CL:DEFUN %PRINT-ABBREVIATION (ABBREVIATION X STR INFO) (CL:BLOCK %PRINT-ABBREVIATION (CL:BLOCK NIL (CL:PROGN (%PRINT-INDENTATION STR INFO) (PRINC (CL:CAR (CL:CDR ABBREVIATION)) STR) (%LATE-PRINT (CL:CAR (CL:CDR X)) STR INFO)))))
(CL:DEFUN %PRINT-SYMBOL-COMPONENT (X STR) (CL:BLOCK %PRINT-SYMBOL-COMPONENT (CL:BLOCK NIL (CL:COND ((SOME (CL:FUNCTION SYMBOL-CHAR-NEEDS-ESCAPING?) (STRING-LIST X)) (%PRINT-ESCAPED-SYMBOL X STR)) (T (PRINC X STR))))))
(CL:DEFUN %PRINT-SYMBOL-PACKAGE (NAME STR) (CL:BLOCK %PRINT-SYMBOL-PACKAGE (CL:BLOCK NIL (%PRINT-SYMBOL-COMPONENT (ABBREVIATED-PACKAGE-NAME NAME) STR))))
(CL:DEFUN INVISIBLE-PACKAGE-NAME? (X) (CL:BLOCK INVISIBLE-PACKAGE-NAME? (CL:BLOCK NIL (CL:COND ((NOT (CL:LABELS ((~G841 (~G208) (CL:COND (~G208 ~G208) (T (CL:LABELS ((~G842 (~G209) (CL:COND (~G209 ~G209) (T *ALWAYS-PRINT-PACKAGE-NAMES?*)))) (~G842 (EQ T X))))))) (~G841 (NOT X)))) (CL:PROGN (INVISIBLE-PACKAGE? (SYMBOL-PACKAGE X))))))))
(CL:DEFUN FUNCTION-BODY (FUN) (CL:BLOCK FUNCTION-BODY (CL:BLOCK NIL (CL:COND ((FUNCTION-BYTECODE FUN) (CL:AREF (FUNCTION-BYTECODE FUN) 1)) (T (CL:CDR (FUNCTION-SOURCE FUN)))))))
(CL:DEFUN FUNCTION-ARGUMENTS (FUN) (CL:BLOCK FUNCTION-ARGUMENTS (CL:BLOCK NIL (CL:COND ((BUILTIN? FUN) (CL:CONS 'CL:&REST (CL:CONS 'ARGS-TO-BUILTIN NIL))) ((FUNCTION-BYTECODE FUN) (CL:AREF (FUNCTION-BYTECODE FUN) 0)) (T (CL:CAR (FUNCTION-SOURCE FUN)))))))
(CL:DEFUN RANGE? (X BOTTOM TOP) (CL:BLOCK RANGE? (CL:BLOCK NIL (CL:COND ((>= X BOTTOM) (<= X TOP))))))
(CL:DEFUN PRINT-INFO-PRETTY-PRINT? (ARR) (CL:BLOCK PRINT-INFO-PRETTY-PRINT? (CL:BLOCK NIL (CL:AREF ARR 2))))
(CL:DEFUN =-PRINT-INFO-INDENTATION (VAL ARR) (CL:BLOCK =-PRINT-INFO-INDENTATION (CL:BLOCK NIL (CL:PROGN (=-AREF VAL ARR 4)))))
(CL:DEFUN %BODY-INDENTATION (INFO) (CL:BLOCK %BODY-INDENTATION (CL:BLOCK NIL (CL:LABELS ((~G843 (~G189) (CL:COND (~G189 ~G189) (T 1)))) (~G843 (CL:CAR (PRINT-INFO-COLUMNS INFO)))))))
(CL:DEFUN PRINT-INFO-INDENTATION (ARR) (CL:BLOCK PRINT-INFO-INDENTATION (CL:BLOCK NIL (CL:AREF ARR 4))))
(CL:DEFUN %PRINT-OBJECT (X STR INFO) (CL:BLOCK %PRINT-OBJECT (CL:BLOCK NIL)))
(CL:DEFUN %PRINT-FUNCTION (X STR INFO) (CL:BLOCK %PRINT-FUNCTION (CL:BLOCK NIL (PRINC "#'" STR) (%LATE-PRINT (CL:CONS (FUNCTION-ARGUMENTS X) (FUNCTION-BODY X)) STR INFO))))
(CL:DEFUN %PRINT-ARRAY (X STR INFO) (CL:BLOCK %PRINT-ARRAY (CL:BLOCK NIL (PRINC "#" STR) (CL:PROGN (%PRINT-INDENTATION STR INFO) (CL:PROGN (=-PRINT-INFO-COLUMNS (CL:CONS (STREAM-LOCATION-COLUMN (STREAM-OUTPUT-LOCATION STR)) (PRINT-INFO-COLUMNS INFO)) INFO)) (PRINC "(" STR) (CL:LABELS ((~G844 (~G211) (CL:COND (~G211 (CL:PROGN (CL:LABELS ((~G845 (~G213) (CL:BLOCK NIL (CL:LABELS ((~G846 (~G212) (CL:TAGBODY ~G214 (CL:COND ((== ~G212 ~G213) (CL:RETURN-FROM NIL (CL:PROGN)))) (CL:LABELS ((~G847 (I) (CL:LABELS ((~G848 (~G215) (CL:COND (~G215 ~G215) (T (PRINC #\  STR))))) (~G848 (ZERO? I))) (%LATE-PRINT I STR INFO))) (~G847 (CL:AREF ~G211 ~G212))) (CL:SETQ ~G212 (NUMBER+ 1 ~G212)) (CL:GO ~G214)))) (~G846 0))))) (~G845 (INTEGER (CL:LENGTH ~G211))))))))) (~G844 X)) (PRINC ")" STR) (CL:LABELS ((~G849 (RET) (CL:PROGN (=-PRINT-INFO-COLUMNS (CL:CDR (PRINT-INFO-COLUMNS INFO)) INFO)) RET)) (~G849 (CL:CAR (PRINT-INFO-COLUMNS INFO))))))))
(CL:DEFUN %PRINT-STRING (X STR) (CL:BLOCK %PRINT-STRING (CL:BLOCK NIL (PRINC #\" STR) (CL:BLOCK NIL (CL:LABELS ((~G850 (~G203) (CL:LABELS ((~G851 (I) (CL:TAGBODY ~G201 (CL:COND ((NOT ~G203) (CL:GO ~G202))) (CL:SETQ I (CL:CAR ~G203)) (CL:COND ((EQL I #\") (PRINC "\\\"" STR)) ((EQL I #\\) (PRINC "\\\\" STR)) (T (PRINC I STR))) (CL:SETQ ~G203 (CL:CDR ~G203)) (CL:GO ~G201) ~G202 (CL:RETURN-FROM NIL (CL:PROGN))))) (~G851 NIL)))) (~G850 (STRING-LIST X)))) (PRINC #\" STR))))
(CL:DEFUN %PRINT-CHARACTER (X STR) (CL:BLOCK %PRINT-CHARACTER (CL:BLOCK NIL (PRINC "#\\" STR) (PRINC X STR))))
(CL:DEFUN %PRINT-SYMBOL (X STR INFO) (CL:BLOCK %PRINT-SYMBOL (CL:BLOCK NIL (CL:LABELS ((~G852 (!) (CL:COND (! (CL:PROGN (CL:COND ((NOT (INVISIBLE-PACKAGE-NAME? X)) (CL:PROGN (CL:LABELS ((~G853 (~G210) (CL:COND (~G210 ~G210) (T (%PRINT-SYMBOL-PACKAGE (CL:PACKAGE-NAME !) STR))))) (~G853 (KEYWORD? X))) (PRINC #\: STR))))))))) (~G852 (CL:COND (X (CL:COND ((NOT (EQ T X)) (SYMBOL-PACKAGE X))))))) (%PRINT-SYMBOL-COMPONENT (SYMBOL-NAME X) STR))))
(CL:DEFUN %PRINT-CONS (X STR INFO) (CL:BLOCK %PRINT-CONS (CL:BLOCK NIL (CL:LABELS ((~G854 (!) (CL:COND (! (%PRINT-ABBREVIATION ! X STR INFO)) (T (%PRINT-LIST X STR INFO))))) (~G854 (CL:COND ((CONS? (CL:CDR X)) (CL:COND ((NOT (CL:CDR (CL:CDR X))) (ASSOC (CL:CAR X) *PRINTER-ABBREVIATIONS* :TEST (CL:FUNCTION EQ)))))))))))
(CL:DEFUN INTEGER-CHARS-0 (X) (CL:BLOCK INTEGER-CHARS-0 (CL:BLOCK NIL (CL:LABELS ((~G855 (!) (CL:CONS (NUMBER-DIGIT !) (CL:COND ((<= 10 X) (INTEGER-CHARS-0 (/ (- X !) 10))))))) (~G855 (INTEGER (CL:MOD X 10)))))))
(CL:DEFUN ABS (X) (CL:BLOCK ABS (CL:BLOCK NIL (CL:COND ((< X 0) (- X)) (T X)))))
(CL:DEFUN NUMBER-DIGIT (X) (CL:BLOCK NUMBER-DIGIT (CL:BLOCK NIL (CODE-CHAR (+ X (CL:CHAR-CODE #\0))))))
(CL:DEFUN DIGIT-NUMBER (X) (CL:BLOCK DIGIT-NUMBER (CL:BLOCK NIL (- (CL:CHAR-CODE X) (CL:CHAR-CODE #\0)))))
(CL:DEFUN %NONDECIMAL-DIGIT? (X START BASE) (CL:BLOCK %NONDECIMAL-DIGIT? (CL:BLOCK NIL (CHARRANGE? X START (CODE-CHAR (+ (CL:CHAR-CODE START) (- BASE 10)))))))
(CL:DEFUN %LATE-PRINT (X STR INFO) (CL:BLOCK %LATE-PRINT (CL:BLOCK NIL (CL:PROGN (%PRINT-INDENTATION STR INFO) (CL:LABELS ((~G856 (~G216) (CL:COND ((CONS? ~G216) (%PRINT-CONS X STR INFO)) ((SYMBOL? ~G216) (%PRINT-SYMBOL X STR INFO)) ((CHARACTER? ~G216) (%PRINT-CHARACTER X STR)) ((NUMBER? ~G216) (PRINC X STR)) ((STRING? ~G216) (%PRINT-STRING X STR)) ((ARRAY? ~G216) (%PRINT-ARRAY X STR INFO)) ((FUNCTION? ~G216) (%PRINT-FUNCTION X STR INFO)) ((OBJECT? ~G216) (%PRINT-OBJECT X STR INFO)) (T (%ERROR "Don't know how to print object."))))) (~G856 X))))))
(CL:DEFUN %PRINT-BODY (X STR INFO) (CL:BLOCK %PRINT-BODY (CL:BLOCK NIL (CL:LABELS ((~G857 (~G190) (CL:PROGN (=-PRINT-INFO-INDENTATION (%BODY-INDENTATION INFO) INFO)) (CL:LABELS ((~G858 (~G191) (CL:PROGN (=-PRINT-INFO-INDENTATION ~G190 INFO)) ~G191)) (~G858 (CL:PROGN (CL:LABELS ((~G859 (FIRST?) (CL:BLOCK NIL (CL:LABELS ((~G860 (~G194) (CL:LABELS ((~G861 (I) (CL:TAGBODY ~G192 (CL:COND ((NOT ~G194) (CL:GO ~G193))) (CL:SETQ I (CL:CAR ~G194)) (CL:COND (FIRST? (CL:PROGN (CL:SETQ FIRST? NIL))) (T (CL:COND (*PRINT-AUTOMATIC-NEWLINE?* (FRESH-LINE STR))))) (%LATE-PRINT I STR INFO) (CL:SETQ ~G194 (CL:CDR ~G194)) (CL:GO ~G192) ~G193 (CL:RETURN-FROM NIL (CL:PROGN))))) (~G861 NIL)))) (~G860 X))))) (~G859 T))))))) (~G857 (PRINT-INFO-INDENTATION INFO))))))
(CL:DEFUN =-PRINT-INFO-COLUMNS (VAL ARR) (CL:BLOCK =-PRINT-INFO-COLUMNS (CL:BLOCK NIL (CL:PROGN (=-AREF VAL ARR 5)))))
(CL:DEFUN PRINT-INFO-COLUMNS (ARR) (CL:BLOCK PRINT-INFO-COLUMNS (CL:BLOCK NIL (CL:AREF ARR 5))))
(CL:DEFUN %PRINT-INDENTATION (STR INFO) (CL:BLOCK %PRINT-INDENTATION (CL:BLOCK NIL (CL:COND ((PRINT-INFO-PRETTY-PRINT? INFO) (CL:COND ((FRESH-LINE? STR) (CL:LABELS ((~G862 (~G187) (CL:BLOCK NIL (CL:LABELS ((~G863 (!) (CL:TAGBODY ~G188 (CL:COND ((== ! ~G187) (CL:RETURN-FROM NIL (CL:PROGN NIL)))) (PRINC " " STR) (CL:SETQ ! (NUMBER+ 1 !)) (CL:GO ~G188)))) (~G863 0))))) (~G862 (INTEGER (PRINT-INFO-INDENTATION INFO)))))))))))
(CL:DEFUN MAKE-PRINT-INFO (CL:&KEY (PRETTY-PRINT? 'PRETTY-PRINT?) (DOWNCASE? 'DOWNCASE?) (INDENTATION 'INDENTATION) (COLUMNS 'COLUMNS)) (CL:BLOCK MAKE-PRINT-INFO (CL:BLOCK NIL (CL:LABELS ((~G864 (~G185) (CL:PROGN (=-AREF 'STRUCT ~G185 0) (=-AREF 'PRINT-INFO ~G185 1)) (CL:PROGN (=-AREF (CL:COND ((EQ PRETTY-PRINT? 'PRETTY-PRINT?) NIL) (T PRETTY-PRINT?)) ~G185 2)) (CL:PROGN (=-AREF (CL:COND ((EQ DOWNCASE? 'DOWNCASE?) NIL) (T DOWNCASE?)) ~G185 3)) (CL:PROGN (=-AREF (CL:COND ((EQ INDENTATION 'INDENTATION) 0) (T INDENTATION)) ~G185 4)) (CL:PROGN (=-AREF (CL:COND ((EQ COLUMNS 'COLUMNS) NIL) (T COLUMNS)) ~G185 5)) ~G185)) (~G864 (MAKE-ARRAY 6))))))
(CL:DEFUN CHARRANGE? (X START END) (CL:BLOCK CHARRANGE? (CL:BLOCK NIL (RANGE? (CL:CHAR-CODE X) (CL:CHAR-CODE START) (CL:CHAR-CODE END)))))
(CL:DEFUN LOWER-CASE? (CL:&REST ~G49) (CL:BLOCK LOWER-CASE? (CL:BLOCK NIL (CL:BLOCK NIL (CL:LABELS ((~G865 (~G53) (CL:LABELS ((~G866 (C) (CL:TAGBODY ~G51 (CL:COND ((NOT ~G53) (CL:GO ~G52))) (CL:SETQ C (CL:CAR ~G53)) (CL:LABELS ((~G867 (~G50) (CL:COND (~G50 ~G50) (T (CL:RETURN-FROM NIL NIL))))) (~G867 (CHARRANGE? C #\a #\z))) (CL:SETQ ~G53 (CL:CDR ~G53)) (CL:GO ~G51) ~G52 (CL:RETURN-FROM NIL (CL:PROGN T))))) (~G866 NIL)))) (~G865 ~G49))))))
(CL:DEFUN FORMAT-INFO-TEXT (ARR) (CL:BLOCK FORMAT-INFO-TEXT (CL:BLOCK NIL (CL:AREF ARR 3))))
(CL:DEFUN LATE-PRINT (X CL:&OPTIONAL (STR *STANDARD-OUTPUT*) CL:&KEY (PRINT-INFO (MAKE-PRINT-INFO))) (CL:BLOCK LATE-PRINT (CL:BLOCK NIL (CL:LABELS ((~G868 (~G217) (CL:LABELS ((~G869 (S) (CL:LABELS ((~G870 (~G218) (CL:COND (~G217 ~G218) (T (GET-STREAM-STRING S))))) (~G870 (CL:PROGN (CL:COND ((CL:COND ((CONS? X) (CONS? (CL:CAR X)))) (CL:PROGN (%PRINT-INDENTATION S PRINT-INFO) (CL:PROGN (=-PRINT-INFO-COLUMNS (CL:CONS (STREAM-LOCATION-COLUMN (STREAM-OUTPUT-LOCATION STR)) (PRINT-INFO-COLUMNS PRINT-INFO)) PRINT-INFO)) (PRINC "(" S) (%PRINT-BODY X S PRINT-INFO) (PRINC ")" S) (CL:LABELS ((~G871 (RET) (CL:PROGN (=-PRINT-INFO-COLUMNS (CL:CDR (PRINT-INFO-COLUMNS PRINT-INFO)) PRINT-INFO)) RET)) (~G871 (CL:CAR (PRINT-INFO-COLUMNS PRINT-INFO)))))) (T (%LATE-PRINT X S PRINT-INFO))) (CL:COND (*PRINT-AUTOMATIC-NEWLINE?* (CL:COND ((NOT (FRESH-LINE? S)) (TERPRI S)))))))))) (~G869 (DEFAULT-STREAM ~G217))))) (~G868 STR)) X)))
(CL:DEFUN NEXT-TABULATOR-COLUMN (COLUMN SIZE) (CL:BLOCK NEXT-TABULATOR-COLUMN (CL:BLOCK NIL (INTEGER (++ (* SIZE (++ (/ (-- COLUMN) SIZE))))))))
(CL:DEFUN =-STREAM-LOCATION-LINE (VAL ARR) (CL:BLOCK =-STREAM-LOCATION-LINE (CL:BLOCK NIL (CL:PROGN (=-AREF VAL ARR 4)))))
(CL:DEFUN =-STREAM-LOCATION-COLUMN (VAL ARR) (CL:BLOCK =-STREAM-LOCATION-COLUMN (CL:BLOCK NIL (CL:PROGN (=-AREF VAL ARR 5)))))
(CL:DEFUN STREAM-LOCATION-TABSIZE (ARR) (CL:BLOCK STREAM-LOCATION-TABSIZE (CL:BLOCK NIL (CL:AREF ARR 6))))
(CL:DEFUN NONDECIMAL-DIGIT? (X CL:&KEY (BASE 10)) (CL:BLOCK NONDECIMAL-DIGIT? (CL:BLOCK NIL (CL:COND ((< 10 BASE) (CL:LABELS ((~G872 (~G65) (CL:COND (~G65 ~G65) (T (%NONDECIMAL-DIGIT? X #\A BASE))))) (~G872 (%NONDECIMAL-DIGIT? X #\a BASE))))))))
(CL:DEFUN DECIMAL-DIGIT? (X) (CL:BLOCK DECIMAL-DIGIT? (CL:BLOCK NIL (CHARRANGE? X #\0 #\9))))
(CL:DEFUN GENERIC-SPLIT (OBJ SEQ CL:&KEY (TEST (CL:FUNCTION EQL)) (INCLUDE? NIL)) (CL:BLOCK GENERIC-SPLIT (CL:BLOCK NIL (CL:COND (SEQ (CL:LABELS ((~G873 (!) (CL:COND (! (CL:CONS (SUBSEQ SEQ 0 (CL:COND (INCLUDE? (++ !)) (T !))) (GENERIC-SPLIT OBJ (SUBSEQ SEQ (++ !)) :TEST TEST :INCLUDE? INCLUDE?))) (T (CL:LIST SEQ))))) (~G873 (POSITION OBJ SEQ :TEST TEST))))))))
(CL:DEFUN CHARACTER<= (CL:&REST X) (CL:BLOCK CHARACTER<= (CL:BLOCK NIL (CL:APPLY (CL:FUNCTION <=) (DYNAMIC-MAP (CL:FUNCTION CL:CHAR-CODE) X)))))
(CL:DEFUN CHARACTER>= (CL:&REST X) (CL:BLOCK CHARACTER>= (CL:BLOCK NIL (CL:APPLY (CL:FUNCTION >=) (DYNAMIC-MAP (CL:FUNCTION CL:CHAR-CODE) X)))))
(CL:DEFUN SPECIAL-CHAR? (X) (CL:BLOCK SPECIAL-CHAR? (CL:BLOCK NIL (CL:LABELS ((~G874 (~G237) (CL:COND (~G237 ~G237) (T (CL:LABELS ((~G875 (~G238) (CL:COND (~G238 ~G238) (T (CL:LABELS ((~G876 (~G239) (CL:COND (~G239 ~G239) (T (CL:LABELS ((~G877 (~G240) (CL:COND (~G240 ~G240) (T (CL:LABELS ((~G878 (~G241) (CL:COND (~G241 ~G241) (T (CL:LABELS ((~G879 (~G242) (CL:COND (~G242 ~G242) (T (CL:LABELS ((~G880 (~G243) (CL:COND (~G243 ~G243) (T (CL:LABELS ((~G881 (~G244) (CL:COND (~G244 ~G244) (T (CL:LABELS ((~G882 (~G245) (CL:COND (~G245 ~G245) (T (CL:LABELS ((~G883 (~G246) (CL:COND (~G246 ~G246) (T (CL:LABELS ((~G884 (~G247) (CL:COND (~G247 ~G247) (T (CL:LABELS ((~G885 (~G248) (CL:COND (~G248 ~G248) (T (CL:LABELS ((~G886 (~G249) (CL:COND (~G249 ~G249) (T (EQL X #\^))))) (~G886 (EQL X #\#))))))) (~G885 (EQL X #\;))))))) (~G884 (EQL X #\:))))))) (~G883 (EQL X #\,))))))) (~G882 (EQL X #\`))))))) (~G881 (EQL X #\'))))))) (~G880 (EQL X #\"))))))) (~G879 (EQL X #\}))))))) (~G878 (EQL X #\{))))))) (~G877 (EQL X #\]))))))) (~G876 (EQL X #\[))))))) (~G875 (EQL X #\)))))))) (~G874 (EQL X #\())))))
(CL:DEFUN READ-INTEGER-0 (STR V) (CL:BLOCK READ-INTEGER-0 (CL:BLOCK NIL (CL:COND ((PEEK-DIGIT STR) (READ-INTEGER-0 STR (+ (* V 10) (DIGIT-NUMBER (READ-CHAR STR))))) (T V)))))
(CL:DEFUN PEEK-DIGIT (STR) (CL:BLOCK PEEK-DIGIT (CL:BLOCK NIL (CL:LABELS ((~G887 (!) (CL:COND (! (CL:PROGN (CL:COND ((DIGIT-CHAR? !) !))))))) (~G887 (PEEK-CHAR STR))))))
(CL:DEFUN READ-DECIMAL-PLACES-0 (STR V S) (CL:BLOCK READ-DECIMAL-PLACES-0 (CL:BLOCK NIL (CL:COND ((PEEK-DIGIT STR) (READ-DECIMAL-PLACES-0 STR (+ V (* S (DIGIT-NUMBER (READ-CHAR STR)))) (/ S 10))) (T V)))))
(CL:DEFUN DECIMALS-CHARS (X) (CL:BLOCK DECIMALS-CHARS (CL:BLOCK NIL (CL:LABELS ((~G888 (!) (CL:COND ((< 0 !) (CL:CONS (NUMBER-DIGIT (INTEGER !)) (DECIMALS-CHARS !)))))) (~G888 (CL:MOD (* X 10) 10))))))
(CL:DEFUN INTEGER-CHARS (X) (CL:BLOCK INTEGER-CHARS (CL:BLOCK NIL (REVERSE (INTEGER-CHARS-0 (INTEGER (ABS X)))))))
(CL:DEFUN %FIND-IF-SEQUENCE (PRED SEQ START END FROM-END WITH-INDEX) (CL:BLOCK %FIND-IF-SEQUENCE (CL:BLOCK NIL (CL:COND (SEQ (CL:COND ((< 0 (CL:LENGTH SEQ)) (CL:LABELS ((~G889 (E) (CL:LABELS ((~G890 (S) (CL:COND ((CL:LABELS ((~G891 (~G88) (CL:COND (~G88 ~G88) (T (CL:COND ((< S E) FROM-END)))))) (~G891 (CL:COND ((> S E) (NOT FROM-END))))) (CL:LABELS ((~G892 (~G89) (CL:PROGN (CL:SETQ S E) (CL:SETQ E ~G89)))) (~G892 S)))) (CL:BLOCK NIL (CL:LABELS ((~G893 (I) (CL:TAGBODY ~G90 (CL:COND ((CL:COND (FROM-END (< I E)) (T (> I E))) (CL:RETURN-FROM NIL (CL:PROGN)))) (CL:LABELS ((~G894 (!) (CL:COND ((CL:APPLY PRED (CL:CONS ! (CL:COND (WITH-INDEX (CL:LIST I))))) (CL:RETURN-FROM NIL !))))) (~G894 (ELT SEQ I))) (CL:SETQ I (CL:COND (FROM-END (-- I)) (T (++ I)))) (CL:GO ~G90)))) (~G893 S))))) (~G890 (CL:LABELS ((~G895 (~G87) (CL:COND (~G87 ~G87) (T 0)))) (~G895 START)))))) (~G889 (CL:LABELS ((~G896 (~G86) (CL:COND (~G86 ~G86) (T (-- (CL:LENGTH SEQ)))))) (~G896 END)))))))))))
(CL:DEFUN %FIND-IF-LIST (PRED SEQ FROM-END WITH-INDEX) (CL:BLOCK %FIND-IF-LIST (CL:BLOCK NIL (CL:LABELS ((~G897 (!) (CL:COND (WITH-INDEX (CL:LABELS ((~G898 (IDX) (CL:BLOCK NIL (CL:LABELS ((~G899 (~G85) (CL:LABELS ((~G900 (I) (CL:TAGBODY ~G83 (CL:COND ((NOT ~G85) (CL:GO ~G84))) (CL:SETQ I (CL:CAR ~G85)) (CL:COND ((FUNCALL PRED I IDX) (CL:RETURN-FROM NIL I))) (CL:PROGN (CL:SETQ IDX (NUMBER+ IDX 1))) (CL:SETQ ~G85 (CL:CDR ~G85)) (CL:GO ~G83) ~G84 (CL:RETURN-FROM NIL (CL:PROGN))))) (~G900 NIL)))) (~G899 !))))) (~G898 0))) (T (CL:BLOCK NIL (CL:LABELS ((~G901 (~G82) (CL:LABELS ((~G902 (I) (CL:TAGBODY ~G80 (CL:COND ((NOT ~G82) (CL:GO ~G81))) (CL:SETQ I (CL:CAR ~G82)) (CL:COND ((FUNCALL PRED I) (CL:RETURN-FROM NIL I))) (CL:SETQ ~G82 (CL:CDR ~G82)) (CL:GO ~G80) ~G81 (CL:RETURN-FROM NIL (CL:PROGN))))) (~G902 NIL)))) (~G901 !))))))) (~G897 (CL:COND (FROM-END (REVERSE SEQ)) (T SEQ)))))))
(CL:DEFUN REVERSE (LST) (CL:BLOCK REVERSE (CL:BLOCK NIL (CL:LABELS ((~G903 (!) (CL:BLOCK NIL (CL:LABELS ((~G904 (~G22) (CL:LABELS ((~G905 (I) (CL:TAGBODY ~G20 (CL:COND ((NOT ~G22) (CL:GO ~G21))) (CL:SETQ I (CL:CAR ~G22)) (CL:PROGN (CL:SETQ ! (CL:CONS I !))) (CL:SETQ ~G22 (CL:CDR ~G22)) (CL:GO ~G20) ~G21 (CL:RETURN-FROM NIL (CL:PROGN !))))) (~G905 NIL)))) (~G904 LST))))) (~G903 NIL)))))
(CL:DEFUN =-ELT (VAL SEQ IDX) (CL:BLOCK =-ELT (CL:BLOCK NIL (%SET-ELT VAL SEQ IDX))))
(CL:DEFUN FIND-IF (PRED SEQ CL:&KEY (START NIL) (END NIL) (FROM-END NIL) (WITH-INDEX NIL)) (CL:BLOCK FIND-IF (CL:BLOCK NIL (CL:COND ((NOT (CL:ATOM SEQ) START END) (%FIND-IF-LIST PRED SEQ FROM-END WITH-INDEX)) (T (%FIND-IF-SEQUENCE PRED SEQ START END FROM-END WITH-INDEX))))))
(CL:DEFUN QUEUE-POP (X) (CL:BLOCK QUEUE-POP (CL:BLOCK NIL (CL:LABELS ((~G906 (~G10) (CL:COND ((NOT (CL:CDR (CL:CDR X))) (CL:RPLACA X NIL))) (CL:COND ((CL:CDR X) (CL:RPLACD X (CL:CDR (CL:CDR X))))) ~G10)) (~G906 (CL:CAR (CL:CDR X)))))))
(CL:DEFUN PRINC-NUMBER (X STR) (CL:BLOCK PRINC-NUMBER (CL:BLOCK NIL (CL:COND ((< X 0) (PRINC #\- STR))) (STREAM-PRINC (INTEGER-CHARS X) STR) (CL:LABELS ((~G907 (!) (CL:COND ((NOT (ZERO? !)) (CL:PROGN (PRINC #\. STR) (STREAM-PRINC (DECIMALS-CHARS !) STR)))))) (~G907 (CL:MOD X 1))))))
(CL:DEFUN NUMBER-NOT-CHARACTER? (X) (CL:BLOCK NUMBER-NOT-CHARACTER? (CL:BLOCK NIL (CL:COND ((NOT (CHARACTER? X)) (NUMBER? X))))))
(CL:DEFUN READ-DECIMAL-PLACES (CL:&OPTIONAL (STR *STANDARD-INPUT*)) (CL:BLOCK READ-DECIMAL-PLACES (CL:BLOCK NIL (CL:COND ((CL:LABELS ((~G908 (!) (CL:COND (! (DIGIT-CHAR? !))))) (~G908 (PEEK-CHAR STR))) (READ-DECIMAL-PLACES-0 STR 0 0.1))))))
(CL:DEFUN PEEK-DOT (STR) (CL:BLOCK PEEK-DOT (CL:BLOCK NIL (CL:LABELS ((~G909 (!) (CL:COND (! (CL:PROGN (EQL #\. !)))))) (~G909 (PEEK-CHAR STR))))))
(CL:DEFUN READ-INTEGER (CL:&OPTIONAL (STR *STANDARD-INPUT*)) (CL:BLOCK READ-INTEGER (CL:BLOCK NIL (CL:COND ((PEEK-DIGIT STR) (INTEGER (READ-INTEGER-0 STR 0)))))))
(CL:DEFUN SYMBOL-CHAR? (X) (CL:BLOCK SYMBOL-CHAR? (CL:BLOCK NIL (CL:COND (X (CL:COND ((> (CL:CHAR-CODE X) 32) (NOT (SPECIAL-CHAR? X)))))))))
(CL:DEFUN HEX-DIGIT-CHAR? (X) (CL:BLOCK HEX-DIGIT-CHAR? (CL:BLOCK NIL (CL:LABELS ((~G910 (~G67) (CL:COND (~G67 ~G67) (T (CL:LABELS ((~G911 (~G68) (CL:COND (~G68 ~G68) (T (CL:COND ((CHARACTER>= X #\a) (CHARACTER<= X #\f))))))) (~G911 (CL:COND ((CHARACTER>= X #\A) (CHARACTER<= X #\F))))))))) (~G910 (DIGIT-CHAR? X))))))
(CL:DEFUN SPLIT (OBJ SEQ CL:&KEY (TEST (CL:FUNCTION EQL)) (INCLUDE? NIL)) (CL:BLOCK SPLIT (CL:BLOCK NIL (GENERIC-SPLIT OBJ SEQ :TEST TEST :INCLUDE? INCLUDE?))))
(CL:DEFUN STREAM-LOCATION-ID (ARR) (CL:BLOCK STREAM-LOCATION-ID (CL:BLOCK NIL (CL:AREF ARR 3))))
(CL:DEFUN STREAM-LOCATION-LINE (ARR) (CL:BLOCK STREAM-LOCATION-LINE (CL:BLOCK NIL (CL:AREF ARR 4))))
(CL:DEFUN STREAM-INPUT-LOCATION (ARR) (CL:BLOCK STREAM-INPUT-LOCATION (CL:BLOCK NIL (CL:AREF ARR 8))))
(CL:DEFUN READ-SYMBOL (STR) (CL:BLOCK READ-SYMBOL (CL:BLOCK NIL (CL:LABELS ((F NIL (CL:BLOCK NIL (CL:COND ((SYMBOL-CHAR? (PEEK-CHAR STR)) (CL:CONS (CHAR-UPCASE (READ-CHAR STR)) (F))))))) (CL:COND ((NOT (SPECIAL-CHAR? (SEEK-CHAR STR))) (CL:PROGN (F))))))))
(CL:DEFUN EVERY (PRED CL:&REST SEQS) (CL:BLOCK EVERY (CL:BLOCK NIL (CL:BLOCK NIL (CL:LABELS ((~G912 (~G94) (CL:LABELS ((~G913 (SEQ) (CL:TAGBODY ~G92 (CL:COND ((NOT ~G94) (CL:GO ~G93))) (CL:SETQ SEQ (CL:CAR ~G94)) (CL:LABELS ((~G914 (~G95) (CL:BLOCK NIL (CL:LABELS ((~G915 (!) (CL:TAGBODY ~G96 (CL:COND ((== ! ~G95) (CL:RETURN-FROM NIL (CL:PROGN NIL)))) (CL:LABELS ((~G916 (~G91) (CL:COND (~G91 ~G91) (T (CL:RETURN-FROM EVERY NIL))))) (~G916 (FUNCALL PRED (ELT SEQ !)))) (CL:SETQ ! (NUMBER+ 1 !)) (CL:GO ~G96)))) (~G915 0))))) (~G914 (INTEGER (CL:LENGTH SEQ)))) (CL:SETQ ~G94 (CL:CDR ~G94)) (CL:GO ~G92) ~G93 (CL:RETURN-FROM NIL (CL:PROGN T))))) (~G913 NIL)))) (~G912 SEQS))))))
(CL:DEFUN DIGIT-CHAR? (C CL:&KEY (BASE 10)) (CL:BLOCK DIGIT-CHAR? (CL:BLOCK NIL (CL:COND ((CHARACTER? C) (CL:LABELS ((~G917 (~G66) (CL:COND (~G66 ~G66) (T (NONDECIMAL-DIGIT? C :BASE BASE))))) (~G917 (DECIMAL-DIGIT? C))))))))
(CL:DEFUN STREAM-FUN-OUT (ARR) (CL:BLOCK STREAM-FUN-OUT (CL:BLOCK NIL (CL:AREF ARR 4))))
(CL:DEFUN %TRACK-LOCATION (STREAM-LOCATION X) (CL:BLOCK %TRACK-LOCATION (CL:BLOCK NIL (CL:LABELS ((~G918 (~G135) (CL:LABELS ((~G919 (STREAM-LOCATION TRACK? ID LINE COLUMN TABSIZE) TRACK? ID LINE COLUMN TABSIZE (CL:COND (TRACK? (CL:PROGN (CL:COND ((STRING? X) (CL:LABELS ((~G920 (~G136) (CL:COND (~G136 (CL:PROGN (CL:LABELS ((~G921 (~G138) (CL:BLOCK NIL (CL:LABELS ((~G922 (~G137) (CL:TAGBODY ~G139 (CL:COND ((== ~G137 ~G138) (CL:RETURN-FROM NIL (CL:PROGN NIL)))) (CL:LABELS ((~G923 (!) (%TRACK-LOCATION STREAM-LOCATION !))) (~G923 (ELT ~G136 ~G137))) (CL:SETQ ~G137 (NUMBER+ 1 ~G137)) (CL:GO ~G139)))) (~G922 0))))) (~G921 (INTEGER (CL:LENGTH ~G136))))))))) (~G920 X))) (T (CL:COND (X (CL:PROGN (CL:COND ((== 10 (CL:CHAR-CODE X)) (CL:PROGN (CL:PROGN (=-STREAM-LOCATION-COLUMN 1 STREAM-LOCATION)) (CL:PROGN (=-STREAM-LOCATION-LINE (NUMBER+ (STREAM-LOCATION-LINE STREAM-LOCATION) 1) STREAM-LOCATION)))) (T (CL:COND ((== 9 (CL:CHAR-CODE X)) (CL:PROGN (=-STREAM-LOCATION-COLUMN (NEXT-TABULATOR-COLUMN COLUMN TABSIZE) STREAM-LOCATION))) ((< 31 (CL:CHAR-CODE X)) (CL:PROGN (=-STREAM-LOCATION-COLUMN (NUMBER+ (STREAM-LOCATION-COLUMN STREAM-LOCATION) 1) STREAM-LOCATION)))))))))))))) X)) (~G919 ~G135 (STREAM-LOCATION-TRACK? ~G135) (STREAM-LOCATION-ID ~G135) (STREAM-LOCATION-LINE ~G135) (STREAM-LOCATION-COLUMN ~G135) (STREAM-LOCATION-TABSIZE ~G135))))) (~G918 STREAM-LOCATION)))))
(CL:DEFUN ZERO? (X) (CL:BLOCK ZERO? (CL:BLOCK NIL (CL:COND ((NUMBER? X) (== 0 X))))))
(CL:DEFUN %FORMAT-DIRECTIVE-TILDE (INF TXT ARGS) (CL:BLOCK %FORMAT-DIRECTIVE-TILDE (CL:BLOCK NIL (PRINC #\~ (FORMAT-INFO-STREAM INF)) (%FORMAT INF TXT ARGS))))
(CL:DEFUN %FORMAT-DIRECTIVE-FRESH-LINE (INF TXT ARGS) (CL:BLOCK %FORMAT-DIRECTIVE-FRESH-LINE (CL:BLOCK NIL (FRESH-LINE (FORMAT-INFO-STREAM INF)) (%FORMAT INF TXT ARGS))))
(CL:DEFUN %FORMAT-DIRECTIVE-FORCE-OUTPUT (INF TXT ARGS) (CL:BLOCK %FORMAT-DIRECTIVE-FORCE-OUTPUT (CL:BLOCK NIL (FORCE-OUTPUT (FORMAT-INFO-STREAM INF)) (%FORMAT INF TXT ARGS))))
(CL:DEFUN %FORMAT-DIRECTIVE-PLACEHOLDER (INF TXT ARGS) (CL:BLOCK %FORMAT-DIRECTIVE-PLACEHOLDER (CL:BLOCK NIL (CL:COND (ARGS (CL:COND ((CONS? (CL:CAR ARGS)) (LATE-PRINT (CL:CAR ARGS) (FORMAT-INFO-STREAM INF))) (T (PRINC (CL:CAR ARGS) (FORMAT-INFO-STREAM INF))))) (T (ERROR "Argument ~A specified in format \"~A\" is missing." (FORMAT-INFO-PROCESSED-ARGS INF) (FORMAT-INFO-TEXT INF)))) (%FORMAT INF TXT (CL:CDR ARGS)))))
(CL:DEFUN %FORMAT-DIRECTIVE-EOL (INF TXT ARGS) (CL:BLOCK %FORMAT-DIRECTIVE-EOL (CL:BLOCK NIL (TERPRI (FORMAT-INFO-STREAM INF)) (%FORMAT INF TXT ARGS))))
(CL:DEFUN CHAR-UPCASE (C) (CL:BLOCK CHAR-UPCASE (CL:BLOCK NIL (CL:COND ((LOWER-CASE? C) (CODE-CHAR (- (+ (CL:CHAR-CODE C) (CL:CHAR-CODE #\A)) (CL:CHAR-CODE #\a)))) (T C)))))
(CL:DEFUN =-FORMAT-INFO-PROCESSED-ARGS (VAL ARR) (CL:BLOCK =-FORMAT-INFO-PROCESSED-ARGS (CL:BLOCK NIL (CL:PROGN (=-AREF VAL ARR 5)))))
(CL:DEFUN FORMAT-INFO-PROCESSED-ARGS (ARR) (CL:BLOCK FORMAT-INFO-PROCESSED-ARGS (CL:BLOCK NIL (CL:AREF ARR 5))))
(CL:DEFUN %NCONC-0 (LSTS) (CL:BLOCK %NCONC-0 (CL:BLOCK NIL (CL:COND (LSTS (CL:PROGN (CL:LABELS ((~G924 (!) (CL:COND (! (CL:PROGN (CL:RPLACD (CL:LAST !) (%NCONC-0 (CL:CDR LSTS))) !)) (T (%NCONC-0 (CL:CDR LSTS)))))) (~G924 (CL:CAR LSTS)))))))))
(CL:DEFUN %FORMAT-DIRECTIVE (INF TXT ARGS) (CL:BLOCK %FORMAT-DIRECTIVE (CL:BLOCK NIL (CL:PROGN (=-FORMAT-INFO-PROCESSED-ARGS (NUMBER+ (FORMAT-INFO-PROCESSED-ARGS INF) 1) INF)) (CL:LABELS ((~G925 (~G303) (CL:COND ((EQL ~G303 #\%) (%FORMAT-DIRECTIVE-EOL INF (CL:CDR TXT) ARGS)) ((EQL ~G303 #\A) (%FORMAT-DIRECTIVE-PLACEHOLDER INF (CL:CDR TXT) ARGS)) ((EQL ~G303 #\F) (%FORMAT-DIRECTIVE-FORCE-OUTPUT INF (CL:CDR TXT) ARGS)) ((EQL ~G303 #\L) (%FORMAT-DIRECTIVE-FRESH-LINE INF (CL:CDR TXT) ARGS)) ((EQL ~G303 #\~) (CL:PROGN (PRINC (CL:CAR TXT) (FORMAT-INFO-STREAM INF)) (%FORMAT INF (CL:CDR TXT) ARGS))) (T (%FORMAT-DIRECTIVE-TILDE INF TXT ARGS))))) (~G925 (CHAR-UPCASE (CL:CAR TXT)))))))
(CL:DEFUN FORMAT-INFO-STREAM (ARR) (CL:BLOCK FORMAT-INFO-STREAM (CL:BLOCK NIL (CL:AREF ARR 2))))
(CL:DEFUN =-STREAM-USER-DETAIL (VAL ARR) (CL:BLOCK =-STREAM-USER-DETAIL (CL:BLOCK NIL (CL:PROGN (=-AREF VAL ARR 10)))))
(CL:DEFUN QUEUE-STRING (X) (CL:BLOCK QUEUE-STRING (CL:BLOCK NIL (LIST-STRING (QUEUE-LIST X)))))
(CL:DEFUN STREAM-USER-DETAIL (ARR) (CL:BLOCK STREAM-USER-DETAIL (CL:BLOCK NIL (CL:AREF ARR 10))))
(CL:DEFUN STREAM-LOCATION-COLUMN (ARR) (CL:BLOCK STREAM-LOCATION-COLUMN (CL:BLOCK NIL (CL:AREF ARR 5))))
(CL:DEFUN STREAM-LOCATION-TRACK? (ARR) (CL:BLOCK STREAM-LOCATION-TRACK? (CL:BLOCK NIL (CL:AREF ARR 2))))
(CL:DEFUN STREAM-OUTPUT-LOCATION (ARR) (CL:BLOCK STREAM-OUTPUT-LOCATION (CL:BLOCK NIL (CL:AREF ARR 9))))
(CL:DEFUN FORCE-OUTPUT (CL:&OPTIONAL (STR *STANDARD-OUTPUT*)) (CL:BLOCK FORCE-OUTPUT (CL:BLOCK NIL (%FORCE-OUTPUT (STREAM-HANDLE STR)))))
(CL:DEFUN STREAM-PRINC (X STR) (CL:BLOCK STREAM-PRINC (CL:BLOCK NIL (CL:COND ((CONS? X) (CL:BLOCK NIL (CL:LABELS ((~G926 (~G143) (CL:LABELS ((~G927 (I) (CL:TAGBODY ~G141 (CL:COND ((NOT ~G143) (CL:GO ~G142))) (CL:SETQ I (CL:CAR ~G143)) (STREAM-PRINC I STR) (CL:SETQ ~G143 (CL:CDR ~G143)) (CL:GO ~G141) ~G142 (CL:RETURN-FROM NIL (CL:PROGN X))))) (~G927 NIL)))) (~G926 X)))) ((CL:LABELS ((~G928 (~G140) (CL:COND (~G140 ~G140) (T (CHARACTER? X))))) (~G928 (STRING? X))) (CL:COND ((NOT (CL:COND ((STRING? X) (ZERO? (CL:LENGTH X))))) (CL:PROGN (CL:PROGN (=-STREAM-LAST-CHAR (CL:COND ((STRING? X) (ELT X (-- (CL:LENGTH X)))) (T X)) STR)) (%TRACK-LOCATION (STREAM-OUTPUT-LOCATION STR) X) (FUNCALL (STREAM-FUN-OUT STR) X STR))))) (T (FUNCALL (STREAM-FUN-OUT STR) X STR))))))
(CL:DEFUN VALUES (CL:&REST VALS) (CL:BLOCK VALUES (CL:BLOCK NIL (CL:CONS *VALUES-MAGIC* VALS))))
(CL:DEFUN READ-COMMENT-BLOCK (STR) (CL:BLOCK READ-COMMENT-BLOCK (CL:BLOCK NIL (CL:BLOCK NIL (CL:PROGN (CL:TAGBODY ~G251 (CL:COND ((NOT (NOT (CL:COND ((EQL #\| (READ-CHAR STR)) (EQL #\# (PEEK-CHAR STR)))))) (CL:RETURN-FROM NIL (CL:PROGN (READ-CHAR STR))))) (CL:GO ~G251)))))))
(CL:DEFUN LIST-NUMBER? (X) (CL:BLOCK LIST-NUMBER? (CL:BLOCK NIL (CL:COND ((CL:LABELS ((~G929 (~G252) (CL:COND (~G252 ~G252) (T (DIGIT-CHAR? (CL:CAR X)))))) (~G929 (CL:COND ((CL:CDR X) (CL:LABELS ((~G930 (~G253) (CL:COND (~G253 ~G253) (T (EQL #\. (CL:CAR X)))))) (~G930 (EQL #\- (CL:CAR X)))))))) (CL:COND ((CL:CDR X) (EVERY (CL:LAMBDA (_) (CL:BLOCK NIL (CL:LABELS ((~G931 (~G254) (CL:COND (~G254 ~G254) (T (EQL #\. _))))) (~G931 (DIGIT-CHAR? _))))) (CL:CDR X))) (T T)))))))
(CL:DEFUN READ-SYMBOL-AND-PACKAGE (STR) (CL:BLOCK READ-SYMBOL-AND-PACKAGE (CL:BLOCK NIL (CL:LABELS ((~G932 (!) (CL:COND ((EQL (PEEK-CHAR STR) #\:) (CL:PROGN (READ-CHAR STR) (VALUES (CL:LABELS ((~G933 (~G250) (CL:COND (~G250 ~G250) (T *KEYWORD-PACKAGE*)))) (~G933 (CL:COND (! (LIST-STRING !))))) (READ-SYMBOL STR)))) (T (VALUES NIL !))))) (~G932 (READ-SYMBOL STR))))))
(CL:DEFUN READ-SLOT-VALUE (X) (CL:BLOCK READ-SLOT-VALUE (CL:BLOCK NIL (CL:COND ((NOT X) NIL) ((CL:CDR X) (CL:CONS 'CL:SLOT-VALUE (CL:CONS (READ-SLOT-VALUE (BUTLAST X)) (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS (MAKE-SYMBOL (CL:CAR (CL:LAST X)) "TRE") NIL)) NIL)))) ((STRING? (CL:CAR X)) (MAKE-SYMBOL (CL:CAR X))) (T (CL:CAR X))))))
(CL:DEFUN READ-CONS (STR) (CL:BLOCK READ-CONS (CL:BLOCK NIL (CL:LABELS ((ERR (_) (CL:BLOCK NIL (CL:LABELS ((~G934 (!) (ERROR "~A at line ~A, column ~A in file ~A." _ (STREAM-LOCATION-LINE !) (STREAM-LOCATION-COLUMN !) (STREAM-LOCATION-ID !)))) (~G934 (STREAM-INPUT-LOCATION STR))))) (F (TOKEN PKG SYM) (CL:COND ((NOT (%READ-CLOSING-BRACKET? TOKEN)) (CL:PROGN (CL:CONS (CL:LABELS ((~G935 (~G263) (CL:COND ((EQL ~G263 :BRACKET-OPEN) (READ-CONS-SLOT STR)) ((EQL ~G263 :SQUARE-BRACKET-OPEN) (CL:CONS 'SQUARE (READ-CONS-SLOT STR))) ((EQL ~G263 :CURLY-BRACKET-OPEN) (CL:CONS 'CURLY (READ-CONS-SLOT STR))) (T (CL:COND ((TOKEN-IS-QUOTE? TOKEN) (READ-QUOTE STR TOKEN)) (T (READ-ATOM STR TOKEN PKG SYM))))))) (~G935 TOKEN)) (CL:LABELS ((~G936 (!) (CL:COND (! (CL:LABELS ((~G937 (~G265) (CL:LABELS ((~G938 (~G266) (CL:LABELS ((~G939 (TOKEN) (CL:LABELS ((~G940 (~G267) (CL:LABELS ((~G941 (PKG) (CL:LABELS ((~G942 (~G268) (CL:LABELS ((~G943 (SYM) (CL:COND ((EQ :DOT TOKEN) (CL:LABELS ((~G944 (X) (CL:LABELS ((~G945 (~G270) (CL:LABELS ((~G946 (~G271) (CL:LABELS ((~G947 (TOKEN) (CL:LABELS ((~G948 (~G272) (CL:LABELS ((~G949 (PKG) (CL:LABELS ((~G950 (~G273) (CL:LABELS ((~G951 (SYM) (CL:LABELS ((~G952 (~G264) (CL:COND (~G264 ~G264) (T (ERR "Only one value allowed after dotted cons"))))) (~G952 (%READ-CLOSING-BRACKET? TOKEN))) X)) (~G951 (CL:CAR ~G273))))) (~G950 (CL:CDR ~G272))))) (~G949 (CL:CAR ~G272))))) (~G948 (CL:CDR ~G271))))) (~G947 (CL:CAR ~G271))))) (~G946 (CL:CDR ~G270))))) (~G945 (READ-TOKEN STR))))) (~G944 (READ-EXPR STR)))) (T (F TOKEN PKG SYM))))) (~G943 (CL:CAR ~G268))))) (~G942 (CL:CDR ~G267))))) (~G941 (CL:CAR ~G267))))) (~G940 (CL:CDR ~G266))))) (~G939 (CL:CAR ~G266))))) (~G938 (CL:CDR ~G265))))) (~G937 !))) (T (ERR "Closing bracket missing"))))) (~G936 (READ-TOKEN STR))))))))) (CL:LABELS ((~G953 (~G275) (CL:LABELS ((~G954 (~G276) (CL:LABELS ((~G955 (TOKEN) (CL:LABELS ((~G956 (~G277) (CL:LABELS ((~G957 (PKG) (CL:LABELS ((~G958 (~G278) (CL:LABELS ((~G959 (SYM) (CL:COND ((EQ TOKEN :DOT) (CL:CONS 'CL:CONS (READ-CONS STR))) (T (F TOKEN PKG SYM))))) (~G959 (CL:CAR ~G278))))) (~G958 (CL:CDR ~G277))))) (~G957 (CL:CAR ~G277))))) (~G956 (CL:CDR ~G276))))) (~G955 (CL:CAR ~G276))))) (~G954 (CL:CDR ~G275))))) (~G953 (READ-TOKEN STR)))))))
(CL:DEFUN %READ-CLOSING-BRACKET? (X) (CL:BLOCK %READ-CLOSING-BRACKET? (CL:BLOCK NIL (CL:LABELS ((~G960 (~G235) (CL:COND (~G235 ~G235) (T (CL:LABELS ((~G961 (~G236) (CL:COND (~G236 ~G236) (T (EQL X :CURLY-BRACKET-CLOSE))))) (~G961 (EQL X :SQUARE-BRACKET-CLOSE))))))) (~G960 (EQL X :BRACKET-CLOSE))))))
(CL:DEFUN READ-SYMBOL-OR-SLOT-VALUE (PKG SYM) (CL:BLOCK READ-SYMBOL-OR-SLOT-VALUE (CL:BLOCK NIL (CL:LABELS ((~G962 (!) (CL:COND ((CL:COND ((CL:CDR !) (CL:COND ((CL:CAR !) (CL:CAR (CL:LAST !)))))) (READ-SLOT-VALUE !)) (T (MAKE-SYMBOL SYM PKG))))) (~G962 (SPLIT #\. SYM))))))
(CL:DEFUN READ-HEX (STR) (CL:BLOCK READ-HEX (CL:BLOCK NIL (CL:LABELS ((REC (V) (CL:LABELS ((~G963 (!) (CL:COND (! (CL:PROGN (READ-CHAR STR) (REC (NUMBER+ (* V 16) (- (CL:CHAR-CODE !) (CL:COND ((DIGIT-CHAR? !) (CL:CHAR-CODE #\0)) (T (- (CL:CHAR-CODE #\A) 10)))))))) (T V)))) (~G963 (CL:COND ((PEEK-CHAR STR) (CL:LABELS ((~G964 (!) (CL:COND ((HEX-DIGIT-CHAR? !) !)))) (~G964 (CHAR-UPCASE (PEEK-CHAR STR)))))))))) (CL:LABELS ((~G965 (~G221) (CL:COND (~G221 ~G221) (T (ERROR "Illegal character '~A' at begin of hexadecimal number." (PEEK-CHAR STR)))))) (~G965 (HEX-DIGIT-CHAR? (PEEK-CHAR STR)))) (CL:LABELS ((~G966 (~G222) (CL:COND ((SYMBOL-CHAR? (PEEK-CHAR STR)) (ERROR "Illegal character '~A' in hexadecimal number." (PEEK-CHAR STR)))) ~G222)) (~G966 (REC 0)))))))
(CL:DEFUN READ-NUMBER (CL:&OPTIONAL (STR *STANDARD-INPUT*)) (CL:BLOCK READ-NUMBER (CL:BLOCK NIL (* (CL:COND ((EQL #\- (PEEK-CHAR STR)) (CL:PROGN (READ-CHAR STR) -1)) (T 1)) (+ (READ-INTEGER STR) (CL:LABELS ((~G967 (~G223) (CL:COND (~G223 ~G223) (T 0)))) (~G967 (CL:COND ((PEEK-DOT STR) (CL:COND ((READ-CHAR STR) (READ-DECIMAL-PLACES STR))))))))))))
(CL:DEFUN PRINC (X CL:&OPTIONAL (STR *STANDARD-OUTPUT*)) (CL:BLOCK PRINC (CL:BLOCK NIL (CL:LABELS ((~G968 (~G159) (CL:LABELS ((~G969 (S) (CL:LABELS ((~G970 (~G160) (CL:COND (~G159 ~G160) (T (GET-STREAM-STRING S))))) (~G970 (CL:PROGN (CL:COND ((NUMBER-NOT-CHARACTER? X) (PRINC-NUMBER X S)) ((SYMBOL? X) (STREAM-PRINC (SYMBOL-NAME X) S)) (T (STREAM-PRINC X S))) X))))) (~G969 (DEFAULT-STREAM ~G159))))) (~G968 STR)))))
(CL:DEFUN MAKE-STRING-STREAM NIL (CL:BLOCK MAKE-STRING-STREAM (CL:BLOCK NIL (MAKE-STREAM :USER-DETAIL (MAKE-QUEUE) :FUN-IN (CL:LAMBDA (STR) (QUEUE-POP (STREAM-USER-DETAIL STR))) :FUN-OUT (CL:LAMBDA (X STR) (CL:COND ((STRING? X) (CL:LABELS ((~G971 (~G146) (CL:COND (~G146 (CL:PROGN (CL:LABELS ((~G972 (~G148) (CL:BLOCK NIL (CL:LABELS ((~G973 (~G147) (CL:TAGBODY ~G149 (CL:COND ((== ~G147 ~G148) (CL:RETURN-FROM NIL (CL:PROGN)))) (CL:LABELS ((~G974 (I) (ENQUEUE (STREAM-USER-DETAIL STR) I))) (~G974 (ELT ~G146 ~G147))) (CL:SETQ ~G147 (NUMBER+ 1 ~G147)) (CL:GO ~G149)))) (~G973 0))))) (~G972 (INTEGER (CL:LENGTH ~G146))))))))) (~G971 X))) (T (ENQUEUE (STREAM-USER-DETAIL STR) X)))) :FUN-EOF (CL:LAMBDA (STR) (NOT (QUEUE-LIST (STREAM-USER-DETAIL STR))))))))
(CL:DEFUN READ-STRING (STR) (CL:BLOCK READ-STRING (CL:BLOCK NIL (CL:LABELS ((F NIL (CL:BLOCK NIL (CL:LABELS ((~G975 (!) (CL:COND ((NOT (EQL ! #\")) (CL:PROGN (CL:CONS (CL:COND ((EQL ! #\\) (READ-CHAR STR)) (T !)) (F))))))) (~G975 (READ-CHAR STR)))))) (LIST-STRING (F))))))
(CL:DEFUN READ-CHAR (CL:&OPTIONAL (STR *STANDARD-INPUT*)) (CL:BLOCK READ-CHAR (CL:BLOCK NIL (%TRACK-LOCATION (STREAM-INPUT-LOCATION STR) (READ-CHAR-0 STR)))))
(CL:DEFUN WHITESPACE? (X) (CL:BLOCK WHITESPACE? (CL:BLOCK NIL (CL:COND ((CHARACTER? X) (CL:COND ((< (CL:CHAR-CODE X) 33) (>= (CL:CHAR-CODE X) 0))))))))
(CL:DEFUN SKIP-COMMENT (STR) (CL:BLOCK SKIP-COMMENT (CL:BLOCK NIL (CL:LABELS ((~G976 (!) (CL:COND (! (CL:PROGN (CL:COND ((== (CL:CHAR-CODE !) 10) (SKIP-SPACES STR)) (T (SKIP-COMMENT STR)))))))) (~G976 (READ-CHAR STR))))))
(CL:DEFUN POSITION (OBJ SEQ CL:&KEY (START NIL) (END NIL) (FROM-END NIL) (TEST (CL:FUNCTION EQL))) (CL:BLOCK POSITION (CL:BLOCK NIL (CL:LABELS ((~G977 (!) (FIND-IF (CL:LAMBDA (X I) (CL:COND ((FUNCALL TEST X OBJ) (CL:PROGN (CL:SETQ ! I))))) SEQ :START START :END END :FROM-END FROM-END :WITH-INDEX T) !)) (~G977 NIL)))))
(CL:DEFUN DOT-EXPAND-MAKE-EXPR (WHICH NUM X) (CL:BLOCK DOT-EXPAND-MAKE-EXPR (CL:BLOCK NIL (CL:COND ((< 0 NUM) (CL:CONS WHICH (CL:CONS (DOT-EXPAND-MAKE-EXPR WHICH (-- NUM) X) NIL))) (T X)))))
(CL:DEFUN DOT-EXPAND-TAIL-LENGTH (X CL:&OPTIONAL (NUM 0)) (CL:BLOCK DOT-EXPAND-TAIL-LENGTH (CL:BLOCK NIL (CL:COND ((EQL #\. (CL:CAR (CL:LAST X))) (DOT-EXPAND-TAIL-LENGTH (BUTLAST X) (++ NUM))) (T (VALUES NUM X))))))
(CL:DEFUN DOT-EXPAND-HEAD-LENGTH (X CL:&OPTIONAL (NUM 0)) (CL:BLOCK DOT-EXPAND-HEAD-LENGTH (CL:BLOCK NIL (CL:COND ((EQL #\. (CL:CAR X)) (DOT-EXPAND-HEAD-LENGTH (CL:CDR X) (++ NUM))) (T (VALUES NUM X))))))
(CL:DEFUN %SUBSEQ-SEQUENCE (MAKER SEQ START END) (CL:BLOCK %SUBSEQ-SEQUENCE (CL:BLOCK NIL (CL:COND ((NOT (== START END)) (CL:PROGN (CL:LABELS ((~G978 (!) (CL:COND ((< START !) (CL:PROGN (CL:COND ((>= END !) (CL:PROGN (CL:SETQ END !)))) (CL:LABELS ((~G979 (L) (CL:LABELS ((~G980 (S) (CL:LABELS ((~G981 (~G45) (CL:BLOCK NIL (CL:LABELS ((~G982 (X) (CL:TAGBODY ~G46 (CL:COND ((== X ~G45) (CL:RETURN-FROM NIL (CL:PROGN S)))) (CL:PROGN (=-ELT (ELT SEQ (+ START X)) S X)) (CL:SETQ X (NUMBER+ 1 X)) (CL:GO ~G46)))) (~G982 0))))) (~G981 (INTEGER L))))) (~G980 (FUNCALL MAKER L))))) (~G979 (- END START)))))))) (~G978 (CL:LENGTH SEQ)))))))))
(CL:DEFUN STRING-SUBSEQ (SEQ START CL:&OPTIONAL (END 99999)) (CL:BLOCK STRING-SUBSEQ (CL:BLOCK NIL (CL:COND ((NOT (== START END)) (CL:PROGN (CL:LABELS ((~G983 (!) (CL:COND ((< START !) (CL:PROGN (CL:COND ((>= END !) (CL:PROGN (CL:PROGN (CL:SETQ END !))))) (CL:LABELS ((~G984 (L) (CL:LABELS ((~G985 (S) (CL:LABELS ((~G986 (~G41) (CL:BLOCK NIL (CL:LABELS ((~G987 (X) (CL:TAGBODY ~G42 (CL:COND ((== X ~G41) (CL:RETURN-FROM NIL (CL:PROGN S)))) (CL:PROGN (CL:SETQ S (STRING-CONCAT S (STRING (ELT SEQ (NUMBER+ START X)))))) (CL:SETQ X (NUMBER+ 1 X)) (CL:GO ~G42)))) (~G987 0))))) (~G986 (INTEGER L))))) (~G985 (CL:MAKE-STRING 0))))) (~G984 (- END START)))))))) (~G983 (CL:LENGTH SEQ)))))))))
(CL:DEFUN LIST-SUBSEQ (SEQ START CL:&OPTIONAL (END 999999)) (CL:BLOCK LIST-SUBSEQ (CL:BLOCK NIL (CL:COND ((CL:COND (SEQ (NOT (== START END)))) (CL:PROGN (CL:COND ((> START END) (CL:LABELS ((~G988 (~G43) (CL:PROGN (CL:SETQ START END) (CL:SETQ END ~G43)))) (~G988 START)))) (CL:LABELS ((~G989 (Q) (CL:LABELS ((~G990 (LEN) (CL:LABELS ((~G991 (LST) (CL:BLOCK NIL (CL:PROGN (CL:TAGBODY ~G44 (CL:COND ((NOT (CL:COND (LST (< 0 LEN)))) (CL:RETURN-FROM NIL (CL:PROGN (QUEUE-LIST Q))))) (ENQUEUE Q (CL:CAR LST)) (CL:PROGN (CL:SETQ LEN (- LEN 1))) (CL:PROGN (CL:SETQ LST (CL:CDR LST))) (CL:GO ~G44)))))) (~G991 (CL:NTHCDR START SEQ))))) (~G990 (- END START))))) (~G989 (MAKE-QUEUE)))))))))
(CL:DEFUN %BODY? (X) (CL:BLOCK %BODY? (CL:BLOCK NIL (CL:COND ((CONS? X) (CL:COND ((EQ '%BODY (CL:CAR X)) X)))))))
(CL:DEFUN %REST? (X) (CL:BLOCK %REST? (CL:BLOCK NIL (CL:COND ((CONS? X) (CL:COND ((EQ '%REST (CL:CAR X)) X)))))))
(CL:DEFUN KEYWORD? (X) (CL:BLOCK KEYWORD? (CL:BLOCK NIL (CL:COND ((SYMBOL? X) (EQ *KEYWORD-PACKAGE* (SYMBOL-PACKAGE X)))))))
(CL:DEFUN ARGUMENT-NAME? (X) (CL:BLOCK ARGUMENT-NAME? (CL:BLOCK NIL (CL:ATOM X))))
(CL:DEFUN $ (CL:&REST ARGS) (CL:BLOCK $ (CL:BLOCK NIL (MAKE-SYMBOL (CL:APPLY (CL:FUNCTION +) (DYNAMIC-MAP (CL:FUNCTION STRING) ARGS))))))
(CL:DEFUN ARGDEF-GET-VALUE (DEFS VALS) (CL:BLOCK ARGDEF-GET-VALUE (CL:BLOCK NIL (CL:COND ((CONS? VALS) (CL:CAR VALS)) ((CONS? (CL:CAR DEFS)) (CADR (CL:CAR DEFS))) (T (CL:CAR DEFS))))))
(CL:DEFUN ARGUMENT-KEYWORD? (X) (CL:BLOCK ARGUMENT-KEYWORD? (CL:BLOCK NIL (CL:LABELS ((~G992 (~G168) (CL:COND (~G168 ~G168) (T (CL:LABELS ((~G993 (~G169) (CL:COND (~G169 ~G169) (T (CL:LABELS ((~G994 (~G170) (CL:COND (~G170 ~G170) (T (EQL X 'CL:&KEY))))) (~G994 (EQL X 'CL:&OPTIONAL))))))) (~G993 (EQL X 'CL:&BODY))))))) (~G992 (EQL X 'CL:&REST))))))
(CL:DEFUN ARGDEF-GET-NAME (X) (CL:BLOCK ARGDEF-GET-NAME (CL:BLOCK NIL (CL:COND ((CONS? X) (CL:CAR X)) (T X)))))
(CL:DEFUN MAKE-&KEY-ALIST (DEF) (CL:BLOCK MAKE-&KEY-ALIST (CL:BLOCK NIL (CL:LABELS ((~G995 (KEYS) (CL:LABELS ((MAKE-&KEY-DESCR (_) (CL:BLOCK NIL (CL:COND (_ (CL:PROGN (CL:COND ((ARGUMENT-KEYWORD? (CL:CAR _)) (COPY-DEF-UNTIL-&KEY _)) (T (CL:LABELS ((~G996 (!) (CL:PROGN (CL:SETQ KEYS (CL:CONS (CL:COND ((CONS? !) (CL:CONS (CL:CAR !) (CL:CAR (CL:CDR !)))) (T (CL:CONS ! !))) KEYS))) (MAKE-&KEY-DESCR (CL:CDR _)))) (~G996 (CL:CAR _)))))))))) (COPY-DEF-UNTIL-&KEY (_) (CL:BLOCK NIL (CL:COND (_ (CL:PROGN (CL:COND ((EQ 'CL:&KEY (CL:CAR _)) (MAKE-&KEY-DESCR (CL:CDR _))) (T (CL:CONS (CL:CAR _) (COPY-DEF-UNTIL-&KEY (CL:CDR _))))))))))) (VALUES (COPY-DEF-UNTIL-&KEY DEF) (REVERSE KEYS))))) (~G995 NIL)))))
(CL:DEFUN COPY-HEAD (X SIZE) (CL:BLOCK COPY-HEAD (CL:BLOCK NIL (CL:COND ((CL:COND (X (< 0 SIZE))) (CL:CONS (CL:CAR X) (COPY-HEAD (CL:CDR X) (-- SIZE))))))))
(CL:DEFUN CARLIST (~G107) (CL:BLOCK CARLIST (CL:BLOCK NIL (FILTER (CL:FUNCTION CL:CAR) ~G107))))
(CL:DEFUN ARGUMENT-EXPAND-0 (FUN ADEF ALST APPLY-VALUES? CONCATENATE-SUBLISTS? BREAK-ON-ERRORS?) (CL:BLOCK ARGUMENT-EXPAND-0 (CL:BLOCK NIL (CL:LABELS ((~G997 (~G174) (CL:LABELS ((~G998 (~G175) (CL:LABELS ((~G999 (A) (CL:LABELS ((~G1000 (~G176) (CL:LABELS ((~G1001 (K) (CL:LABELS ((~G1002 (ARGDEFS) (CL:LABELS ((~G1003 (KEY-ARGS) (CL:LABELS ((~G1004 (NUM) (CL:LABELS ((~G1005 (NO-STATIC) (CL:LABELS ((~G1006 (REST-ARG) (CL:LABELS ((ERR (MSG ARGS) (CL:COND (BREAK-ON-ERRORS? (CL:RETURN-FROM NIL (ERROR (+ "~L; In argument expansion for ~A: ~A~%" "; Argument definition: ~A~%" "; Given arguments: ~A~%") (SYMBOL-NAME FUN) (CL:APPLY (CL:FUNCTION FORMAT) NIL MSG ARGS) ADEF ALST))) (T 'ERROR))) (EXP-STATIC (DEF VALS) (CL:COND (NO-STATIC (CL:RETURN-FROM NIL (ERR "Static argument definition after ~A." (CL:LIST NO-STATIC))))) (CL:COND (APPLY-VALUES? (CL:COND ((NOT VALS) (CL:RETURN-FROM NIL (ERR "Argument ~A missing." (CL:LIST NUM))))))) (CL:CONS (CL:CONS (ARGDEF-GET-NAME (CL:CAR DEF)) (CL:CAR VALS)) (EXP-MAIN (CL:CDR DEF) (CL:CDR VALS)))) (EXP-OPTIONAL (DEF VALS) (CL:COND ((ARGUMENT-KEYWORD? (CL:CAR DEF)) (CL:RETURN-FROM NIL (ERR "Keyword ~A after &OPTIONAL." (CL:LIST (CL:CAR DEF)))))) (CL:PROGN (CL:SETQ NO-STATIC 'CL:&OPTIONAL)) (CL:CONS (CL:CONS (ARGDEF-GET-NAME (CL:CAR DEF)) (ARGDEF-GET-VALUE DEF VALS)) (CL:COND ((ARGUMENT-KEYWORD? (CL:CAR (CL:CDR DEF))) (EXP-MAIN (CL:CDR DEF) (CL:CDR VALS))) ((CL:CDR DEF) (EXP-OPTIONAL (CL:CDR DEF) (CL:CDR VALS))) (T (EXP-MAIN (CL:CDR DEF) (CL:CDR VALS)))))) (EXP-KEY (DEF VALS) (CL:LABELS ((~G1007 (K) (CL:COND (K (CL:LABELS ((~G1008 (!) (CL:LABELS ((~G1009 (~G173) (CL:COND (~G173 ~G173) (T (CL:RETURN-FROM NIL (ERR "Value of argument ~A missing." (CL:LIST (CL:CAR !)))))))) (~G1009 (CL:CDR !))) (CL:RPLACD K (CL:CAR (CL:CDR !))) (EXP-MAIN DEF (CL:CDR (CL:CDR !))))) (~G1008 VALS))) (T (EXP-MAIN-NON-KEY DEF VALS))))) (~G1007 (ASSOC ($ (CL:CAR VALS)) KEY-ARGS :TEST (CL:FUNCTION EQ))))) (EXP-REST (SYNONYM DEF VALS) (CL:PROGN (CL:SETQ NO-STATIC 'CL:&REST)) (CL:PROGN (CL:SETQ REST-ARG (CL:LIST (CL:CONS (ARGDEF-GET-NAME (CL:CAR (CL:CDR DEF))) (CL:CONS SYNONYM VALS))))) NIL) (EXP-OPTIONAL-REST (DEF VALS) (CL:LABELS ((~G1010 (~G171) (CL:COND ((EQ ~G171 'CL:&REST) (EXP-REST '%REST DEF VALS)) ((EQ ~G171 'CL:&BODY) (EXP-REST '%BODY DEF VALS)) ((EQ ~G171 'CL:&OPTIONAL) (EXP-OPTIONAL (CL:CDR DEF) VALS))))) (~G1010 (CL:CAR DEF)))) (EXP-SUB (DEF VALS) (CL:COND (NO-STATIC (CL:RETURN-FROM NIL (ERR "Static sublevel argument definition after ~A." (CL:LIST NO-STATIC))))) (CL:COND (APPLY-VALUES? (CL:COND ((CL:ATOM (CL:CAR VALS)) (CL:RETURN-FROM NIL (ERR "Sublist expected for argument ~A." (CL:LIST NUM))))))) (CL:COND (CONCATENATE-SUBLISTS? (NCONC (ARGUMENT-EXPAND-0 FUN (CL:CAR DEF) (CL:CAR VALS) APPLY-VALUES? CONCATENATE-SUBLISTS? BREAK-ON-ERRORS?) (EXP-MAIN (CL:CDR DEF) (CL:CDR VALS)))) (T (CL:CONS (CL:CONS NIL (ARGUMENT-EXPAND-0 FUN (CL:CAR DEF) (CL:CAR VALS) APPLY-VALUES? CONCATENATE-SUBLISTS? BREAK-ON-ERRORS?)) (EXP-MAIN (CL:CDR DEF) (CL:CDR VALS)))))) (EXP-CHECK-TOO-MANY (DEF VALS) (CL:COND ((NOT DEF) (CL:COND (VALS (CL:RETURN-FROM NIL (ERR "Too many arguments. Maximum is ~A, but ~A more given." (CL:LIST (CL:LENGTH ARGDEFS) (CL:LENGTH VALS))))))))) (EXP-MAIN-NON-KEY (DEF VALS) (EXP-CHECK-TOO-MANY DEF VALS) (CL:COND ((ARGUMENT-KEYWORD? (CL:CAR DEF)) (EXP-OPTIONAL-REST DEF VALS)) ((NOT (ARGUMENT-NAME? (CL:CAR DEF))) (EXP-SUB DEF VALS)) (T (EXP-STATIC DEF VALS)))) (EXP-MAIN (DEF VALS) (CL:PROGN (CL:SETQ NUM (NUMBER+ NUM 1))) (CL:COND ((KEYWORD? (CL:CAR VALS)) (EXP-KEY DEF VALS)) (T (CL:LABELS ((~G1011 (~G172) (CL:COND (~G172 ~G172) (T (CL:COND (DEF (EXP-MAIN-NON-KEY DEF VALS))))))) (~G1011 (EXP-CHECK-TOO-MANY DEF VALS))))))) (CL:LABELS ((~G1012 (!) (CL:COND ((EQ ! 'ERROR) !) (T (NCONC ! (NCONC (DYNAMIC-MAP (CL:LAMBDA (_) (CL:BLOCK NIL (CL:CONS (CL:CAR _) (CL:CONS '%KEY (CL:CDR _))))) KEY-ARGS) REST-ARG)))))) (~G1012 (EXP-MAIN ARGDEFS ALST)))))) (~G1006 NIL)))) (~G1005 NIL)))) (~G1004 0)))) (~G1003 K)))) (~G1002 A)))) (~G1001 (CL:CAR ~G176))))) (~G1000 (CL:CDR ~G175))))) (~G999 (CL:CAR ~G175))))) (~G998 (CL:CDR ~G174))))) (~G997 (MAKE-&KEY-ALIST ADEF))))))
(CL:DEFUN %KEY? (X) (CL:BLOCK %KEY? (CL:BLOCK NIL (CL:COND ((CONS? X) (CL:COND ((EQ '%KEY (CL:CAR X)) X)))))))
(CL:DEFUN %REST-OR-%BODY? (X) (CL:BLOCK %REST-OR-%BODY? (CL:BLOCK NIL (CL:LABELS ((~G1013 (~G165) (CL:COND (~G165 ~G165) (T (%BODY? X))))) (~G1013 (%REST? X))))))
(CL:DEFUN ++ (X) (NUMBER+ X 1))
(CL:DEFUN LIST-SYMBOL (X) (CL:BLOCK LIST-SYMBOL (CL:BLOCK NIL (MAKE-SYMBOL (LIST-STRING X)))))
(CL:DEFUN SUBSEQ (SEQ START CL:&OPTIONAL (END 99999)) (CL:BLOCK SUBSEQ (CL:BLOCK NIL (CL:COND (SEQ (CL:PROGN (CL:COND ((> START END) (CL:LABELS ((~G1014 (~G47) (CL:PROGN (CL:SETQ START END) (CL:SETQ END ~G47)))) (~G1014 START)))) (CL:LABELS ((~G1015 (~G48) (CL:COND ((CONS? ~G48) (LIST-SUBSEQ SEQ START END)) ((STRING? ~G48) (STRING-SUBSEQ SEQ START END)) ((ARRAY? ~G48) (%SUBSEQ-SEQUENCE (CL:FUNCTION MAKE-ARRAY) SEQ START END)) (T (ERROR "Type of ~A not supported." SEQ))))) (~G1015 SEQ))))))))
(CL:DEFUN DOT-EXPAND-LIST (X) (CL:BLOCK DOT-EXPAND-LIST (CL:BLOCK NIL (CL:LABELS ((~G1016 (~G97) (CL:LABELS ((~G1017 (~G98) (CL:LABELS ((~G1018 (NUM-CDRS) (CL:LABELS ((~G1019 (~G99) (CL:LABELS ((~G1020 (WITHOUT-START) (CL:LABELS ((~G1021 (~G101) (CL:LABELS ((~G1022 (~G102) (CL:LABELS ((~G1023 (NUM-CARS) (CL:LABELS ((~G1024 (~G103) (CL:LABELS ((~G1025 (WITHOUT-END) (DOT-EXPAND-MAKE-EXPR 'CL:CAR NUM-CARS (DOT-EXPAND-MAKE-EXPR 'CL:CDR NUM-CDRS (DOT-EXPAND (LIST-SYMBOL WITHOUT-END)))))) (~G1025 (CL:CAR ~G103))))) (~G1024 (CL:CDR ~G102))))) (~G1023 (CL:CAR ~G102))))) (~G1022 (CL:CDR ~G101))))) (~G1021 (DOT-EXPAND-TAIL-LENGTH WITHOUT-START))))) (~G1020 (CL:CAR ~G99))))) (~G1019 (CL:CDR ~G98))))) (~G1018 (CL:CAR ~G98))))) (~G1017 (CL:CDR ~G97))))) (~G1016 (DOT-EXPAND-HEAD-LENGTH X))))))
(CL:DEFUN HAS-DOT-NOTATION? (X) (CL:BLOCK HAS-DOT-NOTATION? (CL:BLOCK NIL (CL:LABELS ((~G1026 (SL) (CL:LABELS ((~G1027 (~G106) (CL:COND (~G106 ~G106) (T (EQL #\. (CL:CAR (CL:LAST SL))))))) (~G1027 (EQL #\. (CL:CAR SL)))))) (~G1026 (STRING-LIST (SYMBOL-NAME X)))))))
(CL:DEFUN NO-DOT-NOTATION? (X) (CL:BLOCK NO-DOT-NOTATION? (CL:BLOCK NIL (CL:LABELS ((~G1028 (SL) (CL:LABELS ((~G1029 (L) (CL:LABELS ((~G1030 (P) (CL:LABELS ((~G1031 (~G105) (CL:COND (~G105 ~G105) (T (NOT P))))) (~G1031 (== 1 L))))) (~G1030 (DOT-POSITION SL))))) (~G1029 (CL:LENGTH SL))))) (~G1028 (STRING-LIST (SYMBOL-NAME X)))))))
(CL:DEFUN DOT-POSITION (X) (CL:BLOCK DOT-POSITION (CL:BLOCK NIL (POSITION #\. X :TEST (CL:FUNCTION CHARACTER==)))))
(CL:DEFUN SKIP-SPACES (STR) (CL:BLOCK SKIP-SPACES (CL:BLOCK NIL (CL:COND ((EQL #\; (PEEK-CHAR STR)) (CL:PROGN (SKIP-COMMENT STR)))) (CL:COND ((WHITESPACE? (PEEK-CHAR STR)) (CL:PROGN (READ-CHAR STR) (SKIP-SPACES STR)))))))
(CL:DEFUN READ-ATOM (STR TOKEN PKG SYM) (CL:BLOCK READ-ATOM (CL:BLOCK NIL (CL:LABELS ((~G1032 (~G261) (CL:COND ((EQ ~G261 :DBLQUOTE) (READ-STRING STR)) ((EQ ~G261 :CHAR) (READ-CHAR STR)) ((EQ ~G261 :NUMBER) (CL:LABELS ((~G1033 (S) (PRINC SYM S) (READ-NUMBER S))) (~G1033 (MAKE-STRING-STREAM)))) ((EQ ~G261 :HEXNUM) (READ-HEX STR)) ((EQ ~G261 :FUNCTION) (CL:CONS 'CL:FUNCTION (CL:CONS (READ-EXPR STR) NIL))) ((EQ ~G261 :SYMBOL) (READ-SYMBOL-OR-SLOT-VALUE PKG SYM)) (T (CL:COND ((%READ-CLOSING-BRACKET? TOKEN) (ERROR "Unexpected closing ~A bracket." (CL:LABELS ((~G1034 (~G262) (CL:COND ((EQL ~G262 :BRACKET-CLOSE) "round") ((EQL ~G262 :CURLY-BRACKET-CLOSE) "curly") ((EQL ~G262 :SQUARE-BRACKET-CLOSE) "square")))) (~G1034 TOKEN)))) (T (ERROR "Closing bracket missing."))))))) (~G1032 TOKEN)))))
(CL:DEFUN READ-QUOTE (STR TOKEN) (CL:BLOCK READ-QUOTE (CL:BLOCK NIL (CL:LIST (MAKE-SYMBOL (SYMBOL-NAME TOKEN)) (READ-EXPR STR)))))
(CL:DEFUN TOKEN-IS-QUOTE? (X) (CL:BLOCK TOKEN-IS-QUOTE? (CL:BLOCK NIL (CL:LABELS ((~G1035 (~G231) (CL:COND (~G231 ~G231) (T (CL:LABELS ((~G1036 (~G232) (CL:COND (~G232 ~G232) (T (CL:LABELS ((~G1037 (~G233) (CL:COND (~G233 ~G233) (T (CL:LABELS ((~G1038 (~G234) (CL:COND (~G234 ~G234) (T (EQL X :ACCENT-CIRCONFLEX))))) (~G1038 (EQL X :QUASIQUOTE-SPLICE))))))) (~G1037 (EQL X :QUASIQUOTE))))))) (~G1036 (EQL X :BACKQUOTE))))))) (~G1035 (EQL X :QUOTE))))))
(CL:DEFUN READ-CONS-SLOT (STR) (CL:BLOCK READ-CONS-SLOT (CL:BLOCK NIL (CL:LABELS ((~G1039 (!) (CL:COND ((EQL #\. (PEEK-CHAR STR)) (CL:PROGN (READ-CHAR STR) (CL:LABELS ((~G1040 (~G280) (CL:LABELS ((~G1041 (~G281) (CL:LABELS ((~G1042 (TOKEN) (CL:LABELS ((~G1043 (~G282) (CL:LABELS ((~G1044 (PKG) (CL:LABELS ((~G1045 (~G283) (CL:LABELS ((~G1046 (SYM) (READ-SLOT-VALUE (CL:LIST ! SYM)))) (~G1046 (CL:CAR ~G283))))) (~G1045 (CL:CDR ~G282))))) (~G1044 (CL:CAR ~G282))))) (~G1043 (CL:CDR ~G281))))) (~G1042 (CL:CAR ~G281))))) (~G1041 (CL:CDR ~G280))))) (~G1040 (READ-TOKEN STR))))) (T !)))) (~G1039 (READ-CONS STR))))))
(CL:DEFUN READ-TOKEN (STR) (CL:BLOCK READ-TOKEN (CL:BLOCK NIL (CL:LABELS ((~G1047 (!) (CL:COND (! (CL:PROGN (CL:LABELS ((~G1048 (~G257) (CL:LABELS ((~G1049 (~G258) (CL:LABELS ((~G1050 (PKG) (CL:LABELS ((~G1051 (~G259) (CL:LABELS ((~G1052 (SYM) (VALUES (CL:COND ((CL:COND (SYM (CL:COND ((NOT (CL:CDR SYM)) (EQL #\. (CL:CAR SYM)))))) :DOT) (T (CL:COND (SYM (CL:COND ((LIST-NUMBER? SYM) :NUMBER) (T :SYMBOL))) (T (CL:LABELS ((~G1053 (~G255) (CL:COND ((EQL ~G255 #\() :BRACKET-OPEN) ((EQL ~G255 #\)) :BRACKET-CLOSE) ((EQL ~G255 #\[) :SQUARE-BRACKET-OPEN) ((EQL ~G255 #\]) :SQUARE-BRACKET-CLOSE) ((EQL ~G255 #\{) :CURLY-BRACKET-OPEN) ((EQL ~G255 #\}) :CURLY-BRACKET-CLOSE) ((EQL ~G255 #\') :QUOTE) ((EQL ~G255 #\`) :BACKQUOTE) ((EQL ~G255 #\^) :ACCENT-CIRCONFLEX) ((EQL ~G255 #\") :DBLQUOTE) ((EQL ~G255 #\,) (CL:COND ((EQL #\@ (PEEK-CHAR STR)) (CL:COND ((READ-CHAR STR) :QUASIQUOTE-SPLICE))) (T :QUASIQUOTE))) ((EQL ~G255 #\#) (CL:LABELS ((~G1054 (~G256) (CL:COND ((EQL ~G256 #\\) :CHAR) ((EQL ~G256 #\x) :HEXNUM) ((EQL ~G256 #\') :FUNCTION) ((EQL ~G256 #\|) (READ-COMMENT-BLOCK STR)) (T (ERROR "Invalid character after '#'."))))) (~G1054 (READ-CHAR STR)))) ((EQL ~G255 -1) :EOF)))) (~G1053 (READ-CHAR STR))))))) PKG (LIST-STRING SYM)))) (~G1052 (CL:CAR ~G259))))) (~G1051 (CL:CDR ~G258))))) (~G1050 (CL:CAR ~G258))))) (~G1049 (CL:CDR ~G257))))) (~G1048 !))))))) (~G1047 (READ-SYMBOL-AND-PACKAGE STR))))))
(CL:DEFUN =-STREAM-LAST-CHAR (VAL ARR) (CL:BLOCK =-STREAM-LAST-CHAR (CL:BLOCK NIL (CL:PROGN (=-AREF VAL ARR 6)))))
(CL:DEFUN STREAM-FUN-IN (ARR) (CL:BLOCK STREAM-FUN-IN (CL:BLOCK NIL (CL:AREF ARR 3))))
(CL:DEFUN READ-PEEKED-CHAR (STR) (CL:BLOCK READ-PEEKED-CHAR (CL:BLOCK NIL (CL:LABELS ((~G1055 (!) (CL:COND (! (CL:PROGN (CL:PROGN (=-STREAM-PEEKED-CHAR NIL STR)) !))))) (~G1055 (STREAM-PEEKED-CHAR STR))))))
(CL:DEFUN TERPRI (CL:&OPTIONAL (STR *STANDARD-OUTPUT*)) (CL:BLOCK TERPRI (CL:BLOCK NIL (CL:LABELS ((~G1056 (~G161) (CL:LABELS ((~G1057 (S) (CL:LABELS ((~G1058 (~G162) (CL:COND (~G161 ~G162) (T (GET-STREAM-STRING S))))) (~G1058 (CL:PROGN (STREAM-PRINC (CODE-CHAR 10) S) (FORCE-OUTPUT S) NIL))))) (~G1057 (DEFAULT-STREAM ~G161))))) (~G1056 STR)))))
(CL:DEFUN FRESH-LINE? (CL:&OPTIONAL (STR *STANDARD-OUTPUT*)) (CL:BLOCK FRESH-LINE? (CL:BLOCK NIL (CL:LABELS ((~G1059 (!) (CL:COND ((STREAM-LOCATION-TRACK? !) (== 1 (STREAM-LOCATION-COLUMN !)))))) (~G1059 (STREAM-OUTPUT-LOCATION STR))))))
(CL:DEFUN GET-STREAM-STRING (STR) (CL:BLOCK GET-STREAM-STRING (CL:BLOCK NIL (CL:LABELS ((~G1060 (~G150) (CL:PROGN (=-STREAM-USER-DETAIL (MAKE-QUEUE) STR)) ~G150)) (~G1060 (QUEUE-STRING (STREAM-USER-DETAIL STR)))))))
(CL:DEFUN %FORMAT (INF TXT ARGS) (CL:BLOCK %FORMAT (CL:BLOCK NIL (CL:COND (TXT (CL:PROGN (CL:LABELS ((~G1061 (!) (CL:COND ((EQL (CL:CAR TXT) #\\) (CL:PROGN (PRINC (CL:CAR TXT) !) (PRINC (CL:CAR (CL:CDR TXT)) !) (%FORMAT INF (CL:CDR (CL:CDR TXT)) ARGS))) ((EQL (CL:CAR TXT) #\~) (%FORMAT-DIRECTIVE INF (CL:CDR TXT) ARGS)) (T (CL:PROGN (PRINC (CL:CAR TXT) (FORMAT-INFO-STREAM INF)) (%FORMAT INF (CL:CDR TXT) ARGS)))))) (~G1061 (FORMAT-INFO-STREAM INF)))))))))
(CL:DEFUN MAKE-FORMAT-INFO (CL:&KEY (STREAM 'STREAM) (TEXT 'TEXT) (ARGS 'ARGS) (PROCESSED-ARGS 'PROCESSED-ARGS)) (CL:BLOCK MAKE-FORMAT-INFO (CL:BLOCK NIL (CL:LABELS ((~G1062 (~G302) (CL:PROGN (=-AREF 'STRUCT ~G302 0) (=-AREF 'FORMAT-INFO ~G302 1)) (CL:PROGN (=-AREF (CL:COND ((EQ STREAM 'STREAM) NIL) (T STREAM)) ~G302 2)) (CL:PROGN (=-AREF (CL:COND ((EQ TEXT 'TEXT) NIL) (T TEXT)) ~G302 3)) (CL:PROGN (=-AREF (CL:COND ((EQ ARGS 'ARGS) NIL) (T ARGS)) ~G302 4)) (CL:PROGN (=-AREF (CL:COND ((EQ PROCESSED-ARGS 'PROCESSED-ARGS) 0) (T PROCESSED-ARGS)) ~G302 5)) ~G302)) (~G1062 (MAKE-ARRAY 6))))))
(CL:DEFUN DEFAULT-STREAM (X) (CL:BLOCK DEFAULT-STREAM (CL:BLOCK NIL (CL:LABELS ((~G1063 (~G144) (CL:COND ((EQL ~G144 NIL) (MAKE-STRING-STREAM)) ((EQL ~G144 T) *STANDARD-OUTPUT*) (T X)))) (~G1063 X)))))
(CL:DEFUN -- (X) (NUMBER- X 1))
(CL:DEFUN NCONC (CL:&REST LSTS) (CL:BLOCK NCONC (CL:BLOCK NIL (%NCONC-0 LSTS))))
(CL:DEFUN ENQUEUE (X CL:&REST VALS) (CL:BLOCK ENQUEUE (CL:BLOCK NIL (CL:RPLACA X (CL:CDR (CL:RPLACD (CL:LABELS ((~G1064 (~G9) (CL:COND (~G9 ~G9) (T X)))) (~G1064 (CL:CAR X))) VALS))) VALS)))
(CL:DEFUN QUEUE-LIST (X) (CL:BLOCK QUEUE-LIST (CL:BLOCK NIL (CL:CDR X))))
(CL:DEFUN MAKE-QUEUE NIL (CL:BLOCK MAKE-QUEUE (CL:BLOCK NIL (CL:CONS NIL NIL))))
(CL:DEFUN MAKE-STREAM (CL:&KEY (HANDLE 'HANDLE) (FUN-IN 'FUN-IN) (FUN-OUT 'FUN-OUT) (FUN-EOF 'FUN-EOF) (LAST-CHAR 'LAST-CHAR) (PEEKED-CHAR 'PEEKED-CHAR) (INPUT-LOCATION 'INPUT-LOCATION) (OUTPUT-LOCATION 'OUTPUT-LOCATION) (USER-DETAIL 'USER-DETAIL)) (CL:BLOCK MAKE-STREAM (CL:BLOCK NIL (CL:LABELS ((~G1065 (~G134) (CL:PROGN (=-AREF 'STRUCT ~G134 0) (=-AREF 'STREAM ~G134 1)) (CL:PROGN (=-AREF (CL:COND ((EQ HANDLE 'HANDLE) NIL) (T HANDLE)) ~G134 2)) (CL:PROGN (=-AREF (CL:COND ((EQ FUN-IN 'FUN-IN) NIL) (T FUN-IN)) ~G134 3)) (CL:PROGN (=-AREF (CL:COND ((EQ FUN-OUT 'FUN-OUT) NIL) (T FUN-OUT)) ~G134 4)) (CL:PROGN (=-AREF (CL:COND ((EQ FUN-EOF 'FUN-EOF) NIL) (T FUN-EOF)) ~G134 5)) (CL:PROGN (=-AREF (CL:COND ((EQ LAST-CHAR 'LAST-CHAR) NIL) (T LAST-CHAR)) ~G134 6)) (CL:PROGN (=-AREF (CL:COND ((EQ PEEKED-CHAR 'PEEKED-CHAR) NIL) (T PEEKED-CHAR)) ~G134 7)) (CL:PROGN (=-AREF (CL:COND ((EQ INPUT-LOCATION 'INPUT-LOCATION) (MAKE-STREAM-LOCATION)) (T INPUT-LOCATION)) ~G134 8)) (CL:PROGN (=-AREF (CL:COND ((EQ OUTPUT-LOCATION 'OUTPUT-LOCATION) (MAKE-STREAM-LOCATION :TRACK? NIL)) (T OUTPUT-LOCATION)) ~G134 9)) (CL:PROGN (=-AREF (CL:COND ((EQ USER-DETAIL 'USER-DETAIL) NIL) (T USER-DETAIL)) ~G134 10)) ~G134)) (~G1065 (MAKE-ARRAY 11))))))
(CL:DEFUN %MACROEXPAND-BACKQUOTE (X) (CL:COND ((CL:ATOM X) X) ((CL:ATOM (CL:CAR X)) (CL:CONS (CL:CAR X) (%MACROEXPAND-BACKQUOTE (CL:CDR X)))) ((EQ (CL:CAR (CL:CAR X)) 'QUASIQUOTE) (CL:CONS (CL:CONS 'QUASIQUOTE (%MACROEXPAND (CL:CDR (CL:CAR X)))) (%MACROEXPAND-BACKQUOTE (CL:CDR X)))) ((EQ (CL:CAR (CL:CAR X)) 'QUASIQUOTE-SPLICE) (CL:CONS (CL:CONS 'QUASIQUOTE-SPLICE (%MACROEXPAND (CL:CDR (CL:CAR X)))) (%MACROEXPAND-BACKQUOTE (CL:CDR X)))) (T (CL:CONS (%MACROEXPAND-BACKQUOTE (CL:CAR X)) (%MACROEXPAND-BACKQUOTE (CL:CDR X))))))
(CL:DEFUN MAKE-STANDARD-STREAM NIL (CL:BLOCK MAKE-STANDARD-STREAM (CL:BLOCK NIL (MAKE-STREAM :FUN-IN (CL:LAMBDA (_) (CL:BLOCK NIL (%READ-CHAR NIL))) :FUN-OUT (CL:LAMBDA (C STR) (%PRINC C NIL)) :FUN-EOF (CL:LAMBDA (_) (CL:BLOCK NIL (%FEOF NIL)))))))
(CL:DEFUN GENSYM-NUMBER NIL (CL:SETQ *GENSYM-COUNTER* (+ 1 *GENSYM-COUNTER*)))
(CL:DEFUN LIST-ARRAY (X) (CL:BLOCK LIST-ARRAY (CL:BLOCK NIL (CL:LABELS ((~G1066 (A) (CL:LABELS ((~G1067 (IDX) (CL:BLOCK NIL (CL:LABELS ((~G1068 (~G124) (CL:LABELS ((~G1069 (I) (CL:TAGBODY ~G122 (CL:COND ((NOT ~G124) (CL:GO ~G123))) (CL:SETQ I (CL:CAR ~G124)) (CL:PROGN (=-AREF I A IDX)) (CL:PROGN (CL:SETQ IDX (NUMBER+ IDX 1))) (CL:SETQ ~G124 (CL:CDR ~G124)) (CL:GO ~G122) ~G123 (CL:RETURN-FROM NIL (CL:PROGN A))))) (~G1069 NIL)))) (~G1068 X))))) (~G1067 0)))) (~G1066 (MAKE-ARRAY (CL:LENGTH X)))))))
(CL:DEFUN ARRAY-LIST (X) (CL:BLOCK ARRAY-LIST (CL:BLOCK NIL (CL:LABELS ((~G1070 (RESULT) (CL:LABELS ((~G1071 (~G31) (CL:BLOCK NIL (CL:LABELS ((~G1072 (!) (CL:TAGBODY ~G32 (CL:COND ((== ! ~G31) (CL:RETURN-FROM NIL (CL:PROGN (QUEUE-LIST RESULT))))) (ENQUEUE RESULT (CL:AREF X !)) (CL:SETQ ! (NUMBER+ 1 !)) (CL:GO ~G32)))) (~G1072 0))))) (~G1071 (INTEGER (CL:LENGTH X)))))) (~G1070 (MAKE-QUEUE))))))
(CL:DEFUN MAPCAN (FUNC CL:&REST LISTS) (CL:BLOCK MAPCAN (CL:BLOCK NIL (CL:APPLY (CL:FUNCTION NCONC) (CL:APPLY (CL:FUNCTION CL:MAPCAR) FUNC LISTS)))))
(CL:DEFUN STRING-LIST (X) (CL:BLOCK STRING-LIST (CL:BLOCK NIL (CL:LABELS ((~G1073 (L) (CL:LABELS ((~G1074 (S) (CL:BLOCK NIL (CL:LABELS ((~G1075 (I) (CL:TAGBODY ~G77 (CL:COND ((< I 0) (CL:RETURN-FROM NIL (CL:PROGN)))) (CL:PROGN (CL:SETQ S (CL:PROGN (CL:SETQ S (CL:CONS (ELT X I) S))))) (CL:SETQ I (-- I)) (CL:GO ~G77)))) (~G1075 (-- L)))) S)) (~G1074 NIL)))) (~G1073 (CL:LENGTH X))))))
(CL:DEFUN BACKQUOTE? (X) (CL:BLOCK BACKQUOTE? (CL:BLOCK NIL (CL:COND ((CONS? X) (CL:COND ((EQ 'BACKQUOTE (CL:CAR X)) X)))))))
(CL:DEFUN QUOTE? (X) (CL:BLOCK QUOTE? (CL:BLOCK NIL (CL:COND ((CONS? X) (CL:COND ((EQ 'CL:QUOTE (CL:CAR X)) X)))))))
(CL:DEFUN QUASIQUOTE-SPLICE? (X) (CL:BLOCK QUASIQUOTE-SPLICE? (CL:BLOCK NIL (CL:COND ((CONS? X) (CL:COND ((EQ 'QUASIQUOTE-SPLICE (CL:CAR X)) X)))))))
(CL:DEFUN QUASIQUOTE? (X) (CL:BLOCK QUASIQUOTE? (CL:BLOCK NIL (CL:COND ((CONS? X) (CL:COND ((EQ 'QUASIQUOTE (CL:CAR X)) X)))))))
(CL:DEFUN ANY-QUASIQUOTE? (X) (CL:COND ((CONS? X) (CL:COND ((EQ (CL:CAR X) 'QUASIQUOTE) T) ((EQ (CL:CAR X) 'QUASIQUOTE-SPLICE) T)))))
(CL:DEFUN CONSTANT-LITERAL? (X) (CL:BLOCK CONSTANT-LITERAL? (CL:BLOCK NIL (CL:LABELS ((~G1076 (~G411) (CL:COND (~G411 ~G411) (T (CL:LABELS ((~G1077 (~G412) (CL:COND (~G412 ~G412) (T (CL:LABELS ((~G1078 (~G413) (CL:COND (~G413 ~G413) (T (CL:LABELS ((~G1079 (~G414) (CL:COND (~G414 ~G414) (T (CL:LABELS ((~G1080 (~G415) (CL:COND (~G415 ~G415) (T (CL:LABELS ((~G1081 (~G416) (CL:COND (~G416 ~G416) (T (HASH-TABLE? X))))) (~G1081 (ARRAY? X))))))) (~G1080 (STRING? X))))))) (~G1079 (CHARACTER? X))))))) (~G1078 (NUMBER? X))))))) (~G1077 (EQ T X))))))) (~G1076 (NOT X))))))
(CL:DEFUN FORMAT (STR TXT CL:&REST ARGS) (CL:BLOCK FORMAT (CL:BLOCK NIL (CL:LABELS ((~G1082 (~G304) (CL:LABELS ((~G1083 (NSTR) (CL:LABELS ((~G1084 (~G305) (CL:COND (~G304 ~G305) (T (GET-STREAM-STRING NSTR))))) (~G1084 (CL:PROGN (%FORMAT (MAKE-FORMAT-INFO :STREAM NSTR :TEXT TXT :ARGS ARGS) (STRING-LIST TXT) ARGS)))))) (~G1083 (DEFAULT-STREAM ~G304))))) (~G1082 STR)))))
(CL:DEFUN FRESH-LINE (CL:&OPTIONAL (STR *STANDARD-OUTPUT*)) (CL:BLOCK FRESH-LINE (CL:BLOCK NIL (CL:LABELS ((~G1085 (~G163) (CL:LABELS ((~G1086 (S) (CL:LABELS ((~G1087 (~G164) (CL:COND (~G163 ~G164) (T (GET-STREAM-STRING S))))) (~G1087 (CL:PROGN (CL:COND ((NOT (FRESH-LINE? S)) (CL:PROGN (TERPRI S) T)))))))) (~G1086 (DEFAULT-STREAM ~G163))))) (~G1085 STR)))))
(CL:DEFUN =-STREAM-PEEKED-CHAR (VAL ARR) (CL:BLOCK =-STREAM-PEEKED-CHAR (CL:BLOCK NIL (CL:PROGN (=-AREF VAL ARR 7)))))
(CL:DEFUN READ-CHAR-0 (STR) (CL:BLOCK READ-CHAR-0 (CL:BLOCK NIL (CL:LABELS ((~G1088 (~G219) (CL:COND (~G219 ~G219) (T (CL:PROGN (=-STREAM-LAST-CHAR (FUNCALL (STREAM-FUN-IN STR) STR) STR)))))) (~G1088 (READ-PEEKED-CHAR STR))))))
(CL:DEFUN STREAM-PEEKED-CHAR (ARR) (CL:BLOCK STREAM-PEEKED-CHAR (CL:BLOCK NIL (CL:AREF ARR 7))))
(CL:DEFUN READ-EXPR (STR) (CL:BLOCK READ-EXPR (CL:BLOCK NIL (CL:LABELS ((~G1089 (~G286) (CL:LABELS ((~G1090 (~G287) (CL:LABELS ((~G1091 (TOKEN) (CL:LABELS ((~G1092 (~G288) (CL:LABELS ((~G1093 (PKG) (CL:LABELS ((~G1094 (~G289) (CL:LABELS ((~G1095 (SYM) (CL:LABELS ((~G1096 (~G285) (CL:COND ((EQL ~G285 NIL) NIL) ((EQL ~G285 :EOF) NIL) ((EQL ~G285 :BRACKET-OPEN) (READ-CONS-SLOT STR)) ((EQL ~G285 :SQUARE-BRACKET-OPEN) (CL:CONS 'SQUARE (READ-CONS-SLOT STR))) ((EQL ~G285 :CURLY-BRACKET-OPEN) (CL:CONS 'CURLY (READ-CONS-SLOT STR))) (T (CL:COND ((TOKEN-IS-QUOTE? TOKEN) (READ-QUOTE STR TOKEN)) (T (READ-ATOM STR TOKEN PKG SYM))))))) (~G1096 TOKEN)))) (~G1095 (CL:CAR ~G289))))) (~G1094 (CL:CDR ~G288))))) (~G1093 (CL:CAR ~G288))))) (~G1092 (CL:CDR ~G287))))) (~G1091 (CL:CAR ~G287))))) (~G1090 (CL:CDR ~G286))))) (~G1089 (READ-TOKEN STR))))))
(CL:DEFUN SEEK-CHAR (STR) (CL:BLOCK SEEK-CHAR (CL:BLOCK NIL (SKIP-SPACES STR) (PEEK-CHAR STR))))
(CL:DEFUN DOT-EXPAND-CONV (X) (CL:BLOCK DOT-EXPAND-CONV (CL:BLOCK NIL (CL:LABELS ((~G1097 (SL) (CL:LABELS ((~G1098 (P) (CL:COND ((NO-DOT-NOTATION? X) X) ((HAS-DOT-NOTATION? X) (DOT-EXPAND-LIST SL)) (T (CL:CONS '%SLOT-VALUE (CL:CONS (LIST-SYMBOL (SUBSEQ SL 0 P)) (CL:CONS (DOT-EXPAND-CONV (LIST-SYMBOL (SUBSEQ SL (++ P)))) NIL))))))) (~G1098 (DOT-POSITION SL))))) (~G1097 (STRING-LIST (SYMBOL-NAME X)))))))
(CL:DEFUN %QUASIQUOTE-EXPAND (X) (CL:COND ((CL:ATOM X) X) ((CL:ATOM (CL:CAR X)) (CL:CONS (CL:CAR X) (%QUASIQUOTE-EXPAND (CL:CDR X)))) ((EQ (CL:CAR (CL:CAR X)) 'CL:QUOTE) (CL:CONS (CL:CAR X) (%QUASIQUOTE-EXPAND (CL:CDR X)))) ((EQ (CL:CAR (CL:CAR X)) 'BACKQUOTE) (CL:CONS (CL:CAR X) (%QUASIQUOTE-EXPAND (CL:CDR X)))) ((EQ (CL:CAR (CL:CAR X)) 'QUASIQUOTE) (CL:CONS (EVAL (MACROEXPAND (CL:CAR (CL:CDR (CL:CAR X))))) (%QUASIQUOTE-EXPAND (CL:CDR X)))) ((EQ (CL:CAR (CL:CAR X)) 'QUASIQUOTE-SPLICE) (APPEND (EVAL (MACROEXPAND (CL:CAR (CL:CDR (CL:CAR X))))) (%QUASIQUOTE-EXPAND (CL:CDR X)))) (T (CL:CONS (%QUASIQUOTE-EXPAND (CL:CAR X)) (%QUASIQUOTE-EXPAND (CL:CDR X))))))
(CL:DEFUN MAKE-STREAM-STREAM (CL:&KEY STREAM (INPUT-LOCATION (MAKE-STREAM-LOCATION)) (OUTPUT-LOCATION (MAKE-STREAM-LOCATION))) (CL:BLOCK MAKE-STREAM-STREAM (CL:BLOCK NIL (MAKE-STREAM :HANDLE STREAM :INPUT-LOCATION INPUT-LOCATION :OUTPUT-LOCATION OUTPUT-LOCATION :FUN-IN (CL:LAMBDA (_) (CL:BLOCK NIL (%READ-CHAR (STREAM-HANDLE _)))) :FUN-OUT (CL:LAMBDA (C STR) (%PRINC C (STREAM-HANDLE STR))) :FUN-EOF (CL:LAMBDA (_) (CL:BLOCK NIL (%FEOF (STREAM-HANDLE _))))))))
(CL:DEFUN MAKE-STREAM-LOCATION (CL:&KEY (TRACK? 'TRACK?) (ID 'ID) (LINE 'LINE) (COLUMN 'COLUMN) (TABSIZE 'TABSIZE)) (CL:BLOCK MAKE-STREAM-LOCATION (CL:BLOCK NIL (CL:LABELS ((~G1099 (~G133) (CL:PROGN (=-AREF 'STRUCT ~G133 0) (=-AREF 'STREAM-LOCATION ~G133 1)) (CL:PROGN (=-AREF (CL:COND ((EQ TRACK? 'TRACK?) T) (T TRACK?)) ~G133 2)) (CL:PROGN (=-AREF (CL:COND ((EQ ID 'ID) NIL) (T ID)) ~G133 3)) (CL:PROGN (=-AREF (CL:COND ((EQ LINE 'LINE) 1) (T LINE)) ~G133 4)) (CL:PROGN (=-AREF (CL:COND ((EQ COLUMN 'COLUMN) 1) (T COLUMN)) ~G133 5)) (CL:PROGN (=-AREF (CL:COND ((EQ TABSIZE 'TABSIZE) *DEFAULT-STREAM-TABSIZE*) (T TABSIZE)) ~G133 6)) ~G133)) (~G1099 (MAKE-ARRAY 7))))))
(CL:DEFUN %FOPEN-DIRECTION (DIRECTION) (CL:BLOCK %FOPEN-DIRECTION (CL:BLOCK NIL (CL:LABELS ((~G1100 (~G145) (CL:COND ((EQL ~G145 'INPUT) "r") ((EQL ~G145 'OUTPUT) "w") ((EQL ~G145 'APPEND) "a") (T (ERROR ":DIRECTION isn't specified."))))) (~G1100 DIRECTION)))))
(CL:DEFUN STREAM-HANDLE (ARR) (CL:BLOCK STREAM-HANDLE (CL:BLOCK NIL (CL:AREF ARR 2))))
(CL:DEFUN FUNCALL (FUN CL:&REST ARGS) (CL:BLOCK FUNCALL (CL:BLOCK NIL (CL:APPLY FUN ARGS))))
(CL:DEFUN CDRLIST (~G108) (CL:BLOCK CDRLIST (CL:BLOCK NIL (FILTER (CL:FUNCTION CL:CDR) ~G108))))
(CL:DEFUN ARGUMENT-SYNONYM? (X) (CL:BLOCK ARGUMENT-SYNONYM? (CL:BLOCK NIL (CL:LABELS ((~G1101 (~G166) (CL:COND (~G166 ~G166) (T (%KEY? X))))) (~G1101 (%REST-OR-%BODY? X))))))
(CL:DEFUN %MACROEXPAND-REST (X) (CL:COND ((CL:ATOM X) X) (T (CL:CONS (%MACROEXPAND (CL:CAR X)) (%MACROEXPAND-REST (CL:CDR X))))))
(CL:DEFUN ARGUMENT-EXPAND (FUN DEF VALS CL:&KEY (APPLY-VALUES? T) (CONCATENATE-SUBLISTS? T) (BREAK-ON-ERRORS? T)) (CL:BLOCK ARGUMENT-EXPAND (CL:BLOCK NIL (CL:LABELS ((~G1102 (!) (CL:COND ((CL:LABELS ((~G1103 (~G178) (CL:COND (~G178 ~G178) (T (EQ ! 'ERROR))))) (~G1103 APPLY-VALUES?)) !) (T (CARLIST !))))) (~G1102 (ARGUMENT-EXPAND-0 FUN DEF VALS APPLY-VALUES? CONCATENATE-SUBLISTS? BREAK-ON-ERRORS?))))))
(CL:DEFUN BUTLAST (PLIST) (CL:BLOCK BUTLAST (CL:BLOCK NIL (CL:COND ((CL:CDR PLIST) (CL:CONS (CL:CAR PLIST) (BUTLAST (CL:CDR PLIST))))))))
(CL:DEFUN GROUP (X SIZE) (CL:BLOCK GROUP (CL:BLOCK NIL (CL:LABELS ((~G1104 (Q) (CL:BLOCK NIL (CL:PROGN (CL:TAGBODY ~G33 (CL:COND ((NOT X) (CL:RETURN-FROM NIL (CL:PROGN (QUEUE-LIST Q))))) (ENQUEUE Q (COPY-HEAD X SIZE)) (CL:PROGN (CL:SETQ X (CL:NTHCDR SIZE X))) (CL:GO ~G33)))))) (~G1104 (MAKE-QUEUE))))))
(CL:DEFUN MAKE-? (BODY) (CL:BLOCK MAKE-? (CL:BLOCK NIL (CL:LABELS ((~G1105 (TESTS) (CL:LABELS ((~G1106 (END) (CL:LABELS ((~G1107 (~G710) (CL:COND (~G710 ~G710) (T (ERROR "Body is missing."))))) (~G1107 BODY)) (CL:CONS 'CL:COND (APPEND (CL:COND ((CL:CDR END) TESTS) (T (+ (BUTLAST TESTS) (CL:LIST (CL:CONS T END))))) NIL)))) (~G1106 (CL:CAR (CL:LAST TESTS)))))) (~G1105 (GROUP BODY 2))))))
(CL:DEFUN ARGUMENT-EXPAND-NAMES (FUN DEF) (CL:BLOCK ARGUMENT-EXPAND-NAMES (CL:BLOCK NIL (ARGUMENT-EXPAND FUN DEF NIL :APPLY-VALUES? NIL))))
(CL:DEFUN %MACROEXPAND (X) (CL:COND ((CL:ATOM X) X) ((CL:APPLY *MACRO?* (CL:LIST X)) (CL:LABELS ((~G1108 (X) (CL:COND ((CONS? X) (CL:CONS (CL:CAR X) (%MACROEXPAND-REST (CL:CDR X)))) (T X)))) (~G1108 (CL:APPLY *MACROCALL* (CL:LIST X))))) ((EQ (CL:CAR X) 'CL:QUOTE) X) ((EQ (CL:CAR X) 'BACKQUOTE) (CL:CONS 'BACKQUOTE (CL:APPLY *MACROEXPAND-BACKQUOTE* (CL:LIST (CL:CDR X))))) ((EQ (CL:CAR X) 'QUASIQUOTE) (CL:CONS 'QUASIQUOTE (%MACROEXPAND (CL:CDR X)))) ((EQ (CL:CAR X) 'QUASIQUOTE-SPLICE) (CL:CONS 'QUASIQUOTE-SPLICE (%MACROEXPAND (CL:CDR X)))) (T (CL:CONS (%MACROEXPAND (CL:CAR X)) (%MACROEXPAND-REST (CL:CDR X))))))
(CL:DEFUN LIST? (X) (CL:COND ((CONS? X) T) (T (NOT X))))
(CL:DEFUN ARGUMENT-EXPAND-VALUES (FUN DEF VALS CL:&KEY (BREAK-ON-ERRORS? T)) (CL:BLOCK ARGUMENT-EXPAND-VALUES (CL:BLOCK NIL (DYNAMIC-MAP (CL:LAMBDA (_) (CL:BLOCK NIL (CL:COND ((ARGUMENT-SYNONYM? _) (CL:CDR _)) (T _)))) (CDRLIST (ARGUMENT-EXPAND FUN DEF VALS :BREAK-ON-ERRORS? BREAK-ON-ERRORS?))))))
(CL:DEFUN ASSOC (KEY LST CL:&KEY (TEST (CL:FUNCTION EQL))) (CL:BLOCK ASSOC (CL:BLOCK NIL (CL:COND (LST (CL:BLOCK NIL (CL:LABELS ((~G1109 (~G112) (CL:LABELS ((~G1110 (I) (CL:TAGBODY ~G110 (CL:COND ((NOT ~G112) (CL:GO ~G111))) (CL:SETQ I (CL:CAR ~G112)) (CL:COND ((CONS? I) (CL:COND ((FUNCALL TEST KEY (CL:CAR I)) (CL:RETURN-FROM NIL I)))) (T (ERROR "Pair expected instead of ~A." I))) (CL:SETQ ~G112 (CL:CDR ~G112)) (CL:GO ~G110) ~G111 (CL:RETURN-FROM NIL (CL:PROGN))))) (~G1110 NIL)))) (~G1109 LST))))))))
(CL:DEFUN CLOSE (STR) (CL:BLOCK CLOSE (CL:BLOCK NIL (%FCLOSE (STREAM-HANDLE STR)))))
(CL:DEFUN OPEN (PATH CL:&KEY DIRECTION) (CL:BLOCK OPEN (CL:BLOCK NIL (CL:LABELS ((~G1111 (!) (CL:COND (! (MAKE-STREAM-STREAM :STREAM ! :INPUT-LOCATION (MAKE-STREAM-LOCATION :ID PATH))) (T (ERROR "Couldn't open file `~A'." PATH))))) (~G1111 (%FOPEN PATH (%FOPEN-DIRECTION DIRECTION)))))))
(CL:DEFUN QUASIQUOTE-EXPAND (X) (CL:CAR (%QUASIQUOTE-EXPAND (CL:LIST X))))
(CL:DEFUN DOT-EXPAND (X) (CL:BLOCK DOT-EXPAND (CL:BLOCK NIL (CL:COND ((SYMBOL? X) (DOT-EXPAND-CONV X)) ((CONS? X) (CL:CONS (DOT-EXPAND (CL:CAR X)) (DOT-EXPAND (CL:CDR X)))) (T X)))))
(CL:DEFUN READ (CL:&OPTIONAL (STR *STANDARD-INPUT*)) (CL:BLOCK READ (CL:BLOCK NIL (CL:COND ((SEEK-CHAR STR) (READ-EXPR STR))))))
(CL:DEFUN PEEK-CHAR (CL:&OPTIONAL (STR *STANDARD-INPUT*)) (CL:BLOCK PEEK-CHAR (CL:BLOCK NIL (CL:LABELS ((~G1112 (~G220) (CL:COND (~G220 ~G220) (T (CL:PROGN (=-STREAM-PEEKED-CHAR (READ-CHAR-0 STR) STR)))))) (~G1112 (STREAM-PEEKED-CHAR STR))))))
(CL:DEFUN CADR (LST) (CL:CAR (CL:CDR LST)))
(CL:DEFUN ERROR (MSG CL:&REST ARGS) (CL:BLOCK ERROR (CL:BLOCK NIL (CL:LABELS ((~G1113 (~G306) (CL:PROGN (CL:SETQ *PRINT-AUTOMATIC-NEWLINE?* NIL)) (CL:LABELS ((~G1114 (~G307) (CL:PROGN (CL:SETQ *PRINT-AUTOMATIC-NEWLINE?* ~G306)) ~G307)) (~G1114 (CL:PROGN (FRESH-LINE) (%ERROR (CL:APPLY (CL:FUNCTION FORMAT) NIL MSG ARGS))))))) (~G1113 *PRINT-AUTOMATIC-NEWLINE?*)))))
(CL:DEFUN QUOTE-EXPAND (X) (CL:BLOCK QUOTE-EXPAND (CL:BLOCK NIL (CL:LABELS ((ATOMIC (_) (CL:BLOCK NIL (CL:COND ((CONSTANT-LITERAL? _) _) (T (CL:CONS 'CL:QUOTE (CL:CONS _ NIL)))))) (STATIC (_) (CL:BLOCK NIL (CL:COND ((CL:ATOM _) (ATOMIC _)) (T (CL:CONS 'CL:CONS (CL:CONS (STATIC (CL:CAR _)) (CL:CONS (STATIC (CL:CDR _)) NIL))))))) (QQ (_) (CL:BLOCK NIL (CL:COND ((ANY-QUASIQUOTE? (CADR (CL:CAR _))) (CL:CONS 'CL:CONS (CL:CONS (BACKQ (CADR (CL:CAR _))) (CL:CONS (BACKQ (CL:CDR _)) NIL)))) (T (CL:CONS 'CL:CONS (CL:CONS (CADR (CL:CAR _)) (CL:CONS (BACKQ (CL:CDR _)) NIL))))))) (QQS (_) (CL:BLOCK NIL (CL:COND ((ANY-QUASIQUOTE? (CADR (CL:CAR _))) (ERROR "Illegal ~A as argument to ,@ (QUASIQUOTE-SPLICE)." (CADR (CL:CAR _)))) (T (CL:CONS 'APPEND (CL:CONS (CADR (CL:CAR _)) (CL:CONS (BACKQ (CL:CDR _)) NIL))))))) (BACKQ (_) (CL:BLOCK NIL (CL:COND ((CL:ATOM _) (ATOMIC _)) (T (CL:LABELS ((~G1115 (~G643) (CL:COND ((CL:ATOM ~G643) (CL:CONS 'CL:CONS (CL:CONS (ATOMIC (CL:CAR _)) (CL:CONS (BACKQ (CL:CDR _)) NIL)))) ((QUASIQUOTE? ~G643) (QQ _)) ((QUASIQUOTE-SPLICE? ~G643) (QQS _)) (T (CL:CONS 'CL:CONS (CL:CONS (BACKQ (CL:CAR _)) (CL:CONS (BACKQ (CL:CDR _)) NIL))))))) (~G1115 (CL:CAR _))))))) (DISP (_) (CL:BLOCK NIL (CL:LABELS ((~G1116 (~G644) (CL:COND ((QUOTE? ~G644) (STATIC (CL:CAR (CL:CDR _)))) ((BACKQUOTE? ~G644) (BACKQ (CL:CAR (CL:CDR _)))) (T _)))) (~G1116 _)))) (WALK (_) (CL:BLOCK NIL (CL:COND ((CL:ATOM _) (DISP _)) (T (CL:CONS (WALK (DISP (CL:CAR _))) (WALK (CL:CDR _)))))))) (CL:CAR (WALK (CL:LIST X)))))))
(CL:DEFUN NEUTRALIZE-FORMAT-STRING (X) (CL:BLOCK NEUTRALIZE-FORMAT-STRING (CL:BLOCK NIL (LIST-STRING (MAPCAN (CL:LAMBDA (_) (CL:BLOCK NIL (CL:COND ((EQL _ #\~) (CL:LIST _ _)) (T (CL:LIST _))))) (STRING-LIST X))))))
(CL:DEFUN DYNAMIC-MAP (FUNC CL:&REST LISTS) (CL:BLOCK DYNAMIC-MAP (CL:BLOCK NIL (CL:COND ((STRING? (CL:CAR LISTS)) (LIST-STRING (CL:APPLY (CL:FUNCTION CL:MAPCAR) FUNC (CL:MAPCAR (CL:FUNCTION STRING-LIST) LISTS)))) ((ARRAY? (CL:CAR LISTS)) (LIST-ARRAY (CL:APPLY (CL:FUNCTION CL:MAPCAR) FUNC (CL:MAPCAR (CL:FUNCTION ARRAY-LIST) LISTS)))) (T (CL:APPLY (CL:FUNCTION CL:MAPCAR) FUNC LISTS))))))
(CL:DEFUN EQUAL (X Y) (CL:BLOCK EQUAL (CL:BLOCK NIL (CL:COND ((CL:LABELS ((~G1117 (~G8) (CL:COND (~G8 ~G8) (T (CL:ATOM Y))))) (~G1117 (CL:ATOM X))) (EQL X Y)) ((EQUAL (CL:CAR X) (CL:CAR Y)) (EQUAL (CL:CDR X) (CL:CDR Y)))))))
(CL:DEFUN CADAR (LST) (CADR (CL:CAR LST)))
(CL:DEFUN GENSYM NIL (CL:LABELS ((~G1118 (X) (CL:COND ((EQ (SYMBOL-VALUE X) X) (CL:COND ((SYMBOL-FUNCTION X) (GENSYM)) (T X))) (T (GENSYM))))) (~G1118 (MAKE-SYMBOL (STRING-CONCAT *GENSYM-PREFIX* (STRING (GENSYM-NUMBER)))))))
(CL:DEFUN + (CL:&REST X) (CL:LABELS ((~G1119 (A) (CL:COND (A (CL:APPLY (CL:COND ((CONS? A) (CL:FUNCTION APPEND)) ((STRING? A) (CL:FUNCTION STRING-CONCAT)) (T (CL:FUNCTION NUMBER+))) X)) (T (CL:COND ((CL:CDR X) (CL:APPLY (CL:FUNCTION +) (CL:CDR X)))))))) (~G1119 (CL:CAR X))))
(CL:DEFUN MEMBER (ELM LST CL:&KEY (TEST (CL:FUNCTION EQL))) (CL:BLOCK MEMBER (CL:BLOCK NIL (CL:BLOCK NIL (CL:LABELS ((~G1120 (I) (CL:TAGBODY ~G11 (CL:COND ((NOT I) (CL:RETURN-FROM NIL (CL:PROGN)))) (CL:COND ((FUNCALL TEST ELM (CL:CAR I)) (CL:RETURN-FROM MEMBER I))) (CL:SETQ I (CL:CDR I)) (CL:GO ~G11)))) (~G1120 LST))))))
(CL:DEFUN PRINT-DEFINITION (X) (CL:COND (*PRINT-DEFINITIONS?* (CL:APPLY *DEFINITION-PRINTER* (CL:LIST X)))))
(CL:DEFUN IDENTITY (X) X)
"Section DELAYED-EXPRS"
(CL:SETQ *UNIVERSE* NIL)
(CL:SETQ *VARIABLES* NIL)
(CL:SETQ *LAUNCHFILE* NIL)
(CL:SETQ *POINTER-SIZE* 4)
(CL:SETQ *ASSERT?* NIL)
(CL:SETQ *ENDIANESS* NIL)
(CL:SETQ *CPU-TYPE* NIL)
(CL:SETQ *LIBC-PATH* NIL)
(CL:SETQ *RAND-MAX* NIL)
(CL:SETQ *PRINT-DEFINITIONS?* NIL)
(CL:SETQ *DEFAULT-STREAM-TABSIZE* 8)
(CL:SETQ *QUASIQUOTE-EXPAND* NIL)
(CL:SETQ *DOT-EXPAND* NIL)
(CL:SETQ *ENVIRONMENT-PATH* ".")
(CL:SETQ *ENVIRONMENT-FILENAMES* NIL)
(CL:SETQ +ANONYMOUS-FUNCTION-SOURCES?+ NIL)
(CL:SETQ *EVAL* NIL)
(CL:SETQ *FUNCTIONS* NIL)
(CL:SETQ *MACROEXPAND* NIL)
(CL:SETQ *SPECIAL-FORMS* NIL)
(CL:PUSH (CL:CONS (TRE-SYMBOL '%DEFUN-QUIET) (CL:CONS '(NAME ARGS CL:&BODY BODY) (CL:LAMBDA (NAME ARGS BODY) (MAKE-%DEFUN-QUIET NAME ARGS BODY)))) *SPECIAL-FORMS*)
(CL:PUSH (CL:CONS (TRE-SYMBOL '%DEFUN) (CL:CONS '(NAME ARGS CL:&BODY BODY) (CL:LAMBDA (NAME ARGS BODY) (PRINT-DEFINITION `(%DEFUN ,NAME ,ARGS)) (MAKE-%DEFUN-QUIET NAME ARGS BODY)))) *SPECIAL-FORMS*)
(CL:PUSH (CL:CONS (TRE-SYMBOL '%DEFMACRO) (CL:CONS '(NAME ARGS CL:&BODY BODY) (CL:LAMBDA (NAME ARGS BODY) (PRINT-DEFINITION `(%DEFMACRO ,NAME ,ARGS)) `(CL:PUSH (CL:CONS ',NAME (CL:CONS ',(CL:CONS ARGS BODY) (CL:LAMBDA ,(ARGUMENT-EXPAND-NAMES '%DEFMACRO ARGS) ,@BODY))) ,(TRE-SYMBOL '*MACROS*))))) *SPECIAL-FORMS*)
(CL:PUSH (CL:CONS (TRE-SYMBOL '%DEFVAR) (CL:CONS '(NAME CL:&OPTIONAL (INIT NIL)) (CL:LAMBDA (NAME INIT) (PRINT-DEFINITION `(%DEFVAR ,NAME)) `(CL:PROGN (CL:PUSH (CL:CONS ',NAME ',INIT) *VARIABLES*) (CL:DEFVAR ,NAME ,INIT))))) *SPECIAL-FORMS*)
(CL:PUSH (CL:CONS (TRE-SYMBOL '?) (CL:CONS '(CL:&BODY BODY) (CL:LAMBDA (BODY) (MAKE-? BODY)))) *SPECIAL-FORMS*)
(CL:SETQ *KEYWORD-PACKAGE* (CL:FIND-PACKAGE "KEYWORD"))
(CL:SETQ *PACKAGE* NIL)
(CL:SETQ *DEFINITION-PRINTER* (CL:FUNCTION CL:PRINT))
(CL:SETQ *GENSYM-PREFIX* "~G")
(CL:SETQ *PRINT-AUTOMATIC-NEWLINE?* T)
(CL:SETQ *STANDARD-INPUT* (MAKE-STANDARD-STREAM))
(CL:SETQ *MACROEXPAND-BACKQUOTE* (CL:FUNCTION %MACROEXPAND-BACKQUOTE))
(CL:SETQ *MACROCALL* NIL)
(CL:SETQ *MACRO?* NIL)
(CL:SETQ +CL-FUNCTION-IMPORTS+ (CL:CONS 'CL:ATOM (CL:CONS 'CL:APPLY (CL:CONS 'CL:CONS (CL:CONS 'CL:CAR (CL:CONS 'CL:CDR (CL:CONS 'CL:RPLACA (CL:CONS 'CL:RPLACD (CL:CONS 'CL:LIST (CL:CONS 'CL:LAST (CL:CONS 'CL:COPY-LIST (CL:CONS 'CL:NTHCDR (CL:CONS 'CL:NTH (CL:CONS 'CL:MAPCAR (CL:CONS 'CL:LENGTH (CL:CONS 'CL:MAKE-STRING (CL:CONS 'CL:MOD (CL:CONS 'CL:SQRT (CL:CONS 'CL:SIN (CL:CONS 'CL:COS (CL:CONS 'CL:TAN (CL:CONS 'CL:ASIN (CL:CONS 'CL:ACOS (CL:CONS 'CL:ATAN (CL:CONS 'CL:EXP (CL:CONS 'CL:ROUND (CL:CONS 'CL:FLOOR (CL:CONS 'CL:AREF (CL:CONS 'CL:CHAR-CODE (CL:CONS 'CL:MAKE-PACKAGE (CL:CONS 'CL:PACKAGE-NAME (CL:CONS 'CL:FIND-PACKAGE (CL:CONS 'CL:PRINT (CL:CONS 'CL:BREAK NIL))))))))))))))))))))))))))))))))))
(CL:SETQ *STANDARD-OUTPUT* (MAKE-STANDARD-STREAM))
(CL:SETQ *GENSYM-COUNTER* 0)
(CL:SETQ *VALUES-MAGIC* 'VALUES-~G23)
(CL:SETQ *PRINTER-ABBREVIATIONS* (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS "'" NIL)) (CL:CONS (CL:CONS 'BACKQUOTE (CL:CONS "`" NIL)) (CL:CONS (CL:CONS 'QUASIQUOTE (CL:CONS "," NIL)) (CL:CONS (CL:CONS 'QUASIQUOTE-SPLICE (CL:CONS ",@" NIL)) NIL)))))
(CL:SETQ *ALWAYS-PRINT-PACKAGE-NAMES?* NIL)
(CL:SETQ *INVISIBLE-PACKAGE-NAMES* (CL:CONS "TRE" (CL:CONS "TRE-CORE" NIL)))
(CL:SETQ *PRINTER-ARGUMENT-DEFINITIONS* (MAKE-HASH-TABLE :TEST (CL:FUNCTION EQ)))
"Section DUMMY"
(cl:in-package :tre)
(cl:format t "Loading environment...\~%")
(env-load "main.lisp")
