; trÃ© Common Lisp core, generated by 'makefiles/boot-common.lisp'.
(declaim #+sbcl(sb-ext:muffle-conditions compiler-note style-warning))
(DEFPACKAGE "TRE-CORE" (:EXPORT "NIL" "T" "SETQ" "COND" "PROGN" "BLOCK" "RETURN-FROM" "TAGBODY" "GO" "LABELS" "QUOTE" "FUNCTION" "LAMBDA" "SLOT-VALUE" "&REST" "&BODY" "&OPTIONAL" "&KEY" "BACKQUOTE" "QUASIQUOTE" "QUASIQUOTE-SPLICE" "BRACKETS" "BRACES" "ACCENT-CIRCONFLEX" "APPLY" "CONS" "CAR" "CDR" "RPLACA" "RPLACD" "LENGTH" "MAKE-STRING" "MOD" "SQRT" "SIN" "COS" "TAN" "ASIN" "ACOS" "ATAN" "EXP" "ROUND" "FLOOR" "AREF" "CHAR-CODE" "MAKE-PACKAGE" "PACKAGE-NAME" "FIND-PACKAGE" "PRINT" "BREAK" "POW" "CHARACTER>" "CHARACTER<" "CHARACTER==" "NUMBER>" "NUMBER<" "NUMBER/" "NUMBER*" "NUMBER-" "NUMBER+" "NUMBER==" "%/" "%*" ">=" "<=" ">" "<" "==" "/" "*" "-" "%CODE-CHAR" "INTEGER" "CHARACTER?" "NUMBER?" "ARRAY?" "STRING?" "FUNCTION?" "SYMBOL?" "CONS?" "NANOTIME" "UNIX-SH-RM" "UNIX-SH-MKDIR" "UNIX-SH-CP" "SH" "FIND-SYMBOL" "=-SYMBOL-FUNCTION" "SYMBOL-PACKAGE" "SYMBOL-FUNCTION" "SYMBOL-VALUE" "SYMBOL-NAME" "MAKE-SYMBOL" "%ELT-STRING" "LIST-STRING" "STRING==" "STRING" "STRING-CONCAT" "EQL" "EQ" "NOT" "<<" ">>" "BIT-XOR" "BIT-OR" "BIT-AND" "CODE-CHAR" "NANOTIME" "QUIT" "MACROEXPAND" "MACROEXPAND-1" "%%MACRO?" "%%MACROCALL" "MACRO?" "LOAD" "APPEND" "FILTER" "%START-CORE" "SYS-IMAGE-CREATE" "HASHKEYS" "COPY-HASH-TABLE" "HREMOVE" "=-HREF" "HREF" "HASH-TABLE?" "MAKE-HASH-TABLE" "FUNCTION-BYTECODE" "=-FUNCTION-SOURCE" "FUNCTION-SOURCE" "FILE-EXISTS?" "%READ-CHAR" "%FCLOSE" "%FOPEN" "%FORCE-OUTPUT" "%PRINC" "EVAL" "%ERROR" "ENV-LOAD" "=-AREF" "MAKE-ARRAY" "BUILTIN?" "%FN-QUIET" "%FN" "%DEFVAR" "%DEFMACRO" "?" "*UNIVERSE*" "*VARIABLES*" "*FUNCTIONS*" "*ENVIRONMENT-PATH*" "*ENVIRONMENT-FILENAMES*" "*MACROEXPAND*" "*QUASIQUOTE-EXPAND*" "*DOT-EXPAND*" "*PACKAGE*" "*KEYWORD-PACKAGE*" "*POINTER-SIZE*" "*LAUNCHFILE*" "*ASSERT?*" "*TARGETS*" "*ENDIANESS*" "*CPU-TYPE*" "*LIBC-PATH*" "*RAND-MAX*" "*EVAL*" "CONS?" "SYMBOL?" "FUNCTION?" "STRING?" "ARRAY?" "NUMBER?" "CHARACTER?" "INTEGER" "%CODE-CHAR" "-" "*" "/" "==" "<" ">" "<=" ">=" "%*" "%/" "NUMBER==" "NUMBER+" "NUMBER-" "NUMBER*" "NUMBER/" "NUMBER<" "NUMBER>" "CHARACTER==" "CHARACTER<" "CHARACTER>" "POW") (:IMPORT-FROM "CL" "NIL" "T" "SETQ" "COND" "PROGN" "BLOCK" "RETURN-FROM" "TAGBODY" "GO" "LABELS" "QUOTE" "FUNCTION" "LAMBDA" "SLOT-VALUE" "&REST" "&BODY" "&OPTIONAL" "&KEY" "APPLY" "CONS" "CAR" "CDR" "RPLACA" "RPLACD" "LENGTH" "MAKE-STRING" "MOD" "SQRT" "SIN" "COS" "TAN" "ASIN" "ACOS" "ATAN" "EXP" "ROUND" "FLOOR" "AREF" "CHAR-CODE" "MAKE-PACKAGE" "PACKAGE-NAME" "FIND-PACKAGE" "PRINT" "BREAK"))
(DEFPACKAGE "TRE" (:USE "TRE-CORE"))
(CL:IN-PACKAGE :TRE-CORE)
NIL
"Section CL-CORE"
(CL:DEFVAR *UNIVERSE*)
(CL:DEFVAR *VARIABLES*)
(CL:DEFVAR *LAUNCHFILE*)
(CL:DEFVAR *POINTER-SIZE*)
(CL:DEFVAR *ASSERT?*)
(CL:DEFVAR *ENDIANESS*)
(CL:DEFVAR *CPU-TYPE*)
(CL:DEFVAR *LIBC-PATH*)
(CL:DEFVAR *RAND-MAX*)
(CL:DEFVAR *PRINT-DEFINITIONS?*)
(CL:DEFVAR *DEFAULT-STREAM-TABSIZE*)
(CL:DEFVAR *QUASIQUOTE-EXPAND*)
(CL:DEFVAR *DOT-EXPAND*)
(CL:DEFVAR *BUILTIN-ATOMS* (CL:MAKE-HASH-TABLE :TEST (CL:FUNCTION CL:EQ)))
NIL
(CL:PROGN (CL:DEFUN BUILTIN? (X) (CL:LABELS ((~G747 (~G720) (CL:COND (~G720 ~G720) (T (CL:MEMBER X +CL-FUNCTION-IMPORTS+))))) (~G747 (CL:GETHASH X *BUILTIN-ATOMS*)))) (CL:SETF (CL:GETHASH 'BUILTIN? *BUILTIN-ATOMS*) (CL:FUNCTION BUILTIN?)))
(CL:PROGN (CL:DEFUN MAKE-ARRAY (CL:&OPTIONAL (DIMENSIONS 1)) (CL:MAKE-ARRAY DIMENSIONS)) (CL:SETF (CL:GETHASH 'MAKE-ARRAY *BUILTIN-ATOMS*) (CL:FUNCTION MAKE-ARRAY)))
(CL:PROGN (CL:DEFUN =-AREF (V X I) (CL:SETF (CL:AREF X I) V)) (CL:SETF (CL:GETHASH '=-AREF *BUILTIN-ATOMS*) (CL:FUNCTION =-AREF)))
(CL:DEFVAR *ENVIRONMENT-PATH*)
(CL:DEFVAR *ENVIRONMENT-FILENAMES*)
(CL:PROGN (CL:DEFUN ENV-LOAD (PATHNAME CL:&REST TARGETS) (PRINT-DEFINITION `(ENV-LOAD ,PATHNAME ,@TARGETS)) (CL:SETQ *ENVIRONMENT-FILENAMES* (CL:CONS (CL:CONS PATHNAME TARGETS) *ENVIRONMENT-FILENAMES*)) (CL:COND ((CL:LABELS ((~G748 (~G721) (CL:COND (~G721 ~G721) (T (MEMBER :CL TARGETS))))) (~G748 (NOT TARGETS))) (CL:PROGN (LOAD (+ *ENVIRONMENT-PATH* "/environment/" PATHNAME)))))) (CL:SETF (CL:GETHASH 'ENV-LOAD *BUILTIN-ATOMS*) (CL:FUNCTION ENV-LOAD)))
(CL:DEFUN MAKE-SCOPING-FUNCTION (X) (CL:LABELS ((~G749 (G) `(CL:LABELS ((,G ,@(MAKE-LAMBDAS (CADR (CL:CAR X))))) (,G ,@(MAKE-LAMBDAS (CL:CDR X)))))) (~G749 (GENSYM))))
(CL:DEFUN MAKE-ANONYMOUS-FUNCTION (X) (CL:LABELS ((~G750 (!) (CL:COND ((EQUAL ! '(NIL)) `(CL:LAMBDA NIL NIL)) (T `(CL:LAMBDA ,@!))))) (~G750 (MAKE-LAMBDAS (CL:CAR (CL:CDR X))))))
(CL:DEFUN LAMBDA-EXPR-W/O-LAMBDA-KEYWORD? (X) (CL:COND ((CONS? X) (CL:COND ((EQ 'CL:FUNCTION (CL:CAR X)) (CL:COND ((NOT (ATOM (CL:CAR (CL:CDR X)))) (NOT (EQ 'CL:LAMBDA (CL:CAR (CL:CAR (CL:CDR X))))))))))))
(CL:DEFUN MAKE-LAMBDAS (X) (CL:COND ((EQ 'CL:&BODY X) 'CL:&REST) ((ATOM X) X) ((EQ 'CL:QUOTE (CL:CAR X)) X) ((LAMBDA-EXPR-W/O-LAMBDA-KEYWORD? (CL:CAR X)) (MAKE-SCOPING-FUNCTION X)) ((LAMBDA-EXPR-W/O-LAMBDA-KEYWORD? X) (MAKE-ANONYMOUS-FUNCTION X)) (T (DYNAMIC-MAP (CL:FUNCTION MAKE-LAMBDAS) X))))
(CL:PROGN (CL:DEFUN %ERROR (MSG) (CL:BREAK (NEUTRALIZE-FORMAT-STRING MSG))) (CL:SETF (CL:GETHASH '%ERROR *BUILTIN-ATOMS*) (CL:FUNCTION %ERROR)))
(CL:DEFUN TRE2CL (X) (MAKE-LAMBDAS (QUOTE-EXPAND (SPECIALEXPAND (QUOTE-EXPAND X)))))
(CL:DEFVAR *EVAL*)
(CL:PROGN (CL:DEFUN EVAL (X) (CL:EVAL (CL:PROGN (CL:SETQ *EVAL* (TRE2CL X))))) (CL:SETF (CL:GETHASH 'EVAL *BUILTIN-ATOMS*) (CL:FUNCTION EVAL)))
(CL:PROGN (CL:DEFUN %PRINC (X STREAM) (CL:LABELS ((~G751 (!) (CL:COND ((CHARACTER? X) (CL:WRITE-BYTE (CL:CHAR-CODE X) !)) ((STRING? X) (CL:LABELS ((~G752 (~G723) (CL:COND (~G723 (CL:PROGN (CL:LABELS ((~G753 (~G725) (CL:BLOCK NIL (CL:LABELS ((~G754 (~G724) (CL:TAGBODY ~G726 (CL:COND ((== ~G724 ~G725) (CL:RETURN-FROM NIL (CL:PROGN)))) (CL:LABELS ((~G755 (I) (%PRINC I !))) (~G755 (ELT ~G723 ~G724))) (CL:SETQ ~G724 (NUMBER+ 1 ~G724)) (CL:GO ~G726)))) (~G754 0))))) (~G753 (INTEGER (CL:LENGTH ~G723))))))))) (~G752 X))) (T (CL:PRINC X !))))) (~G751 (CL:LABELS ((~G756 (~G722) (CL:COND (~G722 ~G722) (T CL:*STANDARD-OUTPUT*)))) (~G756 STREAM))))) (CL:SETF (CL:GETHASH '%PRINC *BUILTIN-ATOMS*) (CL:FUNCTION %PRINC)))
(CL:PROGN (CL:DEFUN %FORCE-OUTPUT (STREAM) (CL:FORCE-OUTPUT STREAM)) (CL:SETF (CL:GETHASH '%FORCE-OUTPUT *BUILTIN-ATOMS*) (CL:FUNCTION %FORCE-OUTPUT)))
(CL:PROGN (CL:DEFUN %FOPEN (PATHNAME MODE) (CL:OPEN PATHNAME :DIRECTION (CL:COND ((CL:FIND #\w MODE :TEST (CL:FUNCTION CL:EQUAL)) :OUTPUT) (T :INPUT)) :IF-EXISTS :SUPERSEDE :ELEMENT-TYPE '(CL:UNSIGNED-BYTE 8))) (CL:SETF (CL:GETHASH '%FOPEN *BUILTIN-ATOMS*) (CL:FUNCTION %FOPEN)))
(CL:PROGN (CL:DEFUN %FCLOSE (STREAM) (CL:CLOSE STREAM)) (CL:SETF (CL:GETHASH '%FCLOSE *BUILTIN-ATOMS*) (CL:FUNCTION %FCLOSE)))
(CL:PROGN (CL:DEFUN %READ-CHAR (STR) (CL:LABELS ((~G757 (!) (CL:COND ((NOT (EQ ! 'EOF)) (CL:PROGN (CL:CODE-CHAR !)))))) (~G757 (CL:READ-BYTE (CL:LABELS ((~G758 (~G727) (CL:COND (~G727 ~G727) (T CL:*STANDARD-INPUT*)))) (~G758 STR)) NIL 'EOF)))) (CL:SETF (CL:GETHASH '%READ-CHAR *BUILTIN-ATOMS*) (CL:FUNCTION %READ-CHAR)))
(CL:PROGN (CL:DEFUN FILE-EXISTS? (PATHNAME) (CL:COND ((CL:PROBE-FILE PATHNAME) T))) (CL:SETF (CL:GETHASH 'FILE-EXISTS? *BUILTIN-ATOMS*) (CL:FUNCTION FILE-EXISTS?)))
(CL:DEFVAR *FUNCTIONS*)
(CL:PROGN (CL:DEFUN FUNCTION-SOURCE (X) (CL:CDR (CL:ASSOC X *FUNCTIONS* :TEST (CL:FUNCTION CL:EQ)))) (CL:SETF (CL:GETHASH 'FUNCTION-SOURCE *BUILTIN-ATOMS*) (CL:FUNCTION FUNCTION-SOURCE)))
(CL:PROGN (CL:DEFUN =-FUNCTION-SOURCE (V X) (ERROR "Can't set function source in the Common Lisp core.")) (CL:SETF (CL:GETHASH '=-FUNCTION-SOURCE *BUILTIN-ATOMS*) (CL:FUNCTION =-FUNCTION-SOURCE)))
(CL:PROGN (CL:DEFUN FUNCTION-BYTECODE (X) X NIL) (CL:SETF (CL:GETHASH 'FUNCTION-BYTECODE *BUILTIN-ATOMS*) (CL:FUNCTION FUNCTION-BYTECODE)))
(CL:PROGN (CL:DEFUN MAKE-HASH-TABLE (CL:&KEY (TEST (CL:FUNCTION EQL))) (CL:MAKE-HASH-TABLE :TEST (CL:COND ((CL:EQ TEST (CL:FUNCTION EQ)) (CL:FUNCTION CL:EQ)) ((CL:LABELS ((~G759 (~G728) (CL:COND (~G728 ~G728) (T (CL:EQ TEST (CL:FUNCTION ==)))))) (~G759 (CL:EQ TEST (CL:FUNCTION EQL)))) (CL:FUNCTION CL:EQL)) ((CL:EQ TEST (CL:FUNCTION STRING==)) (CL:FUNCTION CL:EQUAL)) (T TEST)))) (CL:SETF (CL:GETHASH 'MAKE-HASH-TABLE *BUILTIN-ATOMS*) (CL:FUNCTION MAKE-HASH-TABLE)))
(CL:PROGN (CL:DEFUN HASH-TABLE? (X) (CL:HASH-TABLE-P X)) (CL:SETF (CL:GETHASH 'HASH-TABLE? *BUILTIN-ATOMS*) (CL:FUNCTION HASH-TABLE?)))
(CL:PROGN (CL:DEFUN HREF (X I) (CL:GETHASH I X)) (CL:SETF (CL:GETHASH 'HREF *BUILTIN-ATOMS*) (CL:FUNCTION HREF)))
(CL:PROGN (CL:DEFUN =-HREF (V X I) (CL:SETF (CL:GETHASH I X) V)) (CL:SETF (CL:GETHASH '=-HREF *BUILTIN-ATOMS*) (CL:FUNCTION =-HREF)))
(CL:PROGN (CL:DEFUN HREMOVE (X K) (CL:REMHASH K X)) (CL:SETF (CL:GETHASH 'HREMOVE *BUILTIN-ATOMS*) (CL:FUNCTION HREMOVE)))
(CL:PROGN (CL:DEFUN COPY-HASH-TABLE (X) (CL:LABELS ((~G760 (!) (CL:MAPHASH (CL:LAMBDA (K V) (CL:SETF (CL:GETHASH K !) V)) X) !)) (~G760 (CL:MAKE-HASH-TABLE :TEST (CL:HASH-TABLE-TEST X) :SIZE (CL:HASH-TABLE-SIZE X))))) (CL:SETF (CL:GETHASH 'COPY-HASH-TABLE *BUILTIN-ATOMS*) (CL:FUNCTION COPY-HASH-TABLE)))
(CL:PROGN (CL:DEFUN HASHKEYS (X) (CL:LABELS ((~G761 (!) (CL:MAPHASH (CL:LAMBDA (K V) V (CL:PUSH K !)) X) !)) (~G761 NIL))) (CL:SETF (CL:GETHASH 'HASHKEYS *BUILTIN-ATOMS*) (CL:FUNCTION HASHKEYS)))
(CL:PROGN (CL:DEFUN SYS-IMAGE-CREATE (PATHNAME FUN) (SB-EXT:SAVE-LISP-AND-DIE PATHNAME :TOPLEVEL (CL:LAMBDA NIL (CL:FUNCALL FUN)))) (CL:SETF (CL:GETHASH 'SYS-IMAGE-CREATE *BUILTIN-ATOMS*) (CL:FUNCTION SYS-IMAGE-CREATE)))
(CL:PROGN (CL:DEFUN %START-CORE NIL (CL:SETQ *LAUNCHFILE* (CADR (CL:LABELS ((~G762 (~G729) (CL:COND (~G729 ~G729) (T NIL)))) (~G762 SB-EXT:*POSIX-ARGV*))))) (CL:SETF (CL:GETHASH '%START-CORE *BUILTIN-ATOMS*) (CL:FUNCTION %START-CORE)))
(CL:PROGN (CL:DEFUN FILTER (FUN X) (CL:MAPCAR FUN X)) (CL:SETF (CL:GETHASH 'FILTER *BUILTIN-ATOMS*) (CL:FUNCTION FILTER)))
(CL:PROGN (CL:DEFUN APPEND (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:NCONC) (CL:MAPCAR (CL:FUNCTION CL:COPY-LIST) X))) (CL:SETF (CL:GETHASH 'APPEND *BUILTIN-ATOMS*) (CL:FUNCTION APPEND)))
(CL:DEFUN %LOAD-R (S) (CL:COND ((PEEK-CHAR S) (CL:PROGN (CL:CONS (READ S) (%LOAD-R S))))))
(CL:DEFUN %EXPAND (X) (CL:LABELS ((~G763 (!) (CL:COND ((EQUAL X !) X) (T (%EXPAND !))))) (~G763 (QUASIQUOTE-EXPAND (MACROEXPAND (DOT-EXPAND X))))))
(CL:PROGN (CL:DEFUN LOAD (PATHNAME) (PRINT-DEFINITION `(LOAD ,PATHNAME)) (CL:BLOCK NIL (CL:LABELS ((~G764 (~G733) (CL:LABELS ((~G765 (I) (CL:TAGBODY ~G731 (CL:COND ((NOT ~G733) (CL:GO ~G732))) (CL:SETQ I (CL:CAR ~G733)) (EVAL (%EXPAND I)) (CL:SETQ ~G733 (CL:CDR ~G733)) (CL:GO ~G731) ~G732 (CL:RETURN-FROM NIL (CL:PROGN))))) (~G765 NIL)))) (~G764 (CL:LABELS ((~G766 (S) (CL:LABELS ((~G767 (~G730) (CLOSE S) ~G730)) (~G767 (CL:BLOCK NIL (%LOAD-R S)))))) (~G766 (OPEN PATHNAME :DIRECTION 'INPUT))))))) (CL:SETF (CL:GETHASH 'LOAD *BUILTIN-ATOMS*) (CL:FUNCTION LOAD)))
(CL:DEFUN ENV-MACROS NIL (SYMBOL-VALUE (TRE-SYMBOL '*MACROS*)))
(CL:PROGN (CL:DEFUN MACRO? (X) (CL:RASSOC X (ENV-MACROS) :TEST (CL:FUNCTION EQ))) (CL:SETF (CL:GETHASH 'MACRO? *BUILTIN-ATOMS*) (CL:FUNCTION MACRO?)))
(CL:PROGN (CL:DEFUN %%MACROCALL (X) (CL:LABELS ((~G768 (!) (CL:APPLY (CL:CDR !) (ARGUMENT-EXPAND-VALUES (CL:CAR X) (CL:CAR (CL:CAR !)) (CL:CDR X))))) (~G768 (CL:CDR (ASSOC (CL:CAR X) (ENV-MACROS) :TEST (CL:FUNCTION EQ)))))) (CL:SETF (CL:GETHASH '%%MACROCALL *BUILTIN-ATOMS*) (CL:FUNCTION %%MACROCALL)))
(CL:PROGN (CL:DEFUN %%MACRO? (X) (CL:COND ((CONS? X) (CL:COND ((SYMBOL? (CL:CAR X)) (CL:LABELS ((~G769 (!) (CL:COND ((CONS? !) (ASSOC (CL:CAR X) ! :TEST (CL:FUNCTION EQ)))))) (~G769 (ENV-MACROS)))))))) (CL:SETF (CL:GETHASH '%%MACRO? *BUILTIN-ATOMS*) (CL:FUNCTION %%MACRO?)))
(CL:DEFVAR *MACROEXPAND*)
(CL:PROGN (CL:DEFUN MACROEXPAND-1 (X) (CL:LABELS ((~G770 (!) (CL:COND (! (CL:APPLY ! (LIST X))) (T X)))) (~G770 (SYMBOL-VALUE (TRE-SYMBOL '*MACROEXPAND*))))) (CL:SETF (CL:GETHASH 'MACROEXPAND-1 *BUILTIN-ATOMS*) (CL:FUNCTION MACROEXPAND-1)))
(CL:PROGN (CL:DEFUN MACROEXPAND (X) (CL:LABELS ((F (OLD X) (CL:COND ((EQUAL OLD X) X) (T (MACROEXPAND X))))) (F X (MACROEXPAND-1 X)))) (CL:SETF (CL:GETHASH 'MACROEXPAND *BUILTIN-ATOMS*) (CL:FUNCTION MACROEXPAND)))
(CL:PROGN (CL:DEFUN QUIT (CL:&OPTIONAL EXIT-CODE) (SB-EXT:QUIT :UNIX-STATUS EXIT-CODE)) (CL:SETF (CL:GETHASH 'QUIT *BUILTIN-ATOMS*) (CL:FUNCTION QUIT)))
(CL:PROGN (CL:DEFUN NANOTIME NIL 0) (CL:SETF (CL:GETHASH 'NANOTIME *BUILTIN-ATOMS*) (CL:FUNCTION NANOTIME)))
(CL:PROGN (CL:DEFUN CODE-CHAR (X) (CL:COND ((CL:CHARACTERP X) X) (T (CL:CODE-CHAR X)))) (CL:SETF (CL:GETHASH 'CODE-CHAR *BUILTIN-ATOMS*) (CL:FUNCTION CODE-CHAR)))
(CL:DEFUN BITS-INTEGER (BITS) (CL:REDUCE (CL:LAMBDA (A B) (+ (* A 2) B)) BITS))
(CL:DEFUN NUMBER (X) (CL:COND ((CHARACTER? X) (CL:CHAR-CODE X)) (T X)))
(CL:DEFUN INTEGER-BITS (X) (CL:LABELS ((~G771 (!) (CL:LABELS ((~G772 (L) (CL:LABELS ((~G773 (~G734) (CL:BLOCK NIL (CL:LABELS ((~G774 (I) (CL:TAGBODY ~G735 (CL:COND ((== I ~G734) (CL:RETURN-FROM NIL (CL:PROGN)))) (CL:MULTIPLE-VALUE-BIND (I R) (CL:TRUNCATE ! 2) (CL:PROGN (CL:SETQ ! I)) (CL:PUSH R L)) (CL:SETQ I (NUMBER+ 1 I)) (CL:GO ~G735)))) (~G774 0))))) (~G773 (INTEGER 32))) (CL:COERCE L 'CL:BIT-VECTOR))) (~G772 NIL)))) (~G771 (NUMBER X))))
(CL:PROGN (CL:DEFUN BIT-AND (A B) (BITS-INTEGER (CL:BIT-AND (INTEGER-BITS A) (INTEGER-BITS B)))) (CL:SETF (CL:GETHASH 'BIT-AND *BUILTIN-ATOMS*) (CL:FUNCTION BIT-AND)))
(CL:PROGN (CL:DEFUN BIT-OR (A B) (BITS-INTEGER (CL:BIT-IOR (INTEGER-BITS A) (INTEGER-BITS B)))) (CL:SETF (CL:GETHASH 'BIT-OR *BUILTIN-ATOMS*) (CL:FUNCTION BIT-OR)))
(CL:PROGN (CL:DEFUN BIT-XOR (A B) (BITS-INTEGER (CL:BIT-XOR (INTEGER-BITS A) (INTEGER-BITS B)))) (CL:SETF (CL:GETHASH 'BIT-XOR *BUILTIN-ATOMS*) (CL:FUNCTION BIT-XOR)))
(CL:PROGN (CL:DEFUN >> (X BITS) (CL:LABELS ((~G775 (~G736) (CL:BLOCK NIL (CL:LABELS ((~G776 (N) (CL:TAGBODY ~G737 (CL:COND ((== N ~G736) (CL:RETURN-FROM NIL (CL:PROGN X)))) (CL:MULTIPLE-VALUE-BIND (I R) (CL:TRUNCATE X 2) (CL:PROGN (CL:SETQ X I))) (CL:SETQ N (NUMBER+ 1 N)) (CL:GO ~G737)))) (~G776 0))))) (~G775 (INTEGER BITS)))) (CL:SETF (CL:GETHASH '>> *BUILTIN-ATOMS*) (CL:FUNCTION >>)))
(CL:PROGN (CL:DEFUN << (X BITS) (CL:LABELS ((~G777 (~G738) (CL:BLOCK NIL (CL:LABELS ((~G778 (N) (CL:TAGBODY ~G739 (CL:COND ((== N ~G738) (CL:RETURN-FROM NIL (CL:PROGN X)))) (CL:PROGN (CL:SETQ X (* X 2))) (CL:SETQ N (NUMBER+ 1 N)) (CL:GO ~G739)))) (~G778 0))))) (~G777 (INTEGER BITS)))) (CL:SETF (CL:GETHASH '<< *BUILTIN-ATOMS*) (CL:FUNCTION <<)))
(CL:PROGN (CL:DEFUN NOT (CL:&REST X) (CL:EVERY (CL:FUNCTION CL:NOT) X)) (CL:SETF (CL:GETHASH 'NOT *BUILTIN-ATOMS*) (CL:FUNCTION NOT)))
(CL:PROGN (CL:DEFUN EQ (A B) (CL:EQ A B)) (CL:SETF (CL:GETHASH 'EQ *BUILTIN-ATOMS*) (CL:FUNCTION EQ)))
(CL:PROGN (CL:DEFUN EQL (A B) (CL:LABELS ((~G779 (~G740) (CL:COND (~G740 ~G740) (T (CL:COND ((CL:COND ((CL:CHARACTERP A) (CL:CHARACTERP B))) (CL:= (CL:CHAR-CODE A) (CL:CHAR-CODE B))) ((CL:COND ((NOT (CL:CHARACTERP A) (CL:CHARACTERP B)) (CL:COND ((NUMBER? A) (NUMBER? B))))) (CL:= A B)) ((CL:COND ((CL:CONSP A) (CL:CONSP B))) (CL:COND ((EQL (CL:CAR A) (CL:CAR B)) (EQL (CL:CDR A) (CL:CDR B))))) ((CL:COND ((CL:STRINGP A) (CL:STRINGP B))) (CL:STRING= A B))))))) (~G779 (CL:EQ A B)))) (CL:SETF (CL:GETHASH 'EQL *BUILTIN-ATOMS*) (CL:FUNCTION EQL)))
(CL:PROGN (CL:DEFUN STRING-CONCAT (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:CONCATENATE) 'CL:STRING X)) (CL:SETF (CL:GETHASH 'STRING-CONCAT *BUILTIN-ATOMS*) (CL:FUNCTION STRING-CONCAT)))
(CL:PROGN (CL:DEFUN STRING (X) (CL:COND ((CL:NUMBERP X) (CL:FORMAT NIL "~A" X)) (T (CL:STRING X)))) (CL:SETF (CL:GETHASH 'STRING *BUILTIN-ATOMS*) (CL:FUNCTION STRING)))
(CL:PROGN (CL:DEFUN STRING== (A B) (CL:STRING= A B)) (CL:SETF (CL:GETHASH 'STRING== *BUILTIN-ATOMS*) (CL:FUNCTION STRING==)))
(CL:PROGN (CL:DEFUN LIST-STRING (X) (CL:LABELS ((~G780 (~G741) (CL:COND (~G741 ~G741) (T (ERROR "List expected instead of ~A." X))))) (~G780 (LIST? X))) (CL:CONCATENATE 'CL:STRING X)) (CL:SETF (CL:GETHASH 'LIST-STRING *BUILTIN-ATOMS*) (CL:FUNCTION LIST-STRING)))
(CL:PROGN (CL:DEFUN %ELT-STRING (OBJ IDX) (CL:ELT OBJ IDX)) (CL:SETF (CL:GETHASH '%ELT-STRING *BUILTIN-ATOMS*) (CL:FUNCTION %ELT-STRING)))
(CL:DEFVAR *SPECIAL-FORMS*)
(CL:DEFUN SPECIAL-%%MACROCALL (X) (CL:LABELS ((~G781 (!) (CL:APPLY (CL:CDR !) (ARGUMENT-EXPAND-VALUES (CL:CAR X) (CL:CAR !) (CL:CDR X))))) (~G781 (CL:CDR (ASSOC (CL:CAR X) *SPECIAL-FORMS* :TEST (CL:FUNCTION EQ))))))
(CL:DEFUN SPECIAL-%%MACRO? (X) (CL:COND ((CONS? X) (CL:COND ((SYMBOL? (CL:CAR X)) (ASSOC (CL:CAR X) *SPECIAL-FORMS* :TEST (CL:FUNCTION EQ)))))))
(CL:DEFUN SPECIALEXPAND (X) (CL:LABELS ((~G782 (~G742) (CL:PROGN (CL:SETQ *MACRO?* (CL:FUNCTION SPECIAL-%%MACRO?))) (CL:LABELS ((~G783 (~G743) (CL:PROGN (CL:SETQ *MACRO?* ~G742)) ~G743)) (~G783 (CL:PROGN (CL:LABELS ((~G784 (~G744) (CL:PROGN (CL:SETQ *MACROCALL* (CL:FUNCTION SPECIAL-%%MACROCALL))) (CL:LABELS ((~G785 (~G745) (CL:PROGN (CL:SETQ *MACROCALL* ~G744)) ~G745)) (~G785 (CL:PROGN (CL:LABELS ((F (OLD X) (CL:COND ((EQUAL OLD X) X) (T (F X (%MACROEXPAND X)))))) (F X (%MACROEXPAND X)))))))) (~G784 *MACROCALL*))))))) (~G782 *MACRO?*)))
(CL:DEFUN MAKE-%FN-QUIET (NAME ARGS BODY) `(CL:PROGN (CL:PUSH (CL:CONS ',NAME ',(CL:CONS ARGS BODY)) *FUNCTIONS*) (CL:DEFUN ,NAME ,ARGS ,@BODY)))
NIL
NIL
NIL
NIL
NIL
(CL:DEFVAR *KEYWORD-PACKAGE*)
(CL:DEFVAR *PACKAGE*)
(CL:PROGN (CL:DEFUN MAKE-SYMBOL (X CL:&OPTIONAL (PACKAGE NIL)) (CL:INTERN X (CL:COND ((CL:NOT PACKAGE) (CL:LABELS ((~G786 (~G746) (CL:COND (~G746 ~G746) (T "TRE")))) (~G786 (CL:LABELS ((~G787 (!) (CL:COND (! (SYMBOL-NAME !))))) (~G787 *PACKAGE*))))) ((CL:PACKAGEP PACKAGE) (CL:PACKAGE-NAME PACKAGE)) ((CL:SYMBOLP PACKAGE) (CL:SYMBOL-NAME PACKAGE)) (T PACKAGE)))) (CL:SETF (CL:GETHASH 'MAKE-SYMBOL *BUILTIN-ATOMS*) (CL:FUNCTION MAKE-SYMBOL)))
(CL:PROGN (CL:DEFUN SYMBOL-NAME (X) (CL:COND ((CL:PACKAGEP X) (CL:PACKAGE-NAME X)) (T (CL:SYMBOL-NAME X)))) (CL:SETF (CL:GETHASH 'SYMBOL-NAME *BUILTIN-ATOMS*) (CL:FUNCTION SYMBOL-NAME)))
(CL:PROGN (CL:DEFUN SYMBOL-VALUE (X) (CL:COND ((CL:BOUNDP X) (CL:SYMBOL-VALUE X)) (T X))) (CL:SETF (CL:GETHASH 'SYMBOL-VALUE *BUILTIN-ATOMS*) (CL:FUNCTION SYMBOL-VALUE)))
(CL:PROGN (CL:DEFUN SYMBOL-FUNCTION (X) (CL:COND ((CL:FBOUNDP X) (CL:SYMBOL-FUNCTION X)))) (CL:SETF (CL:GETHASH 'SYMBOL-FUNCTION *BUILTIN-ATOMS*) (CL:FUNCTION SYMBOL-FUNCTION)))
(CL:PROGN (CL:DEFUN SYMBOL-PACKAGE (X) (CL:SYMBOL-PACKAGE X)) (CL:SETF (CL:GETHASH 'SYMBOL-PACKAGE *BUILTIN-ATOMS*) (CL:FUNCTION SYMBOL-PACKAGE)))
(CL:PROGN (CL:DEFUN =-SYMBOL-FUNCTION (V X) (CL:SETF (CL:SYMBOL-FUNCTION X) V)) (CL:SETF (CL:GETHASH '=-SYMBOL-FUNCTION *BUILTIN-ATOMS*) (CL:FUNCTION =-SYMBOL-FUNCTION)))
(CL:PROGN (CL:DEFUN FIND-SYMBOL (X CL:&OPTIONAL (PKG *PACKAGE*)) (CL:FIND-SYMBOL (SYMBOL-NAME X) (CL:FIND-PACKAGE (SYMBOL-NAME *PACKAGE*)))) (CL:SETF (CL:GETHASH 'FIND-SYMBOL *BUILTIN-ATOMS*) (CL:FUNCTION FIND-SYMBOL)))
(CL:DEFUN TRE-SYMBOL (X) (CL:INTERN (SYMBOL-NAME X) "TRE"))
(CL:PROGN (CL:DEFUN SH (PROGRAM CL:&REST ARGUMENTS) (SB-EXT:RUN-PROGRAM PROGRAM ARGUMENTS :PTY CL:*STANDARD-OUTPUT*)) (CL:SETF (CL:GETHASH 'SH *BUILTIN-ATOMS*) (CL:FUNCTION SH)))
(CL:PROGN (CL:DEFUN UNIX-SH-CP (FROM TO CL:&KEY (VERBOSE? NIL) (RECURSIVELY? NIL)) (CL:APPLY (CL:FUNCTION SH) "/bin/cp" `(,@(CL:COND (VERBOSE? '("-v"))) ,@(CL:COND (RECURSIVELY? '("-r"))) ,FROM ,TO))) (CL:SETF (CL:GETHASH 'UNIX-SH-CP *BUILTIN-ATOMS*) (CL:FUNCTION UNIX-SH-CP)))
(CL:PROGN (CL:DEFUN UNIX-SH-MKDIR (PATHNAME CL:&KEY (PARENTS NIL)) (CL:APPLY (CL:FUNCTION SH) "/bin/mkdir" `(,@(CL:COND (PARENTS '("-p"))) ,PATHNAME))) (CL:SETF (CL:GETHASH 'UNIX-SH-MKDIR *BUILTIN-ATOMS*) (CL:FUNCTION UNIX-SH-MKDIR)))
(CL:PROGN (CL:DEFUN UNIX-SH-RM (X CL:&KEY (VERBOSE? NIL) (RECURSIVELY? NIL) (FORCE? NIL)) (CL:APPLY (CL:FUNCTION SH) "/bin/rm" `(,@(CL:COND (VERBOSE? '("-v"))) ,@(CL:COND (RECURSIVELY? '("-r"))) ,@(CL:COND (FORCE? '("-f"))) ,X))) (CL:SETF (CL:GETHASH 'UNIX-SH-RM *BUILTIN-ATOMS*) (CL:FUNCTION UNIX-SH-RM)))
(CL:PROGN (CL:DEFUN NANOTIME NIL 0) (CL:SETF (CL:GETHASH 'NANOTIME *BUILTIN-ATOMS*) (CL:FUNCTION NANOTIME)))
(CL:PROGN (CL:DEFUN CONS? (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:CONSP) X)) (CL:SETF (CL:GETHASH 'CONS? *BUILTIN-ATOMS*) (CL:FUNCTION CONS?)))
(CL:PROGN (CL:DEFUN SYMBOL? (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:SYMBOLP) X)) (CL:SETF (CL:GETHASH 'SYMBOL? *BUILTIN-ATOMS*) (CL:FUNCTION SYMBOL?)))
(CL:PROGN (CL:DEFUN FUNCTION? (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:FUNCTIONP) X)) (CL:SETF (CL:GETHASH 'FUNCTION? *BUILTIN-ATOMS*) (CL:FUNCTION FUNCTION?)))
(CL:PROGN (CL:DEFUN STRING? (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:STRINGP) X)) (CL:SETF (CL:GETHASH 'STRING? *BUILTIN-ATOMS*) (CL:FUNCTION STRING?)))
(CL:PROGN (CL:DEFUN ARRAY? (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:ARRAYP) X)) (CL:SETF (CL:GETHASH 'ARRAY? *BUILTIN-ATOMS*) (CL:FUNCTION ARRAY?)))
(CL:PROGN (CL:DEFUN NUMBER? (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:NUMBERP) X)) (CL:SETF (CL:GETHASH 'NUMBER? *BUILTIN-ATOMS*) (CL:FUNCTION NUMBER?)))
(CL:PROGN (CL:DEFUN CHARACTER? (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:CHARACTERP) X)) (CL:SETF (CL:GETHASH 'CHARACTER? *BUILTIN-ATOMS*) (CL:FUNCTION CHARACTER?)))
(CL:PROGN (CL:DEFUN INTEGER (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:FLOOR) X)) (CL:SETF (CL:GETHASH 'INTEGER *BUILTIN-ATOMS*) (CL:FUNCTION INTEGER)))
(CL:PROGN (CL:DEFUN %CODE-CHAR (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:CODE-CHAR) X)) (CL:SETF (CL:GETHASH '%CODE-CHAR *BUILTIN-ATOMS*) (CL:FUNCTION %CODE-CHAR)))
(CL:PROGN (CL:DEFUN - (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:-) X)) (CL:SETF (CL:GETHASH '- *BUILTIN-ATOMS*) (CL:FUNCTION -)))
(CL:PROGN (CL:DEFUN * (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:*) X)) (CL:SETF (CL:GETHASH '* *BUILTIN-ATOMS*) (CL:FUNCTION *)))
(CL:PROGN (CL:DEFUN / (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:/) X)) (CL:SETF (CL:GETHASH '/ *BUILTIN-ATOMS*) (CL:FUNCTION /)))
(CL:PROGN (CL:DEFUN == (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:=) X)) (CL:SETF (CL:GETHASH '== *BUILTIN-ATOMS*) (CL:FUNCTION ==)))
(CL:PROGN (CL:DEFUN < (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:<) X)) (CL:SETF (CL:GETHASH '< *BUILTIN-ATOMS*) (CL:FUNCTION <)))
(CL:PROGN (CL:DEFUN > (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:>) X)) (CL:SETF (CL:GETHASH '> *BUILTIN-ATOMS*) (CL:FUNCTION >)))
(CL:PROGN (CL:DEFUN <= (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:<=) X)) (CL:SETF (CL:GETHASH '<= *BUILTIN-ATOMS*) (CL:FUNCTION <=)))
(CL:PROGN (CL:DEFUN >= (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:>=) X)) (CL:SETF (CL:GETHASH '>= *BUILTIN-ATOMS*) (CL:FUNCTION >=)))
(CL:PROGN (CL:DEFUN %* (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:*) X)) (CL:SETF (CL:GETHASH '%* *BUILTIN-ATOMS*) (CL:FUNCTION %*)))
(CL:PROGN (CL:DEFUN %/ (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:/) X)) (CL:SETF (CL:GETHASH '%/ *BUILTIN-ATOMS*) (CL:FUNCTION %/)))
(CL:PROGN (CL:DEFUN NUMBER== (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:=) X)) (CL:SETF (CL:GETHASH 'NUMBER== *BUILTIN-ATOMS*) (CL:FUNCTION NUMBER==)))
(CL:PROGN (CL:DEFUN NUMBER+ (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:+) X)) (CL:SETF (CL:GETHASH 'NUMBER+ *BUILTIN-ATOMS*) (CL:FUNCTION NUMBER+)))
(CL:PROGN (CL:DEFUN NUMBER- (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:-) X)) (CL:SETF (CL:GETHASH 'NUMBER- *BUILTIN-ATOMS*) (CL:FUNCTION NUMBER-)))
(CL:PROGN (CL:DEFUN NUMBER* (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:*) X)) (CL:SETF (CL:GETHASH 'NUMBER* *BUILTIN-ATOMS*) (CL:FUNCTION NUMBER*)))
(CL:PROGN (CL:DEFUN NUMBER/ (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:/) X)) (CL:SETF (CL:GETHASH 'NUMBER/ *BUILTIN-ATOMS*) (CL:FUNCTION NUMBER/)))
(CL:PROGN (CL:DEFUN NUMBER< (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:<) X)) (CL:SETF (CL:GETHASH 'NUMBER< *BUILTIN-ATOMS*) (CL:FUNCTION NUMBER<)))
(CL:PROGN (CL:DEFUN NUMBER> (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:>) X)) (CL:SETF (CL:GETHASH 'NUMBER> *BUILTIN-ATOMS*) (CL:FUNCTION NUMBER>)))
(CL:PROGN (CL:DEFUN CHARACTER== (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:CHAR=) X)) (CL:SETF (CL:GETHASH 'CHARACTER== *BUILTIN-ATOMS*) (CL:FUNCTION CHARACTER==)))
(CL:PROGN (CL:DEFUN CHARACTER< (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:CHAR<) X)) (CL:SETF (CL:GETHASH 'CHARACTER< *BUILTIN-ATOMS*) (CL:FUNCTION CHARACTER<)))
(CL:PROGN (CL:DEFUN CHARACTER> (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:CHAR>) X)) (CL:SETF (CL:GETHASH 'CHARACTER> *BUILTIN-ATOMS*) (CL:FUNCTION CHARACTER>)))
(CL:PROGN (CL:DEFUN POW (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:EXPT) X)) (CL:SETF (CL:GETHASH 'POW *BUILTIN-ATOMS*) (CL:FUNCTION POW)))
"Section COMPILED-INITS"
"Section imports"
(CL:DEFVAR *DEFINITION-PRINTER*)
(CL:DEFVAR *PRINT-AUTOMATIC-NEWLINE?*)
(CL:DEFVAR *STANDARD-INPUT*)
(CL:DEFVAR *MACROEXPAND-BACKQUOTE*)
(CL:DEFVAR *MACROCALL*)
(CL:DEFVAR *MACRO?*)
(CL:DEFVAR +CL-FUNCTION-IMPORTS+)
(CL:DEFVAR *STANDARD-OUTPUT*)
(CL:DEFVAR *GENSYM-COUNTER*)
(CL:DEFVAR *VALUES-MAGIC*)
(CL:DEFVAR *PRINTER-ABBREVIATIONS*)
(CL:DEFVAR *ALWAYS-PRINT-PACKAGE-NAMES?*)
(CL:DEFVAR *INVISIBLE-PACKAGE-NAMES*)
(CL:DEFVAR *PRINTER-ARGUMENT-DEFINITIONS*)
(CL:DEFUN %GET-PRINTER-ARGUMENT-DEFINITION (X) (CL:BLOCK %GET-PRINTER-ARGUMENT-DEFINITION (CL:BLOCK NIL (HREF *PRINTER-ARGUMENT-DEFINITIONS* X))))
(CL:DEFUN MAKE-KEYWORD (X) (CL:BLOCK MAKE-KEYWORD (CL:BLOCK NIL (CL:COND (X (MAKE-SYMBOL (CL:COND ((SYMBOL? X) (SYMBOL-NAME X)) (T X)) *KEYWORD-PACKAGE*))))))
(CL:DEFUN %PRINT-GET-ARGS (ARGS DEF) (CL:BLOCK %PRINT-GET-ARGS (CL:BLOCK NIL (ARGUMENT-EXPAND 'CL:PRINT DEF ARGS :CONCATENATE-SUBLISTS? NIL :BREAK-ON-ERRORS? NIL))))
(CL:DEFUN %PRINT-GAP (STR) (CL:BLOCK %PRINT-GAP (CL:BLOCK NIL (CL:LABELS ((~G788 (~G187) (CL:COND (~G187 ~G187) (T (PRINC " " STR))))) (~G788 (FRESH-LINE? STR))))))
(CL:DEFUN INVISIBLE-PACKAGE? (X) (CL:BLOCK INVISIBLE-PACKAGE? (CL:BLOCK NIL (CL:LABELS ((~G789 (!) (SOME (CL:LAMBDA (_) (CL:BLOCK NIL (STRING== ! _))) *INVISIBLE-PACKAGE-NAMES*))) (~G789 (CL:PACKAGE-NAME X))))))
(CL:DEFUN ABBREVIATED-PACKAGE-NAME (X) (CL:BLOCK ABBREVIATED-PACKAGE-NAME (CL:BLOCK NIL (CL:COND ((STRING== "COMMON-LISP" X) "CL") (T X)))))
(CL:DEFUN %PRINT-ESCAPED-SYMBOL (X STR) (CL:BLOCK %PRINT-ESCAPED-SYMBOL (CL:BLOCK NIL (PRINC #\| STR) (CL:BLOCK NIL (CL:LABELS ((~G790 (~G207) (CL:LABELS ((~G791 (I) (CL:TAGBODY ~G205 (CL:COND ((NOT ~G207) (CL:GO ~G206))) (CL:SETQ I (CL:CAR ~G207)) (CL:COND ((EQL I #\|) (PRINC "\\|" STR)) (T (PRINC I STR))) (CL:SETQ ~G207 (CL:CDR ~G207)) (CL:GO ~G205) ~G206 (CL:RETURN-FROM NIL (CL:PROGN))))) (~G791 NIL)))) (~G790 (STRING-LIST X)))) (PRINC #\| STR))))
(CL:DEFUN SYMBOL-CHAR-NEEDS-ESCAPING? (X) (CL:BLOCK SYMBOL-CHAR-NEEDS-ESCAPING? (CL:BLOCK NIL (CL:LABELS ((~G792 (~G208) (CL:COND (~G208 ~G208) (T (LOWER-CASE? X))))) (~G792 (EQL #\| X))))))
(CL:DEFUN SOME (PRED CL:&REST SEQS) (CL:BLOCK SOME (CL:BLOCK NIL (FIND-IF PRED (CL:APPLY (CL:FUNCTION APPEND) SEQS)))))
(CL:DEFUN %PRINT-REST (X STR INFO) (CL:BLOCK %PRINT-REST (CL:BLOCK NIL (CL:COND (X (CL:PROGN (CL:COND ((CONS? X) (CL:PROGN (%PRINT-GAP STR) (%LATE-PRINT (CL:CAR X) STR INFO) (%PRINT-REST (CL:CDR X) STR INFO))) (T (CL:PROGN (PRINC " . " STR) (%LATE-PRINT X STR INFO))))))))))
(CL:DEFUN %PRINT-CALL (X ARGDEF STR INFO) (CL:BLOCK %PRINT-CALL (CL:BLOCK NIL (CL:PROGN (%PRINT-INDENTATION STR INFO) (CL:PROGN (=-PRINT-INFO-COLUMNS (CL:CONS (STREAM-LOCATION-COLUMN (STREAM-OUTPUT-LOCATION STR)) (PRINT-INFO-COLUMNS INFO)) INFO)) (PRINC "(" STR) (%LATE-PRINT (CL:CAR X) STR INFO) (CL:LABELS ((~G793 (EXPANDED) (CL:COND ((EQ EXPANDED 'ERROR) (%PRINT-REST (CL:CDR X) STR INFO)) (T (CL:BLOCK NIL (CL:LABELS ((~G794 (~G200) (CL:LABELS ((~G795 (I) (CL:TAGBODY ~G198 (CL:COND ((NOT ~G200) (CL:GO ~G199))) (CL:SETQ I (CL:CAR ~G200)) (%PRINT-GAP STR) (CL:COND ((CL:COND ((%BODY? (CL:CDR I)) (CL:CDR (CL:CDR I)))) (CL:PROGN (CL:COND (*PRINT-AUTOMATIC-NEWLINE?* (FRESH-LINE STR))) (%PRINT-BODY (CL:CDR (CL:CDR I)) STR INFO))) ((%REST? (CL:CDR I)) (%PRINT-REST (CL:CDR (CL:CDR I)) STR INFO)) ((%KEY? (CL:CDR I)) (CL:PROGN (%PRINT-SYMBOL (MAKE-KEYWORD (CL:CAR I)) STR INFO) (PRINC " " STR) (%LATE-PRINT (CL:CDR (CL:CDR I)) STR INFO))) (T (CL:LABELS ((~G796 (~G196) (CL:PROGN (CL:SETQ *PRINT-AUTOMATIC-NEWLINE?* NIL)) (CL:LABELS ((~G797 (~G197) (CL:PROGN (CL:SETQ *PRINT-AUTOMATIC-NEWLINE?* ~G196)) ~G197)) (~G797 (CL:PROGN (%LATE-PRINT (CL:CDR I) STR INFO)))))) (~G796 *PRINT-AUTOMATIC-NEWLINE?*)))) (CL:SETQ ~G200 (CL:CDR ~G200)) (CL:GO ~G198) ~G199 (CL:RETURN-FROM NIL (CL:PROGN))))) (~G795 NIL)))) (~G794 EXPANDED))))))) (~G793 (%PRINT-GET-ARGS (CL:CDR X) ARGDEF))) (PRINC ")" STR) (CL:LABELS ((~G798 (RET) (CL:PROGN (=-PRINT-INFO-COLUMNS (CL:CDR (PRINT-INFO-COLUMNS INFO)) INFO)) RET)) (~G798 (CL:CAR (PRINT-INFO-COLUMNS INFO))))))))
(CL:DEFUN %PRINT-CALL? (X INFO) (CL:BLOCK %PRINT-CALL? (CL:BLOCK NIL (CL:COND ((PRINT-INFO-PRETTY-PRINT? INFO) (CL:COND ((CONS? X) (CL:COND ((CL:CAR X) (CL:COND ((SYMBOL? (CL:CAR X)) (CL:COND ((LIST? (CL:CDR X)) (CL:LABELS ((~G799 (~G201) (CL:COND (~G201 ~G201) (T (CL:COND ((NOT (BUILTIN? (CL:CAR X))) (CL:PROGN (CL:COND ((FUNCTION? (SYMBOL-FUNCTION (CL:CAR X))) (FUNCTION-ARGUMENTS (CL:CAR X))))))))))) (~G799 (%GET-PRINTER-ARGUMENT-DEFINITION (CL:CAR X)))))))))))))))))
(CL:DEFUN %PRINT-LIST (X STR INFO) (CL:BLOCK %PRINT-LIST (CL:BLOCK NIL (CL:LABELS ((~G800 (!) (CL:COND (! (CL:COND ((FUNCTION? !) (FUNCALL ! X STR INFO)) (T (%PRINT-CALL X ! STR INFO)))) (T (CL:PROGN (%PRINT-INDENTATION STR INFO) (CL:PROGN (=-PRINT-INFO-COLUMNS (CL:CONS (STREAM-LOCATION-COLUMN (STREAM-OUTPUT-LOCATION STR)) (PRINT-INFO-COLUMNS INFO)) INFO)) (PRINC "(" STR) (%LATE-PRINT (CL:CAR X) STR INFO) (%PRINT-REST (CL:CDR X) STR INFO) (PRINC ")" STR) (CL:LABELS ((~G801 (RET) (CL:PROGN (=-PRINT-INFO-COLUMNS (CL:CDR (PRINT-INFO-COLUMNS INFO)) INFO)) RET)) (~G801 (CL:CAR (PRINT-INFO-COLUMNS INFO))))))))) (~G800 (%PRINT-CALL? X INFO))))))
(CL:DEFUN %PRINT-ABBREVIATION (ABBREVIATION X STR INFO) (CL:BLOCK %PRINT-ABBREVIATION (CL:BLOCK NIL (CL:PROGN (%PRINT-INDENTATION STR INFO) (PRINC (CL:CAR (CL:CDR ABBREVIATION)) STR) (%LATE-PRINT (CL:CAR (CL:CDR X)) STR INFO)))))
(CL:DEFUN %PRINT-SYMBOL-COMPONENT (X STR) (CL:BLOCK %PRINT-SYMBOL-COMPONENT (CL:BLOCK NIL (CL:COND ((SOME (CL:FUNCTION SYMBOL-CHAR-NEEDS-ESCAPING?) (STRING-LIST X)) (%PRINT-ESCAPED-SYMBOL X STR)) (T (PRINC X STR))))))
(CL:DEFUN %PRINT-SYMBOL-PACKAGE (NAME STR) (CL:BLOCK %PRINT-SYMBOL-PACKAGE (CL:BLOCK NIL (%PRINT-SYMBOL-COMPONENT (ABBREVIATED-PACKAGE-NAME NAME) STR))))
(CL:DEFUN INVISIBLE-PACKAGE-NAME? (X) (CL:BLOCK INVISIBLE-PACKAGE-NAME? (CL:BLOCK NIL (CL:COND ((NOT (CL:LABELS ((~G802 (~G209) (CL:COND (~G209 ~G209) (T (CL:LABELS ((~G803 (~G210) (CL:COND (~G210 ~G210) (T *ALWAYS-PRINT-PACKAGE-NAMES?*)))) (~G803 (EQ T X))))))) (~G802 (NOT X)))) (CL:PROGN (INVISIBLE-PACKAGE? (SYMBOL-PACKAGE X))))))))
(CL:DEFUN FUNCTION-BODY (FUN) (CL:BLOCK FUNCTION-BODY (CL:BLOCK NIL (CL:COND ((FUNCTION-BYTECODE FUN) (CL:AREF (FUNCTION-BYTECODE FUN) 1)) (T (CL:CDR (FUNCTION-SOURCE FUN)))))))
(CL:DEFUN FUNCTION-ARGUMENTS (FUN) (CL:BLOCK FUNCTION-ARGUMENTS (CL:BLOCK NIL (CL:COND ((BUILTIN? FUN) (CL:CONS 'CL:&REST (CL:CONS 'ARGS-TO-BUILTIN NIL))) ((FUNCTION-BYTECODE FUN) (CL:AREF (FUNCTION-BYTECODE FUN) 0)) (T (CL:CAR (FUNCTION-SOURCE FUN)))))))
(CL:DEFUN RANGE? (X BOTTOM TOP) (CL:BLOCK RANGE? (CL:BLOCK NIL (CL:COND ((>= X BOTTOM) (<= X TOP))))))
(CL:DEFUN PRINT-INFO-PRETTY-PRINT? (ARR) (CL:BLOCK PRINT-INFO-PRETTY-PRINT? (CL:BLOCK NIL (CL:AREF ARR 2))))
(CL:DEFUN =-PRINT-INFO-INDENTATION (VAL ARR) (CL:BLOCK =-PRINT-INFO-INDENTATION (CL:BLOCK NIL (CL:PROGN (=-AREF VAL ARR 4)))))
(CL:DEFUN %BODY-INDENTATION (INFO) (CL:BLOCK %BODY-INDENTATION (CL:BLOCK NIL (CL:LABELS ((~G804 (~G190) (CL:COND (~G190 ~G190) (T 1)))) (~G804 (CL:CAR (PRINT-INFO-COLUMNS INFO)))))))
(CL:DEFUN PRINT-INFO-INDENTATION (ARR) (CL:BLOCK PRINT-INFO-INDENTATION (CL:BLOCK NIL (CL:AREF ARR 4))))
(CL:DEFUN %PRINT-OBJECT (X STR INFO) (CL:BLOCK %PRINT-OBJECT (CL:BLOCK NIL)))
(CL:DEFUN %PRINT-FUNCTION (X STR INFO) (CL:BLOCK %PRINT-FUNCTION (CL:BLOCK NIL (PRINC "#'" STR) (%LATE-PRINT (CL:CONS (FUNCTION-ARGUMENTS X) (FUNCTION-BODY X)) STR INFO))))
(CL:DEFUN %PRINT-ARRAY (X STR INFO) (CL:BLOCK %PRINT-ARRAY (CL:BLOCK NIL (PRINC "#" STR) (CL:PROGN (%PRINT-INDENTATION STR INFO) (CL:PROGN (=-PRINT-INFO-COLUMNS (CL:CONS (STREAM-LOCATION-COLUMN (STREAM-OUTPUT-LOCATION STR)) (PRINT-INFO-COLUMNS INFO)) INFO)) (PRINC "(" STR) (CL:LABELS ((~G805 (~G212) (CL:COND (~G212 (CL:PROGN (CL:LABELS ((~G806 (~G214) (CL:BLOCK NIL (CL:LABELS ((~G807 (~G213) (CL:TAGBODY ~G215 (CL:COND ((== ~G213 ~G214) (CL:RETURN-FROM NIL (CL:PROGN)))) (CL:LABELS ((~G808 (I) (CL:LABELS ((~G809 (~G216) (CL:COND (~G216 ~G216) (T (PRINC #\  STR))))) (~G809 (ZERO? I))) (%LATE-PRINT I STR INFO))) (~G808 (CL:AREF ~G212 ~G213))) (CL:SETQ ~G213 (NUMBER+ 1 ~G213)) (CL:GO ~G215)))) (~G807 0))))) (~G806 (INTEGER (CL:LENGTH ~G212))))))))) (~G805 X)) (PRINC ")" STR) (CL:LABELS ((~G810 (RET) (CL:PROGN (=-PRINT-INFO-COLUMNS (CL:CDR (PRINT-INFO-COLUMNS INFO)) INFO)) RET)) (~G810 (CL:CAR (PRINT-INFO-COLUMNS INFO))))))))
(CL:DEFUN %PRINT-STRING (X STR) (CL:BLOCK %PRINT-STRING (CL:BLOCK NIL (PRINC #\" STR) (CL:BLOCK NIL (CL:LABELS ((~G811 (~G204) (CL:LABELS ((~G812 (I) (CL:TAGBODY ~G202 (CL:COND ((NOT ~G204) (CL:GO ~G203))) (CL:SETQ I (CL:CAR ~G204)) (CL:COND ((EQL I #\") (PRINC "\\\"" STR)) ((EQL I #\\) (PRINC "\\\\" STR)) (T (PRINC I STR))) (CL:SETQ ~G204 (CL:CDR ~G204)) (CL:GO ~G202) ~G203 (CL:RETURN-FROM NIL (CL:PROGN))))) (~G812 NIL)))) (~G811 (STRING-LIST X)))) (PRINC #\" STR))))
(CL:DEFUN %PRINT-CHARACTER (X STR) (CL:BLOCK %PRINT-CHARACTER (CL:BLOCK NIL (PRINC "#\\" STR) (PRINC X STR))))
(CL:DEFUN %PRINT-SYMBOL (X STR INFO) (CL:BLOCK %PRINT-SYMBOL (CL:BLOCK NIL (CL:LABELS ((~G813 (!) (CL:COND (! (CL:PROGN (CL:COND ((NOT (INVISIBLE-PACKAGE-NAME? X)) (CL:PROGN (CL:LABELS ((~G814 (~G211) (CL:COND (~G211 ~G211) (T (%PRINT-SYMBOL-PACKAGE (CL:PACKAGE-NAME !) STR))))) (~G814 (KEYWORD? X))) (PRINC #\: STR))))))))) (~G813 (CL:COND (X (CL:COND ((NOT (EQ T X)) (SYMBOL-PACKAGE X))))))) (%PRINT-SYMBOL-COMPONENT (SYMBOL-NAME X) STR))))
(CL:DEFUN %PRINT-CONS (X STR INFO) (CL:BLOCK %PRINT-CONS (CL:BLOCK NIL (CL:LABELS ((~G815 (!) (CL:COND (! (%PRINT-ABBREVIATION ! X STR INFO)) (T (%PRINT-LIST X STR INFO))))) (~G815 (CL:COND ((CONS? (CL:CDR X)) (CL:COND ((NOT (CL:CDR (CL:CDR X))) (ASSOC (CL:CAR X) *PRINTER-ABBREVIATIONS* :TEST (CL:FUNCTION EQ)))))))))))
(CL:DEFUN INTEGER-CHARS-0 (X) (CL:BLOCK INTEGER-CHARS-0 (CL:BLOCK NIL (CL:LABELS ((~G816 (!) (CL:CONS (NUMBER-DIGIT !) (CL:COND ((<= 10 X) (INTEGER-CHARS-0 (/ (- X !) 10))))))) (~G816 (INTEGER (CL:MOD X 10)))))))
(CL:DEFUN ABS (X) (CL:BLOCK ABS (CL:BLOCK NIL (CL:COND ((< X 0) (- X)) (T X)))))
(CL:DEFUN NUMBER-DIGIT (X) (CL:BLOCK NUMBER-DIGIT (CL:BLOCK NIL (CODE-CHAR (+ X (CL:CHAR-CODE #\0))))))
(CL:DEFUN DIGIT-NUMBER (X) (CL:BLOCK DIGIT-NUMBER (CL:BLOCK NIL (- (CL:CHAR-CODE X) (CL:CHAR-CODE #\0)))))
(CL:DEFUN %NONDECIMAL-DIGIT? (X START BASE) (CL:BLOCK %NONDECIMAL-DIGIT? (CL:BLOCK NIL (CHARRANGE? X START (CODE-CHAR (+ (CL:CHAR-CODE START) (- BASE 10)))))))
(CL:DEFUN %LATE-PRINT (X STR INFO) (CL:BLOCK %LATE-PRINT (CL:BLOCK NIL (CL:PROGN (%PRINT-INDENTATION STR INFO) (CL:LABELS ((~G817 (~G217) (CL:COND ((CONS? ~G217) (%PRINT-CONS X STR INFO)) ((SYMBOL? ~G217) (%PRINT-SYMBOL X STR INFO)) ((CHARACTER? ~G217) (%PRINT-CHARACTER X STR)) ((NUMBER? ~G217) (PRINC X STR)) ((STRING? ~G217) (%PRINT-STRING X STR)) ((ARRAY? ~G217) (%PRINT-ARRAY X STR INFO)) ((FUNCTION? ~G217) (%PRINT-FUNCTION X STR INFO)) ((OBJECT? ~G217) (%PRINT-OBJECT X STR INFO)) (T (%ERROR "Don't know how to print object."))))) (~G817 X))))))
(CL:DEFUN %PRINT-BODY (X STR INFO) (CL:BLOCK %PRINT-BODY (CL:BLOCK NIL (CL:LABELS ((~G818 (~G191) (CL:PROGN (=-PRINT-INFO-INDENTATION (%BODY-INDENTATION INFO) INFO)) (CL:LABELS ((~G819 (~G192) (CL:PROGN (=-PRINT-INFO-INDENTATION ~G191 INFO)) ~G192)) (~G819 (CL:PROGN (CL:LABELS ((~G820 (FIRST?) (CL:BLOCK NIL (CL:LABELS ((~G821 (~G195) (CL:LABELS ((~G822 (I) (CL:TAGBODY ~G193 (CL:COND ((NOT ~G195) (CL:GO ~G194))) (CL:SETQ I (CL:CAR ~G195)) (CL:COND (FIRST? (CL:PROGN (CL:SETQ FIRST? NIL))) (T (CL:COND (*PRINT-AUTOMATIC-NEWLINE?* (FRESH-LINE STR))))) (%LATE-PRINT I STR INFO) (CL:SETQ ~G195 (CL:CDR ~G195)) (CL:GO ~G193) ~G194 (CL:RETURN-FROM NIL (CL:PROGN))))) (~G822 NIL)))) (~G821 X))))) (~G820 T))))))) (~G818 (PRINT-INFO-INDENTATION INFO))))))
(CL:DEFUN =-PRINT-INFO-COLUMNS (VAL ARR) (CL:BLOCK =-PRINT-INFO-COLUMNS (CL:BLOCK NIL (CL:PROGN (=-AREF VAL ARR 5)))))
(CL:DEFUN PRINT-INFO-COLUMNS (ARR) (CL:BLOCK PRINT-INFO-COLUMNS (CL:BLOCK NIL (CL:AREF ARR 5))))
(CL:DEFUN %PRINT-INDENTATION (STR INFO) (CL:BLOCK %PRINT-INDENTATION (CL:BLOCK NIL (CL:COND ((PRINT-INFO-PRETTY-PRINT? INFO) (CL:COND ((FRESH-LINE? STR) (CL:LABELS ((~G823 (~G188) (CL:BLOCK NIL (CL:LABELS ((~G824 (!) (CL:TAGBODY ~G189 (CL:COND ((== ! ~G188) (CL:RETURN-FROM NIL (CL:PROGN NIL)))) (PRINC " " STR) (CL:SETQ ! (NUMBER+ 1 !)) (CL:GO ~G189)))) (~G824 0))))) (~G823 (INTEGER (PRINT-INFO-INDENTATION INFO)))))))))))
(CL:DEFUN MAKE-PRINT-INFO (CL:&KEY (PRETTY-PRINT? 'PRETTY-PRINT?) (DOWNCASE? 'DOWNCASE?) (INDENTATION 'INDENTATION) (COLUMNS 'COLUMNS)) (CL:BLOCK MAKE-PRINT-INFO (CL:BLOCK NIL (CL:LABELS ((~G825 (~G186) (CL:PROGN (=-AREF 'STRUCT ~G186 0) (=-AREF 'PRINT-INFO ~G186 1)) (CL:PROGN (=-AREF (CL:COND ((EQ PRETTY-PRINT? 'PRETTY-PRINT?) NIL) (T PRETTY-PRINT?)) ~G186 2)) (CL:PROGN (=-AREF (CL:COND ((EQ DOWNCASE? 'DOWNCASE?) NIL) (T DOWNCASE?)) ~G186 3)) (CL:PROGN (=-AREF (CL:COND ((EQ INDENTATION 'INDENTATION) 0) (T INDENTATION)) ~G186 4)) (CL:PROGN (=-AREF (CL:COND ((EQ COLUMNS 'COLUMNS) NIL) (T COLUMNS)) ~G186 5)) ~G186)) (~G825 (MAKE-ARRAY 6))))))
(CL:DEFUN CHARRANGE? (X START END) (CL:BLOCK CHARRANGE? (CL:BLOCK NIL (RANGE? (CL:CHAR-CODE X) (CL:CHAR-CODE START) (CL:CHAR-CODE END)))))
(CL:DEFUN LOWER-CASE? (CL:&REST ~G58) (CL:BLOCK LOWER-CASE? (CL:BLOCK NIL (CL:BLOCK NIL (CL:LABELS ((~G826 (~G62) (CL:LABELS ((~G827 (C) (CL:TAGBODY ~G60 (CL:COND ((NOT ~G62) (CL:GO ~G61))) (CL:SETQ C (CL:CAR ~G62)) (CL:LABELS ((~G828 (~G59) (CL:COND (~G59 ~G59) (T (CL:RETURN-FROM NIL NIL))))) (~G828 (CHARRANGE? C #\a #\z))) (CL:SETQ ~G62 (CL:CDR ~G62)) (CL:GO ~G60) ~G61 (CL:RETURN-FROM NIL (CL:PROGN T))))) (~G827 NIL)))) (~G826 ~G58))))))
(CL:DEFUN FORMAT-INFO-TEXT (ARR) (CL:BLOCK FORMAT-INFO-TEXT (CL:BLOCK NIL (CL:AREF ARR 3))))
(CL:DEFUN LATE-PRINT (X CL:&OPTIONAL (STR *STANDARD-OUTPUT*) CL:&KEY (PRINT-INFO (MAKE-PRINT-INFO))) (CL:BLOCK LATE-PRINT (CL:BLOCK NIL (CL:LABELS ((~G829 (~G218) (CL:LABELS ((~G830 (S) (CL:LABELS ((~G831 (~G219) (CL:COND (~G218 ~G219) (T (GET-STREAM-STRING S))))) (~G831 (CL:PROGN (CL:COND ((CL:COND ((CONS? X) (CONS? (CL:CAR X)))) (CL:PROGN (%PRINT-INDENTATION S PRINT-INFO) (CL:PROGN (=-PRINT-INFO-COLUMNS (CL:CONS (STREAM-LOCATION-COLUMN (STREAM-OUTPUT-LOCATION STR)) (PRINT-INFO-COLUMNS PRINT-INFO)) PRINT-INFO)) (PRINC "(" S) (%PRINT-BODY X S PRINT-INFO) (PRINC ")" S) (CL:LABELS ((~G832 (RET) (CL:PROGN (=-PRINT-INFO-COLUMNS (CL:CDR (PRINT-INFO-COLUMNS PRINT-INFO)) PRINT-INFO)) RET)) (~G832 (CL:CAR (PRINT-INFO-COLUMNS PRINT-INFO)))))) (T (%LATE-PRINT X S PRINT-INFO))) (CL:COND (*PRINT-AUTOMATIC-NEWLINE?* (CL:COND ((NOT (FRESH-LINE? S)) (TERPRI S)))))))))) (~G830 (DEFAULT-STREAM ~G218))))) (~G829 STR)) X)))
(CL:DEFUN NEXT-TABULATOR-COLUMN (COLUMN SIZE) (CL:BLOCK NEXT-TABULATOR-COLUMN (CL:BLOCK NIL (INTEGER (++ (* SIZE (++ (/ (-- COLUMN) SIZE))))))))
(CL:DEFUN =-STREAM-LOCATION-LINE (VAL ARR) (CL:BLOCK =-STREAM-LOCATION-LINE (CL:BLOCK NIL (CL:PROGN (=-AREF VAL ARR 4)))))
(CL:DEFUN =-STREAM-LOCATION-COLUMN (VAL ARR) (CL:BLOCK =-STREAM-LOCATION-COLUMN (CL:BLOCK NIL (CL:PROGN (=-AREF VAL ARR 5)))))
(CL:DEFUN STREAM-LOCATION-TABSIZE (ARR) (CL:BLOCK STREAM-LOCATION-TABSIZE (CL:BLOCK NIL (CL:AREF ARR 6))))
(CL:DEFUN NONDECIMAL-DIGIT? (X CL:&KEY (BASE 10)) (CL:BLOCK NONDECIMAL-DIGIT? (CL:BLOCK NIL (CL:COND ((< 10 BASE) (CL:LABELS ((~G833 (~G74) (CL:COND (~G74 ~G74) (T (%NONDECIMAL-DIGIT? X #\A BASE))))) (~G833 (%NONDECIMAL-DIGIT? X #\a BASE))))))))
(CL:DEFUN DECIMAL-DIGIT? (X) (CL:BLOCK DECIMAL-DIGIT? (CL:BLOCK NIL (CHARRANGE? X #\0 #\9))))
(CL:DEFUN GENERIC-SPLIT (OBJ SEQ CL:&KEY (TEST (CL:FUNCTION EQL)) (INCLUDE? NIL)) (CL:BLOCK GENERIC-SPLIT (CL:BLOCK NIL (CL:COND (SEQ (CL:LABELS ((~G834 (!) (CL:COND (! (CL:CONS (SUBSEQ SEQ 0 (CL:COND (INCLUDE? (++ !)) (T !))) (GENERIC-SPLIT OBJ (SUBSEQ SEQ (++ !)) :TEST TEST :INCLUDE? INCLUDE?))) (T (LIST SEQ))))) (~G834 (POSITION OBJ SEQ :TEST TEST))))))))
(CL:DEFUN CHARACTER<= (CL:&REST X) (CL:BLOCK CHARACTER<= (CL:BLOCK NIL (CL:APPLY (CL:FUNCTION <=) (DYNAMIC-MAP (CL:FUNCTION CL:CHAR-CODE) X)))))
(CL:DEFUN CHARACTER>= (CL:&REST X) (CL:BLOCK CHARACTER>= (CL:BLOCK NIL (CL:APPLY (CL:FUNCTION >=) (DYNAMIC-MAP (CL:FUNCTION CL:CHAR-CODE) X)))))
(CL:DEFUN SPECIAL-CHAR? (X) (CL:BLOCK SPECIAL-CHAR? (CL:BLOCK NIL (CL:LABELS ((~G835 (~G238) (CL:COND (~G238 ~G238) (T (CL:LABELS ((~G836 (~G239) (CL:COND (~G239 ~G239) (T (CL:LABELS ((~G837 (~G240) (CL:COND (~G240 ~G240) (T (CL:LABELS ((~G838 (~G241) (CL:COND (~G241 ~G241) (T (CL:LABELS ((~G839 (~G242) (CL:COND (~G242 ~G242) (T (CL:LABELS ((~G840 (~G243) (CL:COND (~G243 ~G243) (T (CL:LABELS ((~G841 (~G244) (CL:COND (~G244 ~G244) (T (CL:LABELS ((~G842 (~G245) (CL:COND (~G245 ~G245) (T (CL:LABELS ((~G843 (~G246) (CL:COND (~G246 ~G246) (T (CL:LABELS ((~G844 (~G247) (CL:COND (~G247 ~G247) (T (CL:LABELS ((~G845 (~G248) (CL:COND (~G248 ~G248) (T (CL:LABELS ((~G846 (~G249) (CL:COND (~G249 ~G249) (T (CL:LABELS ((~G847 (~G250) (CL:COND (~G250 ~G250) (T (EQL X #\^))))) (~G847 (EQL X #\#))))))) (~G846 (EQL X #\;))))))) (~G845 (EQL X #\:))))))) (~G844 (EQL X #\,))))))) (~G843 (EQL X #\`))))))) (~G842 (EQL X #\'))))))) (~G841 (EQL X #\"))))))) (~G840 (EQL X #\}))))))) (~G839 (EQL X #\{))))))) (~G838 (EQL X #\]))))))) (~G837 (EQL X #\[))))))) (~G836 (EQL X #\)))))))) (~G835 (EQL X #\())))))
(CL:DEFUN READ-INTEGER-0 (STR V) (CL:BLOCK READ-INTEGER-0 (CL:BLOCK NIL (CL:COND ((PEEK-DIGIT STR) (READ-INTEGER-0 STR (+ (* V 10) (DIGIT-NUMBER (READ-CHAR STR))))) (T V)))))
(CL:DEFUN PEEK-DIGIT (STR) (CL:BLOCK PEEK-DIGIT (CL:BLOCK NIL (CL:LABELS ((~G848 (!) (CL:COND (! (CL:PROGN (CL:COND ((DIGIT-CHAR? !) !))))))) (~G848 (PEEK-CHAR STR))))))
(CL:DEFUN READ-DECIMAL-PLACES-0 (STR V S) (CL:BLOCK READ-DECIMAL-PLACES-0 (CL:BLOCK NIL (CL:COND ((PEEK-DIGIT STR) (READ-DECIMAL-PLACES-0 STR (+ V (* S (DIGIT-NUMBER (READ-CHAR STR)))) (/ S 10))) (T V)))))
(CL:DEFUN DECIMALS-CHARS (X) (CL:BLOCK DECIMALS-CHARS (CL:BLOCK NIL (CL:LABELS ((~G849 (!) (CL:COND ((< 0 !) (CL:CONS (NUMBER-DIGIT (INTEGER !)) (DECIMALS-CHARS !)))))) (~G849 (CL:MOD (* X 10) 10))))))
(CL:DEFUN INTEGER-CHARS (X) (CL:BLOCK INTEGER-CHARS (CL:BLOCK NIL (REVERSE (INTEGER-CHARS-0 (INTEGER (ABS X)))))))
(CL:DEFUN %FIND-IF-SEQUENCE (PRED SEQ START END FROM-END WITH-INDEX) (CL:BLOCK %FIND-IF-SEQUENCE (CL:BLOCK NIL (CL:COND (SEQ (CL:COND ((< 0 (CL:LENGTH SEQ)) (CL:LABELS ((~G850 (E) (CL:LABELS ((~G851 (S) (CL:COND ((CL:LABELS ((~G852 (~G95) (CL:COND (~G95 ~G95) (T (CL:COND ((< S E) FROM-END)))))) (~G852 (CL:COND ((> S E) (NOT FROM-END))))) (CL:LABELS ((~G853 (~G96) (CL:PROGN (CL:SETQ S E) (CL:SETQ E ~G96)))) (~G853 S)))) (CL:BLOCK NIL (CL:LABELS ((~G854 (I) (CL:TAGBODY ~G97 (CL:COND ((CL:COND (FROM-END (< I E)) (T (> I E))) (CL:RETURN-FROM NIL (CL:PROGN)))) (CL:LABELS ((~G855 (!) (CL:COND ((CL:APPLY PRED (CL:CONS ! (CL:COND (WITH-INDEX (LIST I))))) (CL:RETURN-FROM NIL !))))) (~G855 (ELT SEQ I))) (CL:SETQ I (CL:COND (FROM-END (-- I)) (T (++ I)))) (CL:GO ~G97)))) (~G854 S))))) (~G851 (CL:LABELS ((~G856 (~G94) (CL:COND (~G94 ~G94) (T 0)))) (~G856 START)))))) (~G850 (CL:LABELS ((~G857 (~G93) (CL:COND (~G93 ~G93) (T (-- (CL:LENGTH SEQ)))))) (~G857 END)))))))))))
(CL:DEFUN %FIND-IF-LIST (PRED SEQ FROM-END WITH-INDEX) (CL:BLOCK %FIND-IF-LIST (CL:BLOCK NIL (CL:LABELS ((~G858 (!) (CL:COND (WITH-INDEX (CL:LABELS ((~G859 (IDX) (CL:BLOCK NIL (CL:LABELS ((~G860 (~G92) (CL:LABELS ((~G861 (I) (CL:TAGBODY ~G90 (CL:COND ((NOT ~G92) (CL:GO ~G91))) (CL:SETQ I (CL:CAR ~G92)) (CL:COND ((FUNCALL PRED I IDX) (CL:RETURN-FROM NIL I))) (CL:PROGN (CL:SETQ IDX (NUMBER+ IDX 1))) (CL:SETQ ~G92 (CL:CDR ~G92)) (CL:GO ~G90) ~G91 (CL:RETURN-FROM NIL (CL:PROGN))))) (~G861 NIL)))) (~G860 !))))) (~G859 0))) (T (CL:BLOCK NIL (CL:LABELS ((~G862 (~G89) (CL:LABELS ((~G863 (I) (CL:TAGBODY ~G87 (CL:COND ((NOT ~G89) (CL:GO ~G88))) (CL:SETQ I (CL:CAR ~G89)) (CL:COND ((FUNCALL PRED I) (CL:RETURN-FROM NIL I))) (CL:SETQ ~G89 (CL:CDR ~G89)) (CL:GO ~G87) ~G88 (CL:RETURN-FROM NIL (CL:PROGN))))) (~G863 NIL)))) (~G862 !))))))) (~G858 (CL:COND (FROM-END (REVERSE SEQ)) (T SEQ)))))))
(CL:DEFUN REVERSE (LST) (CL:BLOCK REVERSE (CL:BLOCK NIL (CL:LABELS ((~G864 (!) (CL:BLOCK NIL (CL:LABELS ((~G865 (~G23) (CL:LABELS ((~G866 (I) (CL:TAGBODY ~G21 (CL:COND ((NOT ~G23) (CL:GO ~G22))) (CL:SETQ I (CL:CAR ~G23)) (CL:PROGN (CL:SETQ ! (CL:CONS I !))) (CL:SETQ ~G23 (CL:CDR ~G23)) (CL:GO ~G21) ~G22 (CL:RETURN-FROM NIL (CL:PROGN !))))) (~G866 NIL)))) (~G865 LST))))) (~G864 NIL)))))
(CL:DEFUN =-ELT (VAL SEQ IDX) (CL:BLOCK =-ELT (CL:BLOCK NIL (%SET-ELT VAL SEQ IDX))))
(CL:DEFUN FIND-IF (PRED SEQ CL:&KEY (START NIL) (END NIL) (FROM-END NIL) (WITH-INDEX NIL)) (CL:BLOCK FIND-IF (CL:BLOCK NIL (CL:COND ((NOT (ATOM SEQ) START END) (%FIND-IF-LIST PRED SEQ FROM-END WITH-INDEX)) (T (%FIND-IF-SEQUENCE PRED SEQ START END FROM-END WITH-INDEX))))))
(CL:DEFUN QUEUE-POP (X) (CL:BLOCK QUEUE-POP (CL:BLOCK NIL (CL:LABELS ((~G867 (~G9) (CL:COND ((NOT (CL:CDR (CL:CDR X))) (CL:RPLACA X NIL))) (CL:COND ((CL:CDR X) (CL:RPLACD X (CL:CDR (CL:CDR X))))) ~G9)) (~G867 (CL:CAR (CL:CDR X)))))))
(CL:DEFUN PRINC-NUMBER (X STR) (CL:BLOCK PRINC-NUMBER (CL:BLOCK NIL (CL:COND ((< X 0) (PRINC #\- STR))) (STREAM-PRINC (INTEGER-CHARS X) STR) (CL:LABELS ((~G868 (!) (CL:COND ((NOT (ZERO? !)) (CL:PROGN (PRINC #\. STR) (STREAM-PRINC (DECIMALS-CHARS !) STR)))))) (~G868 (CL:MOD X 1))))))
(CL:DEFUN NUMBER-NOT-CHARACTER? (X) (CL:BLOCK NUMBER-NOT-CHARACTER? (CL:BLOCK NIL (CL:COND ((NOT (CHARACTER? X)) (NUMBER? X))))))
(CL:DEFUN READ-DECIMAL-PLACES (CL:&OPTIONAL (STR *STANDARD-INPUT*)) (CL:BLOCK READ-DECIMAL-PLACES (CL:BLOCK NIL (CL:COND ((CL:LABELS ((~G869 (!) (CL:COND (! (DIGIT-CHAR? !))))) (~G869 (PEEK-CHAR STR))) (READ-DECIMAL-PLACES-0 STR 0 0.1))))))
(CL:DEFUN PEEK-DOT (STR) (CL:BLOCK PEEK-DOT (CL:BLOCK NIL (CL:LABELS ((~G870 (!) (CL:COND (! (CL:PROGN (EQL #\. !)))))) (~G870 (PEEK-CHAR STR))))))
(CL:DEFUN READ-INTEGER (CL:&OPTIONAL (STR *STANDARD-INPUT*)) (CL:BLOCK READ-INTEGER (CL:BLOCK NIL (CL:COND ((PEEK-DIGIT STR) (INTEGER (READ-INTEGER-0 STR 0)))))))
(CL:DEFUN SYMBOL-CHAR? (X) (CL:BLOCK SYMBOL-CHAR? (CL:BLOCK NIL (CL:COND (X (CL:COND ((> (CL:CHAR-CODE X) 32) (NOT (SPECIAL-CHAR? X)))))))))
(CL:DEFUN HEX-DIGIT-CHAR? (X) (CL:BLOCK HEX-DIGIT-CHAR? (CL:BLOCK NIL (CL:LABELS ((~G871 (~G76) (CL:COND (~G76 ~G76) (T (CL:LABELS ((~G872 (~G77) (CL:COND (~G77 ~G77) (T (CL:COND ((CHARACTER>= X #\a) (CHARACTER<= X #\f))))))) (~G872 (CL:COND ((CHARACTER>= X #\A) (CHARACTER<= X #\F))))))))) (~G871 (DIGIT-CHAR? X))))))
(CL:DEFUN SPLIT (OBJ SEQ CL:&KEY (TEST (CL:FUNCTION EQL)) (INCLUDE? NIL)) (CL:BLOCK SPLIT (CL:BLOCK NIL (GENERIC-SPLIT OBJ SEQ :TEST TEST :INCLUDE? INCLUDE?))))
(CL:DEFUN STREAM-LOCATION-ID (ARR) (CL:BLOCK STREAM-LOCATION-ID (CL:BLOCK NIL (CL:AREF ARR 3))))
(CL:DEFUN STREAM-LOCATION-LINE (ARR) (CL:BLOCK STREAM-LOCATION-LINE (CL:BLOCK NIL (CL:AREF ARR 4))))
(CL:DEFUN STREAM-INPUT-LOCATION (ARR) (CL:BLOCK STREAM-INPUT-LOCATION (CL:BLOCK NIL (CL:AREF ARR 8))))
(CL:DEFUN READ-SYMBOL (STR) (CL:BLOCK READ-SYMBOL (CL:BLOCK NIL (CL:LABELS ((F NIL (CL:BLOCK NIL (CL:COND ((SYMBOL-CHAR? (PEEK-CHAR STR)) (CL:CONS (CHAR-UPCASE (READ-CHAR STR)) (F))))))) (CL:COND ((NOT (SPECIAL-CHAR? (SEEK-CHAR STR))) (CL:PROGN (F))))))))
(CL:DEFUN EVERY (PRED CL:&REST SEQS) (CL:BLOCK EVERY (CL:BLOCK NIL (CL:BLOCK NIL (CL:LABELS ((~G873 (~G101) (CL:LABELS ((~G874 (SEQ) (CL:TAGBODY ~G99 (CL:COND ((NOT ~G101) (CL:GO ~G100))) (CL:SETQ SEQ (CL:CAR ~G101)) (CL:LABELS ((~G875 (~G102) (CL:BLOCK NIL (CL:LABELS ((~G876 (!) (CL:TAGBODY ~G103 (CL:COND ((== ! ~G102) (CL:RETURN-FROM NIL (CL:PROGN NIL)))) (CL:LABELS ((~G877 (~G98) (CL:COND (~G98 ~G98) (T (CL:RETURN-FROM EVERY NIL))))) (~G877 (FUNCALL PRED (ELT SEQ !)))) (CL:SETQ ! (NUMBER+ 1 !)) (CL:GO ~G103)))) (~G876 0))))) (~G875 (INTEGER (CL:LENGTH SEQ)))) (CL:SETQ ~G101 (CL:CDR ~G101)) (CL:GO ~G99) ~G100 (CL:RETURN-FROM NIL (CL:PROGN T))))) (~G874 NIL)))) (~G873 SEQS))))))
(CL:DEFUN DIGIT-CHAR? (C CL:&KEY (BASE 10)) (CL:BLOCK DIGIT-CHAR? (CL:BLOCK NIL (CL:COND ((CHARACTER? C) (CL:LABELS ((~G878 (~G75) (CL:COND (~G75 ~G75) (T (NONDECIMAL-DIGIT? C :BASE BASE))))) (~G878 (DECIMAL-DIGIT? C))))))))
(CL:DEFUN STREAM-FUN-OUT (ARR) (CL:BLOCK STREAM-FUN-OUT (CL:BLOCK NIL (CL:AREF ARR 4))))
(CL:DEFUN %TRACK-LOCATION (STREAM-LOCATION X) (CL:BLOCK %TRACK-LOCATION (CL:BLOCK NIL (CL:LABELS ((~G879 (~G145) (CL:LABELS ((~G880 (STREAM-LOCATION TRACK? ID LINE COLUMN TABSIZE) TRACK? ID LINE COLUMN TABSIZE (CL:COND (TRACK? (CL:PROGN (CL:COND ((STRING? X) (CL:LABELS ((~G881 (~G146) (CL:COND (~G146 (CL:PROGN (CL:LABELS ((~G882 (~G148) (CL:BLOCK NIL (CL:LABELS ((~G883 (~G147) (CL:TAGBODY ~G149 (CL:COND ((== ~G147 ~G148) (CL:RETURN-FROM NIL (CL:PROGN NIL)))) (CL:LABELS ((~G884 (!) (%TRACK-LOCATION STREAM-LOCATION !))) (~G884 (ELT ~G146 ~G147))) (CL:SETQ ~G147 (NUMBER+ 1 ~G147)) (CL:GO ~G149)))) (~G883 0))))) (~G882 (INTEGER (CL:LENGTH ~G146))))))))) (~G881 X))) (T (CL:COND (X (CL:PROGN (CL:COND ((== 10 (CL:CHAR-CODE X)) (CL:PROGN (CL:PROGN (=-STREAM-LOCATION-COLUMN 1 STREAM-LOCATION)) (CL:PROGN (=-STREAM-LOCATION-LINE (NUMBER+ (STREAM-LOCATION-LINE STREAM-LOCATION) 1) STREAM-LOCATION)))) (T (CL:COND ((== 9 (CL:CHAR-CODE X)) (CL:PROGN (=-STREAM-LOCATION-COLUMN (NEXT-TABULATOR-COLUMN COLUMN TABSIZE) STREAM-LOCATION))) ((< 31 (CL:CHAR-CODE X)) (CL:PROGN (=-STREAM-LOCATION-COLUMN (NUMBER+ (STREAM-LOCATION-COLUMN STREAM-LOCATION) 1) STREAM-LOCATION)))))))))))))) X)) (~G880 ~G145 (STREAM-LOCATION-TRACK? ~G145) (STREAM-LOCATION-ID ~G145) (STREAM-LOCATION-LINE ~G145) (STREAM-LOCATION-COLUMN ~G145) (STREAM-LOCATION-TABSIZE ~G145))))) (~G879 STREAM-LOCATION)))))
(CL:DEFUN %FORMAT-DIRECTIVE-TILDE (INF TXT ARGS) (CL:BLOCK %FORMAT-DIRECTIVE-TILDE (CL:BLOCK NIL (PRINC #\~ (FORMAT-INFO-STREAM INF)) (%FORMAT INF TXT ARGS))))
(CL:DEFUN %FORMAT-DIRECTIVE-FRESH-LINE (INF TXT ARGS) (CL:BLOCK %FORMAT-DIRECTIVE-FRESH-LINE (CL:BLOCK NIL (FRESH-LINE (FORMAT-INFO-STREAM INF)) (%FORMAT INF TXT ARGS))))
(CL:DEFUN %FORMAT-DIRECTIVE-FORCE-OUTPUT (INF TXT ARGS) (CL:BLOCK %FORMAT-DIRECTIVE-FORCE-OUTPUT (CL:BLOCK NIL (FORCE-OUTPUT (FORMAT-INFO-STREAM INF)) (%FORMAT INF TXT ARGS))))
(CL:DEFUN %FORMAT-DIRECTIVE-PLACEHOLDER (INF TXT ARGS) (CL:BLOCK %FORMAT-DIRECTIVE-PLACEHOLDER (CL:BLOCK NIL (CL:COND (ARGS (CL:COND ((CONS? (CL:CAR ARGS)) (LATE-PRINT (CL:CAR ARGS) (FORMAT-INFO-STREAM INF))) (T (PRINC (CL:CAR ARGS) (FORMAT-INFO-STREAM INF))))) (T (ERROR "Argument ~A specified in format \"~A\" is missing." (FORMAT-INFO-PROCESSED-ARGS INF) (FORMAT-INFO-TEXT INF)))) (%FORMAT INF TXT (CL:CDR ARGS)))))
(CL:DEFUN %FORMAT-DIRECTIVE-EOL (INF TXT ARGS) (CL:BLOCK %FORMAT-DIRECTIVE-EOL (CL:BLOCK NIL (TERPRI (FORMAT-INFO-STREAM INF)) (%FORMAT INF TXT ARGS))))
(CL:DEFUN CHAR-UPCASE (C) (CL:BLOCK CHAR-UPCASE (CL:BLOCK NIL (CL:COND ((LOWER-CASE? C) (CODE-CHAR (- (+ (CL:CHAR-CODE C) (CL:CHAR-CODE #\A)) (CL:CHAR-CODE #\a)))) (T C)))))
(CL:DEFUN =-FORMAT-INFO-PROCESSED-ARGS (VAL ARR) (CL:BLOCK =-FORMAT-INFO-PROCESSED-ARGS (CL:BLOCK NIL (CL:PROGN (=-AREF VAL ARR 5)))))
(CL:DEFUN FORMAT-INFO-PROCESSED-ARGS (ARR) (CL:BLOCK FORMAT-INFO-PROCESSED-ARGS (CL:BLOCK NIL (CL:AREF ARR 5))))
(CL:DEFUN %NCONC-0 (LSTS) (CL:BLOCK %NCONC-0 (CL:BLOCK NIL (CL:COND (LSTS (CL:LABELS ((~G885 (!) (CL:COND (! (CL:PROGN (CL:RPLACD (LAST !) (%NCONC-0 (CL:CDR LSTS))) !)) (T (%NCONC-0 (CL:CDR LSTS)))))) (~G885 (CL:CAR LSTS))))))))
(CL:DEFUN ZERO? (X) (CL:BLOCK ZERO? (CL:BLOCK NIL (CL:COND ((NUMBER? X) (== 0 X))))))
(CL:DEFUN %FORMAT-DIRECTIVE (INF TXT ARGS) (CL:BLOCK %FORMAT-DIRECTIVE (CL:BLOCK NIL (CL:PROGN (=-FORMAT-INFO-PROCESSED-ARGS (NUMBER+ (FORMAT-INFO-PROCESSED-ARGS INF) 1) INF)) (CL:LABELS ((~G886 (~G304) (CL:COND ((EQL ~G304 #\%) (%FORMAT-DIRECTIVE-EOL INF (CL:CDR TXT) ARGS)) ((EQL ~G304 #\A) (%FORMAT-DIRECTIVE-PLACEHOLDER INF (CL:CDR TXT) ARGS)) ((EQL ~G304 #\F) (%FORMAT-DIRECTIVE-FORCE-OUTPUT INF (CL:CDR TXT) ARGS)) ((EQL ~G304 #\L) (%FORMAT-DIRECTIVE-FRESH-LINE INF (CL:CDR TXT) ARGS)) ((EQL ~G304 #\~) (CL:PROGN (PRINC (CL:CAR TXT) (FORMAT-INFO-STREAM INF)) (%FORMAT INF (CL:CDR TXT) ARGS))) (T (%FORMAT-DIRECTIVE-TILDE INF TXT ARGS))))) (~G886 (CHAR-UPCASE (CL:CAR TXT)))))))
(CL:DEFUN FORMAT-INFO-STREAM (ARR) (CL:BLOCK FORMAT-INFO-STREAM (CL:BLOCK NIL (CL:AREF ARR 2))))
(CL:DEFUN =-STREAM-USER-DETAIL (VAL ARR) (CL:BLOCK =-STREAM-USER-DETAIL (CL:BLOCK NIL (CL:PROGN (=-AREF VAL ARR 10)))))
(CL:DEFUN QUEUE-STRING (X) (CL:BLOCK QUEUE-STRING (CL:BLOCK NIL (LIST-STRING (QUEUE-LIST X)))))
(CL:DEFUN STREAM-USER-DETAIL (ARR) (CL:BLOCK STREAM-USER-DETAIL (CL:BLOCK NIL (CL:AREF ARR 10))))
(CL:DEFUN STREAM-LOCATION-COLUMN (ARR) (CL:BLOCK STREAM-LOCATION-COLUMN (CL:BLOCK NIL (CL:AREF ARR 5))))
(CL:DEFUN STREAM-LOCATION-TRACK? (ARR) (CL:BLOCK STREAM-LOCATION-TRACK? (CL:BLOCK NIL (CL:AREF ARR 2))))
(CL:DEFUN STREAM-OUTPUT-LOCATION (ARR) (CL:BLOCK STREAM-OUTPUT-LOCATION (CL:BLOCK NIL (CL:AREF ARR 9))))
(CL:DEFUN FORCE-OUTPUT (CL:&OPTIONAL (STR *STANDARD-OUTPUT*)) (CL:BLOCK FORCE-OUTPUT (CL:BLOCK NIL (%FORCE-OUTPUT (STREAM-HANDLE STR)))))
(CL:DEFUN STREAM-PRINC (X STR) (CL:BLOCK STREAM-PRINC (CL:BLOCK NIL (CL:COND ((CONS? X) (CL:BLOCK NIL (CL:LABELS ((~G887 (~G153) (CL:LABELS ((~G888 (I) (CL:TAGBODY ~G151 (CL:COND ((NOT ~G153) (CL:GO ~G152))) (CL:SETQ I (CL:CAR ~G153)) (STREAM-PRINC I STR) (CL:SETQ ~G153 (CL:CDR ~G153)) (CL:GO ~G151) ~G152 (CL:RETURN-FROM NIL (CL:PROGN X))))) (~G888 NIL)))) (~G887 X)))) ((CL:LABELS ((~G889 (~G150) (CL:COND (~G150 ~G150) (T (CHARACTER? X))))) (~G889 (STRING? X))) (CL:COND ((NOT (CL:COND ((STRING? X) (ZERO? (CL:LENGTH X))))) (CL:PROGN (CL:PROGN (=-STREAM-LAST-CHAR (CL:COND ((STRING? X) (ELT X (-- (CL:LENGTH X)))) (T X)) STR)) (%TRACK-LOCATION (STREAM-OUTPUT-LOCATION STR) X) (FUNCALL (STREAM-FUN-OUT STR) X STR))))) (T (FUNCALL (STREAM-FUN-OUT STR) X STR))))))
(CL:DEFUN VALUES (CL:&REST VALS) (CL:BLOCK VALUES (CL:BLOCK NIL (CL:CONS *VALUES-MAGIC* VALS))))
(CL:DEFUN READ-COMMENT-BLOCK (STR) (CL:BLOCK READ-COMMENT-BLOCK (CL:BLOCK NIL (CL:BLOCK NIL (CL:PROGN (CL:TAGBODY ~G252 (CL:COND ((NOT (NOT (CL:COND ((EQL #\| (READ-CHAR STR)) (EQL #\# (PEEK-CHAR STR)))))) (CL:RETURN-FROM NIL (CL:PROGN (READ-CHAR STR))))) (CL:GO ~G252)))))))
(CL:DEFUN LIST-NUMBER? (X) (CL:BLOCK LIST-NUMBER? (CL:BLOCK NIL (CL:COND ((CL:LABELS ((~G890 (~G253) (CL:COND (~G253 ~G253) (T (DIGIT-CHAR? (CL:CAR X)))))) (~G890 (CL:COND ((CL:CDR X) (CL:LABELS ((~G891 (~G254) (CL:COND (~G254 ~G254) (T (EQL #\. (CL:CAR X)))))) (~G891 (EQL #\- (CL:CAR X)))))))) (CL:COND ((CL:CDR X) (EVERY (CL:LAMBDA (_) (CL:BLOCK NIL (CL:LABELS ((~G892 (~G255) (CL:COND (~G255 ~G255) (T (EQL #\. _))))) (~G892 (DIGIT-CHAR? _))))) (CL:CDR X))) (T T)))))))
(CL:DEFUN READ-SYMBOL-AND-PACKAGE (STR) (CL:BLOCK READ-SYMBOL-AND-PACKAGE (CL:BLOCK NIL (CL:LABELS ((~G893 (!) (CL:COND ((EQL (PEEK-CHAR STR) #\:) (CL:PROGN (READ-CHAR STR) (VALUES (CL:LABELS ((~G894 (~G251) (CL:COND (~G251 ~G251) (T *KEYWORD-PACKAGE*)))) (~G894 (CL:COND (! (LIST-STRING !))))) (READ-SYMBOL STR)))) (T (VALUES NIL !))))) (~G893 (READ-SYMBOL STR))))))
(CL:DEFUN READ-SLOT-VALUE (X) (CL:BLOCK READ-SLOT-VALUE (CL:BLOCK NIL (CL:COND ((NOT X) NIL) ((CL:CDR X) (CL:CONS 'CL:SLOT-VALUE (CL:CONS (READ-SLOT-VALUE (BUTLAST X)) (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS (MAKE-SYMBOL (CL:CAR (LAST X)) "TRE") NIL)) NIL)))) ((STRING? (CL:CAR X)) (MAKE-SYMBOL (CL:CAR X))) (T (CL:CAR X))))))
(CL:DEFUN READ-CONS (STR) (CL:BLOCK READ-CONS (CL:BLOCK NIL (CL:LABELS ((ERR (_) (CL:BLOCK NIL (CL:LABELS ((~G895 (!) (ERROR "~A at line ~A, column ~A in file ~A." _ (STREAM-LOCATION-LINE !) (STREAM-LOCATION-COLUMN !) (STREAM-LOCATION-ID !)))) (~G895 (STREAM-INPUT-LOCATION STR))))) (F (TOKEN PKG SYM) (CL:COND ((NOT (%READ-CLOSING-PARENS? TOKEN)) (CL:PROGN (CL:CONS (CL:LABELS ((~G896 (~G264) (CL:COND ((EQL ~G264 :PARENTHESIS-OPEN) (READ-CONS-SLOT STR)) ((EQL ~G264 :BRACKET-OPEN) (CL:CONS 'BRACKETS (READ-CONS-SLOT STR))) ((EQL ~G264 :BRACE-OPEN) (CL:CONS 'BRACES (READ-CONS-SLOT STR))) (T (CL:COND ((TOKEN-IS-QUOTE? TOKEN) (READ-QUOTE STR TOKEN)) (T (READ-ATOM STR TOKEN PKG SYM))))))) (~G896 TOKEN)) (CL:LABELS ((~G897 (!) (CL:COND (! (CL:LABELS ((~G898 (~G266) (CL:LABELS ((~G899 (~G267) (CL:LABELS ((~G900 (TOKEN) (CL:LABELS ((~G901 (~G268) (CL:LABELS ((~G902 (PKG) (CL:LABELS ((~G903 (~G269) (CL:LABELS ((~G904 (SYM) (CL:COND ((EQ :DOT TOKEN) (CL:LABELS ((~G905 (X) (CL:LABELS ((~G906 (~G271) (CL:LABELS ((~G907 (~G272) (CL:LABELS ((~G908 (TOKEN) (CL:LABELS ((~G909 (~G273) (CL:LABELS ((~G910 (PKG) (CL:LABELS ((~G911 (~G274) (CL:LABELS ((~G912 (SYM) (CL:LABELS ((~G913 (~G265) (CL:COND (~G265 ~G265) (T (ERR "Only one value allowed after dotted cons"))))) (~G913 (%READ-CLOSING-PARENS? TOKEN))) X)) (~G912 (CL:CAR ~G274))))) (~G911 (CL:CDR ~G273))))) (~G910 (CL:CAR ~G273))))) (~G909 (CL:CDR ~G272))))) (~G908 (CL:CAR ~G272))))) (~G907 (CL:CDR ~G271))))) (~G906 (READ-TOKEN STR))))) (~G905 (READ-EXPR STR)))) (T (F TOKEN PKG SYM))))) (~G904 (CL:CAR ~G269))))) (~G903 (CL:CDR ~G268))))) (~G902 (CL:CAR ~G268))))) (~G901 (CL:CDR ~G267))))) (~G900 (CL:CAR ~G267))))) (~G899 (CL:CDR ~G266))))) (~G898 !))) (T (ERR "Closing bracket missing"))))) (~G897 (READ-TOKEN STR))))))))) (CL:LABELS ((~G914 (~G276) (CL:LABELS ((~G915 (~G277) (CL:LABELS ((~G916 (TOKEN) (CL:LABELS ((~G917 (~G278) (CL:LABELS ((~G918 (PKG) (CL:LABELS ((~G919 (~G279) (CL:LABELS ((~G920 (SYM) (CL:COND ((EQ TOKEN :DOT) (CL:CONS 'CL:CONS (READ-CONS STR))) (T (F TOKEN PKG SYM))))) (~G920 (CL:CAR ~G279))))) (~G919 (CL:CDR ~G278))))) (~G918 (CL:CAR ~G278))))) (~G917 (CL:CDR ~G277))))) (~G916 (CL:CAR ~G277))))) (~G915 (CL:CDR ~G276))))) (~G914 (READ-TOKEN STR)))))))
(CL:DEFUN %READ-CLOSING-PARENS? (X) (CL:BLOCK %READ-CLOSING-PARENS? (CL:BLOCK NIL (CL:LABELS ((~G921 (~G236) (CL:COND (~G236 ~G236) (T (CL:LABELS ((~G922 (~G237) (CL:COND (~G237 ~G237) (T (EQL X :BRACE-CLOSE))))) (~G922 (EQL X :BRACKET-CLOSE))))))) (~G921 (EQL X :PARENTHESIS-CLOSE))))))
(CL:DEFUN READ-SYMBOL-OR-SLOT-VALUE (PKG SYM) (CL:BLOCK READ-SYMBOL-OR-SLOT-VALUE (CL:BLOCK NIL (CL:LABELS ((~G923 (!) (CL:COND ((CL:COND ((CL:CDR !) (CL:COND ((CL:CAR !) (CL:CAR (LAST !)))))) (READ-SLOT-VALUE !)) (T (MAKE-SYMBOL SYM PKG))))) (~G923 (SPLIT #\. SYM))))))
(CL:DEFUN READ-HEX (STR) (CL:BLOCK READ-HEX (CL:BLOCK NIL (CL:LABELS ((REC (V) (CL:LABELS ((~G924 (!) (CL:COND (! (CL:PROGN (READ-CHAR STR) (REC (NUMBER+ (* V 16) (- (CL:CHAR-CODE !) (CL:COND ((DIGIT-CHAR? !) (CL:CHAR-CODE #\0)) (T (- (CL:CHAR-CODE #\A) 10)))))))) (T V)))) (~G924 (CL:COND ((PEEK-CHAR STR) (CL:LABELS ((~G925 (!) (CL:COND ((HEX-DIGIT-CHAR? !) !)))) (~G925 (CHAR-UPCASE (PEEK-CHAR STR)))))))))) (CL:LABELS ((~G926 (~G222) (CL:COND (~G222 ~G222) (T (ERROR "Illegal character '~A' at begin of hexadecimal number." (PEEK-CHAR STR)))))) (~G926 (HEX-DIGIT-CHAR? (PEEK-CHAR STR)))) (CL:LABELS ((~G927 (~G223) (CL:COND ((SYMBOL-CHAR? (PEEK-CHAR STR)) (ERROR "Illegal character '~A' in hexadecimal number." (PEEK-CHAR STR)))) ~G223)) (~G927 (REC 0)))))))
(CL:DEFUN READ-NUMBER (CL:&OPTIONAL (STR *STANDARD-INPUT*)) (CL:BLOCK READ-NUMBER (CL:BLOCK NIL (* (CL:COND ((EQL #\- (PEEK-CHAR STR)) (CL:PROGN (READ-CHAR STR) -1)) (T 1)) (+ (READ-INTEGER STR) (CL:LABELS ((~G928 (~G224) (CL:COND (~G224 ~G224) (T 0)))) (~G928 (CL:COND ((PEEK-DOT STR) (CL:COND ((READ-CHAR STR) (READ-DECIMAL-PLACES STR))))))))))))
(CL:DEFUN PRINC (X CL:&OPTIONAL (STR *STANDARD-OUTPUT*)) (CL:BLOCK PRINC (CL:BLOCK NIL (CL:LABELS ((~G929 (~G163) (CL:LABELS ((~G930 (S) (CL:LABELS ((~G931 (~G164) (CL:COND (~G163 ~G164) (T (GET-STREAM-STRING S))))) (~G931 (CL:PROGN (CL:COND ((NUMBER-NOT-CHARACTER? X) (PRINC-NUMBER X S)) ((SYMBOL? X) (STREAM-PRINC (SYMBOL-NAME X) S)) (T (STREAM-PRINC X S))) X))))) (~G930 (DEFAULT-STREAM ~G163))))) (~G929 STR)))))
(CL:DEFUN MAKE-STRING-STREAM NIL (CL:BLOCK MAKE-STRING-STREAM (CL:BLOCK NIL (MAKE-STREAM :USER-DETAIL (MAKE-QUEUE) :FUN-IN (CL:LAMBDA (STR) (QUEUE-POP (STREAM-USER-DETAIL STR))) :FUN-OUT (CL:LAMBDA (X STR) (CL:COND ((STRING? X) (CL:LABELS ((~G932 (~G156) (CL:COND (~G156 (CL:PROGN (CL:LABELS ((~G933 (~G158) (CL:BLOCK NIL (CL:LABELS ((~G934 (~G157) (CL:TAGBODY ~G159 (CL:COND ((== ~G157 ~G158) (CL:RETURN-FROM NIL (CL:PROGN)))) (CL:LABELS ((~G935 (I) (ENQUEUE (STREAM-USER-DETAIL STR) I))) (~G935 (ELT ~G156 ~G157))) (CL:SETQ ~G157 (NUMBER+ 1 ~G157)) (CL:GO ~G159)))) (~G934 0))))) (~G933 (INTEGER (CL:LENGTH ~G156))))))))) (~G932 X))) (T (ENQUEUE (STREAM-USER-DETAIL STR) X)))) :FUN-EOF (CL:LAMBDA (STR) (NOT (QUEUE-LIST (STREAM-USER-DETAIL STR))))))))
(CL:DEFUN READ-STRING (STR) (CL:BLOCK READ-STRING (CL:BLOCK NIL (CL:LABELS ((F NIL (CL:BLOCK NIL (CL:LABELS ((~G936 (!) (CL:COND ((NOT (EQL ! #\")) (CL:PROGN (CL:CONS (CL:COND ((EQL ! #\\) (READ-CHAR STR)) (T !)) (F))))))) (~G936 (READ-CHAR STR)))))) (LIST-STRING (F))))))
(CL:DEFUN READ-CHAR (CL:&OPTIONAL (STR *STANDARD-INPUT*)) (CL:BLOCK READ-CHAR (CL:BLOCK NIL (%TRACK-LOCATION (STREAM-INPUT-LOCATION STR) (READ-CHAR-0 STR)))))
(CL:DEFUN WHITESPACE? (X) (CL:BLOCK WHITESPACE? (CL:BLOCK NIL (CL:COND ((CHARACTER? X) (CL:COND ((< (CL:CHAR-CODE X) 33) (>= (CL:CHAR-CODE X) 0))))))))
(CL:DEFUN SKIP-COMMENT (STR) (CL:BLOCK SKIP-COMMENT (CL:BLOCK NIL (CL:LABELS ((~G937 (!) (CL:COND (! (CL:PROGN (CL:COND ((== (CL:CHAR-CODE !) 10) (SKIP-SPACES STR)) (T (SKIP-COMMENT STR)))))))) (~G937 (READ-CHAR STR))))))
(CL:DEFUN DOT-EXPAND-MAKE-EXPR (WHICH NUM X) (CL:BLOCK DOT-EXPAND-MAKE-EXPR (CL:BLOCK NIL (CL:COND ((< 0 NUM) (CL:CONS WHICH (CL:CONS (DOT-EXPAND-MAKE-EXPR WHICH (-- NUM) X) NIL))) (T X)))))
(CL:DEFUN DOT-EXPAND-TAIL-LENGTH (X CL:&OPTIONAL (NUM 0)) (CL:BLOCK DOT-EXPAND-TAIL-LENGTH (CL:BLOCK NIL (CL:COND ((EQL #\. (CL:CAR (LAST X))) (DOT-EXPAND-TAIL-LENGTH (BUTLAST X) (++ NUM))) (T (VALUES NUM X))))))
(CL:DEFUN DOT-EXPAND-HEAD-LENGTH (X CL:&OPTIONAL (NUM 0)) (CL:BLOCK DOT-EXPAND-HEAD-LENGTH (CL:BLOCK NIL (CL:COND ((EQL #\. (CL:CAR X)) (DOT-EXPAND-HEAD-LENGTH (CL:CDR X) (++ NUM))) (T (VALUES NUM X))))))
(CL:DEFUN POSITION (OBJ SEQ CL:&KEY (START NIL) (END NIL) (FROM-END NIL) (TEST (CL:FUNCTION EQL))) (CL:BLOCK POSITION (CL:BLOCK NIL (CL:LABELS ((~G938 (!) (FIND-IF (CL:LAMBDA (X I) (CL:COND ((FUNCALL TEST X OBJ) (CL:PROGN (CL:SETQ ! I))))) SEQ :START START :END END :FROM-END FROM-END :WITH-INDEX T) !)) (~G938 NIL)))))
(CL:DEFUN %SUBSEQ-SEQUENCE (MAKER SEQ START END) (CL:BLOCK %SUBSEQ-SEQUENCE (CL:BLOCK NIL (CL:COND ((NOT (== START END)) (CL:PROGN (CL:LABELS ((~G939 (!) (CL:COND ((< START !) (CL:PROGN (CL:COND ((>= END !) (CL:PROGN (CL:SETQ END !)))) (CL:LABELS ((~G940 (L) (CL:LABELS ((~G941 (S) (CL:LABELS ((~G942 (~G54) (CL:BLOCK NIL (CL:LABELS ((~G943 (X) (CL:TAGBODY ~G55 (CL:COND ((== X ~G54) (CL:RETURN-FROM NIL (CL:PROGN S)))) (CL:PROGN (=-ELT (ELT SEQ (+ START X)) S X)) (CL:SETQ X (NUMBER+ 1 X)) (CL:GO ~G55)))) (~G943 0))))) (~G942 (INTEGER L))))) (~G941 (FUNCALL MAKER L))))) (~G940 (- END START)))))))) (~G939 (CL:LENGTH SEQ)))))))))
(CL:DEFUN STRING-SUBSEQ (SEQ START CL:&OPTIONAL (END 99999)) (CL:BLOCK STRING-SUBSEQ (CL:BLOCK NIL (CL:COND ((NOT (== START END)) (CL:PROGN (CL:LABELS ((~G944 (!) (CL:COND ((< START !) (CL:PROGN (CL:COND ((>= END !) (CL:PROGN (CL:PROGN (CL:SETQ END !))))) (CL:LABELS ((~G945 (L) (CL:LABELS ((~G946 (S) (CL:LABELS ((~G947 (~G50) (CL:BLOCK NIL (CL:LABELS ((~G948 (X) (CL:TAGBODY ~G51 (CL:COND ((== X ~G50) (CL:RETURN-FROM NIL (CL:PROGN S)))) (CL:PROGN (CL:SETQ S (STRING-CONCAT S (STRING (ELT SEQ (NUMBER+ START X)))))) (CL:SETQ X (NUMBER+ 1 X)) (CL:GO ~G51)))) (~G948 0))))) (~G947 (INTEGER L))))) (~G946 (CL:MAKE-STRING 0))))) (~G945 (- END START)))))))) (~G944 (CL:LENGTH SEQ)))))))))
(CL:DEFUN LIST-SUBSEQ (SEQ START CL:&OPTIONAL (END 999999)) (CL:BLOCK LIST-SUBSEQ (CL:BLOCK NIL (CL:COND ((CL:COND (SEQ (NOT (== START END)))) (CL:PROGN (CL:COND ((> START END) (CL:LABELS ((~G949 (~G52) (CL:PROGN (CL:SETQ START END) (CL:SETQ END ~G52)))) (~G949 START)))) (CL:LABELS ((~G950 (Q) (CL:LABELS ((~G951 (LEN) (CL:LABELS ((~G952 (LST) (CL:BLOCK NIL (CL:PROGN (CL:TAGBODY ~G53 (CL:COND ((NOT (CL:COND (LST (< 0 LEN)))) (CL:RETURN-FROM NIL (CL:PROGN (QUEUE-LIST Q))))) (ENQUEUE Q (CL:CAR LST)) (CL:PROGN (CL:SETQ LEN (- LEN 1))) (CL:PROGN (CL:SETQ LST (CL:CDR LST))) (CL:GO ~G53)))))) (~G952 (NTHCDR START SEQ))))) (~G951 (- END START))))) (~G950 (MAKE-QUEUE)))))))))
(CL:DEFUN %BODY? (X) (CL:BLOCK %BODY? (CL:BLOCK NIL (CL:COND ((CONS? X) (CL:COND ((EQ '%BODY (CL:CAR X)) X)))))))
(CL:DEFUN %REST? (X) (CL:BLOCK %REST? (CL:BLOCK NIL (CL:COND ((CONS? X) (CL:COND ((EQ '%REST (CL:CAR X)) X)))))))
(CL:DEFUN KEYWORD? (X) (CL:BLOCK KEYWORD? (CL:BLOCK NIL (CL:COND ((SYMBOL? X) (EQ *KEYWORD-PACKAGE* (SYMBOL-PACKAGE X)))))))
(CL:DEFUN ARGUMENT-NAME? (X) (CL:BLOCK ARGUMENT-NAME? (CL:BLOCK NIL (ATOM X))))
(CL:DEFUN $ (CL:&REST ARGS) (CL:BLOCK $ (CL:BLOCK NIL (MAKE-SYMBOL (CL:APPLY (CL:FUNCTION +) (DYNAMIC-MAP (CL:FUNCTION STRING) ARGS))))))
(CL:DEFUN ARGDEF-GET-VALUE (DEFS VALS) (CL:BLOCK ARGDEF-GET-VALUE (CL:BLOCK NIL (CL:COND ((CONS? VALS) (CL:CAR VALS)) ((CONS? (CL:CAR DEFS)) (CADR (CL:CAR DEFS))) (T (CL:CAR DEFS))))))
(CL:DEFUN ARGUMENT-KEYWORD? (X) (CL:BLOCK ARGUMENT-KEYWORD? (CL:BLOCK NIL (CL:LABELS ((~G953 (~G5) (CL:COND (~G5 ~G5) (T (CL:LABELS ((~G954 (~G6) (CL:COND (~G6 ~G6) (T (CL:LABELS ((~G955 (~G7) (CL:COND (~G7 ~G7) (T (EQ X 'CL:&KEY))))) (~G955 (EQ X 'CL:&OPTIONAL))))))) (~G954 (EQ X 'CL:&BODY))))))) (~G953 (EQ X 'CL:&REST))))))
(CL:DEFUN ARGDEF-GET-NAME (X) (CL:BLOCK ARGDEF-GET-NAME (CL:BLOCK NIL (CL:COND ((CONS? X) (CL:CAR X)) (T X)))))
(CL:DEFUN MAKE-&KEY-ALIST (DEF) (CL:BLOCK MAKE-&KEY-ALIST (CL:BLOCK NIL (CL:LABELS ((~G956 (KEYS) (CL:LABELS ((MAKE-&KEY-DESCR (_) (CL:BLOCK NIL (CL:COND (_ (CL:PROGN (CL:COND ((ARGUMENT-KEYWORD? (CL:CAR _)) (COPY-DEF-UNTIL-&KEY _)) (T (CL:LABELS ((~G957 (!) (CL:PROGN (CL:SETQ KEYS (CL:CONS (CL:COND ((CONS? !) (CL:CONS (CL:CAR !) (CL:CAR (CL:CDR !)))) (T (CL:CONS ! !))) KEYS))) (MAKE-&KEY-DESCR (CL:CDR _)))) (~G957 (CL:CAR _)))))))))) (COPY-DEF-UNTIL-&KEY (_) (CL:BLOCK NIL (CL:COND (_ (CL:PROGN (CL:COND ((EQ 'CL:&KEY (CL:CAR _)) (MAKE-&KEY-DESCR (CL:CDR _))) (T (CL:CONS (CL:CAR _) (COPY-DEF-UNTIL-&KEY (CL:CDR _))))))))))) (VALUES (COPY-DEF-UNTIL-&KEY DEF) (REVERSE KEYS))))) (~G956 NIL)))))
(CL:DEFUN COPY-HEAD (X SIZE) (CL:BLOCK COPY-HEAD (CL:BLOCK NIL (CL:COND ((CL:COND (X (< 0 SIZE))) (CL:CONS (CL:CAR X) (COPY-HEAD (CL:CDR X) (-- SIZE))))))))
(CL:DEFUN CARLIST (~G114) (CL:BLOCK CARLIST (CL:BLOCK NIL (FILTER (CL:FUNCTION CL:CAR) ~G114))))
(CL:DEFUN ARGUMENT-EXPAND-0 (FUN ADEF ALST APPLY-VALUES? CONCATENATE-SUBLISTS? BREAK-ON-ERRORS?) (CL:BLOCK ARGUMENT-EXPAND-0 (CL:BLOCK NIL (CL:LABELS ((~G958 (~G175) (CL:LABELS ((~G959 (~G176) (CL:LABELS ((~G960 (A) (CL:LABELS ((~G961 (~G177) (CL:LABELS ((~G962 (K) (CL:LABELS ((~G963 (ARGDEFS) (CL:LABELS ((~G964 (KEY-ARGS) (CL:LABELS ((~G965 (NUM) (CL:LABELS ((~G966 (NO-STATIC) (CL:LABELS ((~G967 (REST-ARG) (CL:LABELS ((ERR (MSG ARGS) (CL:COND (BREAK-ON-ERRORS? (CL:RETURN-FROM NIL (ERROR (+ "~L; In argument expansion for ~A: ~A~%" "; Argument definition: ~A~%" "; Given arguments: ~A~%") (SYMBOL-NAME FUN) (CL:APPLY (CL:FUNCTION FORMAT) NIL MSG ARGS) ADEF ALST))) (T 'ERROR))) (EXP-STATIC (DEF VALS) (CL:COND (NO-STATIC (CL:RETURN-FROM NIL (ERR "Static argument definition after ~A." (LIST NO-STATIC))))) (CL:COND (APPLY-VALUES? (CL:COND ((NOT VALS) (CL:RETURN-FROM NIL (ERR "Argument ~A missing." (LIST NUM))))))) (CL:CONS (CL:CONS (ARGDEF-GET-NAME (CL:CAR DEF)) (CL:CAR VALS)) (EXP-MAIN (CL:CDR DEF) (CL:CDR VALS)))) (EXP-OPTIONAL (DEF VALS) (CL:COND ((ARGUMENT-KEYWORD? (CL:CAR DEF)) (CL:RETURN-FROM NIL (ERR "Keyword ~A after &OPTIONAL." (LIST (CL:CAR DEF)))))) (CL:PROGN (CL:SETQ NO-STATIC 'CL:&OPTIONAL)) (CL:CONS (CL:CONS (ARGDEF-GET-NAME (CL:CAR DEF)) (ARGDEF-GET-VALUE DEF VALS)) (CL:COND ((ARGUMENT-KEYWORD? (CL:CAR (CL:CDR DEF))) (EXP-MAIN (CL:CDR DEF) (CL:CDR VALS))) ((CL:CDR DEF) (EXP-OPTIONAL (CL:CDR DEF) (CL:CDR VALS))) (T (EXP-MAIN (CL:CDR DEF) (CL:CDR VALS)))))) (EXP-KEY (DEF VALS) (CL:LABELS ((~G968 (K) (CL:COND (K (CL:LABELS ((~G969 (!) (CL:LABELS ((~G970 (~G174) (CL:COND (~G174 ~G174) (T (CL:RETURN-FROM NIL (ERR "Value of argument ~A missing." (LIST (CL:CAR !)))))))) (~G970 (CL:CDR !))) (CL:RPLACD K (CL:CAR (CL:CDR !))) (EXP-MAIN DEF (CL:CDR (CL:CDR !))))) (~G969 VALS))) (T (EXP-MAIN-NON-KEY DEF VALS))))) (~G968 (ASSOC ($ (CL:CAR VALS)) KEY-ARGS :TEST (CL:FUNCTION EQ))))) (EXP-REST (SYNONYM DEF VALS) (CL:PROGN (CL:SETQ NO-STATIC 'CL:&REST)) (CL:PROGN (CL:SETQ REST-ARG (LIST (CL:CONS (ARGDEF-GET-NAME (CL:CAR (CL:CDR DEF))) (CL:CONS SYNONYM VALS))))) NIL) (EXP-OPTIONAL-REST (DEF VALS) (CL:LABELS ((~G971 (~G172) (CL:COND ((EQ ~G172 'CL:&REST) (EXP-REST '%REST DEF VALS)) ((EQ ~G172 'CL:&BODY) (EXP-REST '%BODY DEF VALS)) ((EQ ~G172 'CL:&OPTIONAL) (EXP-OPTIONAL (CL:CDR DEF) VALS))))) (~G971 (CL:CAR DEF)))) (EXP-SUB (DEF VALS) (CL:COND (NO-STATIC (CL:RETURN-FROM NIL (ERR "Static sublevel argument definition after ~A." (LIST NO-STATIC))))) (CL:COND (APPLY-VALUES? (CL:COND ((ATOM (CL:CAR VALS)) (CL:RETURN-FROM NIL (ERR "Sublist expected for argument ~A." (LIST NUM))))))) (CL:COND (CONCATENATE-SUBLISTS? (NCONC (ARGUMENT-EXPAND-0 FUN (CL:CAR DEF) (CL:CAR VALS) APPLY-VALUES? CONCATENATE-SUBLISTS? BREAK-ON-ERRORS?) (EXP-MAIN (CL:CDR DEF) (CL:CDR VALS)))) (T (CL:CONS (CL:CONS NIL (ARGUMENT-EXPAND-0 FUN (CL:CAR DEF) (CL:CAR VALS) APPLY-VALUES? CONCATENATE-SUBLISTS? BREAK-ON-ERRORS?)) (EXP-MAIN (CL:CDR DEF) (CL:CDR VALS)))))) (EXP-CHECK-TOO-MANY (DEF VALS) (CL:COND ((NOT DEF) (CL:COND (VALS (CL:RETURN-FROM NIL (ERR "Too many arguments. Maximum is ~A, but ~A more given." (LIST (CL:LENGTH ARGDEFS) (CL:LENGTH VALS))))))))) (EXP-MAIN-NON-KEY (DEF VALS) (EXP-CHECK-TOO-MANY DEF VALS) (CL:COND ((ARGUMENT-KEYWORD? (CL:CAR DEF)) (EXP-OPTIONAL-REST DEF VALS)) ((NOT (ARGUMENT-NAME? (CL:CAR DEF))) (EXP-SUB DEF VALS)) (T (EXP-STATIC DEF VALS)))) (EXP-MAIN (DEF VALS) (CL:PROGN (CL:SETQ NUM (NUMBER+ NUM 1))) (CL:COND ((KEYWORD? (CL:CAR VALS)) (EXP-KEY DEF VALS)) (T (CL:LABELS ((~G972 (~G173) (CL:COND (~G173 ~G173) (T (CL:COND (DEF (EXP-MAIN-NON-KEY DEF VALS))))))) (~G972 (EXP-CHECK-TOO-MANY DEF VALS))))))) (CL:LABELS ((~G973 (!) (CL:COND ((EQ ! 'ERROR) !) (T (NCONC ! (NCONC (MAPCAR (CL:LAMBDA (_) (CL:BLOCK NIL (CL:CONS (CL:CAR _) (CL:CONS '%KEY (CL:CDR _))))) KEY-ARGS) REST-ARG)))))) (~G973 (EXP-MAIN ARGDEFS ALST)))))) (~G967 NIL)))) (~G966 NIL)))) (~G965 0)))) (~G964 K)))) (~G963 A)))) (~G962 (CL:CAR ~G177))))) (~G961 (CL:CDR ~G176))))) (~G960 (CL:CAR ~G176))))) (~G959 (CL:CDR ~G175))))) (~G958 (MAKE-&KEY-ALIST ADEF))))))
(CL:DEFUN %KEY? (X) (CL:BLOCK %KEY? (CL:BLOCK NIL (CL:COND ((CONS? X) (CL:COND ((EQ '%KEY (CL:CAR X)) X)))))))
(CL:DEFUN %REST-OR-%BODY? (X) (CL:BLOCK %REST-OR-%BODY? (CL:BLOCK NIL (CL:LABELS ((~G974 (~G169) (CL:COND (~G169 ~G169) (T (%BODY? X))))) (~G974 (%REST? X))))))
(CL:DEFUN %MAP-ARGS (LISTS) (CL:BLOCK %MAP-ARGS (CL:BLOCK NIL (CL:BLOCK NIL (CL:LABELS ((~G975 (I) (CL:LABELS ((~G976 (NL) (CL:TAGBODY START (CL:COND ((NOT I) (CL:RETURN-FROM NIL (QUEUE-LIST NL)))) (CL:COND ((NOT (CL:CAR I)) (CL:RETURN-FROM NIL NIL))) (ENQUEUE NL (CL:CAR (CL:CAR I))) (CL:RPLACA I (CL:CDR (CL:CAR I))) (CL:SETQ I (CL:CDR I)) (CL:GO START)))) (~G976 (MAKE-QUEUE))))) (~G975 LISTS))))))
(CL:DEFUN ++ (X) (CL:BLOCK ++ (CL:BLOCK NIL (NUMBER+ X 1))))
(CL:DEFUN SUBSEQ (SEQ START CL:&OPTIONAL (END 99999)) (CL:BLOCK SUBSEQ (CL:BLOCK NIL (CL:COND (SEQ (CL:PROGN (CL:COND ((> START END) (CL:LABELS ((~G977 (~G56) (CL:PROGN (CL:SETQ START END) (CL:SETQ END ~G56)))) (~G977 START)))) (CL:LABELS ((~G978 (~G57) (CL:COND ((LIST? ~G57) (LIST-SUBSEQ SEQ START END)) ((STRING? ~G57) (STRING-SUBSEQ SEQ START END)) ((ARRAY? ~G57) (%SUBSEQ-SEQUENCE (CL:FUNCTION MAKE-ARRAY) SEQ START END)) (T (ERROR "Type of ~A not supported." SEQ))))) (~G978 SEQ))))))))
(CL:DEFUN DOT-POSITION (X) (CL:BLOCK DOT-POSITION (CL:BLOCK NIL (POSITION #\. X :TEST (CL:FUNCTION CHARACTER==)))))
(CL:DEFUN DOT-EXPAND-LIST (X) (CL:BLOCK DOT-EXPAND-LIST (CL:BLOCK NIL (CL:LABELS ((~G979 (~G104) (CL:LABELS ((~G980 (~G105) (CL:LABELS ((~G981 (NUM-CDRS) (CL:LABELS ((~G982 (~G106) (CL:LABELS ((~G983 (WITHOUT-START) (CL:LABELS ((~G984 (~G108) (CL:LABELS ((~G985 (~G109) (CL:LABELS ((~G986 (NUM-CARS) (CL:LABELS ((~G987 (~G110) (CL:LABELS ((~G988 (WITHOUT-END) (DOT-EXPAND-MAKE-EXPR 'CL:CAR NUM-CARS (DOT-EXPAND-MAKE-EXPR 'CL:CDR NUM-CDRS (DOT-EXPAND (MAKE-SYMBOL (LIST-STRING WITHOUT-END))))))) (~G988 (CL:CAR ~G110))))) (~G987 (CL:CDR ~G109))))) (~G986 (CL:CAR ~G109))))) (~G985 (CL:CDR ~G108))))) (~G984 (DOT-EXPAND-TAIL-LENGTH WITHOUT-START))))) (~G983 (CL:CAR ~G106))))) (~G982 (CL:CDR ~G105))))) (~G981 (CL:CAR ~G105))))) (~G980 (CL:CDR ~G104))))) (~G979 (DOT-EXPAND-HEAD-LENGTH X))))))
(CL:DEFUN HAS-DOT-NOTATION? (X) (CL:BLOCK HAS-DOT-NOTATION? (CL:BLOCK NIL (CL:LABELS ((~G989 (!) (CL:LABELS ((~G990 (~G113) (CL:COND (~G113 ~G113) (T (EQL #\. (ELT ! (-- (CL:LENGTH !)))))))) (~G990 (EQL #\. (ELT ! 0)))))) (~G989 (SYMBOL-NAME X))))))
(CL:DEFUN NO-DOT-NOTATION? (X) (CL:BLOCK NO-DOT-NOTATION? (CL:BLOCK NIL (CL:LABELS ((~G991 (SL) (CL:LABELS ((~G992 (L) (CL:LABELS ((~G993 (~G112) (CL:COND (~G112 ~G112) (T (NOT (DOT-POSITION SL)))))) (~G993 (== 1 L))))) (~G992 (CL:LENGTH SL))))) (~G991 (STRING-LIST (SYMBOL-NAME X)))))))
(CL:DEFUN SKIP-SPACES (STR) (CL:BLOCK SKIP-SPACES (CL:BLOCK NIL (CL:COND ((EQL #\; (PEEK-CHAR STR)) (CL:PROGN (SKIP-COMMENT STR)))) (CL:COND ((WHITESPACE? (PEEK-CHAR STR)) (CL:PROGN (READ-CHAR STR) (SKIP-SPACES STR)))))))
(CL:DEFUN READ-ATOM (STR TOKEN PKG SYM) (CL:BLOCK READ-ATOM (CL:BLOCK NIL (CL:LABELS ((~G994 (~G262) (CL:COND ((EQ ~G262 :DBLQUOTE) (READ-STRING STR)) ((EQ ~G262 :CHAR) (READ-CHAR STR)) ((EQ ~G262 :NUMBER) (CL:LABELS ((~G995 (S) (PRINC SYM S) (READ-NUMBER S))) (~G995 (MAKE-STRING-STREAM)))) ((EQ ~G262 :HEXNUM) (READ-HEX STR)) ((EQ ~G262 :FUNCTION) (CL:CONS 'CL:FUNCTION (CL:CONS (READ-EXPR STR) NIL))) ((EQ ~G262 :SYMBOL) (READ-SYMBOL-OR-SLOT-VALUE PKG SYM)) (T (CL:COND ((%READ-CLOSING-PARENS? TOKEN) (ERROR "Unexpected closing ~A." (CL:LABELS ((~G996 (~G263) (CL:COND ((EQL ~G263 :PARENTHESIS-CLOSE) "parenthesis") ((EQL ~G263 :BRACE-CLOSE) "brace") ((EQL ~G263 :BRACKET-CLOSE) "bracket")))) (~G996 TOKEN)))) (T (ERROR "Closing bracket missing."))))))) (~G994 TOKEN)))))
(CL:DEFUN READ-QUOTE (STR TOKEN) (CL:BLOCK READ-QUOTE (CL:BLOCK NIL (LIST (MAKE-SYMBOL (SYMBOL-NAME TOKEN)) (READ-EXPR STR)))))
(CL:DEFUN TOKEN-IS-QUOTE? (X) (CL:BLOCK TOKEN-IS-QUOTE? (CL:BLOCK NIL (CL:LABELS ((~G997 (~G232) (CL:COND (~G232 ~G232) (T (CL:LABELS ((~G998 (~G233) (CL:COND (~G233 ~G233) (T (CL:LABELS ((~G999 (~G234) (CL:COND (~G234 ~G234) (T (CL:LABELS ((~G1000 (~G235) (CL:COND (~G235 ~G235) (T (EQL X :ACCENT-CIRCONFLEX))))) (~G1000 (EQL X :QUASIQUOTE-SPLICE))))))) (~G999 (EQL X :QUASIQUOTE))))))) (~G998 (EQL X :BACKQUOTE))))))) (~G997 (EQL X :QUOTE))))))
(CL:DEFUN READ-CONS-SLOT (STR) (CL:BLOCK READ-CONS-SLOT (CL:BLOCK NIL (CL:LABELS ((~G1001 (!) (CL:COND ((EQL #\. (PEEK-CHAR STR)) (CL:PROGN (READ-CHAR STR) (CL:LABELS ((~G1002 (~G281) (CL:LABELS ((~G1003 (~G282) (CL:LABELS ((~G1004 (TOKEN) (CL:LABELS ((~G1005 (~G283) (CL:LABELS ((~G1006 (PKG) (CL:LABELS ((~G1007 (~G284) (CL:LABELS ((~G1008 (SYM) (READ-SLOT-VALUE (LIST ! SYM)))) (~G1008 (CL:CAR ~G284))))) (~G1007 (CL:CDR ~G283))))) (~G1006 (CL:CAR ~G283))))) (~G1005 (CL:CDR ~G282))))) (~G1004 (CL:CAR ~G282))))) (~G1003 (CL:CDR ~G281))))) (~G1002 (READ-TOKEN STR))))) (T !)))) (~G1001 (READ-CONS STR))))))
(CL:DEFUN READ-TOKEN (STR) (CL:BLOCK READ-TOKEN (CL:BLOCK NIL (CL:LABELS ((~G1009 (!) (CL:COND (! (CL:PROGN (CL:LABELS ((~G1010 (~G258) (CL:LABELS ((~G1011 (~G259) (CL:LABELS ((~G1012 (PKG) (CL:LABELS ((~G1013 (~G260) (CL:LABELS ((~G1014 (SYM) (VALUES (CL:COND ((CL:COND (SYM (CL:COND ((NOT (CL:CDR SYM)) (EQL #\. (CL:CAR SYM)))))) :DOT) (T (CL:COND (SYM (CL:COND ((LIST-NUMBER? SYM) :NUMBER) (T :SYMBOL))) (T (CL:LABELS ((~G1015 (~G256) (CL:COND ((EQL ~G256 #\() :PARENTHESIS-OPEN) ((EQL ~G256 #\)) :PARENTHESIS-CLOSE) ((EQL ~G256 #\[) :BRACKET-OPEN) ((EQL ~G256 #\]) :BRACKET-CLOSE) ((EQL ~G256 #\{) :BRACE-OPEN) ((EQL ~G256 #\}) :BRACE-CLOSE) ((EQL ~G256 #\') :QUOTE) ((EQL ~G256 #\`) :BACKQUOTE) ((EQL ~G256 #\^) :ACCENT-CIRCONFLEX) ((EQL ~G256 #\") :DBLQUOTE) ((EQL ~G256 #\,) (CL:COND ((EQL #\@ (PEEK-CHAR STR)) (CL:COND ((READ-CHAR STR) :QUASIQUOTE-SPLICE))) (T :QUASIQUOTE))) ((EQL ~G256 #\#) (CL:LABELS ((~G1016 (~G257) (CL:COND ((EQL ~G257 #\\) :CHAR) ((EQL ~G257 #\x) :HEXNUM) ((EQL ~G257 #\') :FUNCTION) ((EQL ~G257 #\|) (READ-COMMENT-BLOCK STR)) (T (ERROR "Invalid character after '#'."))))) (~G1016 (READ-CHAR STR)))) ((EQL ~G256 -1) :EOF)))) (~G1015 (READ-CHAR STR))))))) PKG (LIST-STRING SYM)))) (~G1014 (CL:CAR ~G260))))) (~G1013 (CL:CDR ~G259))))) (~G1012 (CL:CAR ~G259))))) (~G1011 (CL:CDR ~G258))))) (~G1010 !))))))) (~G1009 (READ-SYMBOL-AND-PACKAGE STR))))))
(CL:DEFUN =-STREAM-LAST-CHAR (VAL ARR) (CL:BLOCK =-STREAM-LAST-CHAR (CL:BLOCK NIL (CL:PROGN (=-AREF VAL ARR 6)))))
(CL:DEFUN STREAM-FUN-IN (ARR) (CL:BLOCK STREAM-FUN-IN (CL:BLOCK NIL (CL:AREF ARR 3))))
(CL:DEFUN READ-PEEKED-CHAR (STR) (CL:BLOCK READ-PEEKED-CHAR (CL:BLOCK NIL (CL:LABELS ((~G1017 (!) (CL:COND (! (CL:PROGN (CL:PROGN (=-STREAM-PEEKED-CHAR NIL STR)) !))))) (~G1017 (STREAM-PEEKED-CHAR STR))))))
(CL:DEFUN TERPRI (CL:&OPTIONAL (STR *STANDARD-OUTPUT*)) (CL:BLOCK TERPRI (CL:BLOCK NIL (CL:LABELS ((~G1018 (~G165) (CL:LABELS ((~G1019 (S) (CL:LABELS ((~G1020 (~G166) (CL:COND (~G165 ~G166) (T (GET-STREAM-STRING S))))) (~G1020 (CL:PROGN (STREAM-PRINC (CODE-CHAR 10) S) (FORCE-OUTPUT S) NIL))))) (~G1019 (DEFAULT-STREAM ~G165))))) (~G1018 STR)))))
(CL:DEFUN FRESH-LINE? (CL:&OPTIONAL (STR *STANDARD-OUTPUT*)) (CL:BLOCK FRESH-LINE? (CL:BLOCK NIL (CL:LABELS ((~G1021 (!) (CL:COND ((STREAM-LOCATION-TRACK? !) (== 1 (STREAM-LOCATION-COLUMN !)))))) (~G1021 (STREAM-OUTPUT-LOCATION STR))))))
(CL:DEFUN GET-STREAM-STRING (STR) (CL:BLOCK GET-STREAM-STRING (CL:BLOCK NIL (CL:LABELS ((~G1022 (~G160) (CL:PROGN (=-STREAM-USER-DETAIL (MAKE-QUEUE) STR)) ~G160)) (~G1022 (QUEUE-STRING (STREAM-USER-DETAIL STR)))))))
(CL:DEFUN %FORMAT (INF TXT ARGS) (CL:BLOCK %FORMAT (CL:BLOCK NIL (CL:COND (TXT (CL:PROGN (CL:LABELS ((~G1023 (!) (CL:COND ((EQL (CL:CAR TXT) #\\) (CL:PROGN (PRINC (CL:CAR TXT) !) (PRINC (CL:CAR (CL:CDR TXT)) !) (%FORMAT INF (CL:CDR (CL:CDR TXT)) ARGS))) ((EQL (CL:CAR TXT) #\~) (%FORMAT-DIRECTIVE INF (CL:CDR TXT) ARGS)) (T (CL:PROGN (PRINC (CL:CAR TXT) (FORMAT-INFO-STREAM INF)) (%FORMAT INF (CL:CDR TXT) ARGS)))))) (~G1023 (FORMAT-INFO-STREAM INF)))))))))
(CL:DEFUN MAKE-FORMAT-INFO (CL:&KEY (STREAM 'STREAM) (TEXT 'TEXT) (ARGS 'ARGS) (PROCESSED-ARGS 'PROCESSED-ARGS)) (CL:BLOCK MAKE-FORMAT-INFO (CL:BLOCK NIL (CL:LABELS ((~G1024 (~G303) (CL:PROGN (=-AREF 'STRUCT ~G303 0) (=-AREF 'FORMAT-INFO ~G303 1)) (CL:PROGN (=-AREF (CL:COND ((EQ STREAM 'STREAM) NIL) (T STREAM)) ~G303 2)) (CL:PROGN (=-AREF (CL:COND ((EQ TEXT 'TEXT) NIL) (T TEXT)) ~G303 3)) (CL:PROGN (=-AREF (CL:COND ((EQ ARGS 'ARGS) NIL) (T ARGS)) ~G303 4)) (CL:PROGN (=-AREF (CL:COND ((EQ PROCESSED-ARGS 'PROCESSED-ARGS) 0) (T PROCESSED-ARGS)) ~G303 5)) ~G303)) (~G1024 (MAKE-ARRAY 6))))))
(CL:DEFUN DEFAULT-STREAM (X) (CL:BLOCK DEFAULT-STREAM (CL:BLOCK NIL (CL:LABELS ((~G1025 (~G154) (CL:COND ((EQL ~G154 NIL) (MAKE-STRING-STREAM)) ((EQL ~G154 T) *STANDARD-OUTPUT*) (T X)))) (~G1025 X)))))
(CL:DEFUN NTHCDR (IDX X) (CL:BLOCK NTHCDR (CL:BLOCK NIL (CL:COND (X (CL:COND ((ZERO? IDX) X) (T (NTHCDR (-- IDX) (CL:CDR X)))))))))
(CL:DEFUN -- (X) (CL:BLOCK -- (CL:BLOCK NIL (NUMBER- X 1))))
(CL:DEFUN NCONC (CL:&REST LSTS) (CL:BLOCK NCONC (CL:BLOCK NIL (%NCONC-0 LSTS))))
(CL:DEFUN ENQUEUE (X CL:&REST VALS) (CL:BLOCK ENQUEUE (CL:BLOCK NIL (CL:RPLACA X (CL:CDR (CL:RPLACD (CL:LABELS ((~G1026 (~G8) (CL:COND (~G8 ~G8) (T X)))) (~G1026 (CL:CAR X))) VALS))) VALS)))
(CL:DEFUN QUEUE-LIST (X) (CL:BLOCK QUEUE-LIST (CL:BLOCK NIL (CL:CDR X))))
(CL:DEFUN MAKE-QUEUE NIL (CL:BLOCK MAKE-QUEUE (CL:BLOCK NIL (CL:CONS NIL NIL))))
(CL:DEFUN MAKE-STREAM (CL:&KEY (HANDLE 'HANDLE) (FUN-IN 'FUN-IN) (FUN-OUT 'FUN-OUT) (FUN-EOF 'FUN-EOF) (LAST-CHAR 'LAST-CHAR) (PEEKED-CHAR 'PEEKED-CHAR) (INPUT-LOCATION 'INPUT-LOCATION) (OUTPUT-LOCATION 'OUTPUT-LOCATION) (USER-DETAIL 'USER-DETAIL)) (CL:BLOCK MAKE-STREAM (CL:BLOCK NIL (CL:LABELS ((~G1027 (~G144) (CL:PROGN (=-AREF 'STRUCT ~G144 0) (=-AREF 'STREAM ~G144 1)) (CL:PROGN (=-AREF (CL:COND ((EQ HANDLE 'HANDLE) NIL) (T HANDLE)) ~G144 2)) (CL:PROGN (=-AREF (CL:COND ((EQ FUN-IN 'FUN-IN) NIL) (T FUN-IN)) ~G144 3)) (CL:PROGN (=-AREF (CL:COND ((EQ FUN-OUT 'FUN-OUT) NIL) (T FUN-OUT)) ~G144 4)) (CL:PROGN (=-AREF (CL:COND ((EQ FUN-EOF 'FUN-EOF) NIL) (T FUN-EOF)) ~G144 5)) (CL:PROGN (=-AREF (CL:COND ((EQ LAST-CHAR 'LAST-CHAR) NIL) (T LAST-CHAR)) ~G144 6)) (CL:PROGN (=-AREF (CL:COND ((EQ PEEKED-CHAR 'PEEKED-CHAR) NIL) (T PEEKED-CHAR)) ~G144 7)) (CL:PROGN (=-AREF (CL:COND ((EQ INPUT-LOCATION 'INPUT-LOCATION) (MAKE-STREAM-LOCATION)) (T INPUT-LOCATION)) ~G144 8)) (CL:PROGN (=-AREF (CL:COND ((EQ OUTPUT-LOCATION 'OUTPUT-LOCATION) (MAKE-STREAM-LOCATION :TRACK? NIL)) (T OUTPUT-LOCATION)) ~G144 9)) (CL:PROGN (=-AREF (CL:COND ((EQ USER-DETAIL 'USER-DETAIL) NIL) (T USER-DETAIL)) ~G144 10)) ~G144)) (~G1027 (MAKE-ARRAY 11))))))
(CL:DEFUN %MACROEXPAND-BACKQUOTE (X) (CL:COND ((ATOM X) X) ((ATOM (CL:CAR X)) (CL:CONS (CL:CAR X) (%MACROEXPAND-BACKQUOTE (CL:CDR X)))) ((EQ (CL:CAR (CL:CAR X)) 'QUASIQUOTE) (CL:CONS (CL:CONS 'QUASIQUOTE (%MACROEXPAND (CL:CDR (CL:CAR X)))) (%MACROEXPAND-BACKQUOTE (CL:CDR X)))) ((EQ (CL:CAR (CL:CAR X)) 'QUASIQUOTE-SPLICE) (CL:CONS (CL:CONS 'QUASIQUOTE-SPLICE (%MACROEXPAND (CL:CDR (CL:CAR X)))) (%MACROEXPAND-BACKQUOTE (CL:CDR X)))) (T (CL:CONS (%MACROEXPAND-BACKQUOTE (CL:CAR X)) (%MACROEXPAND-BACKQUOTE (CL:CDR X))))))
(CL:DEFUN MAKE-STANDARD-STREAM NIL (CL:BLOCK MAKE-STANDARD-STREAM (CL:BLOCK NIL (MAKE-STREAM :FUN-IN (CL:LAMBDA (_) (CL:BLOCK NIL (%READ-CHAR NIL))) :FUN-OUT (CL:LAMBDA (C STR) (%PRINC C NIL)) :FUN-EOF (CL:LAMBDA (_) (CL:BLOCK NIL (%FEOF NIL)))))))
(CL:DEFUN GENSYM-NUMBER NIL (CL:SETQ *GENSYM-COUNTER* (+ 1 *GENSYM-COUNTER*)))
(CL:DEFUN LIST-ARRAY (X) (CL:BLOCK LIST-ARRAY (CL:BLOCK NIL (CL:LABELS ((~G1028 (A) (CL:LABELS ((~G1029 (IDX) (CL:BLOCK NIL (CL:LABELS ((~G1030 (~G131) (CL:LABELS ((~G1031 (I) (CL:TAGBODY ~G129 (CL:COND ((NOT ~G131) (CL:GO ~G130))) (CL:SETQ I (CL:CAR ~G131)) (CL:PROGN (=-AREF I A IDX)) (CL:PROGN (CL:SETQ IDX (NUMBER+ IDX 1))) (CL:SETQ ~G131 (CL:CDR ~G131)) (CL:GO ~G129) ~G130 (CL:RETURN-FROM NIL (CL:PROGN A))))) (~G1031 NIL)))) (~G1030 X))))) (~G1029 0)))) (~G1028 (MAKE-ARRAY (CL:LENGTH X)))))))
(CL:DEFUN ARRAY-LIST (X) (CL:BLOCK ARRAY-LIST (CL:BLOCK NIL (CL:LABELS ((~G1032 (RESULT) (CL:LABELS ((~G1033 (~G38) (CL:BLOCK NIL (CL:LABELS ((~G1034 (!) (CL:TAGBODY ~G39 (CL:COND ((== ! ~G38) (CL:RETURN-FROM NIL (CL:PROGN (QUEUE-LIST RESULT))))) (ENQUEUE RESULT (CL:AREF X !)) (CL:SETQ ! (NUMBER+ 1 !)) (CL:GO ~G39)))) (~G1034 0))))) (~G1033 (INTEGER (CL:LENGTH X)))))) (~G1032 (MAKE-QUEUE))))))
(CL:DEFUN MAPCAN (FUNC CL:&REST LISTS) (CL:BLOCK MAPCAN (CL:BLOCK NIL (CL:APPLY (CL:FUNCTION NCONC) (CL:APPLY (CL:FUNCTION MAPCAR) FUNC LISTS)))))
(CL:DEFUN STRING-LIST (X) (CL:BLOCK STRING-LIST (CL:BLOCK NIL (CL:LABELS ((~G1035 (L) (CL:LABELS ((~G1036 (S) (CL:BLOCK NIL (CL:LABELS ((~G1037 (I) (CL:TAGBODY ~G86 (CL:COND ((< I 0) (CL:RETURN-FROM NIL (CL:PROGN)))) (CL:PROGN (CL:SETQ S (CL:PROGN (CL:SETQ S (CL:CONS (ELT X I) S))))) (CL:SETQ I (-- I)) (CL:GO ~G86)))) (~G1037 (-- L)))) S)) (~G1036 NIL)))) (~G1035 (CL:LENGTH X))))))
(CL:DEFUN BACKQUOTE? (X) (CL:BLOCK BACKQUOTE? (CL:BLOCK NIL (CL:COND ((CONS? X) (CL:COND ((EQ 'BACKQUOTE (CL:CAR X)) X)))))))
(CL:DEFUN QUOTE? (X) (CL:BLOCK QUOTE? (CL:BLOCK NIL (CL:COND ((CONS? X) (CL:COND ((EQ 'CL:QUOTE (CL:CAR X)) X)))))))
(CL:DEFUN CONSTANT-LITERAL? (X) (CL:BLOCK CONSTANT-LITERAL? (CL:BLOCK NIL (CL:LABELS ((~G1038 (~G392) (CL:COND (~G392 ~G392) (T (CL:LABELS ((~G1039 (~G393) (CL:COND (~G393 ~G393) (T (CL:LABELS ((~G1040 (~G394) (CL:COND (~G394 ~G394) (T (CL:LABELS ((~G1041 (~G395) (CL:COND (~G395 ~G395) (T (CL:LABELS ((~G1042 (~G396) (CL:COND (~G396 ~G396) (T (CL:LABELS ((~G1043 (~G397) (CL:COND (~G397 ~G397) (T (HASH-TABLE? X))))) (~G1043 (ARRAY? X))))))) (~G1042 (STRING? X))))))) (~G1041 (CHARACTER? X))))))) (~G1040 (NUMBER? X))))))) (~G1039 (EQ T X))))))) (~G1038 (NOT X))))))
(CL:DEFUN QUASIQUOTE-SPLICE? (X) (CL:BLOCK QUASIQUOTE-SPLICE? (CL:BLOCK NIL (CL:COND ((CONS? X) (CL:COND ((EQ 'QUASIQUOTE-SPLICE (CL:CAR X)) X)))))))
(CL:DEFUN QUASIQUOTE? (X) (CL:BLOCK QUASIQUOTE? (CL:BLOCK NIL (CL:COND ((CONS? X) (CL:COND ((EQ 'QUASIQUOTE (CL:CAR X)) X)))))))
(CL:DEFUN NTH (I X) (CL:BLOCK NTH (CL:BLOCK NIL (CL:CAR (NTHCDR I X)))))
(CL:DEFUN FORMAT (STR TXT CL:&REST ARGS) (CL:BLOCK FORMAT (CL:BLOCK NIL (CL:LABELS ((~G1044 (~G305) (CL:LABELS ((~G1045 (NSTR) (CL:LABELS ((~G1046 (~G306) (CL:COND (~G305 ~G306) (T (GET-STREAM-STRING NSTR))))) (~G1046 (CL:PROGN (%FORMAT (MAKE-FORMAT-INFO :STREAM NSTR :TEXT TXT :ARGS ARGS) (STRING-LIST TXT) ARGS)))))) (~G1045 (DEFAULT-STREAM ~G305))))) (~G1044 STR)))))
(CL:DEFUN FRESH-LINE (CL:&OPTIONAL (STR *STANDARD-OUTPUT*)) (CL:BLOCK FRESH-LINE (CL:BLOCK NIL (CL:LABELS ((~G1047 (~G167) (CL:LABELS ((~G1048 (S) (CL:LABELS ((~G1049 (~G168) (CL:COND (~G167 ~G168) (T (GET-STREAM-STRING S))))) (~G1049 (CL:PROGN (CL:COND ((NOT (FRESH-LINE? S)) (CL:PROGN (TERPRI S) T)))))))) (~G1048 (DEFAULT-STREAM ~G167))))) (~G1047 STR)))))
(CL:DEFUN =-STREAM-PEEKED-CHAR (VAL ARR) (CL:BLOCK =-STREAM-PEEKED-CHAR (CL:BLOCK NIL (CL:PROGN (=-AREF VAL ARR 7)))))
(CL:DEFUN READ-CHAR-0 (STR) (CL:BLOCK READ-CHAR-0 (CL:BLOCK NIL (CL:LABELS ((~G1050 (~G220) (CL:COND (~G220 ~G220) (T (CL:PROGN (=-STREAM-LAST-CHAR (FUNCALL (STREAM-FUN-IN STR) STR) STR)))))) (~G1050 (READ-PEEKED-CHAR STR))))))
(CL:DEFUN STREAM-PEEKED-CHAR (ARR) (CL:BLOCK STREAM-PEEKED-CHAR (CL:BLOCK NIL (CL:AREF ARR 7))))
(CL:DEFUN READ-EXPR (STR) (CL:BLOCK READ-EXPR (CL:BLOCK NIL (CL:LABELS ((~G1051 (~G287) (CL:LABELS ((~G1052 (~G288) (CL:LABELS ((~G1053 (TOKEN) (CL:LABELS ((~G1054 (~G289) (CL:LABELS ((~G1055 (PKG) (CL:LABELS ((~G1056 (~G290) (CL:LABELS ((~G1057 (SYM) (CL:LABELS ((~G1058 (~G286) (CL:COND ((EQL ~G286 NIL) NIL) ((EQL ~G286 :EOF) NIL) ((EQL ~G286 :PARENTHESIS-OPEN) (READ-CONS-SLOT STR)) ((EQL ~G286 :BRACKET-OPEN) (CL:CONS 'BRACKETS (READ-CONS-SLOT STR))) ((EQL ~G286 :BRACE-OPEN) (CL:CONS 'BRACES (READ-CONS-SLOT STR))) (T (CL:COND ((TOKEN-IS-QUOTE? TOKEN) (READ-QUOTE STR TOKEN)) (T (READ-ATOM STR TOKEN PKG SYM))))))) (~G1058 TOKEN)))) (~G1057 (CL:CAR ~G290))))) (~G1056 (CL:CDR ~G289))))) (~G1055 (CL:CAR ~G289))))) (~G1054 (CL:CDR ~G288))))) (~G1053 (CL:CAR ~G288))))) (~G1052 (CL:CDR ~G287))))) (~G1051 (READ-TOKEN STR))))))
(CL:DEFUN SEEK-CHAR (STR) (CL:BLOCK SEEK-CHAR (CL:BLOCK NIL (SKIP-SPACES STR) (PEEK-CHAR STR))))
(CL:DEFUN DOT-EXPAND-CONV (X) (CL:BLOCK DOT-EXPAND-CONV (CL:BLOCK NIL (CL:COND ((NO-DOT-NOTATION? X) X) (T (CL:LABELS ((~G1059 (SL) (CL:COND ((HAS-DOT-NOTATION? X) (DOT-EXPAND-LIST SL)) (T (CL:LABELS ((~G1060 (P) (CL:CONS '%SLOT-VALUE (CL:CONS (MAKE-SYMBOL (LIST-STRING (SUBSEQ SL 0 P))) (CL:CONS (DOT-EXPAND-CONV (MAKE-SYMBOL (LIST-STRING (SUBSEQ SL (++ P))))) NIL))))) (~G1060 (DOT-POSITION SL))))))) (~G1059 (STRING-LIST (SYMBOL-NAME X)))))))))
(CL:DEFUN %QUASIQUOTE-EXPAND (X) (CL:COND ((ATOM X) X) ((ATOM (CL:CAR X)) (CL:CONS (CL:CAR X) (%QUASIQUOTE-EXPAND (CL:CDR X)))) ((EQ (CL:CAR (CL:CAR X)) 'CL:QUOTE) (CL:CONS (CL:CAR X) (%QUASIQUOTE-EXPAND (CL:CDR X)))) ((EQ (CL:CAR (CL:CAR X)) 'BACKQUOTE) (CL:CONS (CL:CAR X) (%QUASIQUOTE-EXPAND (CL:CDR X)))) ((EQ (CL:CAR (CL:CAR X)) 'QUASIQUOTE) (CL:CONS (EVAL (MACROEXPAND (CL:CAR (CL:CDR (CL:CAR X))))) (%QUASIQUOTE-EXPAND (CL:CDR X)))) ((EQ (CL:CAR (CL:CAR X)) 'QUASIQUOTE-SPLICE) (APPEND (EVAL (MACROEXPAND (CL:CAR (CL:CDR (CL:CAR X))))) (%QUASIQUOTE-EXPAND (CL:CDR X)))) (T (CL:CONS (%QUASIQUOTE-EXPAND (CL:CAR X)) (%QUASIQUOTE-EXPAND (CL:CDR X))))))
(CL:DEFUN MAKE-STREAM-STREAM (CL:&KEY STREAM (INPUT-LOCATION (MAKE-STREAM-LOCATION)) (OUTPUT-LOCATION (MAKE-STREAM-LOCATION))) (CL:BLOCK MAKE-STREAM-STREAM (CL:BLOCK NIL (MAKE-STREAM :HANDLE STREAM :INPUT-LOCATION INPUT-LOCATION :OUTPUT-LOCATION OUTPUT-LOCATION :FUN-IN (CL:LAMBDA (_) (CL:BLOCK NIL (%READ-CHAR (STREAM-HANDLE _)))) :FUN-OUT (CL:LAMBDA (C STR) (%PRINC C (STREAM-HANDLE STR))) :FUN-EOF (CL:LAMBDA (_) (CL:BLOCK NIL (%FEOF (STREAM-HANDLE _))))))))
(CL:DEFUN MAKE-STREAM-LOCATION (CL:&KEY (TRACK? 'TRACK?) (ID 'ID) (LINE 'LINE) (COLUMN 'COLUMN) (TABSIZE 'TABSIZE)) (CL:BLOCK MAKE-STREAM-LOCATION (CL:BLOCK NIL (CL:LABELS ((~G1061 (~G143) (CL:PROGN (=-AREF 'STRUCT ~G143 0) (=-AREF 'STREAM-LOCATION ~G143 1)) (CL:PROGN (=-AREF (CL:COND ((EQ TRACK? 'TRACK?) T) (T TRACK?)) ~G143 2)) (CL:PROGN (=-AREF (CL:COND ((EQ ID 'ID) NIL) (T ID)) ~G143 3)) (CL:PROGN (=-AREF (CL:COND ((EQ LINE 'LINE) 1) (T LINE)) ~G143 4)) (CL:PROGN (=-AREF (CL:COND ((EQ COLUMN 'COLUMN) 1) (T COLUMN)) ~G143 5)) (CL:PROGN (=-AREF (CL:COND ((EQ TABSIZE 'TABSIZE) *DEFAULT-STREAM-TABSIZE*) (T TABSIZE)) ~G143 6)) ~G143)) (~G1061 (MAKE-ARRAY 7))))))
(CL:DEFUN %FOPEN-DIRECTION (DIRECTION) (CL:BLOCK %FOPEN-DIRECTION (CL:BLOCK NIL (CL:LABELS ((~G1062 (~G155) (CL:COND ((EQL ~G155 'INPUT) "r") ((EQL ~G155 'OUTPUT) "w") ((EQL ~G155 'APPEND) "a") (T (ERROR ":DIRECTION isn't specified."))))) (~G1062 DIRECTION)))))
(CL:DEFUN STREAM-HANDLE (ARR) (CL:BLOCK STREAM-HANDLE (CL:BLOCK NIL (CL:AREF ARR 2))))
(CL:DEFUN FUNCALL (FUN CL:&REST X) (CL:APPLY FUN X))
(CL:DEFUN MAPCAR (FUNC CL:&REST LISTS) (CL:BLOCK MAPCAR (CL:BLOCK NIL (CL:LABELS ((~G1063 (ARGS) (CL:COND (ARGS (CL:CONS (CL:APPLY FUNC ARGS) (CL:APPLY (CL:FUNCTION MAPCAR) FUNC LISTS)))))) (~G1063 (%MAP-ARGS LISTS))))))
(CL:DEFUN CDRLIST (~G115) (CL:BLOCK CDRLIST (CL:BLOCK NIL (FILTER (CL:FUNCTION CL:CDR) ~G115))))
(CL:DEFUN ARGUMENT-SYNONYM? (X) (CL:BLOCK ARGUMENT-SYNONYM? (CL:BLOCK NIL (CL:LABELS ((~G1064 (~G170) (CL:COND (~G170 ~G170) (T (%KEY? X))))) (~G1064 (%REST-OR-%BODY? X))))))
(CL:DEFUN %MACROEXPAND-REST (X) (CL:COND ((ATOM X) X) (T (CL:CONS (%MACROEXPAND (CL:CAR X)) (%MACROEXPAND-REST (CL:CDR X))))))
(CL:DEFUN ARGUMENT-EXPAND (FUN DEF VALS CL:&KEY (APPLY-VALUES? T) (CONCATENATE-SUBLISTS? T) (BREAK-ON-ERRORS? T)) (CL:BLOCK ARGUMENT-EXPAND (CL:BLOCK NIL (CL:LABELS ((~G1065 (!) (CL:COND ((CL:LABELS ((~G1066 (~G179) (CL:COND (~G179 ~G179) (T (EQ ! 'ERROR))))) (~G1066 APPLY-VALUES?)) !) (T (CARLIST !))))) (~G1065 (ARGUMENT-EXPAND-0 FUN DEF VALS APPLY-VALUES? CONCATENATE-SUBLISTS? BREAK-ON-ERRORS?))))))
(CL:DEFUN BUTLAST (PLIST) (CL:BLOCK BUTLAST (CL:BLOCK NIL (CL:COND ((CL:CDR PLIST) (CL:CONS (CL:CAR PLIST) (BUTLAST (CL:CDR PLIST))))))))
(CL:DEFUN LAST (X) (CL:BLOCK LAST (CL:BLOCK NIL (CL:COND ((CL:CDR X) (LAST (CL:CDR X))) (T X)))))
(CL:DEFUN GROUP (X SIZE) (CL:BLOCK GROUP (CL:BLOCK NIL (CL:LABELS ((~G1067 (Q) (CL:BLOCK NIL (CL:PROGN (CL:TAGBODY ~G42 (CL:COND ((NOT X) (CL:RETURN-FROM NIL (CL:PROGN (QUEUE-LIST Q))))) (ENQUEUE Q (COPY-HEAD X SIZE)) (CL:PROGN (CL:SETQ X (NTHCDR SIZE X))) (CL:GO ~G42)))))) (~G1067 (MAKE-QUEUE))))))
(CL:DEFUN MAKE-? (BODY) (CL:BLOCK MAKE-? (CL:BLOCK NIL (CL:LABELS ((~G1068 (TESTS) (CL:LABELS ((~G1069 (END) (CL:LABELS ((~G1070 (~G667) (CL:COND (~G667 ~G667) (T (ERROR "Body is missing."))))) (~G1070 BODY)) (CL:CONS 'CL:COND (APPEND (CL:COND ((CL:CDR END) TESTS) (T (+ (BUTLAST TESTS) (LIST (CL:CONS T END))))) NIL)))) (~G1069 (CL:CAR (LAST TESTS)))))) (~G1068 (GROUP BODY 2))))))
(CL:DEFUN ARGUMENT-EXPAND-NAMES (FUN DEF) (CL:BLOCK ARGUMENT-EXPAND-NAMES (CL:BLOCK NIL (ARGUMENT-EXPAND FUN DEF NIL :APPLY-VALUES? NIL))))
(CL:DEFUN %MACROEXPAND (X) (CL:COND ((ATOM X) X) ((CL:APPLY *MACRO?* (LIST X)) (CL:LABELS ((~G1071 (X) (CL:COND ((CONS? X) (CL:CONS (CL:CAR X) (%MACROEXPAND-REST (CL:CDR X)))) (T X)))) (~G1071 (CL:APPLY *MACROCALL* (LIST X))))) ((EQ (CL:CAR X) 'CL:QUOTE) X) ((EQ (CL:CAR X) 'BACKQUOTE) (CL:CONS 'BACKQUOTE (CL:APPLY *MACROEXPAND-BACKQUOTE* (LIST (CL:CDR X))))) ((EQ (CL:CAR X) 'QUASIQUOTE) (CL:CONS 'QUASIQUOTE (%MACROEXPAND (CL:CDR X)))) ((EQ (CL:CAR X) 'QUASIQUOTE-SPLICE) (CL:CONS 'QUASIQUOTE-SPLICE (%MACROEXPAND (CL:CDR X)))) (T (CL:CONS (%MACROEXPAND (CL:CAR X)) (%MACROEXPAND-REST (CL:CDR X))))))
(CL:DEFUN LIST? (X) (CL:BLOCK LIST? (CL:BLOCK NIL (CL:LABELS ((~G1072 (~G4) (CL:COND (~G4 ~G4) (T (NOT X))))) (~G1072 (CONS? X))))))
(CL:DEFUN LIST (CL:&REST X) X)
(CL:DEFUN ARGUMENT-EXPAND-VALUES (FUN DEF VALS CL:&KEY (BREAK-ON-ERRORS? T)) (CL:BLOCK ARGUMENT-EXPAND-VALUES (CL:BLOCK NIL (MAPCAR (CL:LAMBDA (_) (CL:BLOCK NIL (CL:COND ((ARGUMENT-SYNONYM? _) (CL:CDR _)) (T _)))) (CDRLIST (ARGUMENT-EXPAND FUN DEF VALS :BREAK-ON-ERRORS? BREAK-ON-ERRORS?))))))
(CL:DEFUN ASSOC (KEY LST CL:&KEY (TEST (CL:FUNCTION EQL))) (CL:BLOCK ASSOC (CL:BLOCK NIL (CL:COND (LST (CL:BLOCK NIL (CL:LABELS ((~G1073 (~G119) (CL:LABELS ((~G1074 (I) (CL:TAGBODY ~G117 (CL:COND ((NOT ~G119) (CL:GO ~G118))) (CL:SETQ I (CL:CAR ~G119)) (CL:COND ((CONS? I) (CL:COND ((FUNCALL TEST KEY (CL:CAR I)) (CL:RETURN-FROM NIL I)))) (T (ERROR "Pair expected instead of ~A." I))) (CL:SETQ ~G119 (CL:CDR ~G119)) (CL:GO ~G117) ~G118 (CL:RETURN-FROM NIL (CL:PROGN))))) (~G1074 NIL)))) (~G1073 LST))))))))
(CL:DEFUN CLOSE (STR) (CL:BLOCK CLOSE (CL:BLOCK NIL (%FCLOSE (STREAM-HANDLE STR)))))
(CL:DEFUN OPEN (PATH CL:&KEY DIRECTION) (CL:BLOCK OPEN (CL:BLOCK NIL (CL:LABELS ((~G1075 (!) (CL:COND (! (MAKE-STREAM-STREAM :STREAM ! :INPUT-LOCATION (MAKE-STREAM-LOCATION :ID PATH))) (T (ERROR "Couldn't open file `~A'." PATH))))) (~G1075 (%FOPEN PATH (%FOPEN-DIRECTION DIRECTION)))))))
(CL:DEFUN QUASIQUOTE-EXPAND (X) (CL:CAR (%QUASIQUOTE-EXPAND (LIST X))))
(CL:DEFUN DOT-EXPAND (X) (CL:BLOCK DOT-EXPAND (CL:BLOCK NIL (CL:COND ((SYMBOL? X) (DOT-EXPAND-CONV X)) ((CONS? X) (CL:CONS (DOT-EXPAND (CL:CAR X)) (DOT-EXPAND (CL:CDR X)))) (T X)))))
(CL:DEFUN READ (CL:&OPTIONAL (STR *STANDARD-INPUT*)) (CL:BLOCK READ (CL:BLOCK NIL (CL:COND ((SEEK-CHAR STR) (READ-EXPR STR))))))
(CL:DEFUN PEEK-CHAR (CL:&OPTIONAL (STR *STANDARD-INPUT*)) (CL:BLOCK PEEK-CHAR (CL:BLOCK NIL (CL:LABELS ((~G1076 (~G221) (CL:COND (~G221 ~G221) (T (CL:PROGN (=-STREAM-PEEKED-CHAR (READ-CHAR-0 STR) STR)))))) (~G1076 (STREAM-PEEKED-CHAR STR))))))
(CL:DEFUN ERROR (MSG CL:&REST ARGS) (CL:BLOCK ERROR (CL:BLOCK NIL (CL:LABELS ((~G1077 (~G307) (CL:PROGN (CL:SETQ *PRINT-AUTOMATIC-NEWLINE?* NIL)) (CL:LABELS ((~G1078 (~G308) (CL:PROGN (CL:SETQ *PRINT-AUTOMATIC-NEWLINE?* ~G307)) ~G308)) (~G1078 (CL:PROGN (FRESH-LINE) (%ERROR (CL:APPLY (CL:FUNCTION FORMAT) NIL MSG ARGS))))))) (~G1077 *PRINT-AUTOMATIC-NEWLINE?*)))))
(CL:DEFUN ELT (SEQ IDX) (CL:BLOCK ELT (CL:BLOCK NIL (CL:COND ((NOT SEQ) NIL) ((STRING? SEQ) (%ELT-STRING SEQ IDX)) ((CONS? SEQ) (NTH IDX SEQ)) (T (CL:AREF SEQ IDX))))))
(CL:DEFUN QUOTE-EXPAND (X) (CL:BLOCK QUOTE-EXPAND (CL:BLOCK NIL (CL:LABELS ((ANY-QUASIQUOTE? (_) (CL:BLOCK NIL (CL:LABELS ((~G1079 (~G612) (CL:COND (~G612 ~G612) (T (QUASIQUOTE-SPLICE? _))))) (~G1079 (QUASIQUOTE? _))))) (ATOMIC (_) (CL:BLOCK NIL (CL:COND ((CONSTANT-LITERAL? _) _) (T (CL:CONS 'CL:QUOTE (CL:CONS _ NIL)))))) (STATIC (_) (CL:BLOCK NIL (CL:COND ((ATOM _) (ATOMIC _)) (T (CL:CONS 'CL:CONS (CL:CONS (STATIC (CL:CAR _)) (CL:CONS (STATIC (CL:CDR _)) NIL))))))) (QQ (_) (CL:BLOCK NIL (CL:COND ((ANY-QUASIQUOTE? (CADR (CL:CAR _))) (CL:CONS 'CL:CONS (CL:CONS (BACKQ (CADR (CL:CAR _))) (CL:CONS (BACKQ (CL:CDR _)) NIL)))) (T (CL:CONS 'CL:CONS (CL:CONS (CADR (CL:CAR _)) (CL:CONS (BACKQ (CL:CDR _)) NIL))))))) (QQS (_) (CL:BLOCK NIL (CL:COND ((ANY-QUASIQUOTE? (CADR (CL:CAR _))) (ERROR "Illegal ~A as argument to ,@ (QUASIQUOTE-SPLICE)." (CADR (CL:CAR _)))) (T (CL:CONS 'APPEND (CL:CONS (CADR (CL:CAR _)) (CL:CONS (BACKQ (CL:CDR _)) NIL))))))) (BACKQ (_) (CL:BLOCK NIL (CL:COND ((ATOM _) (ATOMIC _)) (T (CL:LABELS ((~G1080 (~G613) (CL:COND ((ATOM ~G613) (CL:CONS 'CL:CONS (CL:CONS (ATOMIC (CL:CAR _)) (CL:CONS (BACKQ (CL:CDR _)) NIL)))) ((QUASIQUOTE? ~G613) (QQ _)) ((QUASIQUOTE-SPLICE? ~G613) (QQS _)) (T (CL:CONS 'CL:CONS (CL:CONS (BACKQ (CL:CAR _)) (CL:CONS (BACKQ (CL:CDR _)) NIL))))))) (~G1080 (CL:CAR _))))))) (DISP (_) (CL:BLOCK NIL (CL:LABELS ((~G1081 (~G614) (CL:COND ((QUOTE? ~G614) (STATIC (CL:CAR (CL:CDR _)))) ((BACKQUOTE? ~G614) (BACKQ (CL:CAR (CL:CDR _)))) (T _)))) (~G1081 _)))) (WALK (_) (CL:BLOCK NIL (CL:COND ((ATOM _) (DISP _)) (T (CL:CONS (WALK (DISP (CL:CAR _))) (WALK (CL:CDR _)))))))) (CL:CAR (WALK (LIST X)))))))
(CL:DEFUN NEUTRALIZE-FORMAT-STRING (X) (CL:BLOCK NEUTRALIZE-FORMAT-STRING (CL:BLOCK NIL (LIST-STRING (MAPCAN (CL:LAMBDA (_) (CL:BLOCK NIL (CL:COND ((EQL _ #\~) (LIST _ _)) (T (LIST _))))) (STRING-LIST X))))))
(CL:DEFUN DYNAMIC-MAP (FUNC CL:&REST LISTS) (CL:BLOCK DYNAMIC-MAP (CL:BLOCK NIL (CL:COND ((STRING? (CL:CAR LISTS)) (LIST-STRING (CL:APPLY (CL:FUNCTION MAPCAR) FUNC (MAPCAR (CL:FUNCTION STRING-LIST) LISTS)))) ((ARRAY? (CL:CAR LISTS)) (LIST-ARRAY (CL:APPLY (CL:FUNCTION MAPCAR) FUNC (MAPCAR (CL:FUNCTION ARRAY-LIST) LISTS)))) (T (CL:APPLY (CL:FUNCTION MAPCAR) FUNC LISTS))))))
(CL:DEFUN ATOM (X) (NOT (CONS? X)))
(CL:DEFUN EQUAL (X Y) (CL:BLOCK EQUAL (CL:BLOCK NIL (CL:COND ((CL:LABELS ((~G1082 (~G3) (CL:COND (~G3 ~G3) (T (ATOM Y))))) (~G1082 (ATOM X))) (EQL X Y)) ((EQUAL (CL:CAR X) (CL:CAR Y)) (EQUAL (CL:CDR X) (CL:CDR Y)))))))
(CL:DEFUN CADR (X) (CL:BLOCK CADR (CL:BLOCK NIL (CL:CAR (CL:CDR X)))))
(CL:DEFUN GENSYM (CL:&OPTIONAL (PREFIX "~G")) (CL:LABELS ((~G1083 (X) (CL:COND ((EQ (SYMBOL-VALUE X) X) (CL:COND ((SYMBOL-FUNCTION X) (GENSYM)) (T X))) (T (GENSYM))))) (~G1083 (MAKE-SYMBOL (STRING-CONCAT PREFIX (STRING (GENSYM-NUMBER)))))))
(CL:DEFUN + (CL:&REST X) (CL:LABELS ((~G1084 (A) (CL:COND (A (CL:APPLY (CL:COND ((CONS? A) (CL:FUNCTION APPEND)) ((STRING? A) (CL:FUNCTION STRING-CONCAT)) (T (CL:FUNCTION NUMBER+))) X)) (T (CL:COND ((CL:CDR X) (CL:APPLY (CL:FUNCTION +) (CL:CDR X)))))))) (~G1084 (CL:CAR X))))
(CL:DEFUN MEMBER (ELM LST CL:&KEY (TEST (CL:FUNCTION EQL))) (CL:BLOCK MEMBER (CL:BLOCK NIL (CL:BLOCK NIL (CL:LABELS ((~G1085 (I) (CL:TAGBODY ~G11 (CL:COND ((NOT I) (CL:RETURN-FROM NIL (CL:PROGN)))) (CL:COND ((FUNCALL TEST ELM (CL:CAR I)) (CL:RETURN-FROM MEMBER I))) (CL:SETQ I (CL:CDR I)) (CL:GO ~G11)))) (~G1085 LST))))))
(CL:DEFUN PRINT-DEFINITION (X) (CL:COND (*PRINT-DEFINITIONS?* (CL:APPLY *DEFINITION-PRINTER* (LIST X)))))
(CL:DEFUN IDENTITY (X) X)
"Section DELAYED-EXPRS"
(CL:SETQ *UNIVERSE* NIL)
(CL:SETQ *VARIABLES* NIL)
(CL:SETQ *LAUNCHFILE* NIL)
(CL:SETQ *POINTER-SIZE* 4)
(CL:SETQ *ASSERT?* NIL)
(CL:SETQ *ENDIANESS* NIL)
(CL:SETQ *CPU-TYPE* NIL)
(CL:SETQ *LIBC-PATH* NIL)
(CL:SETQ *RAND-MAX* NIL)
(CL:SETQ *PRINT-DEFINITIONS?* NIL)
(CL:SETQ *DEFAULT-STREAM-TABSIZE* 8)
(CL:SETQ *QUASIQUOTE-EXPAND* NIL)
(CL:SETQ *DOT-EXPAND* NIL)
(CL:SETQ *ENVIRONMENT-PATH* ".")
(CL:SETQ *ENVIRONMENT-FILENAMES* NIL)
(CL:SETQ *EVAL* NIL)
(CL:SETQ *FUNCTIONS* NIL)
(CL:SETQ *MACROEXPAND* NIL)
(CL:SETQ *SPECIAL-FORMS* NIL)
(CL:PUSH (CL:CONS (TRE-SYMBOL '%FN-QUIET) (CL:CONS '(NAME ARGS CL:&BODY BODY) (CL:LAMBDA (NAME ARGS BODY) (MAKE-%FN-QUIET NAME ARGS BODY)))) *SPECIAL-FORMS*)
(CL:PUSH (CL:CONS (TRE-SYMBOL '%FN) (CL:CONS '(NAME ARGS CL:&BODY BODY) (CL:LAMBDA (NAME ARGS BODY) (PRINT-DEFINITION `(%FN ,NAME ,ARGS)) (MAKE-%FN-QUIET NAME ARGS BODY)))) *SPECIAL-FORMS*)
(CL:PUSH (CL:CONS (TRE-SYMBOL '%DEFMACRO) (CL:CONS '(NAME ARGS CL:&BODY BODY) (CL:LAMBDA (NAME ARGS BODY) (PRINT-DEFINITION `(%DEFMACRO ,NAME ,ARGS)) `(CL:PUSH (CL:CONS ',NAME (CL:CONS ',(CL:CONS ARGS BODY) (CL:LAMBDA ,(ARGUMENT-EXPAND-NAMES '%DEFMACRO ARGS) ,@BODY))) ,(TRE-SYMBOL '*MACROS*))))) *SPECIAL-FORMS*)
(CL:PUSH (CL:CONS (TRE-SYMBOL '%DEFVAR) (CL:CONS '(NAME CL:&OPTIONAL (INIT NIL)) (CL:LAMBDA (NAME INIT) (PRINT-DEFINITION `(%DEFVAR ,NAME)) `(CL:PROGN (CL:PUSH (CL:CONS ',NAME ',INIT) *VARIABLES*) (CL:DEFVAR ,NAME ,INIT))))) *SPECIAL-FORMS*)
(CL:PUSH (CL:CONS (TRE-SYMBOL '?) (CL:CONS '(CL:&BODY BODY) (CL:LAMBDA (BODY) (MAKE-? BODY)))) *SPECIAL-FORMS*)
(CL:SETQ *KEYWORD-PACKAGE* (CL:FIND-PACKAGE "KEYWORD"))
(CL:SETQ *PACKAGE* NIL)
(CL:SETQ *DEFINITION-PRINTER* (CL:FUNCTION CL:PRINT))
(CL:SETQ *PRINT-AUTOMATIC-NEWLINE?* T)
(CL:SETQ *STANDARD-INPUT* (MAKE-STANDARD-STREAM))
(CL:SETQ *MACROEXPAND-BACKQUOTE* (CL:FUNCTION %MACROEXPAND-BACKQUOTE))
(CL:SETQ *MACROCALL* NIL)
(CL:SETQ *MACRO?* NIL)
(CL:SETQ +CL-FUNCTION-IMPORTS+ (CL:CONS 'CL:APPLY (CL:CONS 'CL:CONS (CL:CONS 'CL:CAR (CL:CONS 'CL:CDR (CL:CONS 'CL:RPLACA (CL:CONS 'CL:RPLACD (CL:CONS 'CL:LENGTH (CL:CONS 'CL:MAKE-STRING (CL:CONS 'CL:MOD (CL:CONS 'CL:SQRT (CL:CONS 'CL:SIN (CL:CONS 'CL:COS (CL:CONS 'CL:TAN (CL:CONS 'CL:ASIN (CL:CONS 'CL:ACOS (CL:CONS 'CL:ATAN (CL:CONS 'CL:EXP (CL:CONS 'CL:ROUND (CL:CONS 'CL:FLOOR (CL:CONS 'CL:AREF (CL:CONS 'CL:CHAR-CODE (CL:CONS 'CL:MAKE-PACKAGE (CL:CONS 'CL:PACKAGE-NAME (CL:CONS 'CL:FIND-PACKAGE (CL:CONS 'CL:PRINT (CL:CONS 'CL:BREAK NIL)))))))))))))))))))))))))))
(CL:SETQ *STANDARD-OUTPUT* (MAKE-STANDARD-STREAM))
(CL:SETQ *GENSYM-COUNTER* 0)
(CL:SETQ *VALUES-MAGIC* 'VALUES-~G30)
(CL:SETQ *PRINTER-ABBREVIATIONS* (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS "'" NIL)) (CL:CONS (CL:CONS 'BACKQUOTE (CL:CONS "`" NIL)) (CL:CONS (CL:CONS 'QUASIQUOTE (CL:CONS "," NIL)) (CL:CONS (CL:CONS 'QUASIQUOTE-SPLICE (CL:CONS ",@" NIL)) NIL)))))
(CL:SETQ *ALWAYS-PRINT-PACKAGE-NAMES?* NIL)
(CL:SETQ *INVISIBLE-PACKAGE-NAMES* (CL:CONS "TRE" (CL:CONS "TRE-CORE" NIL)))
(CL:SETQ *PRINTER-ARGUMENT-DEFINITIONS* (MAKE-HASH-TABLE :TEST (CL:FUNCTION EQ)))
"Section DUMMY"
NIL
(cl:in-package :tre)
(cl:format t "Loading environment...\~%")
(env-load "main.lisp")
