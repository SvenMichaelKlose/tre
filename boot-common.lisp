; trÃ© Common Lisp core, generated by 'makefiles/boot-common.lisp'.
(declaim #+sbcl(sb-ext:muffle-conditions compiler-note style-warning))
(proclaim '(optimize (speed 1) (space 0) (safety 3) (debug 2)))
(DEFPACKAGE "TRE-CORE" (:EXPORT "*LOAD*" "NIL" "T" "SETQ" "COND" "PROGN" "BLOCK" "RETURN-FROM" "TAGBODY" "GO" "LABELS" "QUOTE" "FUNCTION" "LAMBDA" "SLOT-VALUE" "&REST" "&BODY" "&OPTIONAL" "&KEY" "BACKQUOTE" "QUASIQUOTE" "QUASIQUOTE-SPLICE" "BRACKETS" "BRACES" "APPLY" "CONS" "CAR" "CDR" "RPLACA" "RPLACD" "LENGTH" "MAKE-STRING" "MOD" "SQRT" "SIN" "COS" "TAN" "ASIN" "ACOS" "ATAN" "EXP" "ROUND" "FLOOR" "AREF" "CHAR-CODE" "MAKE-PACKAGE" "PACKAGE-NAME" "FIND-PACKAGE" "PRINT" "POW" "CHARACTER>" "CHARACTER<" "CHARACTER==" "NUMBER>" "NUMBER<" "NUMBER/" "NUMBER*" "NUMBER-" "NUMBER+" "NUMBER==" "%/" "%*" ">=" "<=" ">" "<" "==" "/" "*" "-" "%CODE-CHAR" "INTEGER" "CHARACTER?" "NUMBER?" "ARRAY?" "STRING?" "FUNCTION?" "SYMBOL?" "CONS?" "MILLISECONDS-SINCE-1970" "UNIX-SH-RM" "UNIX-SH-MKDIR" "UNIX-SH-CP" "SH" "ARGUMENTS" "GETENV" "EXPORT" "FIND-SYMBOL" "=-SYMBOL-FUNCTION" "SYMBOL-PACKAGE" "SYMBOL-FUNCTION" "SYMBOL-VALUE" "SYMBOL-NAME" "MAKE-SYMBOL" "CHAR" "%ELT-STRING" "LIST-STRING" "STRING==" "STRING" "STRING-CONCAT" "EQL" "EQ" "NOT" "<<" ">>" "BIT-XOR" "BIT-OR" "BIT-AND" "CODE-CHAR" "QUIT" "MACROEXPAND" "MACROEXPAND-1" "%%MACRO?" "%%MACROCALL" "MACRO?" "LOAD" "APPEND" "FILTER" "%START-CORE" "SYS-IMAGE-CREATE" "HASHKEYS" "COPY-HASH-TABLE" "HREMOVE" "=-HREF" "HREF" "HASH-TABLE?" "MAKE-HASH-TABLE" "FUNCTION-BYTECODE" "=-FUNCTION-SOURCE" "FUNCTION-SOURCE" "DIRECTORY" "FILE-EXISTS?" "%READ-CHAR" "%FCLOSE" "%FOPEN" "%FORCE-OUTPUT" "%PRINC" "EVAL" "BREAK" "ENV-LOAD" "=-AREF" "MAKE-ARRAY" "BUILTIN?" "%FN-QUIET" "%FN" "%DEFVAR" "%DEFMACRO" "?" "*UNIVERSE*" "*VARIABLES*" "*FUNCTIONS*" "*ENVIRONMENT-PATH*" "*ENVIRONMENT-FILENAMES*" "*MACROEXPAND*" "*QUASIQUOTE-EXPAND*" "*DOT-EXPAND*" "*PACKAGE*" "*KEYWORD-PACKAGE*" "*POINTER-SIZE*" "*LAUNCHFILE*" "*ASSERT?*" "*TARGETS*" "*ENDIANESS*" "*CPU-TYPE*" "*LIBC-PATH*" "*RAND-MAX*" "*EVAL*" "CONS?" "SYMBOL?" "FUNCTION?" "STRING?" "ARRAY?" "NUMBER?" "CHARACTER?" "INTEGER" "%CODE-CHAR" "-" "*" "/" "==" "<" ">" "<=" ">=" "%*" "%/" "NUMBER==" "NUMBER+" "NUMBER-" "NUMBER*" "NUMBER/" "NUMBER<" "NUMBER>" "CHARACTER==" "CHARACTER<" "CHARACTER>" "POW") (:IMPORT-FROM "CL" "NIL" "T" "SETQ" "COND" "PROGN" "BLOCK" "RETURN-FROM" "TAGBODY" "GO" "LABELS" "QUOTE" "FUNCTION" "LAMBDA" "SLOT-VALUE" "&REST" "&BODY" "&OPTIONAL" "&KEY" "APPLY" "CONS" "CAR" "CDR" "RPLACA" "RPLACD" "LENGTH" "MAKE-STRING" "MOD" "SQRT" "SIN" "COS" "TAN" "ASIN" "ACOS" "ATAN" "EXP" "ROUND" "FLOOR" "AREF" "CHAR-CODE" "MAKE-PACKAGE" "PACKAGE-NAME" "FIND-PACKAGE" "PRINT"))
(DEFPACKAGE "TRE" (:USE "TRE-CORE"))
(CL:IN-PACKAGE :TRE-CORE)
"Section CL-CORE"
(CL:DEFVAR *UNIVERSE*)
(CL:DEFVAR *VARIABLES*)
(CL:DEFVAR *LAUNCHFILE*)
(CL:DEFVAR *POINTER-SIZE*)
(CL:DEFVAR *ASSERT?*)
(CL:DEFVAR *ENDIANESS*)
(CL:DEFVAR *CPU-TYPE*)
(CL:DEFVAR *LIBC-PATH*)
(CL:DEFVAR *RAND-MAX*)
(CL:DEFVAR *PRINT-DEFINITIONS?*)
(CL:DEFVAR *DEFAULT-STREAM-TABSIZE*)
(CL:DEFVAR *QUASIQUOTE-EXPAND*)
(CL:DEFVAR *DOT-EXPAND*)
(CL:DEFVAR *BUILTIN-ATOMS* (CL:MAKE-HASH-TABLE :TEST (CL:FUNCTION CL:EQ)))
(CL:PROGN (CL:DEFUN BUILTIN? (X) (CL:LABELS ((~G831 (~G786) (CL:COND (~G786 ~G786) (T (CL:MEMBER X +CL-FUNCTION-IMPORTS+))))) (~G831 (CL:GETHASH X *BUILTIN-ATOMS*)))) (CL:SETF (CL:GETHASH 'BUILTIN? *BUILTIN-ATOMS*) (CL:FUNCTION BUILTIN?)))
(CL:PROGN (CL:DEFUN MAKE-ARRAY (CL:&OPTIONAL (DIMENSIONS 1)) (CL:MAKE-ARRAY DIMENSIONS)) (CL:SETF (CL:GETHASH 'MAKE-ARRAY *BUILTIN-ATOMS*) (CL:FUNCTION MAKE-ARRAY)))
(CL:PROGN (CL:DEFUN =-AREF (V X I) (CL:SETF (CL:AREF X I) V)) (CL:SETF (CL:GETHASH '=-AREF *BUILTIN-ATOMS*) (CL:FUNCTION =-AREF)))
(CL:DEFVAR *ENVIRONMENT-PATH*)
(CL:DEFVAR *ENVIRONMENT-FILENAMES*)
(CL:PROGN (CL:DEFUN ENV-LOAD (FILE-SPECIFIER CL:&REST TARGETS) (PRINT-DEFINITION `(ENV-LOAD ,FILE-SPECIFIER ,@TARGETS)) (CL:PROGN (CL:SETQ *ENVIRONMENT-FILENAMES* (ACONS FILE-SPECIFIER TARGETS *ENVIRONMENT-FILENAMES*))) (CL:COND ((CL:LABELS ((~G832 (~G787) (CL:COND (~G787 ~G787) (T (MEMBER :CL TARGETS))))) (~G832 (NOT TARGETS))) (CL:PROGN (LOAD (+ *ENVIRONMENT-PATH* "/environment/" FILE-SPECIFIER)))))) (CL:SETF (CL:GETHASH 'ENV-LOAD *BUILTIN-ATOMS*) (CL:FUNCTION ENV-LOAD)))
(CL:DEFUN MAKE-SCOPING-FUNCTION (X) (CL:LABELS ((~G833 (G) `(CL:LABELS ((,G ,@(MAKE-LAMBDAS (CADR (CL:CAR X))))) (,G ,@(MAKE-LAMBDAS (CL:CDR X)))))) (~G833 (GENSYM))))
(CL:DEFUN MAKE-ANONYMOUS-FUNCTION (X) (CL:LABELS ((~G834 (!) (CL:COND ((EQUAL ! '(NIL)) `(CL:LAMBDA NIL NIL)) (T `(CL:LAMBDA ,@!))))) (~G834 (MAKE-LAMBDAS (CL:CAR (CL:CDR X))))))
(CL:DEFUN LAMBDA-EXPR-W/O-LAMBDA-KEYWORD? (X) (CL:COND ((CONS? X) (CL:COND ((EQ 'CL:FUNCTION (CL:CAR X)) (CL:COND ((NOT (ATOM (CL:CAR (CL:CDR X)))) (NOT (EQ 'CL:LAMBDA (CL:CAR (CL:CAR (CL:CDR X))))))))))))
(CL:DEFUN MAKE-LAMBDAS (X) (CL:COND ((EQ 'CL:&BODY X) 'CL:&REST) ((ATOM X) X) ((EQ 'CL:QUOTE (CL:CAR X)) X) ((LAMBDA-EXPR-W/O-LAMBDA-KEYWORD? (CL:CAR X)) (MAKE-SCOPING-FUNCTION X)) ((LAMBDA-EXPR-W/O-LAMBDA-KEYWORD? X) (MAKE-ANONYMOUS-FUNCTION X)) (T (DYNAMIC-MAP (CL:FUNCTION MAKE-LAMBDAS) X))))
(CL:PROGN (CL:DEFUN BREAK (CL:&OPTIONAL MSG) (CL:BREAK MSG)) (CL:SETF (CL:GETHASH 'BREAK *BUILTIN-ATOMS*) (CL:FUNCTION BREAK)))
(CL:DEFUN TRE2CL (X) (MAKE-LAMBDAS (QUOTE-EXPAND (SPECIALEXPAND (QUOTE-EXPAND X)))))
(CL:DEFVAR *EVAL*)
(CL:PROGN (CL:DEFUN EVAL (X) (CL:EVAL (CL:PROGN (CL:SETQ *EVAL* (TRE2CL X))))) (CL:SETF (CL:GETHASH 'EVAL *BUILTIN-ATOMS*) (CL:FUNCTION EVAL)))
(CL:PROGN (CL:DEFUN %PRINC (X STREAM) (CL:LABELS ((~G835 (!) (CL:COND ((CHARACTER? X) (CL:WRITE-BYTE (CL:CHAR-CODE X) !)) ((STRING? X) (CL:LABELS ((~G836 (~G793) (CL:COND (~G793 (CL:PROGN (CL:LABELS ((~G837 (~G795) (CL:COND ((< ~G795 0) (ERROR "DOTIMES: Number of iterations is negative: ~A." ~G795))) (CL:BLOCK NIL (CL:LABELS ((~G838 (~G794) (CL:TAGBODY ~G796 (CL:COND ((== ~G794 ~G795) (CL:RETURN-FROM NIL (CL:PROGN)))) (CL:LABELS ((~G839 (I) (%PRINC I !))) (~G839 (ELT ~G793 ~G794))) (CL:SETQ ~G794 (NUMBER+ 1 ~G794)) (CL:GO ~G796)))) (~G838 0))))) (~G837 (INTEGER (CL:LENGTH ~G793))))))))) (~G836 X))) (T (CL:PRINC X !))))) (~G835 (CL:LABELS ((~G840 (~G792) (CL:COND (~G792 ~G792) (T CL:*STANDARD-OUTPUT*)))) (~G840 STREAM))))) (CL:SETF (CL:GETHASH '%PRINC *BUILTIN-ATOMS*) (CL:FUNCTION %PRINC)))
(CL:PROGN (CL:DEFUN %FORCE-OUTPUT (STREAM) (CL:FORCE-OUTPUT STREAM)) (CL:SETF (CL:GETHASH '%FORCE-OUTPUT *BUILTIN-ATOMS*) (CL:FUNCTION %FORCE-OUTPUT)))
(CL:PROGN (CL:DEFUN %FOPEN (FILE-SPECIFIER MODE) (CL:OPEN FILE-SPECIFIER :DIRECTION (CL:COND ((CL:FIND #\w MODE :TEST (CL:FUNCTION CL:EQUAL)) :OUTPUT) (T :INPUT)) :IF-EXISTS :SUPERSEDE :ELEMENT-TYPE '(CL:UNSIGNED-BYTE 8))) (CL:SETF (CL:GETHASH '%FOPEN *BUILTIN-ATOMS*) (CL:FUNCTION %FOPEN)))
(CL:PROGN (CL:DEFUN %FCLOSE (STREAM) (CL:CLOSE STREAM)) (CL:SETF (CL:GETHASH '%FCLOSE *BUILTIN-ATOMS*) (CL:FUNCTION %FCLOSE)))
(CL:PROGN (CL:DEFUN %READ-CHAR (STR) (CL:LABELS ((~G841 (!) (CL:COND ((NOT (EQ ! 'EOF)) (CL:PROGN (CL:CODE-CHAR !)))))) (~G841 (CL:READ-BYTE (CL:LABELS ((~G842 (~G797) (CL:COND (~G797 ~G797) (T CL:*STANDARD-INPUT*)))) (~G842 STR)) NIL 'EOF)))) (CL:SETF (CL:GETHASH '%READ-CHAR *BUILTIN-ATOMS*) (CL:FUNCTION %READ-CHAR)))
(CL:PROGN (CL:DEFUN FILE-EXISTS? (FILE-SPECIFIER) (CL:COND ((CL:PROBE-FILE FILE-SPECIFIER) T))) (CL:SETF (CL:GETHASH 'FILE-EXISTS? *BUILTIN-ATOMS*) (CL:FUNCTION FILE-EXISTS?)))
(CL:PROGN (CL:DEFUN DIRECTORY (FILE-SPECIFIER) (CL:DIRECTORY (+ FILE-SPECIFIER "*.*"))) (CL:SETF (CL:GETHASH 'DIRECTORY *BUILTIN-ATOMS*) (CL:FUNCTION DIRECTORY)))
(CL:DEFVAR *FUNCTIONS*)
(CL:PROGN (CL:DEFUN FUNCTION-SOURCE (X) (CL:CDR (CL:ASSOC X *FUNCTIONS* :TEST (CL:FUNCTION CL:EQ)))) (CL:SETF (CL:GETHASH 'FUNCTION-SOURCE *BUILTIN-ATOMS*) (CL:FUNCTION FUNCTION-SOURCE)))
(CL:PROGN (CL:DEFUN =-FUNCTION-SOURCE (V X) (ERROR "Can't set function source in the Common Lisp core.")) (CL:SETF (CL:GETHASH '=-FUNCTION-SOURCE *BUILTIN-ATOMS*) (CL:FUNCTION =-FUNCTION-SOURCE)))
(CL:PROGN (CL:DEFUN FUNCTION-BYTECODE (X) X NIL) (CL:SETF (CL:GETHASH 'FUNCTION-BYTECODE *BUILTIN-ATOMS*) (CL:FUNCTION FUNCTION-BYTECODE)))
(CL:PROGN (CL:DEFUN MAKE-HASH-TABLE (CL:&KEY (TEST (CL:FUNCTION EQL))) (CL:MAKE-HASH-TABLE :TEST (CL:COND ((CL:EQ TEST (CL:FUNCTION EQ)) (CL:FUNCTION CL:EQ)) ((CL:LABELS ((~G843 (~G798) (CL:COND (~G798 ~G798) (T (CL:EQ TEST (CL:FUNCTION ==)))))) (~G843 (CL:EQ TEST (CL:FUNCTION EQL)))) (CL:FUNCTION CL:EQL)) ((CL:EQ TEST (CL:FUNCTION STRING==)) (CL:FUNCTION CL:EQUAL)) (T TEST)))) (CL:SETF (CL:GETHASH 'MAKE-HASH-TABLE *BUILTIN-ATOMS*) (CL:FUNCTION MAKE-HASH-TABLE)))
(CL:PROGN (CL:DEFUN HASH-TABLE? (X) (CL:HASH-TABLE-P X)) (CL:SETF (CL:GETHASH 'HASH-TABLE? *BUILTIN-ATOMS*) (CL:FUNCTION HASH-TABLE?)))
(CL:PROGN (CL:DEFUN HREF (X I) (CL:GETHASH I X)) (CL:SETF (CL:GETHASH 'HREF *BUILTIN-ATOMS*) (CL:FUNCTION HREF)))
(CL:PROGN (CL:DEFUN =-HREF (V X I) (CL:SETF (CL:GETHASH I X) V)) (CL:SETF (CL:GETHASH '=-HREF *BUILTIN-ATOMS*) (CL:FUNCTION =-HREF)))
(CL:PROGN (CL:DEFUN HREMOVE (X K) (CL:REMHASH K X)) (CL:SETF (CL:GETHASH 'HREMOVE *BUILTIN-ATOMS*) (CL:FUNCTION HREMOVE)))
(CL:PROGN (CL:DEFUN COPY-HASH-TABLE (X) (CL:LABELS ((~G844 (!) (CL:MAPHASH (CL:LAMBDA (K V) (CL:SETF (CL:GETHASH K !) V)) X) !)) (~G844 (CL:MAKE-HASH-TABLE :TEST (CL:HASH-TABLE-TEST X) :SIZE (CL:HASH-TABLE-SIZE X))))) (CL:SETF (CL:GETHASH 'COPY-HASH-TABLE *BUILTIN-ATOMS*) (CL:FUNCTION COPY-HASH-TABLE)))
(CL:PROGN (CL:DEFUN HASHKEYS (X) (CL:LABELS ((~G845 (!) (CL:MAPHASH (CL:LAMBDA (K V) V (CL:PUSH K !)) X) !)) (~G845 NIL))) (CL:SETF (CL:GETHASH 'HASHKEYS *BUILTIN-ATOMS*) (CL:FUNCTION HASHKEYS)))
(CL:PROGN (CL:DEFUN SYS-IMAGE-CREATE (FILE-SPECIFIER FUN) (SB-EXT:SAVE-LISP-AND-DIE FILE-SPECIFIER :TOPLEVEL (CL:LAMBDA NIL (CL:FUNCALL FUN)))) (CL:SETF (CL:GETHASH 'SYS-IMAGE-CREATE *BUILTIN-ATOMS*) (CL:FUNCTION SYS-IMAGE-CREATE)))
(CL:PROGN (CL:DEFUN %START-CORE NIL (CL:USE-PACKAGE :TRE) (CL:SETQ *LAUNCHFILE* (CADR (CL:LABELS ((~G846 (~G799) (CL:COND (~G799 ~G799) (T NIL)))) (~G846 SB-EXT:*POSIX-ARGV*))))) (CL:SETF (CL:GETHASH '%START-CORE *BUILTIN-ATOMS*) (CL:FUNCTION %START-CORE)))
(CL:PROGN (CL:DEFUN FILTER (FUN X) (CL:MAPCAR FUN X)) (CL:SETF (CL:GETHASH 'FILTER *BUILTIN-ATOMS*) (CL:FUNCTION FILTER)))
(CL:PROGN (CL:DEFUN APPEND (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:NCONC) (CL:MAPCAR (CL:FUNCTION CL:COPY-LIST) X))) (CL:SETF (CL:GETHASH 'APPEND *BUILTIN-ATOMS*) (CL:FUNCTION APPEND)))
(CL:DEFUN %LOAD-R (S) (CL:COND ((PEEK-CHAR S) (CL:PROGN (CL:CONS (READ S) (%LOAD-R S))))))
(CL:DEFUN %EXPAND (X) (CL:LABELS ((~G847 (!) (CL:COND ((EQUAL X !) X) (T (%EXPAND !))))) (~G847 (QUASIQUOTE-EXPAND (MACROEXPAND (DOT-EXPAND X))))))
(CL:DEFVAR *LOAD*)
(CL:PROGN (CL:DEFUN LOAD (FILE-SPECIFIER) (PRINT-DEFINITION `(LOAD ,FILE-SPECIFIER)) (CL:LABELS ((~G848 (~G800) (CL:PROGN (CL:SETQ *LOAD* FILE-SPECIFIER)) (CL:LABELS ((~G849 (~G801) (CL:PROGN (CL:SETQ *LOAD* ~G800)) ~G801)) (~G849 (CL:PROGN (CL:BLOCK NIL (CL:LABELS ((~G850 (~G805) (CL:LABELS ((~G851 (I) (CL:TAGBODY ~G803 (CL:COND ((NOT ~G805) (CL:GO ~G804))) (CL:SETQ I (CL:CAR ~G805)) (EVAL (%EXPAND I)) (CL:SETQ ~G805 (CL:CDR ~G805)) (CL:GO ~G803) ~G804 (CL:RETURN-FROM NIL (CL:PROGN))))) (~G851 NIL)))) (~G850 (CL:LABELS ((~G852 (S) (CL:LABELS ((~G853 (~G802) (CLOSE S) ~G802)) (~G853 (CL:BLOCK NIL (%LOAD-R S)))))) (~G852 (OPEN FILE-SPECIFIER :DIRECTION 'INPUT))))))))))) (~G848 *LOAD*))) (CL:SETF (CL:GETHASH 'LOAD *BUILTIN-ATOMS*) (CL:FUNCTION LOAD)))
(CL:DEFUN ENV-MACROS NIL (SYMBOL-VALUE (TRE-SYMBOL '*MACROS*)))
(CL:PROGN (CL:DEFUN MACRO? (X) (CL:RASSOC X (ENV-MACROS) :TEST (CL:FUNCTION EQ))) (CL:SETF (CL:GETHASH 'MACRO? *BUILTIN-ATOMS*) (CL:FUNCTION MACRO?)))
(CL:PROGN (CL:DEFUN %%MACROCALL (X) (CL:LABELS ((~G854 (!) (CL:APPLY (CL:CDR !) (ARGUMENT-EXPAND-VALUES (CL:CAR X) (CL:CAR (CL:CAR !)) (CL:CDR X))))) (~G854 (CL:CDR (ASSOC (CL:CAR X) (ENV-MACROS) :TEST (CL:FUNCTION EQ)))))) (CL:SETF (CL:GETHASH '%%MACROCALL *BUILTIN-ATOMS*) (CL:FUNCTION %%MACROCALL)))
(CL:PROGN (CL:DEFUN %%MACRO? (X) (CL:COND ((CONS? X) (CL:COND ((SYMBOL? (CL:CAR X)) (CL:LABELS ((~G855 (!) (CL:COND ((CONS? !) (ASSOC (CL:CAR X) ! :TEST (CL:FUNCTION EQ)))))) (~G855 (ENV-MACROS)))))))) (CL:SETF (CL:GETHASH '%%MACRO? *BUILTIN-ATOMS*) (CL:FUNCTION %%MACRO?)))
(CL:DEFVAR *MACROEXPAND*)
(CL:PROGN (CL:DEFUN MACROEXPAND-1 (X) (CL:LABELS ((~G856 (!) (CL:COND (! (CL:APPLY ! (LIST X))) (T X)))) (~G856 (SYMBOL-VALUE (TRE-SYMBOL '*MACROEXPAND*))))) (CL:SETF (CL:GETHASH 'MACROEXPAND-1 *BUILTIN-ATOMS*) (CL:FUNCTION MACROEXPAND-1)))
(CL:PROGN (CL:DEFUN MACROEXPAND (X) (CL:LABELS ((F (OLD X) (CL:COND ((EQUAL OLD X) X) (T (MACROEXPAND X))))) (F X (MACROEXPAND-1 X)))) (CL:SETF (CL:GETHASH 'MACROEXPAND *BUILTIN-ATOMS*) (CL:FUNCTION MACROEXPAND)))
(CL:PROGN (CL:DEFUN QUIT (CL:&OPTIONAL EXIT-CODE) (SB-EXT:QUIT :UNIX-STATUS EXIT-CODE)) (CL:SETF (CL:GETHASH 'QUIT *BUILTIN-ATOMS*) (CL:FUNCTION QUIT)))
(CL:PROGN (CL:DEFUN CODE-CHAR (X) (CL:COND ((CL:CHARACTERP X) X) (T (CL:CODE-CHAR X)))) (CL:SETF (CL:GETHASH 'CODE-CHAR *BUILTIN-ATOMS*) (CL:FUNCTION CODE-CHAR)))
(CL:DEFUN BITS-INTEGER (BITS) (CL:REDUCE (CL:LAMBDA (A B) (+ (* A 2) B)) BITS))
(CL:DEFUN NUMBER (X) (CL:COND ((CHARACTER? X) (CL:CHAR-CODE X)) (T X)))
(CL:DEFUN INTEGER-BITS (X) (CL:LABELS ((~G857 (!) (CL:LABELS ((~G858 (L) (CL:LABELS ((~G859 (~G806) (CL:COND ((< ~G806 0) (ERROR "DOTIMES: Number of iterations is negative: ~A." ~G806))) (CL:BLOCK NIL (CL:LABELS ((~G860 (I) (CL:TAGBODY ~G807 (CL:COND ((== I ~G806) (CL:RETURN-FROM NIL (CL:PROGN)))) (CL:MULTIPLE-VALUE-BIND (I R) (CL:TRUNCATE ! 2) (CL:PROGN (CL:SETQ ! I)) (CL:PUSH R L)) (CL:SETQ I (NUMBER+ 1 I)) (CL:GO ~G807)))) (~G860 0))))) (~G859 (INTEGER 32))) (CL:COERCE L 'CL:BIT-VECTOR))) (~G858 NIL)))) (~G857 (NUMBER X))))
(CL:PROGN (CL:DEFUN BIT-AND (A B) (BITS-INTEGER (CL:BIT-AND (INTEGER-BITS A) (INTEGER-BITS B)))) (CL:SETF (CL:GETHASH 'BIT-AND *BUILTIN-ATOMS*) (CL:FUNCTION BIT-AND)))
(CL:PROGN (CL:DEFUN BIT-OR (A B) (BITS-INTEGER (CL:BIT-IOR (INTEGER-BITS A) (INTEGER-BITS B)))) (CL:SETF (CL:GETHASH 'BIT-OR *BUILTIN-ATOMS*) (CL:FUNCTION BIT-OR)))
(CL:PROGN (CL:DEFUN BIT-XOR (A B) (BITS-INTEGER (CL:BIT-XOR (INTEGER-BITS A) (INTEGER-BITS B)))) (CL:SETF (CL:GETHASH 'BIT-XOR *BUILTIN-ATOMS*) (CL:FUNCTION BIT-XOR)))
(CL:PROGN (CL:DEFUN >> (X BITS) (CL:LABELS ((~G861 (~G808) (CL:COND ((< ~G808 0) (ERROR "DOTIMES: Number of iterations is negative: ~A." ~G808))) (CL:BLOCK NIL (CL:LABELS ((~G862 (N) (CL:TAGBODY ~G809 (CL:COND ((== N ~G808) (CL:RETURN-FROM NIL (CL:PROGN X)))) (CL:MULTIPLE-VALUE-BIND (I R) (CL:TRUNCATE X 2) (CL:PROGN (CL:SETQ X I))) (CL:SETQ N (NUMBER+ 1 N)) (CL:GO ~G809)))) (~G862 0))))) (~G861 (INTEGER BITS)))) (CL:SETF (CL:GETHASH '>> *BUILTIN-ATOMS*) (CL:FUNCTION >>)))
(CL:PROGN (CL:DEFUN << (X BITS) (CL:LABELS ((~G863 (~G810) (CL:COND ((< ~G810 0) (ERROR "DOTIMES: Number of iterations is negative: ~A." ~G810))) (CL:BLOCK NIL (CL:LABELS ((~G864 (N) (CL:TAGBODY ~G811 (CL:COND ((== N ~G810) (CL:RETURN-FROM NIL (CL:PROGN X)))) (CL:PROGN (CL:SETQ X (* X 2))) (CL:SETQ N (NUMBER+ 1 N)) (CL:GO ~G811)))) (~G864 0))))) (~G863 (INTEGER BITS)))) (CL:SETF (CL:GETHASH '<< *BUILTIN-ATOMS*) (CL:FUNCTION <<)))
(CL:PROGN (CL:DEFUN NOT (CL:&REST X) (CL:EVERY (CL:FUNCTION CL:NOT) X)) (CL:SETF (CL:GETHASH 'NOT *BUILTIN-ATOMS*) (CL:FUNCTION NOT)))
(CL:PROGN (CL:DEFUN EQ (A B) (CL:EQ A B)) (CL:SETF (CL:GETHASH 'EQ *BUILTIN-ATOMS*) (CL:FUNCTION EQ)))
(CL:PROGN (CL:DEFUN EQL (A B) (CL:LABELS ((~G865 (~G812) (CL:COND (~G812 ~G812) (T (CL:COND ((CL:COND ((CL:CHARACTERP A) (CL:CHARACTERP B))) (CL:= (CL:CHAR-CODE A) (CL:CHAR-CODE B))) ((CL:COND ((NOT (CL:CHARACTERP A) (CL:CHARACTERP B)) (CL:COND ((NUMBER? A) (NUMBER? B))))) (CL:= A B)) ((CL:COND ((CL:CONSP A) (CL:CONSP B))) (CL:COND ((EQL (CL:CAR A) (CL:CAR B)) (EQL (CL:CDR A) (CL:CDR B))))) ((CL:COND ((CL:STRINGP A) (CL:STRINGP B))) (CL:STRING= A B))))))) (~G865 (CL:EQ A B)))) (CL:SETF (CL:GETHASH 'EQL *BUILTIN-ATOMS*) (CL:FUNCTION EQL)))
(CL:PROGN (CL:DEFUN STRING-CONCAT (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:CONCATENATE) 'CL:STRING X)) (CL:SETF (CL:GETHASH 'STRING-CONCAT *BUILTIN-ATOMS*) (CL:FUNCTION STRING-CONCAT)))
(CL:PROGN (CL:DEFUN STRING (X) (CL:COND ((CL:NUMBERP X) (CL:FORMAT NIL "~A" X)) (T (CL:STRING X)))) (CL:SETF (CL:GETHASH 'STRING *BUILTIN-ATOMS*) (CL:FUNCTION STRING)))
(CL:PROGN (CL:DEFUN STRING== (A B) (CL:STRING= A B)) (CL:SETF (CL:GETHASH 'STRING== *BUILTIN-ATOMS*) (CL:FUNCTION STRING==)))
(CL:PROGN (CL:DEFUN LIST-STRING (X) (CL:LABELS ((~G866 (~G813) (CL:COND (~G813 ~G813) (T (ERROR "List expected instead of ~A." X))))) (~G866 (LIST? X))) (CL:CONCATENATE 'CL:STRING X)) (CL:SETF (CL:GETHASH 'LIST-STRING *BUILTIN-ATOMS*) (CL:FUNCTION LIST-STRING)))
(CL:PROGN (CL:DEFUN %ELT-STRING (OBJ IDX) (CL:ELT OBJ IDX)) (CL:SETF (CL:GETHASH '%ELT-STRING *BUILTIN-ATOMS*) (CL:FUNCTION %ELT-STRING)))
(CL:PROGN (CL:DEFUN CHAR (OBJ IDX) (CL:ELT OBJ IDX)) (CL:SETF (CL:GETHASH 'CHAR *BUILTIN-ATOMS*) (CL:FUNCTION CHAR)))
(CL:DEFVAR *SPECIAL-FORMS*)
(CL:DEFUN SPECIAL-%%MACROCALL (X) (CL:LABELS ((~G867 (!) (CL:APPLY (CL:CDR !) (ARGUMENT-EXPAND-VALUES (CL:CAR X) (CL:CAR !) (CL:CDR X))))) (~G867 (CL:CDR (ASSOC (CL:CAR X) *SPECIAL-FORMS* :TEST (CL:FUNCTION EQ))))))
(CL:DEFUN SPECIAL-%%MACRO? (X) (CL:COND ((CONS? X) (CL:COND ((SYMBOL? (CL:CAR X)) (ASSOC (CL:CAR X) *SPECIAL-FORMS* :TEST (CL:FUNCTION EQ)))))))
(CL:DEFUN SPECIALEXPAND (X) (CL:LABELS ((~G868 (~G814) (CL:PROGN (CL:SETQ *MACRO?* (CL:FUNCTION SPECIAL-%%MACRO?))) (CL:LABELS ((~G869 (~G815) (CL:PROGN (CL:SETQ *MACRO?* ~G814)) ~G815)) (~G869 (CL:PROGN (CL:LABELS ((~G870 (~G816) (CL:PROGN (CL:SETQ *MACROCALL* (CL:FUNCTION SPECIAL-%%MACROCALL))) (CL:LABELS ((~G871 (~G817) (CL:PROGN (CL:SETQ *MACROCALL* ~G816)) ~G817)) (~G871 (CL:PROGN (CL:LABELS ((F (OLD X) (CL:COND ((EQUAL OLD X) X) (T (F X (%MACROEXPAND X)))))) (F X (%MACROEXPAND X)))))))) (~G870 *MACROCALL*))))))) (~G868 *MACRO?*)))
(CL:DEFUN MAKE-%FN-QUIET (NAME ARGS BODY) (CL:COND (ARGS (CL:PROGN (CL:SETQ ARGS (ENSURE-LIST ARGS))))) `(CL:PROGN (CL:PUSH (CL:CONS ',NAME ',(CL:CONS ARGS BODY)) *FUNCTIONS*) (CL:DEFUN ,NAME ,ARGS ,@BODY)))
(CL:DEFVAR *KEYWORD-PACKAGE*)
(CL:DEFVAR *PACKAGE*)
(CL:PROGN (CL:DEFUN MAKE-SYMBOL (X CL:&OPTIONAL (PACKAGE NIL)) (CL:INTERN X (CL:COND ((CL:NOT PACKAGE) *PACKAGE*) ((CL:PACKAGEP PACKAGE) (CL:PACKAGE-NAME PACKAGE)) ((CL:SYMBOLP PACKAGE) (CL:SYMBOL-NAME PACKAGE)) (T PACKAGE)))) (CL:SETF (CL:GETHASH 'MAKE-SYMBOL *BUILTIN-ATOMS*) (CL:FUNCTION MAKE-SYMBOL)))
(CL:PROGN (CL:DEFUN SYMBOL-NAME (X) (CL:COND ((CL:PACKAGEP X) (CL:PACKAGE-NAME X)) (T (CL:SYMBOL-NAME X)))) (CL:SETF (CL:GETHASH 'SYMBOL-NAME *BUILTIN-ATOMS*) (CL:FUNCTION SYMBOL-NAME)))
(CL:PROGN (CL:DEFUN SYMBOL-VALUE (X) (CL:COND ((CL:BOUNDP X) (CL:SYMBOL-VALUE X)) (T X))) (CL:SETF (CL:GETHASH 'SYMBOL-VALUE *BUILTIN-ATOMS*) (CL:FUNCTION SYMBOL-VALUE)))
(CL:PROGN (CL:DEFUN SYMBOL-FUNCTION (X) (CL:COND ((CL:FBOUNDP X) (CL:SYMBOL-FUNCTION X)))) (CL:SETF (CL:GETHASH 'SYMBOL-FUNCTION *BUILTIN-ATOMS*) (CL:FUNCTION SYMBOL-FUNCTION)))
(CL:PROGN (CL:DEFUN SYMBOL-PACKAGE (X) (CL:SYMBOL-PACKAGE X)) (CL:SETF (CL:GETHASH 'SYMBOL-PACKAGE *BUILTIN-ATOMS*) (CL:FUNCTION SYMBOL-PACKAGE)))
(CL:PROGN (CL:DEFUN =-SYMBOL-FUNCTION (V X) (CL:SETF (CL:SYMBOL-FUNCTION X) V)) (CL:SETF (CL:GETHASH '=-SYMBOL-FUNCTION *BUILTIN-ATOMS*) (CL:FUNCTION =-SYMBOL-FUNCTION)))
(CL:PROGN (CL:DEFUN FIND-SYMBOL (X CL:&OPTIONAL (PKG *PACKAGE*)) (CL:FIND-SYMBOL X PKG)) (CL:SETF (CL:GETHASH 'FIND-SYMBOL *BUILTIN-ATOMS*) (CL:FUNCTION FIND-SYMBOL)))
(CL:DEFUN TRE-SYMBOL (X) (CL:INTERN (SYMBOL-NAME X) "TRE"))
(CL:PROGN (CL:DEFUN EXPORT (X CL:&OPTIONAL (PKG *PACKAGE*)) (CL:EXPORT X PKG)) (CL:SETF (CL:GETHASH 'EXPORT *BUILTIN-ATOMS*) (CL:FUNCTION EXPORT)))
(CL:PROGN (CL:DEFUN GETENV (NAME) (SB-EXT:POSIX-GETENV NAME)) (CL:SETF (CL:GETHASH 'GETENV *BUILTIN-ATOMS*) (CL:FUNCTION GETENV)))
(CL:PROGN (CL:DEFUN ARGUMENTS NIL *POSIX-ARGV*) (CL:SETF (CL:GETHASH 'ARGUMENTS *BUILTIN-ATOMS*) (CL:FUNCTION ARGUMENTS)))
(CL:PROGN (CL:DEFUN SH (PROGRAM CL:&REST ARGUMENTS) (SB-EXT:RUN-PROGRAM PROGRAM ARGUMENTS :PTY CL:*STANDARD-OUTPUT*)) (CL:SETF (CL:GETHASH 'SH *BUILTIN-ATOMS*) (CL:FUNCTION SH)))
(CL:PROGN (CL:DEFUN UNIX-SH-CP (FROM TO CL:&KEY (VERBOSE? NIL) (RECURSIVELY? NIL)) (CL:APPLY (CL:FUNCTION SH) "/bin/cp" `(,@(CL:COND (VERBOSE? '("-v"))) ,@(CL:COND (RECURSIVELY? '("-r"))) ,FROM ,TO))) (CL:SETF (CL:GETHASH 'UNIX-SH-CP *BUILTIN-ATOMS*) (CL:FUNCTION UNIX-SH-CP)))
(CL:PROGN (CL:DEFUN UNIX-SH-MKDIR (PATHNAME CL:&KEY (PARENTS NIL)) (CL:APPLY (CL:FUNCTION SH) "/bin/mkdir" `(,@(CL:COND (PARENTS '("-p"))) ,PATHNAME))) (CL:SETF (CL:GETHASH 'UNIX-SH-MKDIR *BUILTIN-ATOMS*) (CL:FUNCTION UNIX-SH-MKDIR)))
(CL:PROGN (CL:DEFUN UNIX-SH-RM (X CL:&KEY (VERBOSE? NIL) (RECURSIVELY? NIL) (FORCE? NIL)) (CL:APPLY (CL:FUNCTION SH) "/bin/rm" `(,@(CL:COND (VERBOSE? '("-v"))) ,@(CL:COND (RECURSIVELY? '("-r"))) ,@(CL:COND (FORCE? '("-f"))) ,X))) (CL:SETF (CL:GETHASH 'UNIX-SH-RM *BUILTIN-ATOMS*) (CL:FUNCTION UNIX-SH-RM)))
(CL:PROGN (CL:DEFUN MILLISECONDS-SINCE-1970 NIL (* 1000 (- (CL:GET-UNIVERSAL-TIME) +UNIX-EPOCH-DIFFERENCE+))) (CL:SETF (CL:GETHASH 'MILLISECONDS-SINCE-1970 *BUILTIN-ATOMS*) (CL:FUNCTION MILLISECONDS-SINCE-1970)))
(CL:PROGN (CL:DEFUN CONS? (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:CONSP) X)) (CL:SETF (CL:GETHASH 'CONS? *BUILTIN-ATOMS*) (CL:FUNCTION CONS?)))
(CL:PROGN (CL:DEFUN SYMBOL? (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:SYMBOLP) X)) (CL:SETF (CL:GETHASH 'SYMBOL? *BUILTIN-ATOMS*) (CL:FUNCTION SYMBOL?)))
(CL:PROGN (CL:DEFUN FUNCTION? (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:FUNCTIONP) X)) (CL:SETF (CL:GETHASH 'FUNCTION? *BUILTIN-ATOMS*) (CL:FUNCTION FUNCTION?)))
(CL:PROGN (CL:DEFUN STRING? (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:STRINGP) X)) (CL:SETF (CL:GETHASH 'STRING? *BUILTIN-ATOMS*) (CL:FUNCTION STRING?)))
(CL:PROGN (CL:DEFUN ARRAY? (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:ARRAYP) X)) (CL:SETF (CL:GETHASH 'ARRAY? *BUILTIN-ATOMS*) (CL:FUNCTION ARRAY?)))
(CL:PROGN (CL:DEFUN NUMBER? (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:NUMBERP) X)) (CL:SETF (CL:GETHASH 'NUMBER? *BUILTIN-ATOMS*) (CL:FUNCTION NUMBER?)))
(CL:PROGN (CL:DEFUN CHARACTER? (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:CHARACTERP) X)) (CL:SETF (CL:GETHASH 'CHARACTER? *BUILTIN-ATOMS*) (CL:FUNCTION CHARACTER?)))
(CL:PROGN (CL:DEFUN INTEGER (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:FLOOR) X)) (CL:SETF (CL:GETHASH 'INTEGER *BUILTIN-ATOMS*) (CL:FUNCTION INTEGER)))
(CL:PROGN (CL:DEFUN %CODE-CHAR (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:CODE-CHAR) X)) (CL:SETF (CL:GETHASH '%CODE-CHAR *BUILTIN-ATOMS*) (CL:FUNCTION %CODE-CHAR)))
(CL:PROGN (CL:DEFUN - (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:-) X)) (CL:SETF (CL:GETHASH '- *BUILTIN-ATOMS*) (CL:FUNCTION -)))
(CL:PROGN (CL:DEFUN * (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:*) X)) (CL:SETF (CL:GETHASH '* *BUILTIN-ATOMS*) (CL:FUNCTION *)))
(CL:PROGN (CL:DEFUN / (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:/) X)) (CL:SETF (CL:GETHASH '/ *BUILTIN-ATOMS*) (CL:FUNCTION /)))
(CL:PROGN (CL:DEFUN == (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:=) X)) (CL:SETF (CL:GETHASH '== *BUILTIN-ATOMS*) (CL:FUNCTION ==)))
(CL:PROGN (CL:DEFUN < (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:<) X)) (CL:SETF (CL:GETHASH '< *BUILTIN-ATOMS*) (CL:FUNCTION <)))
(CL:PROGN (CL:DEFUN > (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:>) X)) (CL:SETF (CL:GETHASH '> *BUILTIN-ATOMS*) (CL:FUNCTION >)))
(CL:PROGN (CL:DEFUN <= (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:<=) X)) (CL:SETF (CL:GETHASH '<= *BUILTIN-ATOMS*) (CL:FUNCTION <=)))
(CL:PROGN (CL:DEFUN >= (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:>=) X)) (CL:SETF (CL:GETHASH '>= *BUILTIN-ATOMS*) (CL:FUNCTION >=)))
(CL:PROGN (CL:DEFUN %* (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:*) X)) (CL:SETF (CL:GETHASH '%* *BUILTIN-ATOMS*) (CL:FUNCTION %*)))
(CL:PROGN (CL:DEFUN %/ (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:/) X)) (CL:SETF (CL:GETHASH '%/ *BUILTIN-ATOMS*) (CL:FUNCTION %/)))
(CL:PROGN (CL:DEFUN NUMBER== (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:=) X)) (CL:SETF (CL:GETHASH 'NUMBER== *BUILTIN-ATOMS*) (CL:FUNCTION NUMBER==)))
(CL:PROGN (CL:DEFUN NUMBER+ (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:+) X)) (CL:SETF (CL:GETHASH 'NUMBER+ *BUILTIN-ATOMS*) (CL:FUNCTION NUMBER+)))
(CL:PROGN (CL:DEFUN NUMBER- (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:-) X)) (CL:SETF (CL:GETHASH 'NUMBER- *BUILTIN-ATOMS*) (CL:FUNCTION NUMBER-)))
(CL:PROGN (CL:DEFUN NUMBER* (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:*) X)) (CL:SETF (CL:GETHASH 'NUMBER* *BUILTIN-ATOMS*) (CL:FUNCTION NUMBER*)))
(CL:PROGN (CL:DEFUN NUMBER/ (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:/) X)) (CL:SETF (CL:GETHASH 'NUMBER/ *BUILTIN-ATOMS*) (CL:FUNCTION NUMBER/)))
(CL:PROGN (CL:DEFUN NUMBER< (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:<) X)) (CL:SETF (CL:GETHASH 'NUMBER< *BUILTIN-ATOMS*) (CL:FUNCTION NUMBER<)))
(CL:PROGN (CL:DEFUN NUMBER> (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:>) X)) (CL:SETF (CL:GETHASH 'NUMBER> *BUILTIN-ATOMS*) (CL:FUNCTION NUMBER>)))
(CL:PROGN (CL:DEFUN CHARACTER== (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:CHAR=) X)) (CL:SETF (CL:GETHASH 'CHARACTER== *BUILTIN-ATOMS*) (CL:FUNCTION CHARACTER==)))
(CL:PROGN (CL:DEFUN CHARACTER< (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:CHAR<) X)) (CL:SETF (CL:GETHASH 'CHARACTER< *BUILTIN-ATOMS*) (CL:FUNCTION CHARACTER<)))
(CL:PROGN (CL:DEFUN CHARACTER> (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:CHAR>) X)) (CL:SETF (CL:GETHASH 'CHARACTER> *BUILTIN-ATOMS*) (CL:FUNCTION CHARACTER>)))
(CL:PROGN (CL:DEFUN POW (CL:&REST X) (CL:APPLY (CL:FUNCTION CL:EXPT) X)) (CL:SETF (CL:GETHASH 'POW *BUILTIN-ATOMS*) (CL:FUNCTION POW)))
"Section COMPILED-INITS"
"Section imports"
(CL:DEFVAR *DEFINITION-PRINTER*)
(CL:DEFVAR *PRINT-AUTOMATIC-NEWLINE?*)
(CL:DEFVAR *STANDARD-INPUT*)
(CL:DEFVAR *MACROEXPAND-BACKQUOTE*)
(CL:DEFVAR *MACROCALL*)
(CL:DEFVAR *MACRO?*)
(CL:DEFVAR +CL-FUNCTION-IMPORTS+)
(CL:DEFVAR *VALUES-MAGIC*)
(CL:DEFVAR *STANDARD-OUTPUT*)
(CL:DEFVAR *COMPILER-MACRO-EXPANDER*)
(CL:DEFVAR *GENSYM-COUNTER*)
(CL:DEFVAR *TAGBODY-REPLACEMENTS*)
(CL:DEFVAR *TYPES*)
(CL:DEFVAR *EXPANDER-DUMP?*)
(CL:DEFVAR *PRINTER-ABBREVIATIONS*)
(CL:DEFVAR *ALWAYS-PRINT-PACKAGE-NAMES?*)
(CL:DEFVAR *INVISIBLE-PACKAGE-NAMES*)
(CL:DEFVAR *PRINTER-ARGUMENT-DEFINITIONS*)
(CL:DEFUN %GET-PRINTER-ARGUMENT-DEFINITION (X) (CL:BLOCK %GET-PRINTER-ARGUMENT-DEFINITION (CL:BLOCK NIL (HREF *PRINTER-ARGUMENT-DEFINITIONS* X))))
(CL:DEFUN %PRINT-GAP (STR) (CL:BLOCK %PRINT-GAP (CL:BLOCK NIL (CL:LABELS ((~G872 (~G211) (CL:COND (~G211 ~G211) (T (PRINC " " STR))))) (~G872 (FRESH-LINE? STR))))))
(CL:DEFUN DIGIT-NUMBER (X) (CL:BLOCK DIGIT-NUMBER (CL:BLOCK NIL (- (CL:CHAR-CODE X) (CL:CHAR-CODE #\0)))))
(CL:DEFUN %NONDECIMAL-DIGIT? (X START BASE) (CL:BLOCK %NONDECIMAL-DIGIT? (CL:BLOCK NIL (CHARRANGE? X START (CODE-CHAR (+ (CL:CHAR-CODE START) (- BASE 10)))))))
(CL:DEFUN ABS (X) (CL:BLOCK ABS (CL:BLOCK NIL (CL:COND ((< X 0) (- X)) (T X)))))
(CL:DEFUN INVISIBLE-PACKAGE? (X) (CL:BLOCK INVISIBLE-PACKAGE? (CL:BLOCK NIL (CL:LABELS ((~G873 (!) (SOME (CL:LAMBDA (_) (CL:BLOCK NIL (STRING== ! _))) *INVISIBLE-PACKAGE-NAMES*))) (~G873 (CL:PACKAGE-NAME X))))))
(CL:DEFUN ABBREVIATED-PACKAGE-NAME (X) (CL:BLOCK ABBREVIATED-PACKAGE-NAME (CL:BLOCK NIL (CL:COND ((STRING== "COMMON-LISP" X) "CL") (T X)))))
(CL:DEFUN %PRINT-ESCAPED-SYMBOL (X STR) (CL:BLOCK %PRINT-ESCAPED-SYMBOL (CL:BLOCK NIL (PRINC #\| STR) (CL:BLOCK NIL (CL:LABELS ((~G874 (~G231) (CL:LABELS ((~G875 (I) (CL:TAGBODY ~G229 (CL:COND ((NOT ~G231) (CL:GO ~G230))) (CL:SETQ I (CL:CAR ~G231)) (CL:COND ((EQL I #\|) (PRINC "\\|" STR)) (T (PRINC I STR))) (CL:SETQ ~G231 (CL:CDR ~G231)) (CL:GO ~G229) ~G230 (CL:RETURN-FROM NIL (CL:PROGN))))) (~G875 NIL)))) (~G874 (STRING-LIST X)))) (PRINC #\| STR))))
(CL:DEFUN SYMBOL-CHAR-NEEDS-ESCAPING? (X) (CL:BLOCK SYMBOL-CHAR-NEEDS-ESCAPING? (CL:BLOCK NIL (CL:LABELS ((~G876 (~G232) (CL:COND (~G232 ~G232) (T (LOWER-CASE? X))))) (~G876 (EQL #\| X))))))
(CL:DEFUN %PRINT-REST (X STR INFO) (CL:BLOCK %PRINT-REST (CL:BLOCK NIL (CL:COND (X (CL:PROGN (CL:COND ((CONS? X) (CL:PROGN (%PRINT-GAP STR) (%LATE-PRINT (CL:CAR X) STR INFO) (%PRINT-REST (CL:CDR X) STR INFO))) (T (CL:PROGN (PRINC " . " STR) (%LATE-PRINT X STR INFO))))))))))
(CL:DEFUN %PRINT-CALL (X ARGDEF STR INFO) (CL:BLOCK %PRINT-CALL (CL:BLOCK NIL (CL:PROGN (%PRINT-INDENTATION STR INFO) (CL:PROGN (=-PRINT-INFO-COLUMNS (CL:CONS (STREAM-LOCATION-COLUMN (STREAM-OUTPUT-LOCATION STR)) (PRINT-INFO-COLUMNS INFO)) INFO)) (PRINC "(" STR) (%LATE-PRINT (CL:CAR X) STR INFO) (CL:LABELS ((~G877 (EXPANDED) (CL:COND ((EQ EXPANDED 'ERROR) (%PRINT-REST (CL:CDR X) STR INFO)) (T (CL:BLOCK NIL (CL:LABELS ((~G878 (~G224) (CL:LABELS ((~G879 (I) (CL:TAGBODY ~G222 (CL:COND ((NOT ~G224) (CL:GO ~G223))) (CL:SETQ I (CL:CAR ~G224)) (%PRINT-GAP STR) (CL:COND ((CL:COND ((%BODY? (CL:CDR I)) (CL:CDR (CL:CDR I)))) (CL:PROGN (CL:COND (*PRINT-AUTOMATIC-NEWLINE?* (FRESH-LINE STR))) (%PRINT-BODY (CL:CDR (CL:CDR I)) STR INFO))) ((%REST? (CL:CDR I)) (%PRINT-REST (CL:CDR (CL:CDR I)) STR INFO)) ((%KEY? (CL:CDR I)) (CL:PROGN (%PRINT-SYMBOL (MAKE-KEYWORD (CL:CAR I)) STR INFO) (PRINC " " STR) (%LATE-PRINT (CL:CDR (CL:CDR I)) STR INFO))) (T (CL:LABELS ((~G880 (~G220) (CL:PROGN (CL:SETQ *PRINT-AUTOMATIC-NEWLINE?* NIL)) (CL:LABELS ((~G881 (~G221) (CL:PROGN (CL:SETQ *PRINT-AUTOMATIC-NEWLINE?* ~G220)) ~G221)) (~G881 (CL:PROGN (%LATE-PRINT (CL:CDR I) STR INFO)))))) (~G880 *PRINT-AUTOMATIC-NEWLINE?*)))) (CL:SETQ ~G224 (CL:CDR ~G224)) (CL:GO ~G222) ~G223 (CL:RETURN-FROM NIL (CL:PROGN))))) (~G879 NIL)))) (~G878 EXPANDED))))))) (~G877 (ARGUMENT-EXPAND '%PRINT-CALL (CL:CDR X) ARGDEF))) (PRINC ")" STR) (CL:LABELS ((~G882 (RET) (CL:PROGN (=-PRINT-INFO-COLUMNS (CL:CDR (PRINT-INFO-COLUMNS INFO)) INFO)) RET)) (~G882 (CL:CAR (PRINT-INFO-COLUMNS INFO))))))))
(CL:DEFUN %PRINT-CALL? (X INFO) (CL:BLOCK %PRINT-CALL? (CL:BLOCK NIL (CL:COND ((PRINT-INFO-PRETTY-PRINT? INFO) (CL:COND ((CONS? X) (CL:COND ((CL:CAR X) (CL:COND ((SYMBOL? (CL:CAR X)) (CL:COND ((LIST? (CL:CDR X)) (CL:LABELS ((~G883 (~G225) (CL:COND (~G225 ~G225) (T (CL:COND ((NOT (BUILTIN? (CL:CAR X))) (CL:PROGN (CL:COND ((FUNCTION? (SYMBOL-FUNCTION (CL:CAR X))) (FUNCTION-ARGUMENTS (CL:CAR X))))))))))) (~G883 (%GET-PRINTER-ARGUMENT-DEFINITION (CL:CAR X)))))))))))))))))
(CL:DEFUN RANGE? (X LOWER UPPER) (CL:BLOCK RANGE? (CL:BLOCK NIL (CL:COND ((>= X LOWER) (<= X UPPER))))))
(CL:DEFUN %PRINT-LIST (X STR INFO) (CL:BLOCK %PRINT-LIST (CL:BLOCK NIL (CL:LABELS ((~G884 (!) (CL:COND (! (CL:COND ((FUNCTION? !) (FUNCALL ! X STR INFO)) (T (%PRINT-CALL X ! STR INFO)))) (T (CL:PROGN (%PRINT-INDENTATION STR INFO) (CL:PROGN (=-PRINT-INFO-COLUMNS (CL:CONS (STREAM-LOCATION-COLUMN (STREAM-OUTPUT-LOCATION STR)) (PRINT-INFO-COLUMNS INFO)) INFO)) (PRINC "(" STR) (%LATE-PRINT (CL:CAR X) STR INFO) (%PRINT-REST (CL:CDR X) STR INFO) (PRINC ")" STR) (CL:LABELS ((~G885 (RET) (CL:PROGN (=-PRINT-INFO-COLUMNS (CL:CDR (PRINT-INFO-COLUMNS INFO)) INFO)) RET)) (~G885 (CL:CAR (PRINT-INFO-COLUMNS INFO))))))))) (~G884 (%PRINT-CALL? X INFO))))))
(CL:DEFUN %PRINT-ABBREVIATION (ABBREVIATION X STR INFO) (CL:BLOCK %PRINT-ABBREVIATION (CL:BLOCK NIL (CL:PROGN (%PRINT-INDENTATION STR INFO) (PRINC (CL:CAR (CL:CDR ABBREVIATION)) STR) (%LATE-PRINT (CL:CAR (CL:CDR X)) STR INFO)))))
(CL:DEFUN %PRINT-SYMBOL-COMPONENT (X STR) (CL:BLOCK %PRINT-SYMBOL-COMPONENT (CL:BLOCK NIL (CL:COND ((SOME (CL:FUNCTION SYMBOL-CHAR-NEEDS-ESCAPING?) (STRING-LIST X)) (%PRINT-ESCAPED-SYMBOL X STR)) (T (PRINC X STR))))))
(CL:DEFUN %PRINT-SYMBOL-PACKAGE (NAME STR) (CL:BLOCK %PRINT-SYMBOL-PACKAGE (CL:BLOCK NIL (%PRINT-SYMBOL-COMPONENT (ABBREVIATED-PACKAGE-NAME NAME) STR))))
(CL:DEFUN INVISIBLE-PACKAGE-NAME? (X) (CL:BLOCK INVISIBLE-PACKAGE-NAME? (CL:BLOCK NIL (CL:COND ((NOT (CL:LABELS ((~G886 (~G233) (CL:COND (~G233 ~G233) (T (CL:LABELS ((~G887 (~G234) (CL:COND (~G234 ~G234) (T *ALWAYS-PRINT-PACKAGE-NAMES?*)))) (~G887 (EQ T X))))))) (~G886 (NOT X)))) (CL:PROGN (INVISIBLE-PACKAGE? (SYMBOL-PACKAGE X))))))))
(CL:DEFUN FUNCTION-BODY (FUN) (CL:BLOCK FUNCTION-BODY (CL:BLOCK NIL (CL:COND ((FUNCTION-BYTECODE FUN) (CL:AREF (FUNCTION-BYTECODE FUN) 1)) (T (CL:CDR (FUNCTION-SOURCE FUN)))))))
(CL:DEFUN FUNCTION-ARGUMENTS (FUN) (CL:BLOCK FUNCTION-ARGUMENTS (CL:BLOCK NIL (CL:COND ((BUILTIN? FUN) (CL:CONS 'CL:&REST (CL:CONS 'ARGS-TO-BUILTIN NIL))) ((FUNCTION-BYTECODE FUN) (CL:AREF (FUNCTION-BYTECODE FUN) 0)) (T (CL:CAR (FUNCTION-SOURCE FUN)))))))
(CL:DEFUN NEXT-TABULATOR-COLUMN (COLUMN SIZE) (CL:BLOCK NEXT-TABULATOR-COLUMN (CL:BLOCK NIL (INTEGER (++ (* SIZE (++ (/ (-- COLUMN) SIZE))))))))
(CL:DEFUN =-STREAM-LOCATION-LINE (VAL ARR) (CL:BLOCK =-STREAM-LOCATION-LINE (CL:BLOCK NIL (CL:PROGN (=-AREF VAL ARR 4)))))
(CL:DEFUN =-STREAM-LOCATION-COLUMN (VAL ARR) (CL:BLOCK =-STREAM-LOCATION-COLUMN (CL:BLOCK NIL (CL:PROGN (=-AREF VAL ARR 5)))))
(CL:DEFUN STREAM-LOCATION-TABSIZE (ARR) (CL:BLOCK STREAM-LOCATION-TABSIZE (CL:BLOCK NIL (CL:AREF ARR 6))))
(CL:DEFUN DECIMALS-CHARS (X) (CL:BLOCK DECIMALS-CHARS (CL:BLOCK NIL (CL:LABELS ((~G888 (!) (CL:COND ((< 0 !) (CL:CONS (NUMBER-DIGIT (INTEGER !)) (DECIMALS-CHARS !)))))) (~G888 (CL:MOD (* X 10) 10))))))
(CL:DEFUN INTEGER-CHARS (X) (CL:BLOCK INTEGER-CHARS (CL:BLOCK NIL (CL:LABELS ((F (_) (CL:BLOCK NIL (CL:LABELS ((~G889 (!) (CL:CONS (NUMBER-DIGIT !) (CL:COND ((<= 10 _) (F (/ (- _ !) 10))))))) (~G889 (INTEGER (CL:MOD _ 10))))))) (REVERSE (F (INTEGER (ABS X))))))))
(CL:DEFUN NUMBER-DIGIT (X) (CL:BLOCK NUMBER-DIGIT (CL:BLOCK NIL (CODE-CHAR (CL:COND ((< X 10) (+ (CL:CHAR-CODE #\0) X)) (T (+ (CL:CHAR-CODE #\a) -10 X)))))))
(CL:DEFUN NONDECIMAL-DIGIT? (X CL:&KEY (BASE 10)) (CL:BLOCK NONDECIMAL-DIGIT? (CL:BLOCK NIL (CL:COND ((< 10 BASE) (CL:LABELS ((~G890 (~G53) (CL:COND (~G53 ~G53) (T (%NONDECIMAL-DIGIT? X #\A BASE))))) (~G890 (%NONDECIMAL-DIGIT? X #\a BASE))))))))
(CL:DEFUN DECIMAL-DIGIT? (X) (CL:BLOCK DECIMAL-DIGIT? (CL:BLOCK NIL (CHARRANGE? X #\0 #\9))))
(CL:DEFUN VECTOR? (X) (CL:BLOCK VECTOR? (CL:BLOCK NIL (STRING? X) (ARRAY? X))))
(CL:DEFUN CHARACTER<= (CL:&REST X) (CL:BLOCK CHARACTER<= (CL:BLOCK NIL (CL:APPLY (CL:FUNCTION <=) (DYNAMIC-MAP (CL:FUNCTION CL:CHAR-CODE) X)))))
(CL:DEFUN CHARACTER>= (CL:&REST X) (CL:BLOCK CHARACTER>= (CL:BLOCK NIL (CL:APPLY (CL:FUNCTION >=) (DYNAMIC-MAP (CL:FUNCTION CL:CHAR-CODE) X)))))
(CL:DEFUN SPECIAL-CHAR? (X) (CL:BLOCK SPECIAL-CHAR? (CL:BLOCK NIL (CL:LABELS ((~G891 (~G244) (CL:COND (~G244 ~G244) (T (CL:LABELS ((~G892 (~G245) (CL:COND (~G245 ~G245) (T (CL:LABELS ((~G893 (~G246) (CL:COND (~G246 ~G246) (T (CL:LABELS ((~G894 (~G247) (CL:COND (~G247 ~G247) (T (CL:LABELS ((~G895 (~G248) (CL:COND (~G248 ~G248) (T (CL:LABELS ((~G896 (~G249) (CL:COND (~G249 ~G249) (T (CL:LABELS ((~G897 (~G250) (CL:COND (~G250 ~G250) (T (CL:LABELS ((~G898 (~G251) (CL:COND (~G251 ~G251) (T (CL:LABELS ((~G899 (~G252) (CL:COND (~G252 ~G252) (T (CL:LABELS ((~G900 (~G253) (CL:COND (~G253 ~G253) (T (CL:LABELS ((~G901 (~G254) (CL:COND (~G254 ~G254) (T (CL:LABELS ((~G902 (~G255) (CL:COND (~G255 ~G255) (T (EQL X #\#))))) (~G902 (EQL X #\;))))))) (~G901 (EQL X #\:))))))) (~G900 (EQL X #\,))))))) (~G899 (EQL X #\`))))))) (~G898 (EQL X #\'))))))) (~G897 (EQL X #\"))))))) (~G896 (EQL X #\}))))))) (~G895 (EQL X #\{))))))) (~G894 (EQL X #\]))))))) (~G893 (EQL X #\[))))))) (~G892 (EQL X #\)))))))) (~G891 (EQL X #\())))))
(CL:DEFUN READ-INTEGER-0 (STR V) (CL:BLOCK READ-INTEGER-0 (CL:BLOCK NIL (CL:COND ((AHEAD? (CL:FUNCTION DIGIT?) STR) (READ-INTEGER-0 STR (+ (* V 10) (DIGIT-NUMBER (READ-CHAR STR))))) (T V)))))
(CL:DEFUN READ-DECIMAL-PLACES-0 (STR V S) (CL:BLOCK READ-DECIMAL-PLACES-0 (CL:BLOCK NIL (CL:COND ((AHEAD? (CL:FUNCTION DIGIT?) STR) (READ-DECIMAL-PLACES-0 STR (+ V (* S (DIGIT-NUMBER (READ-CHAR STR)))) (/ S 10))) (T V)))))
(CL:DEFUN %FIND-IF-SEQUENCE (PRED SEQ START END FROM-END WITH-INDEX) (CL:BLOCK %FIND-IF-SEQUENCE (CL:BLOCK NIL (CL:COND (SEQ (CL:COND ((< 0 (CL:LENGTH SEQ)) (CL:LABELS ((~G903 (E) (CL:LABELS ((~G904 (S) (CL:COND ((CL:LABELS ((~G905 (~G87) (CL:COND (~G87 ~G87) (T (CL:COND ((< S E) FROM-END)))))) (~G905 (CL:COND ((> S E) (NOT FROM-END))))) (CL:LABELS ((~G906 (~G88) (CL:PROGN (CL:SETQ S E) (CL:SETQ E ~G88)))) (~G906 S)))) (CL:BLOCK NIL (CL:LABELS ((~G907 (I) (CL:TAGBODY ~G89 (CL:COND ((CL:COND (FROM-END (< I E)) (T (> I E))) (CL:RETURN-FROM NIL (CL:PROGN)))) (CL:LABELS ((~G908 (!) (CL:COND ((CL:APPLY PRED (CL:CONS ! (CL:COND (WITH-INDEX (LIST I))))) (CL:RETURN-FROM NIL !))))) (~G908 (ELT SEQ I))) (CL:SETQ I (CL:COND (FROM-END (-- I)) (T (++ I)))) (CL:GO ~G89)))) (~G907 S))))) (~G904 (CL:LABELS ((~G909 (~G86) (CL:COND (~G86 ~G86) (T 0)))) (~G909 START)))))) (~G903 (CL:LABELS ((~G910 (~G85) (CL:COND (~G85 ~G85) (T (-- (CL:LENGTH SEQ)))))) (~G910 END)))))))))))
(CL:DEFUN %FIND-IF-LIST (PRED SEQ FROM-END WITH-INDEX) (CL:BLOCK %FIND-IF-LIST (CL:BLOCK NIL (CL:LABELS ((~G911 (!) (CL:COND (WITH-INDEX (CL:LABELS ((~G912 (IDX) (CL:BLOCK NIL (CL:LABELS ((~G913 (~G84) (CL:LABELS ((~G914 (I) (CL:TAGBODY ~G82 (CL:COND ((NOT ~G84) (CL:GO ~G83))) (CL:SETQ I (CL:CAR ~G84)) (CL:COND ((FUNCALL PRED I IDX) (CL:RETURN-FROM NIL I))) (CL:PROGN (CL:SETQ IDX (NUMBER+ IDX 1))) (CL:SETQ ~G84 (CL:CDR ~G84)) (CL:GO ~G82) ~G83 (CL:RETURN-FROM NIL (CL:PROGN))))) (~G914 NIL)))) (~G913 !))))) (~G912 0))) (T (CL:BLOCK NIL (CL:LABELS ((~G915 (~G81) (CL:LABELS ((~G916 (I) (CL:TAGBODY ~G79 (CL:COND ((NOT ~G81) (CL:GO ~G80))) (CL:SETQ I (CL:CAR ~G81)) (CL:COND ((FUNCALL PRED I) (CL:RETURN-FROM NIL I))) (CL:SETQ ~G81 (CL:CDR ~G81)) (CL:GO ~G79) ~G80 (CL:RETURN-FROM NIL (CL:PROGN))))) (~G916 NIL)))) (~G915 !))))))) (~G911 (CL:COND (FROM-END (REVERSE SEQ)) (T SEQ)))))))
(CL:DEFUN EXPANDER-MACRO (EXPANDER MACRO-NAME) (CL:BLOCK EXPANDER-MACRO (CL:BLOCK NIL (HREF (EXPANDER-MACROS EXPANDER) MACRO-NAME))))
(CL:DEFUN REVERSE (LST) (CL:BLOCK REVERSE (CL:BLOCK NIL (CL:LABELS ((~G917 (!) (CL:BLOCK NIL (CL:LABELS ((~G918 (~G21) (CL:LABELS ((~G919 (I) (CL:TAGBODY ~G19 (CL:COND ((NOT ~G21) (CL:GO ~G20))) (CL:SETQ I (CL:CAR ~G21)) (CL:PROGN (CL:SETQ ! (CL:CONS I !))) (CL:SETQ ~G21 (CL:CDR ~G21)) (CL:GO ~G19) ~G20 (CL:RETURN-FROM NIL (CL:PROGN !))))) (~G919 NIL)))) (~G918 LST))))) (~G917 NIL)))))
(CL:DEFUN ARGDEF-GET-DEFAULT (X) (CL:BLOCK ARGDEF-GET-DEFAULT (CL:BLOCK NIL (CL:COND ((CONS? X) (CL:COND ((ARGUMENT-TYPE-SPECIFIER? (CL:CAR (CL:CDR X))) (CL:CAR (CL:CDR (CL:CDR X)))) (T (CL:CAR (CL:CDR X))))) (T X)))))
(CL:DEFUN ASSOC-VALUE (KEY LST CL:&KEY (TEST (CL:FUNCTION EQL))) (CL:BLOCK ASSOC-VALUE (CL:BLOCK NIL (CL:CDR (ASSOC KEY LST :TEST TEST)))))
(CL:DEFUN SOME (PRED CL:&REST SEQS) (CL:BLOCK SOME (CL:BLOCK NIL (FIND-IF PRED (CL:APPLY (CL:FUNCTION APPEND) SEQS)))))
(CL:DEFUN ARGUMENT-TYPE-SPECIFIER? (X) (CL:BLOCK ARGUMENT-TYPE-SPECIFIER? (CL:BLOCK NIL (CL:LABELS ((~G920 (~G194) (CL:COND (~G194 ~G194) (T (ASSOC X *TYPES*))))) (~G920 (STRING? X))))))
(CL:DEFUN =-ELT (VAL SEQ IDX) (CL:BLOCK =-ELT (CL:BLOCK NIL (CL:COND ((ARRAY? SEQ) (CL:PROGN (=-AREF VAL SEQ IDX))) ((CONS? SEQ) (CL:RPLACA (NTHCDR IDX SEQ) VAL)) ((STRING? SEQ) (ERROR "Strings cannot be modified.")) (T (ERROR "Not a sequence: ~A" SEQ))))))
(CL:DEFUN FIND-IF (PRED SEQ CL:&KEY (START NIL) (END NIL) (FROM-END NIL) (WITH-INDEX NIL)) (CL:BLOCK FIND-IF (CL:BLOCK NIL (CL:COND ((NOT (ATOM SEQ) START END) (%FIND-IF-LIST PRED SEQ FROM-END WITH-INDEX)) (T (%FIND-IF-SEQUENCE PRED SEQ START END FROM-END WITH-INDEX))))))
(CL:DEFUN QUEUE-POP (X) (CL:BLOCK QUEUE-POP (CL:BLOCK NIL (CL:LABELS ((~G921 (~G7) (CL:COND ((NOT (CL:CDR (CL:CDR X))) (CL:RPLACA X NIL))) (CL:COND ((CL:CDR X) (CL:RPLACD X (CL:CDR (CL:CDR X))))) ~G7)) (~G921 (CL:CAR (CL:CDR X)))))))
(CL:DEFUN READ-DECIMAL-PLACES (CL:&OPTIONAL (STR *STANDARD-INPUT*)) (CL:BLOCK READ-DECIMAL-PLACES (CL:BLOCK NIL (CL:COND ((AHEAD? (CL:FUNCTION DIGIT?) STR) (READ-DECIMAL-PLACES-0 STR 0 0.1))))))
(CL:DEFUN READ-INTEGER (CL:&OPTIONAL (STR *STANDARD-INPUT*)) (CL:BLOCK READ-INTEGER (CL:BLOCK NIL (CL:COND ((AHEAD? (CL:FUNCTION DIGIT?) STR) (INTEGER (READ-INTEGER-0 STR 0)))))))
(CL:DEFUN SYMBOL-CHAR? (X) (CL:BLOCK SYMBOL-CHAR? (CL:BLOCK NIL (CL:COND (X (CL:COND ((> (CL:CHAR-CODE X) 32) (NOT (SPECIAL-CHAR? X)))))))))
(CL:DEFUN HEX-DIGIT? (X) (CL:BLOCK HEX-DIGIT? (CL:BLOCK NIL (CL:LABELS ((~G922 (~G55) (CL:COND (~G55 ~G55) (T (CL:LABELS ((~G923 (~G56) (CL:COND (~G56 ~G56) (T (CL:COND ((CHARACTER>= X #\a) (CHARACTER<= X #\f))))))) (~G923 (CL:COND ((CHARACTER>= X #\A) (CHARACTER<= X #\F))))))))) (~G922 (DIGIT? X))))))
(CL:DEFUN LIST-ARRAY (X) (CL:BLOCK LIST-ARRAY (CL:BLOCK NIL (CL:LABELS ((~G924 (A) (CL:LABELS ((~G925 (IDX) (CL:BLOCK NIL (CL:LABELS ((~G926 (~G68) (CL:LABELS ((~G927 (I) (CL:TAGBODY ~G66 (CL:COND ((NOT ~G68) (CL:GO ~G67))) (CL:SETQ I (CL:CAR ~G68)) (CL:PROGN (=-AREF I A IDX)) (CL:PROGN (CL:SETQ IDX (NUMBER+ IDX 1))) (CL:SETQ ~G68 (CL:CDR ~G68)) (CL:GO ~G66) ~G67 (CL:RETURN-FROM NIL (CL:PROGN A))))) (~G927 NIL)))) (~G926 X))))) (~G925 0)))) (~G924 (MAKE-ARRAY (CL:LENGTH X)))))))
(CL:DEFUN SPLIT (OBJ SEQ CL:&KEY (TEST (CL:FUNCTION EQL)) (INCLUDE? NIL)) (CL:BLOCK SPLIT (CL:BLOCK NIL (CL:COND (SEQ (CL:LABELS ((~G928 (!) (CL:COND (! (CL:CONS (SUBSEQ SEQ 0 (CL:COND (INCLUDE? (++ !)) (T !))) (SPLIT OBJ (SUBSEQ SEQ (++ !)) :TEST TEST :INCLUDE? INCLUDE?))) (T (LIST SEQ))))) (~G928 (POSITION OBJ SEQ :TEST TEST))))))))
(CL:DEFUN STREAM-LOCATION-ID (ARR) (CL:BLOCK STREAM-LOCATION-ID (CL:BLOCK NIL (CL:AREF ARR 3))))
(CL:DEFUN STREAM-LOCATION-LINE (ARR) (CL:BLOCK STREAM-LOCATION-LINE (CL:BLOCK NIL (CL:AREF ARR 4))))
(CL:DEFUN STREAM-INPUT-LOCATION (ARR) (CL:BLOCK STREAM-INPUT-LOCATION (CL:BLOCK NIL (CL:AREF ARR 8))))
(CL:DEFUN READ-MAKE-SYMBOL (SYM CL:&OPTIONAL (PKG *PACKAGE*)) (CL:BLOCK READ-MAKE-SYMBOL (CL:BLOCK NIL (CL:LABELS ((~G929 (~G271) (CL:COND (~G271 ~G271) (T (MAKE-SYMBOL SYM PKG))))) (~G929 (FIND-SYMBOL SYM PKG))))))
(CL:DEFUN READ-SYMBOL (STR) (CL:BLOCK READ-SYMBOL (CL:BLOCK NIL (CL:LABELS ((F NIL (CL:BLOCK NIL (CL:COND ((AHEAD? (CL:FUNCTION SYMBOL-CHAR?) STR) (CL:CONS (READ-CHAR STR) (F)))))) (F2 NIL (CL:BLOCK NIL (CL:COND ((NOT (CL:LABELS ((~G930 (~G256) (CL:COND (~G256 ~G256) (T (AHEAD? #\| STR))))) (~G930 (NOT (PEEK-CHAR STR))))) (CL:PROGN (CL:COND ((AHEAD? #\\ STR) (CL:PROGN (READ-CHAR STR) (CL:CONS (READ-CHAR STR) (F2)))) (T (CL:CONS (READ-CHAR STR) (F2)))))))))) (CL:COND ((AHEAD? #\| STR) (CL:PROGN (READ-CHAR STR) (CL:COND ((WHITESPACE? (PEEK-CHAR STR)) (CL:PROGN (CL:RETURN-FROM NIL (LIST #\|))))) (CL:LABELS ((~G931 (~G257) (CL:COND ((AHEAD? #\| STR) (READ-CHAR STR)) (T (ERROR "Expected end of symbol name '|' instead of '~A'." (PEEK-CHAR STR)))) ~G257)) (~G931 (F2))))) (T (CL:COND ((NOT (SPECIAL-CHAR? (SEEK-CHAR STR))) (CL:PROGN (FILTER (CL:FUNCTION CHAR-UPCASE) (F)))))))))))
(CL:DEFUN EVERY (PRED CL:&REST SEQS) (CL:BLOCK EVERY (CL:BLOCK NIL (CL:BLOCK NIL (CL:LABELS ((~G932 (~G94) (CL:LABELS ((~G933 (SEQ) (CL:TAGBODY ~G92 (CL:COND ((NOT ~G94) (CL:GO ~G93))) (CL:SETQ SEQ (CL:CAR ~G94)) (CL:COND ((LIST? SEQ) (CL:BLOCK NIL (CL:LABELS ((~G934 (~G97) (CL:LABELS ((~G935 (I) (CL:TAGBODY ~G95 (CL:COND ((NOT ~G97) (CL:GO ~G96))) (CL:SETQ I (CL:CAR ~G97)) (CL:LABELS ((~G936 (~G90) (CL:COND (~G90 ~G90) (T (CL:RETURN-FROM EVERY NIL))))) (~G936 (FUNCALL PRED I))) (CL:SETQ ~G97 (CL:CDR ~G97)) (CL:GO ~G95) ~G96 (CL:RETURN-FROM NIL (CL:PROGN T))))) (~G935 NIL)))) (~G934 SEQ)))) ((VECTOR? SEQ) (CL:LABELS ((~G937 (~G98) (CL:COND ((< ~G98 0) (ERROR "DOTIMES: Number of iterations is negative: ~A." ~G98))) (CL:BLOCK NIL (CL:LABELS ((~G938 (!) (CL:TAGBODY ~G99 (CL:COND ((== ! ~G98) (CL:RETURN-FROM NIL (CL:PROGN NIL)))) (CL:LABELS ((~G939 (~G91) (CL:COND (~G91 ~G91) (T (CL:RETURN-FROM EVERY NIL))))) (~G939 (FUNCALL PRED (ELT SEQ !)))) (CL:SETQ ! (NUMBER+ 1 !)) (CL:GO ~G99)))) (~G938 0))))) (~G937 (INTEGER (CL:LENGTH SEQ))))) (T (ERROR "Not a sequence: ~A." SEQ))) (CL:SETQ ~G94 (CL:CDR ~G94)) (CL:GO ~G92) ~G93 (CL:RETURN-FROM NIL (CL:PROGN T))))) (~G933 NIL)))) (~G932 SEQS))))))
(CL:DEFUN DIGIT? (C CL:&KEY (BASE 10)) (CL:BLOCK DIGIT? (CL:BLOCK NIL (CL:COND ((CHARACTER? C) (CL:LABELS ((~G940 (~G54) (CL:COND (~G54 ~G54) (T (NONDECIMAL-DIGIT? C :BASE BASE))))) (~G940 (DECIMAL-DIGIT? C))))))))
(CL:DEFUN INTEGER-STRING (X N R) (CL:BLOCK INTEGER-STRING (CL:BLOCK NIL (CL:LABELS ((F (_) (CL:BLOCK NIL (CL:CONS (NUMBER-DIGIT (CL:MOD _ R)) (CL:COND ((NOT (== 0 (CL:PROGN (CL:SETQ N (- N 1))))) (CL:PROGN (F (INTEGER (/ _ R)))))))))) (LIST-STRING (REVERSE (F X)))))))
(CL:DEFUN NUMBER-DIGITS (X) (CL:BLOCK NUMBER-DIGITS (CL:BLOCK NIL (+ (CL:COND ((< X 0) (CL:CONS #\- NIL))) (INTEGER-CHARS X) (CL:LABELS ((~G941 (!) (CL:COND ((NOT (== 0 !)) (CL:PROGN (CL:CONS #\. (DECIMALS-CHARS !))))))) (~G941 (CL:MOD X 1)))))))
(CL:DEFUN STREAM-FUN-OUT (ARR) (CL:BLOCK STREAM-FUN-OUT (CL:BLOCK NIL (CL:AREF ARR 4))))
(CL:DEFUN %TRACK-LOCATION (STREAM-LOCATION X) (CL:BLOCK %TRACK-LOCATION (CL:BLOCK NIL (CL:LABELS ((~G942 (~G167) (CL:LABELS ((~G943 (STREAM-LOCATION TRACK? ID LINE COLUMN TABSIZE) TRACK? ID LINE COLUMN TABSIZE (CL:COND (TRACK? (CL:PROGN (CL:COND ((STRING? X) (CL:LABELS ((~G944 (~G168) (CL:COND (~G168 (CL:PROGN (CL:LABELS ((~G945 (~G170) (CL:COND ((< ~G170 0) (ERROR "DOTIMES: Number of iterations is negative: ~A." ~G170))) (CL:BLOCK NIL (CL:LABELS ((~G946 (~G169) (CL:TAGBODY ~G171 (CL:COND ((== ~G169 ~G170) (CL:RETURN-FROM NIL (CL:PROGN NIL)))) (CL:LABELS ((~G947 (!) (%TRACK-LOCATION STREAM-LOCATION !))) (~G947 (ELT ~G168 ~G169))) (CL:SETQ ~G169 (NUMBER+ 1 ~G169)) (CL:GO ~G171)))) (~G946 0))))) (~G945 (INTEGER (CL:LENGTH ~G168))))))))) (~G944 X))) (T (CL:COND (X (CL:PROGN (CL:COND ((== 10 (CL:CHAR-CODE X)) (CL:PROGN (CL:PROGN (=-STREAM-LOCATION-COLUMN 1 STREAM-LOCATION)) (CL:PROGN (=-STREAM-LOCATION-LINE (NUMBER+ (STREAM-LOCATION-LINE STREAM-LOCATION) 1) STREAM-LOCATION)))) (T (CL:COND ((== 9 (CL:CHAR-CODE X)) (CL:PROGN (=-STREAM-LOCATION-COLUMN (NEXT-TABULATOR-COLUMN COLUMN TABSIZE) STREAM-LOCATION))) ((< 31 (CL:CHAR-CODE X)) (CL:PROGN (=-STREAM-LOCATION-COLUMN (NUMBER+ (STREAM-LOCATION-COLUMN STREAM-LOCATION) 1) STREAM-LOCATION)))))))))))))) X)) (~G943 ~G167 (STREAM-LOCATION-TRACK? ~G167) (STREAM-LOCATION-ID ~G167) (STREAM-LOCATION-LINE ~G167) (STREAM-LOCATION-COLUMN ~G167) (STREAM-LOCATION-TABSIZE ~G167))))) (~G942 STREAM-LOCATION)))))
(CL:DEFUN PRINT-INFO-PRETTY-PRINT? (ARR) (CL:BLOCK PRINT-INFO-PRETTY-PRINT? (CL:BLOCK NIL (CL:AREF ARR 2))))
(CL:DEFUN =-PRINT-INFO-INDENTATION (VAL ARR) (CL:BLOCK =-PRINT-INFO-INDENTATION (CL:BLOCK NIL (CL:PROGN (=-AREF VAL ARR 4)))))
(CL:DEFUN %BODY-INDENTATION (INFO) (CL:BLOCK %BODY-INDENTATION (CL:BLOCK NIL (CL:LABELS ((~G948 (~G214) (CL:COND (~G214 ~G214) (T 1)))) (~G948 (CL:CAR (PRINT-INFO-COLUMNS INFO)))))))
(CL:DEFUN PRINT-INFO-INDENTATION (ARR) (CL:BLOCK PRINT-INFO-INDENTATION (CL:BLOCK NIL (CL:AREF ARR 4))))
(CL:DEFUN %PRINT-FUNCTION (X STR INFO) (CL:BLOCK %PRINT-FUNCTION (CL:BLOCK NIL (PRINC "#'" STR) (%LATE-PRINT (CL:CONS (FUNCTION-ARGUMENTS X) (FUNCTION-BODY X)) STR INFO))))
(CL:DEFUN %PRINT-ARRAY (X STR INFO) (CL:BLOCK %PRINT-ARRAY (CL:BLOCK NIL (PRINC "#" STR) (%PRINT-CONS (ARRAY-LIST X) STR INFO))))
(CL:DEFUN %PRINT-STRING (X STR) (CL:BLOCK %PRINT-STRING (CL:BLOCK NIL (PRINC #\" STR) (CL:BLOCK NIL (CL:LABELS ((~G949 (~G228) (CL:LABELS ((~G950 (I) (CL:TAGBODY ~G226 (CL:COND ((NOT ~G228) (CL:GO ~G227))) (CL:SETQ I (CL:CAR ~G228)) (CL:COND ((EQL I #\") (PRINC "\\\"" STR)) ((EQL I #\\) (PRINC "\\\\" STR)) (T (PRINC I STR))) (CL:SETQ ~G228 (CL:CDR ~G228)) (CL:GO ~G226) ~G227 (CL:RETURN-FROM NIL (CL:PROGN))))) (~G950 NIL)))) (~G949 (STRING-LIST X)))) (PRINC #\" STR))))
(CL:DEFUN %PRINT-CHARACTER (X STR) (CL:BLOCK %PRINT-CHARACTER (CL:BLOCK NIL (PRINC "#\\" STR) (PRINC X STR))))
(CL:DEFUN %PRINT-SYMBOL (X STR INFO) (CL:BLOCK %PRINT-SYMBOL (CL:BLOCK NIL (CL:LABELS ((~G951 (!) (CL:COND (! (CL:PROGN (CL:COND ((NOT (INVISIBLE-PACKAGE-NAME? X)) (CL:PROGN (CL:LABELS ((~G952 (~G235) (CL:COND (~G235 ~G235) (T (%PRINT-SYMBOL-PACKAGE (CL:PACKAGE-NAME !) STR))))) (~G952 (KEYWORD? X))) (PRINC #\: STR))))))))) (~G951 (CL:COND (X (CL:COND ((NOT (EQ T X)) (SYMBOL-PACKAGE X))))))) (%PRINT-SYMBOL-COMPONENT (SYMBOL-NAME X) STR))))
(CL:DEFUN %PRINT-CONS (X STR INFO) (CL:BLOCK %PRINT-CONS (CL:BLOCK NIL (CL:LABELS ((~G953 (!) (CL:COND (! (%PRINT-ABBREVIATION ! X STR INFO)) (T (%PRINT-LIST X STR INFO))))) (~G953 (CL:COND ((CONS? (CL:CDR X)) (CL:COND ((NOT (CL:CDR (CL:CDR X))) (ASSOC (CL:CAR X) *PRINTER-ABBREVIATIONS* :TEST (CL:FUNCTION EQ)))))))))))
(CL:DEFUN EXPANDER-CALL (ARR) (CL:BLOCK EXPANDER-CALL (CL:BLOCK NIL (CL:AREF ARR 5))))
(CL:DEFUN EXPANDER-PRED (ARR) (CL:BLOCK EXPANDER-PRED (CL:BLOCK NIL (CL:AREF ARR 4))))
(CL:DEFUN CHARRANGE? (X START END) (CL:BLOCK CHARRANGE? (CL:BLOCK NIL (RANGE? (CL:CHAR-CODE X) (CL:CHAR-CODE START) (CL:CHAR-CODE END)))))
(CL:DEFUN %NCONC-0 (LSTS) (CL:BLOCK %NCONC-0 (CL:BLOCK NIL (CL:COND (LSTS (CL:LABELS ((~G954 (!) (CL:COND (! (CL:PROGN (CL:RPLACD (LAST !) (%NCONC-0 (CL:CDR LSTS))) !)) (T (%NCONC-0 (CL:CDR LSTS)))))) (~G954 (CL:CAR LSTS))))))))
(CL:DEFUN LOWER-CASE? (CL:&REST ~G37) (CL:BLOCK LOWER-CASE? (CL:BLOCK NIL (CL:BLOCK NIL (CL:LABELS ((~G955 (~G41) (CL:LABELS ((~G956 (C) (CL:TAGBODY ~G39 (CL:COND ((NOT ~G41) (CL:GO ~G40))) (CL:SETQ C (CL:CAR ~G41)) (CL:LABELS ((~G957 (~G38) (CL:COND (~G38 ~G38) (T (CL:RETURN-FROM NIL NIL))))) (~G957 (CHARRANGE? C #\a #\z))) (CL:SETQ ~G41 (CL:CDR ~G41)) (CL:GO ~G39) ~G40 (CL:RETURN-FROM NIL (CL:PROGN T))))) (~G956 NIL)))) (~G955 ~G37))))))
(CL:DEFUN EXPANDER-POST (ARR) (CL:BLOCK EXPANDER-POST (CL:BLOCK NIL (CL:AREF ARR 7))))
(CL:DEFUN REFINE (FUN X) (CL:BLOCK REFINE (CL:BLOCK NIL (CL:LABELS ((~G958 (!) (CL:COND ((EQUAL X !) !) (T (REFINE FUN !))))) (~G958 (FUNCALL FUN X))))))
(CL:DEFUN EXPANDER-EXPAND-0 (EXPANDER EXPR) (CL:BLOCK EXPANDER-EXPAND-0 (CL:BLOCK NIL (CL:LABELS ((~G959 (~G357) (CL:PROGN (CL:SETQ *MACRO?* (EXPANDER-PRED EXPANDER))) (CL:LABELS ((~G960 (~G358) (CL:PROGN (CL:SETQ *MACRO?* ~G357)) ~G358)) (~G960 (CL:PROGN (CL:LABELS ((~G961 (~G359) (CL:PROGN (CL:SETQ *MACROCALL* (EXPANDER-CALL EXPANDER))) (CL:LABELS ((~G962 (~G360) (CL:PROGN (CL:SETQ *MACROCALL* ~G359)) ~G360)) (~G962 (CL:PROGN (CL:LABELS ((~G963 (!) (CL:COND ((EQ ! *EXPANDER-DUMP?*) (CL:PROGN (FORMAT T "~%; Expander ~A input:~%" !) (CL:PRINT EXPR) (FORMAT T "~%; Expander ~A output:~%" !) (CL:PRINT (%MACROEXPAND EXPR)))) (T (%MACROEXPAND EXPR))))) (~G963 (EXPANDER-NAME EXPANDER)))))))) (~G961 *MACROCALL*))))))) (~G959 *MACRO?*)))))
(CL:DEFUN EXPANDER-PRE (ARR) (CL:BLOCK EXPANDER-PRE (CL:BLOCK NIL (CL:AREF ARR 6))))
(CL:DEFUN EXPANDER? (X) (CL:BLOCK EXPANDER? (CL:BLOCK NIL (CL:COND ((ARRAY? X) (CL:COND ((EQ 'STRUCT (CL:AREF X 0)) (EQ 'EXPANDER (CL:AREF X 1)))))))))
(CL:DEFUN %LATE-PRINT (X STR INFO) (CL:BLOCK %LATE-PRINT (CL:BLOCK NIL (CL:PROGN (%PRINT-INDENTATION STR INFO) (CL:LABELS ((~G964 (~G236) (CL:COND ((CONS? ~G236) (%PRINT-CONS X STR INFO)) ((SYMBOL? ~G236) (%PRINT-SYMBOL X STR INFO)) ((CHARACTER? ~G236) (%PRINT-CHARACTER X STR)) ((NUMBER? ~G236) (PRINC X STR)) ((STRING? ~G236) (%PRINT-STRING X STR)) ((ARRAY? ~G236) (%PRINT-ARRAY X STR INFO)) ((FUNCTION? ~G236) (%PRINT-FUNCTION X STR INFO)) ((OBJECT? ~G236) (%PRINT-OBJECT X STR INFO)) (T (%ERROR "Don't know how to print object."))))) (~G964 X))))))
(CL:DEFUN %PRINT-BODY (X STR INFO) (CL:BLOCK %PRINT-BODY (CL:BLOCK NIL (CL:LABELS ((~G965 (~G215) (CL:PROGN (=-PRINT-INFO-INDENTATION (%BODY-INDENTATION INFO) INFO)) (CL:LABELS ((~G966 (~G216) (CL:PROGN (=-PRINT-INFO-INDENTATION ~G215 INFO)) ~G216)) (~G966 (CL:PROGN (CL:LABELS ((~G967 (FIRST?) (CL:BLOCK NIL (CL:LABELS ((~G968 (~G219) (CL:LABELS ((~G969 (I) (CL:TAGBODY ~G217 (CL:COND ((NOT ~G219) (CL:GO ~G218))) (CL:SETQ I (CL:CAR ~G219)) (CL:COND (FIRST? (CL:PROGN (CL:SETQ FIRST? NIL))) (T (CL:COND (*PRINT-AUTOMATIC-NEWLINE?* (FRESH-LINE STR))))) (%LATE-PRINT I STR INFO) (CL:SETQ ~G219 (CL:CDR ~G219)) (CL:GO ~G217) ~G218 (CL:RETURN-FROM NIL (CL:PROGN))))) (~G969 NIL)))) (~G968 X))))) (~G967 T))))))) (~G965 (PRINT-INFO-INDENTATION INFO))))))
(CL:DEFUN =-PRINT-INFO-COLUMNS (VAL ARR) (CL:BLOCK =-PRINT-INFO-COLUMNS (CL:BLOCK NIL (CL:PROGN (=-AREF VAL ARR 5)))))
(CL:DEFUN PRINT-INFO-COLUMNS (ARR) (CL:BLOCK PRINT-INFO-COLUMNS (CL:BLOCK NIL (CL:AREF ARR 5))))
(CL:DEFUN %PRINT-INDENTATION (STR INFO) (CL:BLOCK %PRINT-INDENTATION (CL:BLOCK NIL (CL:COND ((PRINT-INFO-PRETTY-PRINT? INFO) (CL:COND ((FRESH-LINE? STR) (CL:LABELS ((~G970 (~G212) (CL:COND ((< ~G212 0) (ERROR "DOTIMES: Number of iterations is negative: ~A." ~G212))) (CL:BLOCK NIL (CL:LABELS ((~G971 (!) (CL:TAGBODY ~G213 (CL:COND ((== ! ~G212) (CL:RETURN-FROM NIL (CL:PROGN NIL)))) (PRINC " " STR) (CL:SETQ ! (NUMBER+ 1 !)) (CL:GO ~G213)))) (~G971 0))))) (~G970 (INTEGER (PRINT-INFO-INDENTATION INFO)))))))))))
(CL:DEFUN MAKE-PRINT-INFO (CL:&KEY (PRETTY-PRINT? 'PRETTY-PRINT?) (DOWNCASE? 'DOWNCASE?) (INDENTATION 'INDENTATION) (COLUMNS 'COLUMNS)) (CL:BLOCK MAKE-PRINT-INFO (CL:BLOCK NIL (CL:LABELS ((~G972 (~G210) (CL:PROGN (=-AREF 'STRUCT ~G210 0) (=-AREF 'PRINT-INFO ~G210 1)) (CL:PROGN (=-AREF (CL:COND ((EQ PRETTY-PRINT? 'PRETTY-PRINT?) NIL) (T PRETTY-PRINT?)) ~G210 2)) (CL:PROGN (=-AREF (CL:COND ((EQ DOWNCASE? 'DOWNCASE?) NIL) (T DOWNCASE?)) ~G210 3)) (CL:PROGN (=-AREF (CL:COND ((EQ INDENTATION 'INDENTATION) 0) (T INDENTATION)) ~G210 4)) (CL:PROGN (=-AREF (CL:COND ((EQ COLUMNS 'COLUMNS) NIL) (T COLUMNS)) ~G210 5)) ~G210)) (~G972 (MAKE-ARRAY 6))))))
(CL:DEFUN STREAM-PRINC (X STR) (CL:BLOCK STREAM-PRINC (CL:BLOCK NIL (CL:COND ((CONS? X) (CL:BLOCK NIL (CL:LABELS ((~G973 (~G175) (CL:LABELS ((~G974 (I) (CL:TAGBODY ~G173 (CL:COND ((NOT ~G175) (CL:GO ~G174))) (CL:SETQ I (CL:CAR ~G175)) (STREAM-PRINC I STR) (CL:SETQ ~G175 (CL:CDR ~G175)) (CL:GO ~G173) ~G174 (CL:RETURN-FROM NIL (CL:PROGN X))))) (~G974 NIL)))) (~G973 X)))) ((CL:LABELS ((~G975 (~G172) (CL:COND (~G172 ~G172) (T (CHARACTER? X))))) (~G975 (STRING? X))) (CL:COND ((NOT (CL:COND ((STRING? X) (== 0 (CL:LENGTH X))))) (CL:PROGN (CL:PROGN (=-STREAM-LAST-CHAR (CL:COND ((STRING? X) (ELT X (-- (CL:LENGTH X)))) (T X)) STR)) (%TRACK-LOCATION (STREAM-OUTPUT-LOCATION STR) X) (FUNCALL (STREAM-FUN-OUT STR) X STR))))) (T (FUNCALL (STREAM-FUN-OUT STR) X STR))))))
(CL:DEFUN PRINC-NUMBER (X STR) (CL:BLOCK PRINC-NUMBER (CL:BLOCK NIL (STREAM-PRINC (NUMBER-DIGITS X) STR))))
(CL:DEFUN PRINT-HEX (X N CL:&OPTIONAL (STR *STANDARD-OUTPUT*)) (CL:BLOCK PRINT-HEX (CL:BLOCK NIL (PRINC (INTEGER-STRING (INTEGER X) N 16) (DEFAULT-STREAM STR)))))
(CL:DEFUN =-STREAM-USER-DETAIL (VAL ARR) (CL:BLOCK =-STREAM-USER-DETAIL (CL:BLOCK NIL (CL:PROGN (=-AREF VAL ARR 10)))))
(CL:DEFUN QUEUE-STRING (X) (CL:BLOCK QUEUE-STRING (CL:BLOCK NIL (LIST-STRING (QUEUE-LIST X)))))
(CL:DEFUN STREAM-USER-DETAIL (ARR) (CL:BLOCK STREAM-USER-DETAIL (CL:BLOCK NIL (CL:AREF ARR 10))))
(CL:DEFUN STREAM-LOCATION-COLUMN (ARR) (CL:BLOCK STREAM-LOCATION-COLUMN (CL:BLOCK NIL (CL:AREF ARR 5))))
(CL:DEFUN STREAM-LOCATION-TRACK? (ARR) (CL:BLOCK STREAM-LOCATION-TRACK? (CL:BLOCK NIL (CL:AREF ARR 2))))
(CL:DEFUN STREAM-OUTPUT-LOCATION (ARR) (CL:BLOCK STREAM-OUTPUT-LOCATION (CL:BLOCK NIL (CL:AREF ARR 9))))
(CL:DEFUN VALUES (CL:&REST VALS) (CL:BLOCK VALUES (CL:BLOCK NIL (CL:CONS *VALUES-MAGIC* VALS))))
(CL:DEFUN READ-COMMENT-BLOCK (STR) (CL:BLOCK READ-COMMENT-BLOCK (CL:BLOCK NIL (CL:LABELS ((~G976 (~G259) (CL:COND (~G259 ~G259) (T (READ-COMMENT-BLOCK STR))))) (~G976 (CL:COND ((EQL #\| (READ-CHAR STR)) (AHEAD? #\# STR))))))))
(CL:DEFUN LIST-NUMBER? (X) (CL:BLOCK LIST-NUMBER? (CL:BLOCK NIL (CL:COND ((CL:LABELS ((~G977 (~G260) (CL:COND (~G260 ~G260) (T (DIGIT? (CL:CAR X)))))) (~G977 (CL:COND ((CL:CDR X) (CL:LABELS ((~G978 (~G261) (CL:COND (~G261 ~G261) (T (EQL #\. (CL:CAR X)))))) (~G978 (EQL #\- (CL:CAR X)))))))) (CL:COND ((CL:CDR X) (EVERY (CL:LAMBDA (_) (CL:BLOCK NIL (CL:LABELS ((~G979 (~G262) (CL:COND (~G262 ~G262) (T (EQL #\. _))))) (~G979 (DIGIT? _))))) (CL:CDR X))) (T T)))))))
(CL:DEFUN READ-SYMBOL-AND-PACKAGE (STR) (CL:BLOCK READ-SYMBOL-AND-PACKAGE (CL:BLOCK NIL (CL:LABELS ((~G980 (!) (CL:COND ((AHEAD? #\: STR) (CL:PROGN (READ-CHAR STR) (VALUES (CL:LABELS ((~G981 (~G258) (CL:COND (~G258 ~G258) (T "KEYWORD")))) (~G981 (CL:COND (! (LIST-STRING !))))) (READ-SYMBOL STR)))) (T (VALUES NIL !))))) (~G980 (READ-SYMBOL STR))))))
(CL:DEFUN READ-SLOT-VALUE (X) (CL:BLOCK READ-SLOT-VALUE (CL:BLOCK NIL (CL:COND ((NOT X) NIL) ((CL:CDR X) (CL:CONS 'CL:SLOT-VALUE (CL:CONS (READ-SLOT-VALUE (BUTLAST X)) (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS (READ-MAKE-SYMBOL (CL:CAR (LAST X))) NIL)) NIL)))) ((STRING? (CL:CAR X)) (READ-MAKE-SYMBOL (CL:CAR X))) (T (CL:CAR X))))))
(CL:DEFUN READ-CONS (STR) (CL:BLOCK READ-CONS (CL:BLOCK NIL (CL:LABELS ((ERR (_) (CL:BLOCK NIL (CL:LABELS ((~G982 (!) (ERROR "~A at line ~A, column ~A in file ~A." _ (STREAM-LOCATION-LINE !) (STREAM-LOCATION-COLUMN !) (STREAM-LOCATION-ID !)))) (~G982 (STREAM-INPUT-LOCATION STR))))) (F (TOKEN PKG SYM) (CL:COND ((NOT (%READ-CLOSING-PARENS? TOKEN)) (CL:PROGN (CL:CONS (CL:LABELS ((~G983 (~G274) (CL:COND ((EQL ~G274 :PARENTHESIS-OPEN) (READ-CONS-SLOT STR)) ((EQL ~G274 :BRACKET-OPEN) (CL:CONS 'BRACKETS (READ-CONS-SLOT STR))) ((EQL ~G274 :BRACE-OPEN) (CL:CONS 'BRACES (READ-CONS-SLOT STR))) (T (CL:COND ((TOKEN-IS-QUOTE? TOKEN) (READ-QUOTE STR TOKEN)) (T (READ-ATOM STR TOKEN PKG SYM))))))) (~G983 TOKEN)) (CL:LABELS ((~G984 (!) (CL:COND (! (CL:LABELS ((~G985 (~G276) (CL:LABELS ((~G986 (~G277) (CL:COND ((NOT (EQ (CL:CAR ~G276) *VALUES-MAGIC*)) (CL:PROGN (ERROR "VALUES expected instead of ~A." ~G276)))) (CL:LABELS ((~G987 (TOKEN) (CL:LABELS ((~G988 (~G278) (CL:LABELS ((~G989 (PKG) (CL:LABELS ((~G990 (~G279) (CL:LABELS ((~G991 (SYM) (CL:COND ((EQ :DOT TOKEN) (CL:LABELS ((~G992 (X) (CL:LABELS ((~G993 (~G283) (CL:LABELS ((~G994 (~G284) (CL:COND ((NOT (EQ (CL:CAR ~G283) *VALUES-MAGIC*)) (CL:PROGN (ERROR "VALUES expected instead of ~A." ~G283)))) (CL:LABELS ((~G995 (TOKEN) (CL:LABELS ((~G996 (~G285) (CL:LABELS ((~G997 (PKG) (CL:LABELS ((~G998 (~G286) (CL:LABELS ((~G999 (SYM) (CL:LABELS ((~G1000 (~G275) (CL:COND (~G275 ~G275) (T (ERR "Only one value allowed after dotted cons"))))) (~G1000 (%READ-CLOSING-PARENS? TOKEN))) X)) (~G999 (CL:CAR ~G286))))) (~G998 (CL:LABELS ((~G1001 (~G289) (CL:COND (~G289 ~G289) (T (%ERROR "Not enough VALUES."))))) (~G1001 (CL:CDR ~G285))))))) (~G997 (CL:CAR ~G285))))) (~G996 (CL:LABELS ((~G1002 (~G288) (CL:COND (~G288 ~G288) (T (%ERROR "Not enough VALUES."))))) (~G1002 (CL:CDR ~G284))))))) (~G995 (CL:CAR ~G284))))) (~G994 (CL:CDR ~G283))))) (~G993 (READ-TOKEN STR))))) (~G992 (READ-EXPR STR)))) (T (F TOKEN PKG SYM))))) (~G991 (CL:CAR ~G279))))) (~G990 (CL:LABELS ((~G1003 (~G282) (CL:COND (~G282 ~G282) (T (%ERROR "Not enough VALUES."))))) (~G1003 (CL:CDR ~G278))))))) (~G989 (CL:CAR ~G278))))) (~G988 (CL:LABELS ((~G1004 (~G281) (CL:COND (~G281 ~G281) (T (%ERROR "Not enough VALUES."))))) (~G1004 (CL:CDR ~G277))))))) (~G987 (CL:CAR ~G277))))) (~G986 (CL:CDR ~G276))))) (~G985 !))) (T (ERR "Closing bracket missing"))))) (~G984 (READ-TOKEN STR))))))))) (CL:LABELS ((~G1005 (~G290) (CL:LABELS ((~G1006 (~G291) (CL:COND ((NOT (EQ (CL:CAR ~G290) *VALUES-MAGIC*)) (CL:PROGN (ERROR "VALUES expected instead of ~A." ~G290)))) (CL:LABELS ((~G1007 (TOKEN) (CL:LABELS ((~G1008 (~G292) (CL:LABELS ((~G1009 (PKG) (CL:LABELS ((~G1010 (~G293) (CL:LABELS ((~G1011 (SYM) (CL:COND ((EQ TOKEN :DOT) (CL:CONS 'CL:CONS (READ-CONS STR))) (T (F TOKEN PKG SYM))))) (~G1011 (CL:CAR ~G293))))) (~G1010 (CL:LABELS ((~G1012 (~G296) (CL:COND (~G296 ~G296) (T (%ERROR "Not enough VALUES."))))) (~G1012 (CL:CDR ~G292))))))) (~G1009 (CL:CAR ~G292))))) (~G1008 (CL:LABELS ((~G1013 (~G295) (CL:COND (~G295 ~G295) (T (%ERROR "Not enough VALUES."))))) (~G1013 (CL:CDR ~G291))))))) (~G1007 (CL:CAR ~G291))))) (~G1006 (CL:CDR ~G290))))) (~G1005 (READ-TOKEN STR)))))))
(CL:DEFUN %READ-CLOSING-PARENS? (X) (CL:BLOCK %READ-CLOSING-PARENS? (CL:BLOCK NIL (CL:LABELS ((~G1014 (~G242) (CL:COND (~G242 ~G242) (T (CL:LABELS ((~G1015 (~G243) (CL:COND (~G243 ~G243) (T (EQL X :BRACE-CLOSE))))) (~G1015 (EQL X :BRACKET-CLOSE))))))) (~G1014 (EQL X :PARENTHESIS-CLOSE))))))
(CL:DEFUN READ-SYMBOL-OR-SLOT-VALUE (PKG SYM) (CL:BLOCK READ-SYMBOL-OR-SLOT-VALUE (CL:BLOCK NIL (CL:LABELS ((~G1016 (!) (CL:COND ((CL:COND ((CL:CDR !) (CL:COND ((CL:CAR !) (CL:CAR (LAST !)))))) (READ-SLOT-VALUE !)) (T (READ-MAKE-SYMBOL SYM PKG))))) (~G1016 (SPLIT #\. SYM))))))
(CL:DEFUN ARRAY (CL:&REST ELMS) (CL:BLOCK ARRAY (CL:BLOCK NIL (LIST-ARRAY ELMS))))
(CL:DEFUN READ-HEX (STR) (CL:BLOCK READ-HEX (CL:BLOCK NIL (CL:LABELS ((F (_) (CL:BLOCK NIL (CL:LABELS ((~G1017 (!) (CL:COND (! (CL:PROGN (READ-CHAR STR) (F (NUMBER+ (* _ 16) (- (CL:CHAR-CODE !) (CL:COND ((DIGIT? !) (CL:CHAR-CODE #\0)) (T (- (CL:CHAR-CODE #\A) 10)))))))) (T _)))) (~G1017 (CL:COND ((PEEK-CHAR STR) (CL:LABELS ((~G1018 (!) (CL:COND ((HEX-DIGIT? !) !)))) (~G1018 (CHAR-UPCASE (PEEK-CHAR STR))))))))))) (CL:LABELS ((~G1019 (~G322) (CL:COND (~G322 ~G322) (T (ERROR "Illegal character '~A' at begin of hexadecimal number." (PEEK-CHAR STR)))))) (~G1019 (HEX-DIGIT? (PEEK-CHAR STR)))) (CL:LABELS ((~G1020 (~G323) (CL:COND ((SYMBOL-CHAR? (PEEK-CHAR STR)) (ERROR "Illegal character '~A' in hexadecimal number." (PEEK-CHAR STR)))) ~G323)) (~G1020 (F 0)))))))
(CL:DEFUN READ-NUMBER (CL:&OPTIONAL (STR *STANDARD-INPUT*)) (CL:BLOCK READ-NUMBER (CL:BLOCK NIL (* (CL:COND ((AHEAD? #\- STR) (CL:LABELS ((~G1021 (~G331) (READ-CHAR STR) ~G331)) (~G1021 -1))) (T 1)) (+ (READ-INTEGER STR) (CL:LABELS ((~G1022 (~G332) (CL:COND (~G332 ~G332) (T 0)))) (~G1022 (CL:COND ((AHEAD? #\. STR) (CL:COND ((READ-CHAR STR) (READ-DECIMAL-PLACES STR))))))))))))
(CL:DEFUN MAKE-STRING-STREAM NIL (CL:BLOCK MAKE-STRING-STREAM (CL:BLOCK NIL (MAKE-STREAM :USER-DETAIL (MAKE-QUEUE) :FUN-IN (CL:LAMBDA (_) (CL:BLOCK NIL (QUEUE-POP (STREAM-USER-DETAIL _)))) :FUN-OUT (CL:LAMBDA (X STR) (CL:COND ((STRING? X) (CL:LABELS ((~G1023 (~G176) (CL:COND (~G176 (CL:PROGN (CL:LABELS ((~G1024 (~G178) (CL:COND ((< ~G178 0) (ERROR "DOTIMES: Number of iterations is negative: ~A." ~G178))) (CL:BLOCK NIL (CL:LABELS ((~G1025 (~G177) (CL:TAGBODY ~G179 (CL:COND ((== ~G177 ~G178) (CL:RETURN-FROM NIL (CL:PROGN)))) (CL:LABELS ((~G1026 (I) (ENQUEUE (STREAM-USER-DETAIL STR) I))) (~G1026 (ELT ~G176 ~G177))) (CL:SETQ ~G177 (NUMBER+ 1 ~G177)) (CL:GO ~G179)))) (~G1025 0))))) (~G1024 (INTEGER (CL:LENGTH ~G176))))))))) (~G1023 X))) (T (ENQUEUE (STREAM-USER-DETAIL STR) X)))) :FUN-EOF (CL:LAMBDA (_) (CL:BLOCK NIL (NOT (QUEUE-LIST (STREAM-USER-DETAIL _)))))))))
(CL:DEFUN READ-STRING (STR) (CL:BLOCK READ-STRING (CL:BLOCK NIL (CL:LABELS ((F NIL (CL:BLOCK NIL (CL:LABELS ((~G1027 (!) (CL:COND ((NOT (EQL ! #\")) (CL:PROGN (CL:CONS (CL:COND ((EQL ! #\\) (READ-CHAR STR)) (T !)) (F))))))) (~G1027 (READ-CHAR STR)))))) (LIST-STRING (F))))))
(CL:DEFUN READ-CHAR (CL:&OPTIONAL (STR *STANDARD-INPUT*)) (CL:BLOCK READ-CHAR (CL:BLOCK NIL (%TRACK-LOCATION (STREAM-INPUT-LOCATION STR) (READ-CHAR-0 STR)))))
(CL:DEFUN WHITESPACE? (X) (CL:BLOCK WHITESPACE? (CL:BLOCK NIL (CL:COND ((CHARACTER? X) (CL:COND ((< (CL:CHAR-CODE X) 33) (>= (CL:CHAR-CODE X) 0))))))))
(CL:DEFUN SKIP-COMMENT (STR) (CL:BLOCK SKIP-COMMENT (CL:BLOCK NIL (CL:LABELS ((~G1028 (!) (CL:COND (! (CL:PROGN (CL:COND ((== (CL:CHAR-CODE !) 10) (SKIP-SPACES STR)) (T (SKIP-COMMENT STR)))))))) (~G1028 (READ-CHAR STR))))))
(CL:DEFUN AHEAD? (WHAT STR) (CL:BLOCK AHEAD? (CL:BLOCK NIL (CL:LABELS ((~G1029 (!) (CL:COND ((CL:COND ((FUNCTION? WHAT) (FUNCALL WHAT !)) (T (EQL WHAT !))) !)))) (~G1029 (PEEK-CHAR STR))))))
(CL:DEFUN DOT-EXPAND-TAIL-LENGTH (X CL:&OPTIONAL (NUM 0)) (CL:BLOCK DOT-EXPAND-TAIL-LENGTH (CL:BLOCK NIL (CL:COND ((EQL #\. (CL:CAR (LAST X))) (DOT-EXPAND-TAIL-LENGTH (BUTLAST X) (++ NUM))) (T (VALUES NUM X))))))
(CL:DEFUN DOT-EXPAND-HEAD-LENGTH (X CL:&OPTIONAL (NUM 0)) (CL:BLOCK DOT-EXPAND-HEAD-LENGTH (CL:BLOCK NIL (CL:COND ((EQL #\. (CL:CAR X)) (DOT-EXPAND-HEAD-LENGTH (CL:CDR X) (++ NUM))) (T (VALUES NUM X))))))
(CL:DEFUN POSITION (OBJ SEQ CL:&KEY (START NIL) (END NIL) (FROM-END NIL) (TEST (CL:FUNCTION EQL))) (CL:BLOCK POSITION (CL:BLOCK NIL (CL:LABELS ((~G1030 (!) (FIND-IF (CL:LAMBDA (X I) (CL:COND ((FUNCALL TEST X OBJ) (CL:PROGN (CL:SETQ ! I))))) SEQ :START START :END END :FROM-END FROM-END :WITH-INDEX T) !)) (~G1030 NIL)))))
(CL:DEFUN %SUBSEQ-SEQUENCE (MAKER SEQ START END) (CL:BLOCK %SUBSEQ-SEQUENCE (CL:BLOCK NIL (CL:COND ((NOT (== START END)) (CL:PROGN (CL:LABELS ((~G1031 (!) (CL:COND ((< START !) (CL:PROGN (CL:COND ((>= END !) (CL:PROGN (CL:SETQ END !)))) (CL:LABELS ((~G1032 (L) (CL:LABELS ((~G1033 (S) (CL:LABELS ((~G1034 (~G109) (CL:COND ((< ~G109 0) (ERROR "DOTIMES: Number of iterations is negative: ~A." ~G109))) (CL:BLOCK NIL (CL:LABELS ((~G1035 (X) (CL:TAGBODY ~G110 (CL:COND ((== X ~G109) (CL:RETURN-FROM NIL (CL:PROGN S)))) (CL:PROGN (=-ELT (ELT SEQ (+ START X)) S X)) (CL:SETQ X (NUMBER+ 1 X)) (CL:GO ~G110)))) (~G1035 0))))) (~G1034 (INTEGER L))))) (~G1033 (FUNCALL MAKER L))))) (~G1032 (- END START)))))))) (~G1031 (CL:LENGTH SEQ)))))))))
(CL:DEFUN STRING-SUBSEQ (SEQ START CL:&OPTIONAL (END 99999)) (CL:BLOCK STRING-SUBSEQ (CL:BLOCK NIL (CL:COND ((NOT (== START END)) (CL:PROGN (CL:LABELS ((~G1036 (!) (CL:COND ((< START !) (CL:PROGN (CL:COND ((>= END !) (CL:PROGN (CL:PROGN (CL:SETQ END !))))) (CL:LABELS ((~G1037 (L) (CL:LABELS ((~G1038 (S) (CL:LABELS ((~G1039 (~G77) (CL:COND ((< ~G77 0) (ERROR "DOTIMES: Number of iterations is negative: ~A." ~G77))) (CL:BLOCK NIL (CL:LABELS ((~G1040 (X) (CL:TAGBODY ~G78 (CL:COND ((== X ~G77) (CL:RETURN-FROM NIL (CL:PROGN S)))) (CL:PROGN (CL:SETQ S (STRING-CONCAT S (STRING (ELT SEQ (NUMBER+ START X)))))) (CL:SETQ X (NUMBER+ 1 X)) (CL:GO ~G78)))) (~G1040 0))))) (~G1039 (INTEGER L))))) (~G1038 (CL:MAKE-STRING 0))))) (~G1037 (- END START)))))))) (~G1036 (CL:LENGTH SEQ)))))))))
(CL:DEFUN %BODY? (X) (CL:BLOCK %BODY? (CL:BLOCK NIL (CL:COND ((CONS? X) (CL:COND ((EQ '%BODY (CL:CAR X)) X)))))))
(CL:DEFUN %REST? (X) (CL:BLOCK %REST? (CL:BLOCK NIL (CL:COND ((CONS? X) (CL:COND ((EQ '%REST (CL:CAR X)) X)))))))
(CL:DEFUN KEYWORD? (X) (CL:BLOCK KEYWORD? (CL:BLOCK NIL (CL:COND ((SYMBOL? X) (EQ *KEYWORD-PACKAGE* (SYMBOL-PACKAGE X)))))))
(CL:DEFUN TYPED-ARGUMENT? (X) (CL:BLOCK TYPED-ARGUMENT? (CL:BLOCK NIL (CL:COND ((CONS? X) (ARGUMENT-TYPE-SPECIFIER? (CL:CAR (CL:CDR X))))))))
(CL:DEFUN ARGUMENT-KEYWORD? (X) (CL:BLOCK ARGUMENT-KEYWORD? (CL:BLOCK NIL (CL:LABELS ((~G1041 (~G3) (CL:COND (~G3 ~G3) (T (CL:LABELS ((~G1042 (~G4) (CL:COND (~G4 ~G4) (T (CL:LABELS ((~G1043 (~G5) (CL:COND (~G5 ~G5) (T (EQ X 'CL:&KEY))))) (~G1043 (EQ X 'CL:&OPTIONAL))))))) (~G1042 (EQ X 'CL:&BODY))))))) (~G1041 (EQ X 'CL:&REST))))))
(CL:DEFUN ARGDEF-GET-VALUE (DEFS VALS) (CL:BLOCK ARGDEF-GET-VALUE (CL:BLOCK NIL (CL:COND ((CONS? VALS) (CL:CAR VALS)) ((CONS? (CL:CAR DEFS)) (CADR (CL:CAR DEFS))) (T (CL:CAR DEFS))))))
(CL:DEFUN $ (CL:&REST ARGS) (CL:BLOCK $ (CL:BLOCK NIL (MAKE-SYMBOL (CL:APPLY (CL:FUNCTION +) (DYNAMIC-MAP (CL:FUNCTION STRING) ARGS))))))
(CL:DEFUN TYPE? (O X) (CL:BLOCK TYPE? (CL:BLOCK NIL (CL:COND (X (CL:PROGN (CL:COND ((CONS? X) (CL:LABELS ((~G1044 (~G346) (CL:COND ((EQL ~G346 'AND) (EVERY (CL:LAMBDA (_) (CL:BLOCK NIL (TYPE? O _))) (CL:CDR X))) ((EQL ~G346 'OR) (SOME (CL:LAMBDA (_) (CL:BLOCK NIL (TYPE? O _))) (CL:CDR X))) ((EQL ~G346 'SATISFIES) (FUNCALL (CL:LABELS ((~G1045 (~G347) (CL:COND (~G347 ~G347) (T (ERROR "~A is not a predicate for SATISFIES." (CL:CAR (CL:CDR X))))))) (~G1045 (SYMBOL-FUNCTION (CL:CAR (CL:CDR X))))) O)) (T (CL:LABELS ((~G1046 (!) (CL:COND (! (CL:APPLY ! (CL:CDR X))) (T (ERROR "Unknown type specifier symbol ~A." (CL:CAR X)))))) (~G1046 (ASSOC-VALUE (CL:CAR X) *TYPES*))))))) (~G1044 (CL:CAR X)))) (T (CL:COND ((STRING? X) (EQUAL O X)) (T (TYPE? O (FUNCALL (CL:LABELS ((~G1047 (~G348) (CL:COND (~G348 ~G348) (T (ERROR "No typespecifier for ~A." X))))) (~G1047 (ASSOC-VALUE X *TYPES*)))))))))))))))
(CL:DEFUN ARGDEF-GET-TYPE (X) (CL:BLOCK ARGDEF-GET-TYPE (CL:BLOCK NIL (CL:COND ((CONS? X) (CL:COND ((ARGUMENT-TYPE-SPECIFIER? (CL:CAR (CL:CDR X))) (CL:CAR (CL:CDR X)))))))))
(CL:DEFUN ARGDEF-GET-NAME (X) (CL:BLOCK ARGDEF-GET-NAME (CL:BLOCK NIL (CL:COND ((CONS? X) (CL:CAR X)) (T X)))))
(CL:DEFUN MAKE-&KEY-ALIST (DEF) (CL:BLOCK MAKE-&KEY-ALIST (CL:BLOCK NIL (CL:LABELS ((~G1048 (KEYS) (CL:LABELS ((MAKE-&KEY-DESCR (_) (CL:BLOCK NIL (CL:COND (_ (CL:PROGN (CL:COND ((ARGUMENT-KEYWORD? (CL:CAR _)) (COPY-DEF-UNTIL-&KEY _)) (T (CL:LABELS ((~G1049 (!) (CL:PROGN (CL:SETQ KEYS (CL:CONS (CL:COND ((CONS? !) (CL:CONS (CL:CAR !) (ARGDEF-GET-DEFAULT !))) (T (CL:CONS ! !))) KEYS))) (MAKE-&KEY-DESCR (CL:CDR _)))) (~G1049 (CL:CAR _)))))))))) (COPY-DEF-UNTIL-&KEY (_) (CL:BLOCK NIL (CL:COND (_ (CL:PROGN (CL:COND ((EQ 'CL:&KEY (CL:CAR _)) (MAKE-&KEY-DESCR (CL:CDR _))) (T (CL:CONS (CL:CAR _) (COPY-DEF-UNTIL-&KEY (CL:CDR _))))))))))) (VALUES (COPY-DEF-UNTIL-&KEY DEF) (REVERSE KEYS))))) (~G1048 NIL)))))
(CL:DEFUN =-EXPANDER-LOOKUP (VAL ARR) (CL:BLOCK =-EXPANDER-LOOKUP (CL:BLOCK NIL (CL:PROGN (=-AREF VAL ARR 8)))))
(CL:DEFUN EXPANDER-MACROS (ARR) (CL:BLOCK EXPANDER-MACROS (CL:BLOCK NIL (CL:AREF ARR 3))))
(CL:DEFUN =-EXPANDER-CALL (VAL ARR) (CL:BLOCK =-EXPANDER-CALL (CL:BLOCK NIL (CL:PROGN (=-AREF VAL ARR 5)))))
(CL:DEFUN EXPANDER-ARGDEF (EXPANDER MACRO-NAME) (CL:BLOCK EXPANDER-ARGDEF (CL:BLOCK NIL (CL:CAR (EXPANDER-MACRO EXPANDER MACRO-NAME)))))
(CL:DEFUN =-EXPANDER-PRED (VAL ARR) (CL:BLOCK =-EXPANDER-PRED (CL:BLOCK NIL (CL:PROGN (=-AREF VAL ARR 4)))))
(CL:DEFUN EXPANDER-FUNCTION (EXPANDER MACRO-NAME) (CL:BLOCK EXPANDER-FUNCTION (CL:BLOCK NIL (CL:CDR (EXPANDER-MACRO EXPANDER MACRO-NAME)))))
(CL:DEFUN MAKE-EXPANDER (CL:&KEY (NAME 'NAME) (MACROS 'MACROS) (PRED 'PRED) (CALL 'CALL) (PRE 'PRE) (POST 'POST) (LOOKUP 'LOOKUP) (USER 'USER)) (CL:BLOCK MAKE-EXPANDER (CL:BLOCK NIL (CL:LABELS ((~G1050 (~G352) (CL:PROGN (=-AREF 'STRUCT ~G352 0) (=-AREF 'EXPANDER ~G352 1)) (CL:PROGN (=-AREF (CL:COND ((EQ NAME 'NAME) NIL) (T NAME)) ~G352 2)) (CL:PROGN (=-AREF (CL:COND ((EQ MACROS 'MACROS) NIL) (T MACROS)) ~G352 3)) (CL:PROGN (=-AREF (CL:COND ((EQ PRED 'PRED) NIL) (T PRED)) ~G352 4)) (CL:PROGN (=-AREF (CL:COND ((EQ CALL 'CALL) NIL) (T CALL)) ~G352 5)) (CL:PROGN (=-AREF (CL:COND ((EQ PRE 'PRE) NIL) (T PRE)) ~G352 6)) (CL:PROGN (=-AREF (CL:COND ((EQ POST 'POST) NIL) (T POST)) ~G352 7)) (CL:PROGN (=-AREF (CL:COND ((EQ LOOKUP 'LOOKUP) NIL) (T LOOKUP)) ~G352 8)) (CL:PROGN (=-AREF (CL:COND ((EQ USER 'USER) NIL) (T USER)) ~G352 9)) ~G352)) (~G1050 (MAKE-ARRAY 10))))))
(CL:DEFUN EXPANDER-NAME (ARR) (CL:BLOCK EXPANDER-NAME (CL:BLOCK NIL (CL:AREF ARR 2))))
(CL:DEFUN INIT-COMPILER-MACROS NIL (CL:BLOCK INIT-COMPILER-MACROS (CL:BLOCK NIL (CL:PROGN (CL:SETQ *TAGBODY-REPLACEMENTS* NIL)))))
(CL:DEFUN DEFINE-EXPANDER (EXPANDER-NAME CL:&KEY (PRE NIL) (POST NIL) (PRED NIL) (CALL NIL)) (CL:BLOCK DEFINE-EXPANDER (CL:BLOCK NIL (CL:LABELS ((~G1051 (!) (CL:LABELS ((~G1052 (~G355) (CL:COND (~G355 ~G355) (T (CL:PROGN (=-EXPANDER-PRED (CL:LAMBDA (_) (CL:BLOCK NIL (CL:COND ((CONS? _) (CL:COND ((SYMBOL? (CL:CAR _)) (EXPANDER-FUNCTION ! (CL:CAR _)))))))) !)))))) (~G1052 PRED)) (CL:LABELS ((~G1053 (~G356) (CL:COND (~G356 ~G356) (T (CL:PROGN (=-EXPANDER-CALL (CL:LAMBDA (_) (CL:BLOCK NIL (CL:APPLY (EXPANDER-FUNCTION ! (CL:CAR _)) (ARGUMENT-EXPAND-VALUES (CL:CAR _) (EXPANDER-ARGDEF ! (CL:CAR _)) (CL:CDR _))))) !)))))) (~G1053 CALL)) (CL:PROGN (=-EXPANDER-LOOKUP (CL:LAMBDA (EXPANDER NAME) (HREF (EXPANDER-MACROS EXPANDER) NAME)) !)) !)) (~G1051 (MAKE-EXPANDER :NAME EXPANDER-NAME :MACROS (MAKE-HASH-TABLE :TEST (CL:FUNCTION EQ)) :PRED PRED :CALL CALL :PRE (CL:LABELS ((~G1054 (~G353) (CL:COND (~G353 ~G353) (T (CL:LAMBDA NIL NIL))))) (~G1054 PRE)) :POST (CL:LABELS ((~G1055 (~G354) (CL:COND (~G354 ~G354) (T (CL:LAMBDA NIL NIL))))) (~G1055 POST))))))))
(CL:DEFUN LIST-SUBSEQ (SEQ START CL:&OPTIONAL (END 999999)) (CL:BLOCK LIST-SUBSEQ (CL:BLOCK NIL (CL:COND ((CL:COND (SEQ (NOT (== START END)))) (CL:PROGN (CL:COND ((> START END) (CL:LABELS ((~G1056 (~G107) (CL:PROGN (CL:SETQ START END) (CL:SETQ END ~G107)))) (~G1056 START)))) (CL:LABELS ((~G1057 (Q) (CL:LABELS ((~G1058 (LEN) (CL:LABELS ((~G1059 (LST) (CL:BLOCK NIL (CL:PROGN (CL:TAGBODY ~G108 (CL:COND ((NOT (CL:COND (LST (< 0 LEN)))) (CL:RETURN-FROM NIL (CL:PROGN (QUEUE-LIST Q))))) (ENQUEUE Q (CL:CAR LST)) (CL:PROGN (CL:SETQ LEN (- LEN 1))) (CL:PROGN (CL:SETQ LST (CL:CDR LST))) (CL:GO ~G108)))))) (~G1059 (NTHCDR START SEQ))))) (~G1058 (- END START))))) (~G1057 (MAKE-QUEUE)))))))))
(CL:DEFUN CARLIST (~G34) (CL:BLOCK CARLIST (CL:BLOCK NIL (FILTER (CL:FUNCTION CL:CAR) ~G34))))
(CL:DEFUN ARGUMENT-EXPAND-0 (FUN ADEF VALS APPLY-VALUES? BREAK-ON-ERRORS?) (CL:BLOCK ARGUMENT-EXPAND-0 (CL:BLOCK NIL (CL:LABELS ((~G1060 (~G198) (CL:LABELS ((~G1061 (~G199) (CL:COND ((NOT (EQ (CL:CAR ~G198) *VALUES-MAGIC*)) (CL:PROGN (ERROR "VALUES expected instead of ~A." ~G198)))) (CL:LABELS ((~G1062 (ARGDEFS) (CL:LABELS ((~G1063 (~G200) (CL:LABELS ((~G1064 (KEY-ARGS) (CL:LABELS ((~G1065 (NUM) (CL:LABELS ((~G1066 (NO-STATIC) (CL:LABELS ((~G1067 (REST-ARG) (CL:LABELS ((ERR (MSG ARGS) (CL:COND (BREAK-ON-ERRORS? (ERROR (+ "~L; In argument expansion for ~A:~A: ~A~%" "; Argument definition: ~A~%" "; Given arguments: ~A~%") (CL:PACKAGE-NAME (SYMBOL-PACKAGE FUN)) (SYMBOL-NAME FUN) (CL:APPLY (CL:FUNCTION FORMAT) NIL MSG ARGS) ADEF VALS)) (T :ERROR))) (EXP-STATIC-ASSERT (DEF VALS) (CL:COND (NO-STATIC (CL:RETURN-FROM NIL (ERR "Static argument definition after ~A." (LIST NO-STATIC))))) (CL:COND (APPLY-VALUES? (CL:COND ((NOT VALS) (CL:RETURN-FROM NIL (ERR "Argument ~A missing." (LIST NUM)))))))) (EXP-STATIC (DEF VALS) (EXP-STATIC-ASSERT DEF VALS) (CL:CONS (CL:CONS (ARGDEF-GET-NAME (CL:CAR DEF)) (CL:CAR VALS)) (EXP-MAIN (CL:CDR DEF) (CL:CDR VALS)))) (EXP-STATIC-TYPED (DEF VALS) (EXP-STATIC-ASSERT DEF VALS) (CL:LABELS ((~G1068 (!) (CL:COND ((NOT (CL:LABELS ((~G1069 (~G195) (CL:COND (~G195 ~G195) (T (TYPE? (CL:CAR VALS) !))))) (~G1069 (CL:COND ((STRING? !) (EQUAL (CL:CAR VALS) !)))))) (CL:PROGN (CL:RETURN-FROM NIL (ERR "\"~A\" expected for argument ~A." (LIST (ARGDEF-GET-TYPE (CL:CAR DEF)) (ARGDEF-GET-NAME (CL:CAR DEF)))))))))) (~G1068 (ARGDEF-GET-TYPE (CL:CAR DEF)))) (CL:CONS (CL:CONS (ARGDEF-GET-NAME (CL:CAR DEF)) (CL:CAR VALS)) (EXP-MAIN (CL:CDR DEF) (CL:CDR VALS)))) (EXP-KEY (DEF VALS) (CL:LABELS ((~G1070 (K) (CL:COND (K (CL:LABELS ((~G1071 (!) (CL:COND ((NOT (CL:CDR !)) (CL:PROGN (CL:RETURN-FROM NIL (ERR "Value of ~A missing." (LIST (CL:CAR !))))))) (CL:RPLACD K (CL:CONS '%KEY (CL:CAR (CL:CDR !)))) (EXP-MAIN DEF (CL:CDR (CL:CDR !))))) (~G1071 VALS))) (T (EXP-MAIN-NON-KEY DEF VALS))))) (~G1070 (ASSOC ($ (CL:CAR VALS)) KEY-ARGS :TEST (CL:FUNCTION EQ))))) (EXP-REST (SYNONYM DEF VALS) (CL:PROGN (CL:SETQ NO-STATIC 'CL:&REST)) (CL:PROGN (CL:SETQ REST-ARG (LIST (CL:CONS (ARGDEF-GET-NAME (CL:CAR (CL:CDR DEF))) (CL:CONS SYNONYM VALS))))) NIL) (EXP-OPTIONAL (DEF VALS) (CL:PROGN (CL:SETQ NO-STATIC 'CL:&OPTIONAL)) (CL:CONS (CL:CONS (ARGDEF-GET-NAME (CL:CAR DEF)) (ARGDEF-GET-VALUE DEF VALS)) (CL:COND ((ARGUMENT-KEYWORD? (CL:CAR (CL:CDR DEF))) (EXP-MAIN (CL:CDR DEF) (CL:CDR VALS))) ((CL:CDR DEF) (EXP-OPTIONAL (CL:CDR DEF) (CL:CDR VALS))) (T (EXP-MAIN (CL:CDR DEF) (CL:CDR VALS)))))) (EXP-OPTIONAL-REST (DEF VALS) (CL:LABELS ((~G1072 (~G196) (CL:COND ((EQ ~G196 'CL:&REST) (EXP-REST '%REST DEF VALS)) ((EQ ~G196 'CL:&BODY) (EXP-REST '%BODY DEF VALS)) ((EQ ~G196 'CL:&OPTIONAL) (EXP-OPTIONAL (CL:CDR DEF) VALS))))) (~G1072 (CL:CAR DEF)))) (EXP-SUB (DEF VALS) (CL:COND (NO-STATIC (CL:RETURN-FROM NIL (ERR "Argument sublist definition after ~A." (LIST NO-STATIC))))) (CL:COND (APPLY-VALUES? (CL:COND ((ATOM (CL:CAR VALS)) (CL:RETURN-FROM NIL (ERR "Sublist expected for ~A." (LIST (CL:CAR DEF)))))))) (NCONC (ARGUMENT-EXPAND-0 FUN (CL:CAR DEF) (CL:CAR VALS) APPLY-VALUES? BREAK-ON-ERRORS?) (EXP-MAIN (CL:CDR DEF) (CL:CDR VALS)))) (EXP-CHECK-TOO-MANY (DEF VALS) (CL:COND ((NOT DEF) (CL:COND (VALS (CL:RETURN-FROM NIL (ERR "~%~A too many argument(s): ~AMaximum is ~A." (LIST (CL:LENGTH VALS) VALS (CL:LENGTH ARGDEFS))))))))) (EXP-MAIN-NON-KEY (DEF VALS) (EXP-CHECK-TOO-MANY DEF VALS) (CL:COND ((ARGUMENT-KEYWORD? (CL:CAR DEF)) (EXP-OPTIONAL-REST DEF VALS)) ((TYPED-ARGUMENT? (CL:CAR DEF)) (EXP-STATIC-TYPED DEF VALS)) ((CONS? (CL:CAR DEF)) (EXP-SUB DEF VALS)) (T (EXP-STATIC DEF VALS)))) (EXP-MAIN (DEF VALS) (CL:PROGN (CL:SETQ NUM (NUMBER+ NUM 1))) (CL:COND ((KEYWORD? (CL:CAR VALS)) (EXP-KEY DEF VALS)) (T (CL:LABELS ((~G1073 (~G197) (CL:COND (~G197 ~G197) (T (CL:COND (DEF (EXP-MAIN-NON-KEY DEF VALS))))))) (~G1073 (EXP-CHECK-TOO-MANY DEF VALS))))))) (CL:LABELS ((~G1074 (!) (CL:COND ((EQ ! :ERROR) !) (T (NCONC ! (NCONC KEY-ARGS REST-ARG)))))) (~G1074 (EXP-MAIN ARGDEFS VALS)))))) (~G1067 NIL)))) (~G1066 NIL)))) (~G1065 0)))) (~G1064 (CL:CAR ~G200))))) (~G1063 (CL:LABELS ((~G1075 (~G202) (CL:COND (~G202 ~G202) (T (%ERROR "Not enough VALUES."))))) (~G1075 (CL:CDR ~G199))))))) (~G1062 (CL:CAR ~G199))))) (~G1061 (CL:CDR ~G198))))) (~G1060 (MAKE-&KEY-ALIST ADEF))))))
(CL:DEFUN %KEY? (X) (CL:BLOCK %KEY? (CL:BLOCK NIL (CL:COND ((CONS? X) (CL:COND ((EQ '%KEY (CL:CAR X)) X)))))))
(CL:DEFUN %REST-OR-%BODY? (X) (CL:BLOCK %REST-OR-%BODY? (CL:BLOCK NIL (CL:LABELS ((~G1076 (~G191) (CL:COND (~G191 ~G191) (T (%BODY? X))))) (~G1076 (%REST? X))))))
(CL:DEFUN ++ (X) (CL:BLOCK ++ (CL:BLOCK NIL (NUMBER+ X 1))))
(CL:DEFUN SUBSEQ (SEQ START CL:&OPTIONAL (END 99999)) (CL:BLOCK SUBSEQ (CL:BLOCK NIL (CL:COND (SEQ (CL:PROGN (CL:COND ((> START END) (CL:LABELS ((~G1077 (~G111) (CL:PROGN (CL:SETQ START END) (CL:SETQ END ~G111)))) (~G1077 START)))) (CL:LABELS ((~G1078 (~G112) (CL:COND ((LIST? ~G112) (LIST-SUBSEQ SEQ START END)) ((STRING? ~G112) (STRING-SUBSEQ SEQ START END)) ((ARRAY? ~G112) (%SUBSEQ-SEQUENCE (CL:FUNCTION MAKE-ARRAY) SEQ START END)) (T (ERROR "Type of ~A not supported." SEQ))))) (~G1078 SEQ))))))))
(CL:DEFUN DOT-POSITION (X) (CL:BLOCK DOT-POSITION (CL:BLOCK NIL (POSITION #\. X))))
(CL:DEFUN DOT-EXPAND-LIST (X) (CL:BLOCK DOT-EXPAND-LIST (CL:BLOCK NIL (CL:LABELS ((~G1079 (~G113) (CL:LABELS ((~G1080 (~G114) (CL:COND ((NOT (EQ (CL:CAR ~G113) *VALUES-MAGIC*)) (CL:PROGN (ERROR "VALUES expected instead of ~A." ~G113)))) (CL:LABELS ((~G1081 (NUM-CDRS) (CL:LABELS ((~G1082 (~G115) (CL:LABELS ((~G1083 (WITHOUT-START) (CL:LABELS ((~G1084 (~G118) (CL:LABELS ((~G1085 (~G119) (CL:COND ((NOT (EQ (CL:CAR ~G118) *VALUES-MAGIC*)) (CL:PROGN (ERROR "VALUES expected instead of ~A." ~G118)))) (CL:LABELS ((~G1086 (NUM-CARS) (CL:LABELS ((~G1087 (~G120) (CL:LABELS ((~G1088 (WITHOUT-END) (CL:LABELS ((F (WHICH NUM X) (CL:COND ((< 0 NUM) (CL:CONS WHICH (CL:CONS (F WHICH (-- NUM) X) NIL))) (T X)))) (F 'CL:CAR NUM-CARS (F 'CL:CDR NUM-CDRS (DOT-EXPAND (MAKE-SYMBOL (LIST-STRING WITHOUT-END)))))))) (~G1088 (CL:CAR ~G120))))) (~G1087 (CL:LABELS ((~G1089 (~G122) (CL:COND (~G122 ~G122) (T (%ERROR "Not enough VALUES."))))) (~G1089 (CL:CDR ~G119))))))) (~G1086 (CL:CAR ~G119))))) (~G1085 (CL:CDR ~G118))))) (~G1084 (DOT-EXPAND-TAIL-LENGTH WITHOUT-START))))) (~G1083 (CL:CAR ~G115))))) (~G1082 (CL:LABELS ((~G1090 (~G117) (CL:COND (~G117 ~G117) (T (%ERROR "Not enough VALUES."))))) (~G1090 (CL:CDR ~G114))))))) (~G1081 (CL:CAR ~G114))))) (~G1080 (CL:CDR ~G113))))) (~G1079 (DOT-EXPAND-HEAD-LENGTH X))))))
(CL:DEFUN HAS-DOT-NOTATION? (X) (CL:BLOCK HAS-DOT-NOTATION? (CL:BLOCK NIL (CL:LABELS ((~G1091 (!) (CL:LABELS ((~G1092 (~G124) (CL:COND (~G124 ~G124) (T (EQL #\. (ELT ! (-- (CL:LENGTH !)))))))) (~G1092 (EQL #\. (ELT ! 0)))))) (~G1091 (SYMBOL-NAME X))))))
(CL:DEFUN NO-DOT-NOTATION? (X) (CL:BLOCK NO-DOT-NOTATION? (CL:BLOCK NIL (CL:LABELS ((~G1093 (SL) (CL:LABELS ((~G1094 (L) (CL:LABELS ((~G1095 (~G123) (CL:COND (~G123 ~G123) (T (NOT (DOT-POSITION SL)))))) (~G1095 (== 1 L))))) (~G1094 (CL:LENGTH SL))))) (~G1093 (STRING-LIST (SYMBOL-NAME X)))))))
(CL:DEFUN SKIP-SPACES (STR) (CL:BLOCK SKIP-SPACES (CL:BLOCK NIL (CL:COND ((AHEAD? #\; STR) (CL:PROGN (SKIP-COMMENT STR)))) (CL:COND ((AHEAD? (CL:FUNCTION WHITESPACE?) STR) (CL:PROGN (READ-CHAR STR) (SKIP-SPACES STR)))))))
(CL:DEFUN READ-ATOM (STR TOKEN PKG SYM) (CL:BLOCK READ-ATOM (CL:BLOCK NIL (CL:LABELS ((~G1096 (~G272) (CL:COND ((EQ ~G272 :DBLQUOTE) (READ-STRING STR)) ((EQ ~G272 :CHAR) (READ-CHAR STR)) ((EQ ~G272 :NUMBER) (CL:LABELS ((~G1097 (S) (PRINC SYM S) (READ-NUMBER S))) (~G1097 (MAKE-STRING-STREAM)))) ((EQ ~G272 :HEXNUM) (READ-HEX STR)) ((EQ ~G272 :ARRAY) (CL:CONS 'ARRAY (READ-CONS-SLOT STR))) ((EQ ~G272 :FUNCTION) (CL:CONS 'CL:FUNCTION (CL:CONS (READ-EXPR STR) NIL))) ((EQ ~G272 :SYMBOL) (READ-SYMBOL-OR-SLOT-VALUE PKG SYM)) (T (CL:COND ((%READ-CLOSING-PARENS? TOKEN) (ERROR "Unexpected closing ~A." (CL:LABELS ((~G1098 (~G273) (CL:COND ((EQL ~G273 :PARENTHESIS-CLOSE) "parenthesis") ((EQL ~G273 :BRACE-CLOSE) "brace") ((EQL ~G273 :BRACKET-CLOSE) "bracket")))) (~G1098 TOKEN)))) (T (ERROR "Closing bracket missing."))))))) (~G1096 TOKEN)))))
(CL:DEFUN READ-QUOTE (STR TOKEN) (CL:BLOCK READ-QUOTE (CL:BLOCK NIL (LIST (MAKE-SYMBOL (SYMBOL-NAME TOKEN)) (READ-EXPR STR)))))
(CL:DEFUN TOKEN-IS-QUOTE? (X) (CL:BLOCK TOKEN-IS-QUOTE? (CL:BLOCK NIL (CL:LABELS ((~G1099 (~G239) (CL:COND (~G239 ~G239) (T (CL:LABELS ((~G1100 (~G240) (CL:COND (~G240 ~G240) (T (CL:LABELS ((~G1101 (~G241) (CL:COND (~G241 ~G241) (T (EQL X :QUASIQUOTE-SPLICE))))) (~G1101 (EQL X :QUASIQUOTE))))))) (~G1100 (EQL X :BACKQUOTE))))))) (~G1099 (EQL X :QUOTE))))))
(CL:DEFUN READ-CONS-SLOT (STR) (CL:BLOCK READ-CONS-SLOT (CL:BLOCK NIL (CL:LABELS ((~G1102 (!) (CL:COND ((AHEAD? #\. STR) (CL:PROGN (READ-CHAR STR) (CL:LABELS ((~G1103 (~G297) (CL:LABELS ((~G1104 (~G298) (CL:COND ((NOT (EQ (CL:CAR ~G297) *VALUES-MAGIC*)) (CL:PROGN (ERROR "VALUES expected instead of ~A." ~G297)))) (CL:LABELS ((~G1105 (TOKEN) (CL:LABELS ((~G1106 (~G299) (CL:LABELS ((~G1107 (PKG) (CL:LABELS ((~G1108 (~G300) (CL:LABELS ((~G1109 (SYM) (READ-SLOT-VALUE (LIST ! SYM)))) (~G1109 (CL:CAR ~G300))))) (~G1108 (CL:LABELS ((~G1110 (~G303) (CL:COND (~G303 ~G303) (T (%ERROR "Not enough VALUES."))))) (~G1110 (CL:CDR ~G299))))))) (~G1107 (CL:CAR ~G299))))) (~G1106 (CL:LABELS ((~G1111 (~G302) (CL:COND (~G302 ~G302) (T (%ERROR "Not enough VALUES."))))) (~G1111 (CL:CDR ~G298))))))) (~G1105 (CL:CAR ~G298))))) (~G1104 (CL:CDR ~G297))))) (~G1103 (READ-TOKEN STR))))) (T !)))) (~G1102 (READ-CONS STR))))))
(CL:DEFUN READ-TOKEN (STR) (CL:BLOCK READ-TOKEN (CL:BLOCK NIL (CL:LABELS ((~G1112 (!) (CL:COND (! (CL:PROGN (CL:LABELS ((~G1113 (~G266) (CL:LABELS ((~G1114 (~G267) (CL:COND ((NOT (EQ (CL:CAR ~G266) *VALUES-MAGIC*)) (CL:PROGN (ERROR "VALUES expected instead of ~A." ~G266)))) (CL:LABELS ((~G1115 (PKG) (CL:LABELS ((~G1116 (~G268) (CL:LABELS ((~G1117 (SYM) (VALUES (CL:COND ((CL:COND (SYM (CL:COND ((NOT (CL:CDR SYM)) (EQL #\. (CL:CAR SYM)))))) :DOT) (T (CL:COND (SYM (CL:COND ((LIST-NUMBER? SYM) :NUMBER) (T :SYMBOL))) (T (CL:LABELS ((~G1118 (~G263) (CL:COND ((EQL ~G263 #\() :PARENTHESIS-OPEN) ((EQL ~G263 #\)) :PARENTHESIS-CLOSE) ((EQL ~G263 #\[) :BRACKET-OPEN) ((EQL ~G263 #\]) :BRACKET-CLOSE) ((EQL ~G263 #\{) :BRACE-OPEN) ((EQL ~G263 #\}) :BRACE-CLOSE) ((EQL ~G263 #\') :QUOTE) ((EQL ~G263 #\`) :BACKQUOTE) ((EQL ~G263 #\") :DBLQUOTE) ((EQL ~G263 #\,) (CL:COND ((AHEAD? #\@ STR) (CL:PROGN (READ-CHAR STR) :QUASIQUOTE-SPLICE)) (T :QUASIQUOTE))) ((EQL ~G263 #\#) (CL:LABELS ((~G1119 (~G264) (CL:COND ((EQL ~G264 #\\) :CHAR) ((EQL ~G264 #\x) :HEXNUM) ((EQL ~G264 #\') :FUNCTION) ((EQL ~G264 #\() :ARRAY) ((EQL ~G264 #\|) (READ-COMMENT-BLOCK STR)) (T (ERROR "Invalid character after '#'."))))) (~G1119 (READ-CHAR STR)))) ((EQL ~G263 -1) :EOF)))) (~G1118 (READ-CHAR STR))))))) (CL:LABELS ((~G1120 (~G265) (CL:COND (~G265 ~G265) (T *PACKAGE*)))) (~G1120 PKG)) (LIST-STRING SYM)))) (~G1117 (CL:CAR ~G268))))) (~G1116 (CL:LABELS ((~G1121 (~G270) (CL:COND (~G270 ~G270) (T (%ERROR "Not enough VALUES."))))) (~G1121 (CL:CDR ~G267))))))) (~G1115 (CL:CAR ~G267))))) (~G1114 (CL:CDR ~G266))))) (~G1113 !))))))) (~G1112 (READ-SYMBOL-AND-PACKAGE STR))))))
(CL:DEFUN =-STREAM-LAST-CHAR (VAL ARR) (CL:BLOCK =-STREAM-LAST-CHAR (CL:BLOCK NIL (CL:PROGN (=-AREF VAL ARR 6)))))
(CL:DEFUN STREAM-FUN-IN (ARR) (CL:BLOCK STREAM-FUN-IN (CL:BLOCK NIL (CL:AREF ARR 3))))
(CL:DEFUN READ-PEEKED-CHAR (STR) (CL:BLOCK READ-PEEKED-CHAR (CL:BLOCK NIL (CL:LABELS ((~G1122 (~G318) (CL:PROGN (=-STREAM-PEEKED-CHAR NIL STR)) ~G318)) (~G1122 (STREAM-PEEKED-CHAR STR))))))
(CL:DEFUN NTHCDR (IDX X) (CL:BLOCK NTHCDR (CL:BLOCK NIL (CL:COND (X (CL:COND ((== 0 IDX) X) (T (NTHCDR (-- IDX) (CL:CDR X)))))))))
(CL:DEFUN FRESH-LINE? (CL:&OPTIONAL (STR *STANDARD-OUTPUT*)) (CL:BLOCK FRESH-LINE? (CL:BLOCK NIL (CL:LABELS ((~G1123 (!) (CL:COND ((STREAM-LOCATION-TRACK? !) (== 1 (STREAM-LOCATION-COLUMN !)))))) (~G1123 (STREAM-OUTPUT-LOCATION STR))))))
(CL:DEFUN GET-STREAM-STRING (STR) (CL:BLOCK GET-STREAM-STRING (CL:BLOCK NIL (CL:LABELS ((~G1124 (~G180) (CL:PROGN (=-STREAM-USER-DETAIL (MAKE-QUEUE) STR)) ~G180)) (~G1124 (QUEUE-STRING (STREAM-USER-DETAIL STR)))))))
(CL:DEFUN FORCE-OUTPUT (CL:&OPTIONAL (STR *STANDARD-OUTPUT*)) (CL:BLOCK FORCE-OUTPUT (CL:BLOCK NIL (%FORCE-OUTPUT (STREAM-HANDLE STR)))))
(CL:DEFUN PRINT-HEXWORD (X CL:&OPTIONAL (STR *STANDARD-OUTPUT*)) (CL:BLOCK PRINT-HEXWORD (CL:BLOCK NIL (PRINT-HEX X 4 STR))))
(CL:DEFUN PRINT-HEXBYTE (X CL:&OPTIONAL (STR *STANDARD-OUTPUT*)) (CL:BLOCK PRINT-HEXBYTE (CL:BLOCK NIL (PRINT-HEX X 2 STR))))
(CL:DEFUN PRINC (X CL:&OPTIONAL (STR *STANDARD-OUTPUT*)) (CL:BLOCK PRINC (CL:BLOCK NIL (CL:LABELS ((~G1125 (~G185) (CL:LABELS ((~G1126 (S) (CL:LABELS ((~G1127 (~G186) (CL:COND (~G185 ~G186) (T (GET-STREAM-STRING S))))) (~G1127 (CL:PROGN (CL:COND ((NUMBER? X) (PRINC-NUMBER X S)) ((SYMBOL? X) (STREAM-PRINC (SYMBOL-NAME X) S)) (T (STREAM-PRINC X S))) X))))) (~G1126 (DEFAULT-STREAM ~G185))))) (~G1125 STR)))))
(CL:DEFUN LATE-PRINT (X CL:&OPTIONAL (STR *STANDARD-OUTPUT*) CL:&KEY (PRINT-INFO (MAKE-PRINT-INFO))) (CL:BLOCK LATE-PRINT (CL:BLOCK NIL (CL:LABELS ((~G1128 (~G237) (CL:LABELS ((~G1129 (S) (CL:LABELS ((~G1130 (~G238) (CL:COND (~G237 ~G238) (T (GET-STREAM-STRING S))))) (~G1130 (CL:PROGN (CL:COND ((CL:COND ((CONS? X) (CONS? (CL:CAR X)))) (CL:PROGN (%PRINT-INDENTATION S PRINT-INFO) (CL:PROGN (=-PRINT-INFO-COLUMNS (CL:CONS (STREAM-LOCATION-COLUMN (STREAM-OUTPUT-LOCATION STR)) (PRINT-INFO-COLUMNS PRINT-INFO)) PRINT-INFO)) (PRINC "(" S) (%PRINT-BODY X S PRINT-INFO) (PRINC ")" S) (CL:LABELS ((~G1131 (RET) (CL:PROGN (=-PRINT-INFO-COLUMNS (CL:CDR (PRINT-INFO-COLUMNS PRINT-INFO)) PRINT-INFO)) RET)) (~G1131 (CL:CAR (PRINT-INFO-COLUMNS PRINT-INFO)))))) (T (%LATE-PRINT X S PRINT-INFO))) (CL:COND (*PRINT-AUTOMATIC-NEWLINE?* (CL:COND ((NOT (FRESH-LINE? S)) (TERPRI S)))))))))) (~G1129 (DEFAULT-STREAM ~G237))))) (~G1128 STR)) X)))
(CL:DEFUN TERPRI (CL:&OPTIONAL (STR *STANDARD-OUTPUT*)) (CL:BLOCK TERPRI (CL:BLOCK NIL (CL:LABELS ((~G1132 (~G187) (CL:LABELS ((~G1133 (S) (CL:LABELS ((~G1134 (~G188) (CL:COND (~G187 ~G188) (T (GET-STREAM-STRING S))))) (~G1134 (CL:PROGN (STREAM-PRINC (CODE-CHAR 10) S) (FORCE-OUTPUT S) NIL))))) (~G1133 (DEFAULT-STREAM ~G187))))) (~G1132 STR)))))
(CL:DEFUN DEFAULT-STREAM (X) (CL:BLOCK DEFAULT-STREAM (CL:BLOCK NIL (CL:LABELS ((~G1135 (~G181) (CL:COND ((EQL ~G181 NIL) (MAKE-STRING-STREAM)) ((EQL ~G181 T) *STANDARD-OUTPUT*) (T X)))) (~G1135 X)))))
(CL:DEFUN EXPANDER-EXPAND (EXPANDER EXPR) (CL:BLOCK EXPANDER-EXPAND (CL:BLOCK NIL (CL:LABELS ((~G1136 (~G361) (CL:COND (~G361 ~G361) (T (ERROR "Expander ~A is not defined." (EXPANDER-NAME EXPANDER)))))) (~G1136 (EXPANDER? EXPANDER))) (FUNCALL (EXPANDER-PRE EXPANDER)) (CL:LABELS ((~G1137 (~G362) (FUNCALL (EXPANDER-POST EXPANDER)) ~G362)) (~G1137 (REFINE (CL:LAMBDA (_) (CL:BLOCK NIL (EXPANDER-EXPAND-0 EXPANDER _))) EXPR))))))
(CL:DEFUN %MAP-ARGS (LISTS) (CL:BLOCK %MAP-ARGS (CL:BLOCK NIL (CL:BLOCK NIL (CL:LABELS ((~G1138 (I) (CL:LABELS ((~G1139 (NL) (CL:TAGBODY START (CL:COND ((NOT I) (CL:RETURN-FROM NIL (QUEUE-LIST NL)))) (CL:COND ((NOT (CL:CAR I)) (CL:RETURN-FROM NIL NIL))) (ENQUEUE NL (CL:CAR (CL:CAR I))) (CL:RPLACA I (CL:CDR (CL:CAR I))) (CL:SETQ I (CL:CDR I)) (CL:GO START)))) (~G1139 (MAKE-QUEUE))))) (~G1138 LISTS))))))
(CL:DEFUN -- (X) (CL:BLOCK -- (CL:BLOCK NIL (NUMBER- X 1))))
(CL:DEFUN ENQUEUE (X CL:&REST VALS) (CL:BLOCK ENQUEUE (CL:BLOCK NIL (CL:RPLACA X (CL:CDR (CL:RPLACD (CL:LABELS ((~G1140 (~G6) (CL:COND (~G6 ~G6) (T X)))) (~G1140 (CL:CAR X))) VALS))) VALS)))
(CL:DEFUN QUEUE-LIST (X) (CL:BLOCK QUEUE-LIST (CL:BLOCK NIL (CL:CDR X))))
(CL:DEFUN MAKE-QUEUE NIL (CL:BLOCK MAKE-QUEUE (CL:BLOCK NIL (CL:CONS NIL NIL))))
(CL:DEFUN CHAR-UPCASE (C) (CL:BLOCK CHAR-UPCASE (CL:BLOCK NIL (CL:COND ((LOWER-CASE? C) (CODE-CHAR (- (+ (CL:CHAR-CODE C) (CL:CHAR-CODE #\A)) (CL:CHAR-CODE #\a)))) (T C)))))
(CL:DEFUN NCONC (CL:&REST LSTS) (CL:BLOCK NCONC (CL:BLOCK NIL (%NCONC-0 LSTS))))
(CL:DEFUN MAKE-STREAM (CL:&KEY (HANDLE 'HANDLE) (FUN-IN 'FUN-IN) (FUN-OUT 'FUN-OUT) (FUN-EOF 'FUN-EOF) (LAST-CHAR 'LAST-CHAR) (PEEKED-CHAR 'PEEKED-CHAR) (INPUT-LOCATION 'INPUT-LOCATION) (OUTPUT-LOCATION 'OUTPUT-LOCATION) (USER-DETAIL 'USER-DETAIL)) (CL:BLOCK MAKE-STREAM (CL:BLOCK NIL (CL:LABELS ((~G1141 (~G166) (CL:PROGN (=-AREF 'STRUCT ~G166 0) (=-AREF 'STREAM ~G166 1)) (CL:PROGN (=-AREF (CL:COND ((EQ HANDLE 'HANDLE) NIL) (T HANDLE)) ~G166 2)) (CL:PROGN (=-AREF (CL:COND ((EQ FUN-IN 'FUN-IN) NIL) (T FUN-IN)) ~G166 3)) (CL:PROGN (=-AREF (CL:COND ((EQ FUN-OUT 'FUN-OUT) NIL) (T FUN-OUT)) ~G166 4)) (CL:PROGN (=-AREF (CL:COND ((EQ FUN-EOF 'FUN-EOF) NIL) (T FUN-EOF)) ~G166 5)) (CL:PROGN (=-AREF (CL:COND ((EQ LAST-CHAR 'LAST-CHAR) NIL) (T LAST-CHAR)) ~G166 6)) (CL:PROGN (=-AREF (CL:COND ((EQ PEEKED-CHAR 'PEEKED-CHAR) NIL) (T PEEKED-CHAR)) ~G166 7)) (CL:PROGN (=-AREF (CL:COND ((EQ INPUT-LOCATION 'INPUT-LOCATION) (MAKE-STREAM-LOCATION)) (T INPUT-LOCATION)) ~G166 8)) (CL:PROGN (=-AREF (CL:COND ((EQ OUTPUT-LOCATION 'OUTPUT-LOCATION) (MAKE-STREAM-LOCATION :TRACK? NIL)) (T OUTPUT-LOCATION)) ~G166 9)) (CL:PROGN (=-AREF (CL:COND ((EQ USER-DETAIL 'USER-DETAIL) NIL) (T USER-DETAIL)) ~G166 10)) ~G166)) (~G1141 (MAKE-ARRAY 11))))))
(CL:DEFUN %MACROEXPAND-BACKQUOTE (X) (CL:COND ((ATOM X) X) ((ATOM (CL:CAR X)) (CL:CONS (CL:CAR X) (%MACROEXPAND-BACKQUOTE (CL:CDR X)))) ((EQ (CL:CAR (CL:CAR X)) 'QUASIQUOTE) (CL:CONS (CL:CONS 'QUASIQUOTE (%MACROEXPAND (CL:CDR (CL:CAR X)))) (%MACROEXPAND-BACKQUOTE (CL:CDR X)))) ((EQ (CL:CAR (CL:CAR X)) 'QUASIQUOTE-SPLICE) (CL:CONS (CL:CONS 'QUASIQUOTE-SPLICE (%MACROEXPAND (CL:CDR (CL:CAR X)))) (%MACROEXPAND-BACKQUOTE (CL:CDR X)))) (T (CL:CONS (%MACROEXPAND-BACKQUOTE (CL:CAR X)) (%MACROEXPAND-BACKQUOTE (CL:CDR X))))))
(CL:DEFUN MAKE-STANDARD-STREAM NIL (CL:BLOCK MAKE-STANDARD-STREAM (CL:BLOCK NIL (MAKE-STREAM :FUN-IN (CL:LAMBDA (_) (CL:BLOCK NIL (%READ-CHAR NIL))) :FUN-OUT (CL:LAMBDA (C STR) (%PRINC C NIL)) :FUN-EOF (CL:LAMBDA (_) (CL:BLOCK NIL (%FEOF NIL)))))))
(CL:DEFUN MAPCAN (FUNC CL:&REST LISTS) (CL:BLOCK MAPCAN (CL:BLOCK NIL (CL:APPLY (CL:FUNCTION NCONC) (CL:APPLY (CL:FUNCTION MAPCAR) FUNC LISTS)))))
(CL:DEFUN MAKE-KEYWORD (X) (CL:BLOCK MAKE-KEYWORD (CL:BLOCK NIL (CL:COND (X (MAKE-SYMBOL (CL:COND ((SYMBOL? X) (SYMBOL-NAME X)) (T X)) *KEYWORD-PACKAGE*))))))
(CL:DEFUN UPCASE (STR) (CL:BLOCK UPCASE (CL:BLOCK NIL (LIST-STRING (DYNAMIC-MAP (CL:FUNCTION CHAR-UPCASE) (STRING-LIST STR))))))
(CL:DEFUN GENSYM-NUMBER NIL (CL:SETQ *GENSYM-COUNTER* (+ 1 *GENSYM-COUNTER*)))
(CL:DEFUN ARRAY-LIST (X) (CL:BLOCK ARRAY-LIST (CL:BLOCK NIL (CL:LABELS ((~G1142 (RESULT) (CL:LABELS ((~G1143 (~G69) (CL:COND ((< ~G69 0) (ERROR "DOTIMES: Number of iterations is negative: ~A." ~G69))) (CL:BLOCK NIL (CL:LABELS ((~G1144 (!) (CL:TAGBODY ~G70 (CL:COND ((== ! ~G69) (CL:RETURN-FROM NIL (CL:PROGN (QUEUE-LIST RESULT))))) (ENQUEUE RESULT (CL:AREF X !)) (CL:SETQ ! (NUMBER+ 1 !)) (CL:GO ~G70)))) (~G1144 0))))) (~G1143 (INTEGER (CL:LENGTH X)))))) (~G1142 (MAKE-QUEUE))))))
(CL:DEFUN STRING-LIST (X) (CL:BLOCK STRING-LIST (CL:BLOCK NIL (CL:LABELS ((~G1145 (L) (CL:LABELS ((~G1146 (S) (CL:BLOCK NIL (CL:LABELS ((~G1147 (I) (CL:TAGBODY ~G76 (CL:COND ((< I 0) (CL:RETURN-FROM NIL (CL:PROGN)))) (CL:PROGN (CL:SETQ S (CL:PROGN (CL:SETQ S (CL:CONS (ELT X I) S))))) (CL:SETQ I (-- I)) (CL:GO ~G76)))) (~G1147 (-- L)))) S)) (~G1146 NIL)))) (~G1145 (CL:LENGTH X))))))
(CL:DEFUN MAPCAR (FUNC CL:&REST LISTS) (CL:BLOCK MAPCAR (CL:BLOCK NIL (CL:LABELS ((~G1148 (ARGS) (CL:COND (ARGS (CL:CONS (CL:APPLY FUNC ARGS) (CL:APPLY (CL:FUNCTION MAPCAR) FUNC LISTS)))))) (~G1148 (%MAP-ARGS LISTS))))))
(CL:DEFUN BACKQUOTE? (X) (CL:BLOCK BACKQUOTE? (CL:BLOCK NIL (CL:COND ((CONS? X) (CL:COND ((EQ 'BACKQUOTE (CL:CAR X)) X)))))))
(CL:DEFUN QUOTE? (X) (CL:BLOCK QUOTE? (CL:BLOCK NIL (CL:COND ((CONS? X) (CL:COND ((EQ 'CL:QUOTE (CL:CAR X)) X)))))))
(CL:DEFUN COMPILER-MACROEXPAND (X) (CL:BLOCK COMPILER-MACROEXPAND (CL:BLOCK NIL (EXPANDER-EXPAND *COMPILER-MACRO-EXPANDER* X))))
(CL:DEFUN CONSTANT-LITERAL? (X) (CL:BLOCK CONSTANT-LITERAL? (CL:BLOCK NIL (CL:LABELS ((~G1149 (~G432) (CL:COND (~G432 ~G432) (T (CL:LABELS ((~G1150 (~G433) (CL:COND (~G433 ~G433) (T (CL:LABELS ((~G1151 (~G434) (CL:COND (~G434 ~G434) (T (CL:LABELS ((~G1152 (~G435) (CL:COND (~G435 ~G435) (T (CL:LABELS ((~G1153 (~G436) (CL:COND (~G436 ~G436) (T (CL:LABELS ((~G1154 (~G437) (CL:COND (~G437 ~G437) (T (HASH-TABLE? X))))) (~G1154 (ARRAY? X))))))) (~G1153 (STRING? X))))))) (~G1152 (CHARACTER? X))))))) (~G1151 (NUMBER? X))))))) (~G1150 (EQ T X))))))) (~G1149 (NOT X))))))
(CL:DEFUN QUASIQUOTE-SPLICE? (X) (CL:BLOCK QUASIQUOTE-SPLICE? (CL:BLOCK NIL (CL:COND ((CONS? X) (CL:COND ((EQ 'QUASIQUOTE-SPLICE (CL:CAR X)) X)))))))
(CL:DEFUN QUASIQUOTE? (X) (CL:BLOCK QUASIQUOTE? (CL:BLOCK NIL (CL:COND ((CONS? X) (CL:COND ((EQ 'QUASIQUOTE (CL:CAR X)) X)))))))
(CL:DEFUN %ERROR (MSG) (CL:BLOCK %ERROR (CL:BLOCK NIL (BREAK (FORMAT T "In file '~A':~%~A" *LOAD* MSG)))))
(CL:DEFUN FORMAT (STR TEXT CL:&REST ARGS) (CL:BLOCK FORMAT (CL:BLOCK NIL (CL:LABELS ((~G1155 (~G333) (CL:LABELS ((~G1156 (S) (CL:LABELS ((~G1157 (~G334) (CL:COND (~G333 ~G334) (T (GET-STREAM-STRING S))))) (~G1157 (CL:PROGN (CL:LABELS ((~G1158 (PROCESSED-ARGS) (CL:LABELS ((ERR-MISSING NIL (ERROR "Argument ~A specified in format \"~A\" is missing." PROCESSED-ARGS TEXT)) (EOL (TXT ARGS) (TERPRI S) (F TXT ARGS)) (D-PLACEHOLDER (TXT ARGS) (CL:COND (ARGS (CL:COND ((CONS? (CL:CAR ARGS)) (LATE-PRINT (CL:CAR ARGS) S)) (T (PRINC (CL:CAR ARGS) S)))) (T (ERR-MISSING))) (F TXT (CL:CDR ARGS))) (D-HEXADECIMAL (TXT ARGS) (CL:COND (ARGS (CL:COND ((CONS? (CL:CAR ARGS)) (LATE-PRINT (CL:CAR ARGS) S)) (T (CL:COND ((< (CL:CAR ARGS) 256) (PRINT-HEXBYTE (CL:CAR ARGS) S)) (T (PRINT-HEXWORD (CL:CAR ARGS) S)))))) (T (ERR-MISSING))) (F TXT (CL:CDR ARGS))) (D-FORCE-OUTPUT (TXT ARGS) (FORCE-OUTPUT S) (F TXT ARGS)) (D-FRESH-LINE (TXT ARGS) (FRESH-LINE S) (F TXT ARGS)) (TILDE (TXT ARGS) (PRINC #\~ S) (F TXT ARGS)) (DIRECTIVE (TXT ARGS) (CL:PROGN (CL:SETQ PROCESSED-ARGS (NUMBER+ PROCESSED-ARGS 1))) (CL:LABELS ((~G1159 (~G335) (CL:COND ((EQL ~G335 #\%) (EOL (CL:CDR TXT) ARGS)) ((EQL ~G335 #\A) (D-PLACEHOLDER (CL:CDR TXT) ARGS)) ((EQL ~G335 #\X) (D-HEXADECIMAL (CL:CDR TXT) ARGS)) ((EQL ~G335 #\F) (D-FORCE-OUTPUT (CL:CDR TXT) ARGS)) ((EQL ~G335 #\L) (D-FRESH-LINE (CL:CDR TXT) ARGS)) ((EQL ~G335 #\~) (CL:PROGN (PRINC (CL:CAR TXT) S) (F (CL:CDR TXT) ARGS))) (T (TILDE TXT ARGS))))) (~G1159 (CL:CAR TXT)))) (F (TXT ARGS) (CL:COND (TXT (CL:PROGN (CL:COND ((EQL (CL:CAR TXT) #\\) (CL:PROGN (PRINC (CL:CAR TXT) S) (PRINC (CL:CAR (CL:CDR TXT)) S) (F (CL:CDR (CL:CDR TXT)) ARGS))) ((EQL (CL:CAR TXT) #\~) (DIRECTIVE (CL:CDR TXT) ARGS)) (T (CL:PROGN (PRINC (CL:CAR TXT) S) (F (CL:CDR TXT) ARGS))))))))) (F (STRING-LIST TEXT) ARGS)))) (~G1158 0))))))) (~G1156 (DEFAULT-STREAM ~G333))))) (~G1155 STR)))))
(CL:DEFUN FRESH-LINE (CL:&OPTIONAL (STR *STANDARD-OUTPUT*)) (CL:BLOCK FRESH-LINE (CL:BLOCK NIL (CL:LABELS ((~G1160 (~G189) (CL:LABELS ((~G1161 (S) (CL:LABELS ((~G1162 (~G190) (CL:COND (~G189 ~G190) (T (GET-STREAM-STRING S))))) (~G1162 (CL:PROGN (CL:COND ((NOT (FRESH-LINE? S)) (CL:PROGN (TERPRI S) T)))))))) (~G1161 (DEFAULT-STREAM ~G189))))) (~G1160 STR)))))
(CL:DEFUN NTH (I X) (CL:BLOCK NTH (CL:BLOCK NIL (CL:CAR (NTHCDR I X)))))
(CL:DEFUN =-STREAM-PEEKED-CHAR (VAL ARR) (CL:BLOCK =-STREAM-PEEKED-CHAR (CL:BLOCK NIL (CL:PROGN (=-AREF VAL ARR 7)))))
(CL:DEFUN READ-CHAR-0 (STR) (CL:BLOCK READ-CHAR-0 (CL:BLOCK NIL (CL:LABELS ((~G1163 (~G319) (CL:COND (~G319 ~G319) (T (CL:PROGN (=-STREAM-LAST-CHAR (FUNCALL (STREAM-FUN-IN STR) STR) STR)))))) (~G1163 (READ-PEEKED-CHAR STR))))))
(CL:DEFUN STREAM-PEEKED-CHAR (ARR) (CL:BLOCK STREAM-PEEKED-CHAR (CL:BLOCK NIL (CL:AREF ARR 7))))
(CL:DEFUN READ-EXPR (STR) (CL:BLOCK READ-EXPR (CL:BLOCK NIL (CL:LABELS ((~G1164 (~G305) (CL:LABELS ((~G1165 (~G306) (CL:COND ((NOT (EQ (CL:CAR ~G305) *VALUES-MAGIC*)) (CL:PROGN (ERROR "VALUES expected instead of ~A." ~G305)))) (CL:LABELS ((~G1166 (TOKEN) (CL:LABELS ((~G1167 (~G307) (CL:LABELS ((~G1168 (PKG) (CL:LABELS ((~G1169 (~G308) (CL:LABELS ((~G1170 (SYM) (CL:LABELS ((~G1171 (~G304) (CL:COND ((EQL ~G304 NIL) NIL) ((EQL ~G304 :EOF) NIL) ((EQL ~G304 :PARENTHESIS-OPEN) (READ-CONS-SLOT STR)) ((EQL ~G304 :BRACKET-OPEN) (CL:CONS 'BRACKETS (READ-CONS-SLOT STR))) ((EQL ~G304 :BRACE-OPEN) (CL:CONS 'BRACES (READ-CONS-SLOT STR))) (T (CL:COND ((TOKEN-IS-QUOTE? TOKEN) (READ-QUOTE STR TOKEN)) (T (READ-ATOM STR TOKEN PKG SYM))))))) (~G1171 TOKEN)))) (~G1170 (CL:CAR ~G308))))) (~G1169 (CL:LABELS ((~G1172 (~G311) (CL:COND (~G311 ~G311) (T (%ERROR "Not enough VALUES."))))) (~G1172 (CL:CDR ~G307))))))) (~G1168 (CL:CAR ~G307))))) (~G1167 (CL:LABELS ((~G1173 (~G310) (CL:COND (~G310 ~G310) (T (%ERROR "Not enough VALUES."))))) (~G1173 (CL:CDR ~G306))))))) (~G1166 (CL:CAR ~G306))))) (~G1165 (CL:CDR ~G305))))) (~G1164 (READ-TOKEN STR))))))
(CL:DEFUN SEEK-CHAR (STR) (CL:BLOCK SEEK-CHAR (CL:BLOCK NIL (SKIP-SPACES STR) (PEEK-CHAR STR))))
(CL:DEFUN DOT-EXPAND-CONV (X) (CL:BLOCK DOT-EXPAND-CONV (CL:BLOCK NIL (CL:COND ((NO-DOT-NOTATION? X) X) (T (CL:LABELS ((~G1174 (SL) (CL:COND ((HAS-DOT-NOTATION? X) (DOT-EXPAND-LIST SL)) (T (CL:LABELS ((~G1175 (P) (CL:CONS '%SLOT-VALUE (CL:CONS (MAKE-SYMBOL (LIST-STRING (SUBSEQ SL 0 P))) (CL:CONS (DOT-EXPAND-CONV (MAKE-SYMBOL (LIST-STRING (SUBSEQ SL (++ P))))) NIL))))) (~G1175 (DOT-POSITION SL))))))) (~G1174 (STRING-LIST (SYMBOL-NAME X)))))))))
(CL:DEFUN %QUASIQUOTE-EXPAND (X) (CL:COND ((ATOM X) X) ((ATOM (CL:CAR X)) (CL:CONS (CL:CAR X) (%QUASIQUOTE-EXPAND (CL:CDR X)))) ((EQ (CL:CAR (CL:CAR X)) 'CL:QUOTE) (CL:CONS (CL:CAR X) (%QUASIQUOTE-EXPAND (CL:CDR X)))) ((EQ (CL:CAR (CL:CAR X)) 'BACKQUOTE) (CL:CONS (CL:CAR X) (%QUASIQUOTE-EXPAND (CL:CDR X)))) ((EQ (CL:CAR (CL:CAR X)) 'QUASIQUOTE) (CL:CONS (EVAL (MACROEXPAND (CL:CAR (CL:CDR (CL:CAR X))))) (%QUASIQUOTE-EXPAND (CL:CDR X)))) ((EQ (CL:CAR (CL:CAR X)) 'QUASIQUOTE-SPLICE) (APPEND (EVAL (MACROEXPAND (CL:CAR (CL:CDR (CL:CAR X))))) (%QUASIQUOTE-EXPAND (CL:CDR X)))) (T (CL:CONS (%QUASIQUOTE-EXPAND (CL:CAR X)) (%QUASIQUOTE-EXPAND (CL:CDR X))))))
(CL:DEFUN MAKE-FILE-STREAM (CL:&KEY STREAM (INPUT-LOCATION (MAKE-STREAM-LOCATION)) (OUTPUT-LOCATION (MAKE-STREAM-LOCATION))) (CL:BLOCK MAKE-FILE-STREAM (CL:BLOCK NIL (MAKE-STREAM :HANDLE STREAM :INPUT-LOCATION INPUT-LOCATION :OUTPUT-LOCATION OUTPUT-LOCATION :FUN-IN (CL:LAMBDA (_) (CL:BLOCK NIL (%READ-CHAR (STREAM-HANDLE _)))) :FUN-OUT (CL:LAMBDA (C STR) (%PRINC C (STREAM-HANDLE STR))) :FUN-EOF (CL:LAMBDA (_) (CL:BLOCK NIL (%FEOF (STREAM-HANDLE _))))))))
(CL:DEFUN MAKE-STREAM-LOCATION (CL:&KEY (TRACK? 'TRACK?) (ID 'ID) (LINE 'LINE) (COLUMN 'COLUMN) (TABSIZE 'TABSIZE)) (CL:BLOCK MAKE-STREAM-LOCATION (CL:BLOCK NIL (CL:LABELS ((~G1176 (~G165) (CL:PROGN (=-AREF 'STRUCT ~G165 0) (=-AREF 'STREAM-LOCATION ~G165 1)) (CL:PROGN (=-AREF (CL:COND ((EQ TRACK? 'TRACK?) T) (T TRACK?)) ~G165 2)) (CL:PROGN (=-AREF (CL:COND ((EQ ID 'ID) NIL) (T ID)) ~G165 3)) (CL:PROGN (=-AREF (CL:COND ((EQ LINE 'LINE) 1) (T LINE)) ~G165 4)) (CL:PROGN (=-AREF (CL:COND ((EQ COLUMN 'COLUMN) 1) (T COLUMN)) ~G165 5)) (CL:PROGN (=-AREF (CL:COND ((EQ TABSIZE 'TABSIZE) *DEFAULT-STREAM-TABSIZE*) (T TABSIZE)) ~G165 6)) ~G165)) (~G1176 (MAKE-ARRAY 7))))))
(CL:DEFUN %FOPEN-DIRECTION (DIRECTION) (CL:BLOCK %FOPEN-DIRECTION (CL:BLOCK NIL (CL:LABELS ((~G1177 (~G183) (CL:COND ((EQL ~G183 'INPUT) "r") ((EQL ~G183 'OUTPUT) "w") ((EQL ~G183 'APPEND) "a") (T (ERROR ":DIRECTION isn't specified."))))) (~G1177 DIRECTION)))))
(CL:DEFUN STREAM-HANDLE (ARR) (CL:BLOCK STREAM-HANDLE (CL:BLOCK NIL (CL:AREF ARR 2))))
(CL:DEFUN FUNCALL (FUN CL:&REST X) (CL:APPLY FUN X))
(CL:DEFUN CDRLIST (~G35) (CL:BLOCK CDRLIST (CL:BLOCK NIL (FILTER (CL:FUNCTION CL:CDR) ~G35))))
(CL:DEFUN ARGUMENT-SYNONYM? (X) (CL:BLOCK ARGUMENT-SYNONYM? (CL:BLOCK NIL (CL:LABELS ((~G1178 (~G192) (CL:COND (~G192 ~G192) (T (%KEY? X))))) (~G1178 (%REST-OR-%BODY? X))))))
(CL:DEFUN %MACROEXPAND-REST (X) (CL:COND ((ATOM X) X) (T (CL:CONS (%MACROEXPAND (CL:CAR X)) (%MACROEXPAND-REST (CL:CDR X))))))
(CL:DEFUN ARGUMENT-EXPAND (FUN DEF VALS CL:&KEY (APPLY-VALUES? T) (BREAK-ON-ERRORS? T)) (CL:BLOCK ARGUMENT-EXPAND (CL:BLOCK NIL (CL:LABELS ((~G1179 (!) (CL:COND ((CL:LABELS ((~G1180 (~G203) (CL:COND (~G203 ~G203) (T (EQ ! :ERROR))))) (~G1180 APPLY-VALUES?)) !) (T (CARLIST !))))) (~G1179 (ARGUMENT-EXPAND-0 FUN DEF VALS APPLY-VALUES? BREAK-ON-ERRORS?))))))
(CL:DEFUN PROPS-KLIST NIL)
(CL:DEFUN JSON-OBJECT? NIL)
(CL:DEFUN BUTLAST (PLIST) (CL:BLOCK BUTLAST (CL:BLOCK NIL (CL:COND ((CL:CDR PLIST) (CL:CONS (CL:CAR PLIST) (BUTLAST (CL:CDR PLIST))))))))
(CL:DEFUN LAST (X) (CL:BLOCK LAST (CL:BLOCK NIL (CL:COND ((CL:CDR X) (LAST (CL:CDR X))) (T X)))))
(CL:DEFUN GROUP (X SIZE) (CL:BLOCK GROUP (CL:BLOCK NIL (CL:COND (X (CL:PROGN (CL:CONS (LIST-SUBSEQ X 0 SIZE) (GROUP (NTHCDR SIZE X) SIZE))))))))
(CL:DEFUN MAKE-? (BODY) (CL:BLOCK MAKE-? (CL:BLOCK NIL (CL:LABELS ((~G1181 (TESTS) (CL:LABELS ((~G1182 (END) (CL:LABELS ((~G1183 (~G728) (CL:COND (~G728 ~G728) (T (ERROR "Body is missing."))))) (~G1183 BODY)) (CL:CONS 'CL:COND (CL:LABELS ((~G1184 (~G1597) (APPEND (CL:COND ((JSON-OBJECT? ~G1597) (PROPS-KLIST ~G1597)) (T ~G1597)) NIL))) (~G1184 (CL:COND ((CL:CDR END) TESTS) (T (+ (BUTLAST TESTS) (LIST (CL:CONS T END)))))))))) (~G1182 (CL:CAR (LAST TESTS)))))) (~G1181 (GROUP BODY 2))))))
(CL:DEFUN ARGUMENT-EXPAND-NAMES (FUN DEF) (CL:BLOCK ARGUMENT-EXPAND-NAMES (CL:BLOCK NIL (ARGUMENT-EXPAND FUN DEF NIL :APPLY-VALUES? NIL))))
(CL:DEFUN ENSURE-LIST (X) (CL:BLOCK ENSURE-LIST (CL:BLOCK NIL (CL:COND (X (CL:COND ((LIST? X) X) (T (LIST X))))))))
(CL:DEFUN %MACROEXPAND (X) (CL:COND ((ATOM X) X) ((CL:APPLY *MACRO?* (LIST X)) (CL:LABELS ((~G1185 (X) (CL:COND ((CONS? X) (CL:CONS (CL:CAR X) (%MACROEXPAND-REST (CL:CDR X)))) (T X)))) (~G1185 (CL:APPLY *MACROCALL* (LIST X))))) ((EQ (CL:CAR X) 'CL:QUOTE) X) ((EQ (CL:CAR X) 'BACKQUOTE) (CL:CONS 'BACKQUOTE (CL:APPLY *MACROEXPAND-BACKQUOTE* (LIST (CL:CDR X))))) ((EQ (CL:CAR X) 'QUASIQUOTE) (CL:CONS 'QUASIQUOTE (%MACROEXPAND (CL:CDR X)))) ((EQ (CL:CAR X) 'QUASIQUOTE-SPLICE) (CL:CONS 'QUASIQUOTE-SPLICE (%MACROEXPAND (CL:CDR X)))) (T (CL:CONS (%MACROEXPAND (CL:CAR X)) (%MACROEXPAND-REST (CL:CDR X))))))
(CL:DEFUN LIST? (X) (CL:BLOCK LIST? (CL:BLOCK NIL (CL:LABELS ((~G1186 (~G2) (CL:COND (~G2 ~G2) (T (NOT X))))) (~G1186 (CONS? X))))))
(CL:DEFUN LIST (CL:&REST X) X)
(CL:DEFUN ARGUMENT-EXPAND-VALUES (FUN DEF VALS CL:&KEY (BREAK-ON-ERRORS? T)) (CL:BLOCK ARGUMENT-EXPAND-VALUES (CL:BLOCK NIL (DYNAMIC-MAP (CL:LAMBDA (_) (CL:BLOCK NIL (CL:COND ((ARGUMENT-SYNONYM? _) (CL:CDR _)) (T _)))) (CDRLIST (ARGUMENT-EXPAND FUN DEF VALS :BREAK-ON-ERRORS? BREAK-ON-ERRORS?))))))
(CL:DEFUN ASSOC (KEY LST CL:&KEY (TEST (CL:FUNCTION EQL))) (CL:BLOCK ASSOC (CL:BLOCK NIL (CL:COND (LST (CL:BLOCK NIL (CL:LABELS ((~G1187 (~G127) (CL:LABELS ((~G1188 (I) (CL:TAGBODY ~G125 (CL:COND ((NOT ~G127) (CL:GO ~G126))) (CL:SETQ I (CL:CAR ~G127)) (CL:COND ((CONS? I) (CL:COND ((FUNCALL TEST KEY (CL:CAR I)) (CL:RETURN-FROM NIL I)))) (T (ERROR "Pair expected instead of ~A." I))) (CL:SETQ ~G127 (CL:CDR ~G127)) (CL:GO ~G125) ~G126 (CL:RETURN-FROM NIL (CL:PROGN))))) (~G1188 NIL)))) (~G1187 LST))))))))
(CL:DEFUN CLOSE (STR) (CL:BLOCK CLOSE (CL:BLOCK NIL (%FCLOSE (STREAM-HANDLE STR)))))
(CL:DEFUN OPEN (PATH CL:&KEY DIRECTION) (CL:BLOCK OPEN (CL:BLOCK NIL (CL:LABELS ((~G1189 (!) (CL:COND (! (MAKE-FILE-STREAM :STREAM ! :INPUT-LOCATION (MAKE-STREAM-LOCATION :ID PATH))) (T (ERROR "Couldn't open file `~A'." PATH))))) (~G1189 (%FOPEN PATH (%FOPEN-DIRECTION DIRECTION)))))))
(CL:DEFUN QUASIQUOTE-EXPAND (X) (CL:CAR (%QUASIQUOTE-EXPAND (LIST X))))
(CL:DEFUN DOT-EXPAND (X) (CL:BLOCK DOT-EXPAND (CL:BLOCK NIL (CL:COND ((SYMBOL? X) (DOT-EXPAND-CONV X)) ((CONS? X) (CL:CONS (DOT-EXPAND (CL:CAR X)) (DOT-EXPAND (CL:CDR X)))) (T X)))))
(CL:DEFUN READ (CL:&OPTIONAL (STR *STANDARD-INPUT*)) (CL:BLOCK READ (CL:BLOCK NIL (CL:COND ((SEEK-CHAR STR) (READ-EXPR STR))))))
(CL:DEFUN PEEK-CHAR (CL:&OPTIONAL (STR *STANDARD-INPUT*)) (CL:BLOCK PEEK-CHAR (CL:BLOCK NIL (CL:LABELS ((~G1190 (~G320) (CL:COND (~G320 ~G320) (T (CL:PROGN (=-STREAM-PEEKED-CHAR (READ-CHAR-0 STR) STR)))))) (~G1190 (STREAM-PEEKED-CHAR STR))))))
(CL:DEFUN ELT (SEQ IDX) (CL:BLOCK ELT (CL:BLOCK NIL (CL:COND ((NOT SEQ) NIL) ((STRING? SEQ) (CHAR SEQ IDX)) ((CONS? SEQ) (NTH IDX SEQ)) (T (CL:AREF SEQ IDX))))))
(CL:DEFUN ERROR (MSG CL:&REST ARGS) (CL:BLOCK ERROR (CL:BLOCK NIL (CL:LABELS ((~G1191 (~G340) (CL:PROGN (CL:SETQ *PRINT-AUTOMATIC-NEWLINE?* NIL)) (CL:LABELS ((~G1192 (~G341) (CL:PROGN (CL:SETQ *PRINT-AUTOMATIC-NEWLINE?* ~G340)) ~G341)) (~G1192 (CL:PROGN (FRESH-LINE) (%ERROR (CL:APPLY (CL:FUNCTION FORMAT) NIL MSG ARGS))))))) (~G1191 *PRINT-AUTOMATIC-NEWLINE?*)))))
(CL:DEFUN QUOTE-EXPAND (X) (CL:BLOCK QUOTE-EXPAND (CL:BLOCK NIL (CL:LABELS ((ANY-QUASIQUOTE? (_) (CL:BLOCK NIL (CL:LABELS ((~G1193 (~G661) (CL:COND (~G661 ~G661) (T (QUASIQUOTE-SPLICE? _))))) (~G1193 (QUASIQUOTE? _))))) (ATOMIC (_) (CL:BLOCK NIL (CL:COND ((CONSTANT-LITERAL? _) _) (T (CL:CONS 'CL:QUOTE (CL:CONS _ NIL)))))) (STATIC (_) (CL:BLOCK NIL (CL:COND ((ATOM _) (ATOMIC _)) (T (CL:CONS 'CL:CONS (CL:CONS (STATIC (CL:CAR _)) (CL:CONS (STATIC (CL:CDR _)) NIL))))))) (QQ (_) (CL:BLOCK NIL (CL:COND ((ANY-QUASIQUOTE? (CADR (CL:CAR _))) (CL:CONS 'CL:CONS (CL:CONS (BACKQ (CADR (CL:CAR _))) (CL:CONS (BACKQ (CL:CDR _)) NIL)))) (T (CL:CONS 'CL:CONS (CL:CONS (CADR (CL:CAR _)) (CL:CONS (BACKQ (CL:CDR _)) NIL))))))) (QQS (_) (CL:BLOCK NIL (CL:COND ((ANY-QUASIQUOTE? (CADR (CL:CAR _))) (ERROR "Illegal ~A as argument to ,@ (QUASIQUOTE-SPLICE)." (CADR (CL:CAR _)))) (T (CL:LABELS ((~G1194 (G) (COMPILER-MACROEXPAND (CL:CONS (CL:CONS 'CL:FUNCTION (CL:CONS (CL:CONS (CL:CONS G NIL) (CL:CONS (CL:CONS 'APPEND (CL:CONS (CL:CONS '? (CL:CONS (CL:CONS 'JSON-OBJECT? (CL:CONS G NIL)) (CL:CONS (CL:CONS 'PROPS-KLIST (CL:CONS G NIL)) (CL:CONS G NIL)))) (CL:CONS (BACKQ (CL:CDR _)) NIL))) NIL)) NIL)) (CL:CONS (CADR (CL:CAR _)) NIL))))) (~G1194 (GENSYM))))))) (BACKQ (_) (CL:BLOCK NIL (CL:COND ((ATOM _) (ATOMIC _)) (T (CL:LABELS ((~G1195 (~G662) (CL:COND ((ATOM ~G662) (CL:CONS 'CL:CONS (CL:CONS (ATOMIC (CL:CAR _)) (CL:CONS (BACKQ (CL:CDR _)) NIL)))) ((QUASIQUOTE? ~G662) (QQ _)) ((QUASIQUOTE-SPLICE? ~G662) (QQS _)) (T (CL:CONS 'CL:CONS (CL:CONS (BACKQ (CL:CAR _)) (CL:CONS (BACKQ (CL:CDR _)) NIL))))))) (~G1195 (CL:CAR _))))))) (DISP (_) (CL:BLOCK NIL (CL:LABELS ((~G1196 (~G663) (CL:COND ((QUOTE? ~G663) (STATIC (CL:CAR (CL:CDR _)))) ((BACKQUOTE? ~G663) (BACKQ (CL:CAR (CL:CDR _)))) (T _)))) (~G1196 _)))) (WALK (_) (CL:BLOCK NIL (CL:COND ((ATOM _) (DISP _)) (T (CL:CONS (WALK (DISP (CL:CAR _))) (WALK (CL:CDR _)))))))) (CL:CAR (WALK (LIST X)))))))
(CL:DEFUN DYNAMIC-MAP (FUNC CL:&REST LISTS) (CL:BLOCK DYNAMIC-MAP (CL:BLOCK NIL (CL:COND ((STRING? (CL:CAR LISTS)) (LIST-STRING (CL:APPLY (CL:FUNCTION MAPCAR) FUNC (MAPCAR (CL:FUNCTION STRING-LIST) LISTS)))) ((ARRAY? (CL:CAR LISTS)) (CL:APPLY (CL:FUNCTION MAPCAR) FUNC (MAPCAR (CL:FUNCTION ARRAY-LIST) LISTS))) (T (CL:APPLY (CL:FUNCTION MAPCAR) FUNC LISTS))))))
(CL:DEFUN ATOM (X) (NOT (CONS? X)))
(CL:DEFUN EQUAL (X Y) (CL:BLOCK EQUAL (CL:BLOCK NIL (CL:COND ((CL:LABELS ((~G1197 (~G1) (CL:COND (~G1 ~G1) (T (ATOM Y))))) (~G1197 (ATOM X))) (EQL X Y)) ((EQUAL (CL:CAR X) (CL:CAR Y)) (EQUAL (CL:CDR X) (CL:CDR Y)))))))
(CL:DEFUN CADR (X) (CL:BLOCK CADR (CL:BLOCK NIL (CL:CAR (CL:CDR X)))))
(CL:DEFUN GENSYM (CL:&OPTIONAL (PREFIX "~G")) (CL:LABELS ((~G1198 (X) (CL:COND ((EQ (SYMBOL-VALUE X) X) (CL:COND ((SYMBOL-FUNCTION X) (GENSYM)) (T X))) (T (GENSYM))))) (~G1198 (MAKE-SYMBOL (STRING-CONCAT PREFIX (STRING (GENSYM-NUMBER)))))))
(CL:DEFUN + (CL:&REST X) (CL:LABELS ((~G1199 (A) (CL:COND (A (CL:APPLY (CL:COND ((CONS? A) (CL:FUNCTION APPEND)) ((STRING? A) (CL:FUNCTION STRING-CONCAT)) (T (CL:FUNCTION NUMBER+))) X)) (T (CL:COND ((CL:CDR X) (CL:APPLY (CL:FUNCTION +) (CL:CDR X)))))))) (~G1199 (CL:CAR X))))
(CL:DEFUN MEMBER (ELM LST CL:&KEY (TEST (CL:FUNCTION EQL))) (CL:BLOCK MEMBER (CL:BLOCK NIL (CL:BLOCK NIL (CL:LABELS ((~G1200 (I) (CL:TAGBODY ~G9 (CL:COND ((NOT I) (CL:RETURN-FROM NIL (CL:PROGN)))) (CL:COND ((FUNCALL TEST ELM (CL:CAR I)) (CL:RETURN-FROM NIL I))) (CL:SETQ I (CL:CDR I)) (CL:GO ~G9)))) (~G1200 LST))))))
(CL:DEFUN ACONS (KEY VAL LST) (CL:BLOCK ACONS (CL:BLOCK NIL (CL:CONS (CL:CONS KEY VAL) LST))))
(CL:DEFUN PRINT-DEFINITION (X) (CL:COND (*PRINT-DEFINITIONS?* (CL:APPLY *DEFINITION-PRINTER* (LIST X)))))
(CL:DEFUN PROPS-KLIST (X) (CL:BLOCK PROPS-KLIST (CL:BLOCK NIL (MAPCAN (CL:LAMBDA (_) (CL:BLOCK NIL (LIST (MAKE-KEYWORD (UPCASE _)) (CL:SLOT-VALUE X _)))) (KEYS X)))))
(CL:DEFUN JSON-OBJECT? (X) (CL:BLOCK JSON-OBJECT? (CL:BLOCK NIL X NIL)))
(CL:DEFUN IDENTITY (X) X)
"Section DELAYED-EXPRS"
(CL:SETQ *UNIVERSE* NIL)
(CL:SETQ *VARIABLES* NIL)
(CL:SETQ *LAUNCHFILE* NIL)
(CL:SETQ *POINTER-SIZE* 4)
(CL:SETQ *ASSERT?* NIL)
(CL:SETQ *ENDIANESS* NIL)
(CL:SETQ *CPU-TYPE* NIL)
(CL:SETQ *LIBC-PATH* NIL)
(CL:SETQ *RAND-MAX* NIL)
(CL:SETQ *PRINT-DEFINITIONS?* NIL)
(CL:SETQ *DEFAULT-STREAM-TABSIZE* 8)
(CL:SETQ *QUASIQUOTE-EXPAND* NIL)
(CL:SETQ *DOT-EXPAND* NIL)
(CL:SETQ *ENVIRONMENT-PATH* ".")
(CL:SETQ *ENVIRONMENT-FILENAMES* NIL)
(CL:SETQ *EVAL* NIL)
(CL:SETQ *FUNCTIONS* NIL)
(CL:SETQ *LOAD* NIL)
(CL:SETQ *MACROEXPAND* NIL)
(CL:SETQ *SPECIAL-FORMS* NIL)
(CL:PUSH (CL:CONS (TRE-SYMBOL '%FN-QUIET) (CL:CONS '(NAME ARGS CL:&BODY BODY) (CL:LAMBDA (NAME ARGS BODY) (MAKE-%FN-QUIET NAME ARGS BODY)))) *SPECIAL-FORMS*)
(CL:PUSH (CL:CONS (TRE-SYMBOL '%FN) (CL:CONS '(NAME ARGS CL:&BODY BODY) (CL:LAMBDA (NAME ARGS BODY) (PRINT-DEFINITION `(%FN ,NAME ,ARGS)) (MAKE-%FN-QUIET NAME ARGS BODY)))) *SPECIAL-FORMS*)
(CL:PUSH (CL:CONS (TRE-SYMBOL '%DEFMACRO) (CL:CONS '(NAME ARGS CL:&BODY BODY) (CL:LAMBDA (NAME ARGS BODY) (PRINT-DEFINITION `(%DEFMACRO ,NAME ,ARGS)) `(CL:PUSH (CL:CONS ',NAME (CL:CONS ',(CL:CONS ARGS BODY) (CL:LAMBDA ,(ARGUMENT-EXPAND-NAMES '%DEFMACRO ARGS) ,@BODY))) ,(TRE-SYMBOL '*MACROS*))))) *SPECIAL-FORMS*)
(CL:PUSH (CL:CONS (TRE-SYMBOL '%DEFVAR) (CL:CONS '(NAME CL:&OPTIONAL (INIT NIL)) (CL:LAMBDA (NAME INIT) (PRINT-DEFINITION `(%DEFVAR ,NAME)) `(CL:PROGN (CL:PUSH (CL:CONS ',NAME ',INIT) *VARIABLES*) (CL:DEFVAR ,NAME ,INIT))))) *SPECIAL-FORMS*)
(CL:PUSH (CL:CONS (TRE-SYMBOL '?) (CL:CONS '(CL:&BODY BODY) (CL:LAMBDA (BODY) (MAKE-? BODY)))) *SPECIAL-FORMS*)
(CL:SETQ *KEYWORD-PACKAGE* (CL:FIND-PACKAGE "KEYWORD"))
(CL:SETQ *PACKAGE* "TRE")
(CL:PUSH (CL:CONS (TRE-SYMBOL 'DEFPACKAGE) (CL:CONS '(NAME CL:&REST OPTIONS) (CL:LAMBDA (NAME OPTIONS) (PRINT-DEFINITION `(DEFPACKAGE ,NAME ,@OPTIONS)) (CL:EVAL `(CL:DEFPACKAGE ,NAME ,@OPTIONS)) NIL))) *SPECIAL-FORMS*)
(CL:PUSH (CL:CONS (TRE-SYMBOL 'IN-PACKAGE) (CL:CONS '(NAME) (CL:LAMBDA (NAME) (PRINT-DEFINITION `(IN-PACKAGE ,NAME)) (CL:IN-PACKAGE NAME) (CL:PROGN (CL:SETQ *PACKAGE* NAME)) `(CL:PROGN (CL:IN-PACKAGE ,NAME) (= *PACKAGE* ,NAME))))) *SPECIAL-FORMS*)
(CL:DEFCONSTANT +UNIX-EPOCH-DIFFERENCE+ (CL:ENCODE-UNIVERSAL-TIME 0 0 0 1 1 1970 0))
(CL:SETQ *DEFINITION-PRINTER* (CL:FUNCTION CL:PRINT))
(CL:SETQ *PRINT-AUTOMATIC-NEWLINE?* T)
(CL:SETQ *STANDARD-INPUT* (MAKE-STANDARD-STREAM))
(CL:SETQ *MACROEXPAND-BACKQUOTE* (CL:FUNCTION %MACROEXPAND-BACKQUOTE))
(CL:SETQ *MACROCALL* NIL)
(CL:SETQ *MACRO?* NIL)
(CL:SETQ +CL-FUNCTION-IMPORTS+ (CL:CONS 'CL:APPLY (CL:CONS 'CL:CONS (CL:CONS 'CL:CAR (CL:CONS 'CL:CDR (CL:CONS 'CL:RPLACA (CL:CONS 'CL:RPLACD (CL:CONS 'CL:LENGTH (CL:CONS 'CL:MAKE-STRING (CL:CONS 'CL:MOD (CL:CONS 'CL:SQRT (CL:CONS 'CL:SIN (CL:CONS 'CL:COS (CL:CONS 'CL:TAN (CL:CONS 'CL:ASIN (CL:CONS 'CL:ACOS (CL:CONS 'CL:ATAN (CL:CONS 'CL:EXP (CL:CONS 'CL:ROUND (CL:CONS 'CL:FLOOR (CL:CONS 'CL:AREF (CL:CONS 'CL:CHAR-CODE (CL:CONS 'CL:MAKE-PACKAGE (CL:CONS 'CL:PACKAGE-NAME (CL:CONS 'CL:FIND-PACKAGE (CL:CONS 'CL:PRINT NIL))))))))))))))))))))))))))
(CL:SETQ *VALUES-MAGIC* 'VALUES-~G63)
(CL:SETQ *STANDARD-OUTPUT* (MAKE-STANDARD-STREAM))
(CL:SETQ *COMPILER-MACRO-EXPANDER* (DEFINE-EXPANDER 'COMPILER :PRE (CL:FUNCTION INIT-COMPILER-MACROS)))
(CL:SETQ *GENSYM-COUNTER* 0)
(CL:SETQ *TAGBODY-REPLACEMENTS* NIL)
(CL:SETQ *TYPES* NIL)
(CL:SETQ *EXPANDER-DUMP?* NIL)
(CL:SETQ *PRINTER-ABBREVIATIONS* (CL:CONS (CL:CONS 'CL:QUOTE (CL:CONS "'" NIL)) (CL:CONS (CL:CONS 'BACKQUOTE (CL:CONS "`" NIL)) (CL:CONS (CL:CONS 'QUASIQUOTE (CL:CONS "," NIL)) (CL:CONS (CL:CONS 'QUASIQUOTE-SPLICE (CL:CONS ",@" NIL)) NIL)))))
(CL:SETQ *ALWAYS-PRINT-PACKAGE-NAMES?* NIL)
(CL:SETQ *INVISIBLE-PACKAGE-NAMES* (CL:CONS "TRE" (CL:CONS "TRE-CORE" NIL)))
(CL:SETQ *PRINTER-ARGUMENT-DEFINITIONS* (MAKE-HASH-TABLE :TEST (CL:FUNCTION EQ)))
"Section DUMMY"
(cl:in-package :tre)
(cl:format t "; Loading environmentâ¦\~%")
(cl:setq *package* "TRE")
(env-load "main.lisp")
