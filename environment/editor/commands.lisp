;;;;; TRE environment - editor
;;;;; Copyright (c) 2008 Sven Klose <pixel@copei.de>
;;;;;
;;;;; Commands.

(defun editor-expand-pos (line p &optional (i 0) (pos 0))
  (with (expand-tab
		  #'((line p i pos)
  			   (if (= p i)
	  			   pos
      			   (if (= 0 (mod pos *editor-tabstop*))
          			   (editor-expand-pos line p (1+ i) pos)
          			   (expand-tab line p i (1+ pos))))))
    (if (= p i)
	    pos
        (if (< i (length line))
          (with (c (elt line i))
            (if (= c 9)
		        (expand-tab line p i (1+ pos))
                (editor-expand-pos line p (1+ i) (1+ pos))))
	      pos))))

(defun editor-cmd-quit ()
  (setf (editor-state-quit *editor-state*) t))

(defun editor-cmd-write ()
  (editor-write (editor-state-name *editor-state*)))

(defun editor-cmd-up (&optional (nn 1))
  (with (y (editor-state-y *editor-state*)
    	 n (text-container-up *text* nn))
    (desaturate! (editor-state-y *editor-state*) y n)
    (when (< y n)
      (editor-scroll-up (- n y)))))

(defun editor-cmd-left (&optional (nn 1))
  (text-container-left *text* nn)
  (with (x (editor-state-x *editor-state*)
		 nx (editor-expand-pos (text-container-line *text*) (text-container-x *text*))
		 n (- x nx))
    (desaturate! (editor-state-x *editor-state*) x n)
    (when (< x n)
      (editor-scroll-left (- n x)))))

(defun editor-cmd-down (&optional (nn 1))
  (with (y		(editor-state-y *editor-state*)
         th		(- (terminal-height *terminal*) 2)
		 n		(text-container-down *text* nn))
    (saturate! (editor-state-y *editor-state*) y n th)
    (when (saturates? y n th)
	  (with (s	(- n (- th y)))
		(if (>= s th)
			(editor-redraw)
            (editor-scroll-down s))))))

(defun editor-cmd-right (&optional (nn 1))
  (text-container-right *text* nn)
  (with (x		(editor-state-x *editor-state*)
		 nx		(editor-expand-pos (text-container-line *text*) (text-container-x *text*))
         tw		(terminal-width *terminal*)
		 n		(- nx x))
	(saturate! (editor-state-x *editor-state*) x n tw)
    (when (saturates? x n tw)
      (editor-scroll-right (- n (- tw x))))))

(defun editor-cmd-line-start ()
  (with (a (editor-state-column-offset *editor-state*))
    (setf (editor-state-column-offset *editor-state*) 0
		  (editor-state-x *editor-state*) 0
		  (text-container-x *text*) 0)
	(when a
	  (editor-redraw))))

(defun editor-cmd-last-line ()
  (editor-cmd-down (length (text-container-lines *text*))))

(defun editor-insert-char (c)
  (text-container-insert-char *text* c)
  (editor-cmd-right))

(define-tail-macro rcmd
  ((editor-redraw-line)))

(rcmd editor-delete-char ()
  (editor-cmd-left)
  (text-container-delete-char *text*))

(rcmd editor-cmd-insert-char (c)
  (editor-insert-char c))

(rcmd editor-cmd-delete-char ()
  (setf (editor-state-mode *editor-state*) "DELETE")
  (editor-delete-char))

(defun editor-input-char ()
  (editor-home)
  (with (c (read-char))
	(when (not (= c 27))
	  (case (integer c)
	    (8		(editor-cmd-left))
	    (10		(editor-cmd-down))
	    (11		(editor-cmd-up))
	    (12		(editor-cmd-right))
	    (127	(editor-cmd-delete-char))
	    (t		(editor-cmd-insert-char c)))
	  (editor-input-char))))

(defun editor-cmd-input ()
  (setf (editor-state-mode *editor-state*) "INSERT")
  (editor-input-char)
  (setf (editor-state-mode *editor-state*) nil))

(defun editor-cmd-para (direction)
  `(defun ,($ "editor-cmd-para-" direction) ()
     (,($ "editor-cmd-" direction))
     (when (text-container-line *text*)
       (self))))

(editor-cmd-para up)
(editor-cmd-para down)

(defun editor-cmd-help ()
  (ansi-clrscr)
  (ansi-home)
  (ansi-bold)
  (ansi-foreground-color-high (ansi-color 'cyan))
  (format t "TRE built-in editor help page~%")
  (format t "~%")
  (ansi-normal)
  (ansi-foreground-color (ansi-color 'cyan))
  (format t "  Toplevel controls~%")
  (format t "~%")
  (ansi-foreground-color-high (ansi-color 'white))
  (format t "  h   left~%")
  (format t "  l   right~%")
  (format t "  k   up~%")
  (format t "  j   down~%")
  (format t "~%")
  (format t "  0   line start~%")
  (format t "  G   last line~%")
  (format t "~%")
  (format t "  i   enter insert mode~%")
  (format t "~%")
  (format t "  :w  write file~%")
  (format t "  :q  leave editor~%")
  (format t "~%")
  (ansi-foreground-color (ansi-color 'cyan))
  (format t "  Insert mode controls~%")
  (format t "~%")
  (ansi-foreground-color-high (ansi-color 'white))
  (format t "  ESC      leave insert mode~%")
  (format t "  CTRL+h   left~%")
  (format t "  CTRL+l   right~%")
  (format t "  CTRL+k   up~%")
  (format t "  CTRL+j   down~%")
  (format t "~%")
  (ansi-bold)
  (format t "Press a key...~%")
  (read-char)
  (editor-redraw))

(defun editor-cmd-2 ()
  (editor-clear-bottom)
  (princ #\:)
  (with (c (read-char))
    (when (> c 31)
	  (princ c))
    (case c
	  (#\q	(editor-cmd-quit))
	  (#\w	(editor-cmd-write))))
  (editor-clear-bottom)
  (editor-home))

(defun editor-cmd ()
  (case (read-char)
	(#\j	(editor-cmd-down))
	(#\k	(editor-cmd-up))
	(#\h	(editor-cmd-left))
	(#\l	(editor-cmd-right))
	(#\i	(editor-cmd-input))
	(#\0	(editor-cmd-line-start))
	(#\G	(editor-cmd-last-line))
	(#\H	(editor-cmd-help))
	(#\:	(editor-cmd-2)))
  (editor-home))
