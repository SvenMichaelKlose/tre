;;;;; tré – Copyright (c) 2011–2012 Sven Michael Klose <pixel@copei.de>

(defun dct-1d (input)
  (let len (length input)
    (alet (make-array len)
      (dotimes (i len !)
        (= (aref ! i) 0)
        (dotimes (k len)
          (+! (aref ! i) (* (aref input k) (/ (* i *pi* k) len))))))))

(defun dct2-1d (input)
  (let len (length input)
    (alet (make-array len)
      (dotimes (u len !)
        (= (aref ! u) 0)
        (dotimes (i len)
          (with (alpha-u (? (== 0 u)
                            (sqrt (/ 1 len))
                            (sqrt (/ 2 len)))
                 arg (* (/ *pi* len) (+ i 0.5) u))
            (+! (aref ! u) (* alpha-u (aref input i) (cos arg)))))))))

(defun dct-2d-coeffs (len)
  (alet (make-array len len)
    (dotimes (i len !)
      (let s (sqrt (/ (? (== 0 i) 1 2) len))
        (dotimes (j len)
          (= (aref ! i j) (* s (cos (* (/ *pi* len) i (+ j 0.5))))))))))

(defun dct-2d (input len &key (inverse? nil))
  (with (coeffs (dct-2d-coeffs len)
         tmp (make-array len len)
         output (make-array len len))
    (dotimes (i len)
      (dotimes (j len)
        (let s 0
          (dotimes (k len)
            (+! s (* (? inverse?
                        (aref coeffs k j)
                        (aref coeffs j k))
                     (aref input i k)))
            (= (aref tmp i j) s)))))
    (dotimes (j len output)
      (dotimes (i len)
        (let s 0
          (dotimes (k len)
            (+! s (* (? inverse?
                        (aref coeffs k i)
                        (aref coeffs i k))
                     (aref tmp k j)))
            (= (aref output i j) s)))))))
