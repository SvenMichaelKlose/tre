;;;;; TRE tree processor
;;;;; Copyright (c) 2007-2008,2011 Sven Klose <pixel@copei.de>
;;;;;
;;;;; This stage takes sequentialised code generated by expression-expansion,
;;;;; removes IDENTITY and SETQ expressions, removes label sequences and
;;;;; builds a graph of code blocks.

(defun remove-setq (l)
  "Remove inital SETQ symbol from expressions."
  (mapcar #'((x)
              (? (cons? x)
                 (case (car x)
                   ('%setq (cdr x))
                   (t x))
                 x))
          (remove-if #'identity? l)))

;;;; Top-level.

(defun tree-expand (fi l)
  (with (x (remove-setq l))
    (setf (funinfo-first-cblock fi) x)))
