(fn place-assign-error (x v)
  (funinfo-error (+ "Can't assign place because the index in scoped vars for"
                    " ~A is missing in ~A.")
                 v x))

(fn place-assign-stackarg (x)
  (let fi (get-funinfo .x.)
    (? (arguments-on-stack?)
       (integer (+ (length (funinfo-vars fi))
                   (- (length (funinfo-args fi))
                      (funinfo-arg-pos fi ..x.)
                      1)))
       (funinfo-error "Cannot assign stack argument ~A." ..x.))))

(define-tree-filter place-assign (x)
  (| (quote? x)
     (%native? x))
    x
  (& (%stackarg? x) ..x)
    `(%stack ,(place-assign-stackarg x))
  (& (%stack? x) ..x)
    `(%stack ,(| (funinfo-var-pos (get-funinfo .x.) ..x.)
                 (place-assign-stackarg x)))
  (& (%vec? x) ...x)
    `(%vec ,(place-assign .x.)
           ,(| (funinfo-scoped-var-index (get-funinfo ..x.) ...x.)
               (place-assign-error x ...x.)))
  (& (%=-vec? x) ....x)
    `(%=-vec ,(place-assign .x.)
               ,(| (funinfo-scoped-var-index (get-funinfo ..x.) ...x.)
                   (place-assign-error x ...x.))
               ,(place-assign ....x.))
  (named-lambda? x)
    (copy-lambda x :body (place-assign (lambda-body x)))
  (%slot-value? x)
    `(%slot-value ,(place-assign .x.) ,..x.))
