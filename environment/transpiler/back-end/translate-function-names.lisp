(fn translate-function-name (x)
  (? (defined-function x)
     (compiled-function-name x)
     x))

(fn translate-function-names (x)
  (with (r #'((fi x)
               (?
                 (named-lambda? x)
                   (copy-lambda x :body (r (get-lambda-funinfo x)
                                           (lambda-body x)))
                 (| (quote? x)  ; TODO %QUOTE? instead? (pixel)
                    (%%native? x)
                    (%closure? x)
                    (%function-prologue? x)
                    (%function-epilogue? x)
                    (%new? x))
                   x
                 (%slot-value? x)
                   `(%slot-value ,(translate-function-name .x.) ,..x.)
                 (& (atom x)
                    (| (not (funinfo-parent fi))
                       (not (funinfo-arg-or-var? fi x))))
                   (translate-function-name x)
                 (atom x)
                   x
                 (. (r fi x.)
                    (r fi .x)))))
    (? (function-name-prefix)
       (r (global-funinfo) x)
       x)))

(define-tree-filter2 translate-function-names2 (x &optional (fi (global-funinfo)))
  (named-lambda? x)
    (copy-lambda x :body (translate-function-names2 (lambda-body x)
                                                   (get-lambda-funinfo x)))
  (| (quote? x)  ; TODO %QUOTE? instead? (pixel)
     (%%native? x)
     (%closure? x)
     (%function-prologue? x)
     (%function-epilogue? x)
     (%new? x))
    x
  (%slot-value? x)
    `(%slot-value ,(translate-function-name .x.) ,..x.)
  (& (atom x)
     (| (not (funinfo-parent fi))
        (not (funinfo-arg-or-var? fi x))))
    (translate-function-name x))
