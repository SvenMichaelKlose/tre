(fn sloppy-equal (x needle)
  (& (atom x)
     (atom needle)
     (return (eql x needle)))
  (& (cons? x)
     (not needle)
     (return t))
  (& (cons? x)
     (cons? needle)
     (equal x. needle.)
     (sloppy-equal .x .needle)))

(fn sloppy-tree-equal (x needle)
  (| (sloppy-equal x needle)
     (& (cons? x)
        (| (sloppy-tree-equal x. needle)
           (sloppy-tree-equal .x needle)))))

(fn dump-pass? (pass-or-end x)
   (| (!? (dump-passes?)
          (| (eq t !)
             (member pass-or-end (ensure-list !))))
      (!? (dump-selector)
          (sloppy-tree-equal x !))))

(fn dump-pass-or-end? (end pass x)
  (| (dump-pass? pass x)
     (dump-pass? end x)))

(fn dump-pass-head (end pass)
  (when (dump-pass-or-end? end pass nil)
    (format t "; >>>> Dump of ~A/~A:~%"
            (symbol-name end)
            (symbol-name pass))))

(fn dump-pass-tail (end pass x)
  (when (dump-pass-or-end? end pass x)
    (? (equal x (last-pass-result))
       (format t ";      â€¦no difference to previous dump.~%" pass)
       (print x))
    (format t "~F; <<<< End of ~A/~A.~%"
            (symbol-name end)
            (symbol-name pass))))

(fn transpiler-pass (pass-fun list-of-exprs)
  (with-global-funinfo (~> pass-fun list-of-exprs)))

(fn transpiler-end (end passes list-of-exprs)
  (unless (enabled-end? end)
     (return list-of-exprs))
  (when list-of-exprs
    (with (outpass  (cdr (assoc end (output-passes)))
           out      nil)
      (@ (pass passes (? outpass out list-of-exprs))
        (when (enabled-pass? pass.)
          (dump-pass-head end pass.)
          (!= (= list-of-exprs (transpiler-pass .pass list-of-exprs))
            (dump-pass-tail end pass. !))
          (= (last-pass-result) list-of-exprs)
          (& (eq pass. outpass)
             (= out list-of-exprs)))))))

(defmacro define-transpiler-end (end &rest name-function-pairs)
  (!= (group name-function-pairs 2)
    `(fn ,(make-symbol (symbol-name end)) (list-of-exprs)
       (transpiler-end ,end
                       (â€¦ ,@(@ [`(. ,@_)]
                               (pairlist (@ #'make-keyword (carlist !))
                                         (cdrlist !))))
                       list-of-exprs))))
