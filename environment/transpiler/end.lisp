(fn sloppy-equal (x needle)
  (& (atom x)
     (atom needle)
     (return (eql x needle)))
  (& (cons? x)
     (not needle)
     (return t))
  (& (cons? x)
     (cons? needle)
     (equal x. needle.)
     (sloppy-equal .x .needle)))

(fn sloppy-tree-equal (x needle)
  (| (sloppy-equal x needle)
     (& (cons? x)
        (| (sloppy-tree-equal x. needle)
           (sloppy-tree-equal .x needle)))))

(fn dump-pass? (pass-or-end x)
   (| (!? (dump-passes?)
          (| (eq ! t)
             (member pass-or-end (ensure-list !))))
      (!? (dump-selector)
          (sloppy-tree-equal x !))))

(fn dump-pass-or-end? (end pass x)
  (| (dump-pass? pass x)
     (dump-pass? end x)))

(fn dump-pass-head (end pass x)
  (when (dump-pass-or-end? end pass x)
    (fresh-line)
    (format t "; >>>> Dump of ~A/~A:~%"
            (symbol-name end)
            (symbol-name pass))))

(fn dump-pass-tail (end pass x)
  (when (dump-pass-or-end? end pass x)
    (cl:in-package :tre)
    (? (equal x (last-pass-result))
       (format t "; Nothing changed.~%" pass)
       (print x))))

(fn transpiler-pass (pass-fun x)
  (with-temporaries (*funinfo* (global-funinfo)
                     *body*    x)
    (~> pass-fun x)))

(fn transpiler-end (end passes x)
  (unless (enabled-end? end)
    (return x))
  (when x
    (with (outpass (cdr (assoc end (output-passes)))
           out     nil)
      (@ (pass passes (| out x))
        (when (enabled-pass? pass.)
          (dump-pass-head end pass. x)
          (= x (transpiler-pass .pass x))
          (dump-pass-tail end pass. x)
          (= (last-pass-result) x)
          (when (eq pass. outpass)
            (= out x)))))))

(fn pairs-to-literal-alist (x)
  `(â€¦ ,@(@ [. 'cons _] x)))

(defmacro define-transpiler-end (end &rest name-function-pairs)
  (!= (group name-function-pairs 2)
    (assert (every #'keyword? (carlist !)))
    `(fn ,(make-symbol (symbol-name end)) (x)
       (transpiler-end ,end ,(pairs-to-literal-alist !) x))))
