(const *pi* *math.*p-i)

(fn abs (x)     (*math.abs x))
(fn acos (x)    (*math.acos x))
(fn asin (x)    (*math.asin x))
(fn atan (x)    (*math.atan x))
(fn atan2 (a b) (*math.atan2 a b))
(fn ceil (x)    (*math.ceil x))
(fn cos (x)     (*math.cos x))
(fn exp (x)     (*math.exp x))
(fn log (x)     (*math.log x))
(fn max (a b)   (*math.max a b))
(fn min (a b)   (*math.min a b))
(fn pow (x y)   (*math.pow x y))
(fn sin (x)     (*math.sin x))
(fn sqrt (x)    (*math.sqrt x))
(fn tan (x)     (*math.tan x))
(fn random ()   (*math.random))

(fn %decimal-adjust (fun val e)
  (& (zero? e)
     (return (funcall fun val)))
  (= val (number val))
  (= e (number e))
  (= val ((val.to-string).split "e"))
  (= val (funcall fun (number (string-concat (%aref val 0) "e" (? (& (%aref val 1)
                                                                     (not (zero? (%aref val 1))))
                                                                  (- (number (%aref val 1)) e)
                                                                  (- e))))))
  (= val ((val.to-string).split "e"))
  (number (string-concat (%aref val 0) "e" (? (& (%aref val 1)
                                                 (not (zero? (%aref val 1))))
                                              (+ (number (%aref val 1)) e)
                                              e))))

(fn round (x &key (decimals 0))
  (%decimal-adjust *math.round x (- decimals)))

(fn floor (x &key (decimals 0))
  (%decimal-adjust *math.floor x (- decimals)))

(fn ceiling (x &key (decimals 0))
  (%decimal-adjust *math.ceil x (- decimals)))
