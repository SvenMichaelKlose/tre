;;;;; tré – Copyright (c) 2005–2013 Sven Michael Klose <pixel@copei.de>

(env-load "stage1/basic-list.lisp" 'c)
(env-load "stage1/cons.lisp")
(env-load "stage1/gensym.lisp" 'c)
(env-load "stage1/defmacro.lisp" 'c)
(env-load "stage1/define-test.lisp" 'c)

(env-load "stage1/listp.lisp" 'c)
(env-load "stage1/count.lisp" 'c)
(env-load "stage1/simple-mapcar.lisp")
(env-load "stage1/let.lisp")
(env-load "stage1/let-many.lisp")
(env-load "stage1/cons-r.lisp")
(env-load "stage1/math.lisp")
(env-load "stage1/basic-conditional.lisp")

(env-load "stage1/arg-keyword-p.lisp")
(env-load "stage1/defun.lisp" 'c)
(env-load "stage1/require.lisp" 'c)
(env-load "stage1/fn.lisp")
(env-load "stage1/accent-circonflex.lisp")
(env-load "stage1/lx.lisp")
(env-load "stage1/predicates-c.lisp" 'c)
(env-load "stage1/predicates.lisp")
(env-load "stage1/test-builtins.lisp")
(env-load "stage1/test-stage0.lisp")
(env-load "stage1/test-arith.lisp")
(env-load "stage1/anaphoric.lisp")
(env-load "stage1/ensure-list.lisp")
(env-load "stage1/equal.lisp")
(env-load "stage1/conditional.lisp")
(env-load "stage1/return.lisp")
(env-load "stage1/prog1.lisp")

(env-load "stage1/queue.lisp")
(env-load "stage1/list-traversal.lisp")
(env-load "stage1/tp.lisp")
(env-load "stage1/comparison-c.lisp" 'c)
(env-load "stage1/funcall.lisp" 'c)
(env-load "stage1/loops.lisp")
(env-load "stage1/member.lisp")
(env-load "stage1/slot-value-p.lisp")
(env-load "stage1/=-function?.lisp" 'c)
(env-load "stage1/=.lisp")
(env-load "stage1/=-cxr.lisp" 'c)

(env-load "stage1/incdec.lisp")
(env-load "stage1/stack.lisp")
(env-load "stage1/test-scope.lisp")
(env-load "stage1/list-synonyms.lisp")
(env-load "stage1/lambda.lisp")
(env-load "stage1/function-source.lisp" 'c)
(env-load "stage1/labels.lisp")
(env-load "stage1/test-lexical-scope.lisp" 'c)
(env-load "stage1/test-block.lisp")
(env-load "stage1/dollar.lisp")
(env-load "stage1/test-dollar.lisp")
